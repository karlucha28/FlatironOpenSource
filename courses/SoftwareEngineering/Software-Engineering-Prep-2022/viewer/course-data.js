{
	"language": "en",
	"lastDownload": "2022-12-15T11:21:44-05:00",
	"title": "Software Engineering Prep",
	"modules": [
	{
		"id": 44846,
		"name": "Welcome to the Course",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g0622f953ef6ce9b00420a92bf0e02be8",
		"items": [
		{
			"id": 432722,
			"title": "Welcome",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-flatiron-school-philosophy\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-flatiron-school-philosophy\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-flatiron-school-philosophy/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<p>Welcome to Flatiron School! We're thrilled that you've joined our community of\nlearners!</p>\n\n<p>The following content is designed for people who are passionate, curious,\nself-driven, and serious about learning. We are comrades in a never-ending quest\nfor knowledge. While there are no shortcuts, we believe that by providing\nknowledge in an optimized order, reinforcing knowledge with hands-on, feedback\ndriven practice, and providing space for discussion, you will learn quickly. Our\ngoal is to provide the right materials, support and structure <em>you</em> need to\ndiscover your own love for code.</p>\n\n<p>Note: Completing the Software Engineering Prep curriculum is required for\nenrolled students to start at Flatiron School, but students can also access this\nmaterial prior to applying. Please note that some of the resources mentioned are\nonly available to enrolled students, such as community and technical coach\nsupport.</p>\n\n<p>If you’re researching the program and not yet enrolled, keep in mind that this\nis the same prep course enrolled students are working through so the material is\ndetailed and extensive. We recommend that you just work through as much as you\ncan and know that you will have time to revisit content should you go through\nour admissions process.</p>\n\n<h2>Learning to Write Code</h2>\n\n<p>This is the beginning of our Software Engineering course, where you will go\nthrough everything from the basics of coding to building full-stack React\nweb applications.</p>\n\n<p>So, where do we start? How do we know what is necessary to understand <em>first?</em>\nIn this course, we're going to start with a simple idea - programming is like\nhaving a conversation, and just like learning to talk, we need to start by\nlearning a few words and practicing them.</p>\n\n<p>Many people on joining Flatiron School have already spent some time dabbling\nwith coding by using the amazing and plentiful resources all around the\ninternet. In developing the content here, though, we make no assumptions. This\ncontent is designed for absolute beginners. Lessons build off each other,\nproviding the tools and concepts necessary to complete future lessons.</p>\n\n<p>What we don't do, however, is oversimplify, or water anything down. We believe\nin your infinite capacity to learn. We do our best to offer a curriculum that is\nclear, digestible, engaging, challenging, and deep. The curriculum you'll\nencounter on here is rigorous and will demand that you be patient and\nresourceful.</p>\n\n<h2>The Flatiron Community</h2>\n\n<p>We don't believe in learning alone. As you make progress, expect to bump into\nother learners just like you, ready and willing to help each other succeed.\nTogether, we can go further than we could ever go alone. We expect everyone here\nto be friendly, respectful, helpful, and nice.</p>\n\n<h2>Conclusion</h2>\n\n<p>The first part of this course will focus on getting your computer set up\nwith the tools and software necessary for the rest of the curriculum. Then,\nwe will introduce some fundamental programming concepts. As you progress, you'll\nstart to use the tools on your personal computer to build projects and test your\nknowledge. You're just getting started, and we're glad you're here.</p>\n\n<p>Happy Learning!</p>",
			"exportId": "welcome"
		},
		{
			"id": 432723,
			"title": "About This Course",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-about-this-course\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-about-this-course\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-about-this-course/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Welcome</h2>\n\n<p>This is the beginning of Flatiron School's Software Engineering and Web\nDevelopment Courses. Before we dive into the core topics of these courses, we\nneed to cover some fundamental topics and make sure you are fully equipped for\nsuccess.</p>\n\n<p>First, we need to get your computer (your <em>local environment</em>) set up for\nwriting and running code in JavaScript and Ruby. You'll be running code via a\nterminal on your computer, so we'll also go through the basics of the\ncommand-line interface.</p>\n\n<p>After this, we will dive into the technologies behind every modern website:\nHTML, CSS and JavaScript. You'll start by learning JavaScript programming\nfundamentals, followed by the basics of HTML and CSS. With these topics covered,\nyou'll begin learning how to use the three technologies together to build\nwebsites entirely from scratch.</p>\n\n<p>Finally, we'll introduce Git, GitHub, and the concept of version control,\nessential for storing your programming work in this course and beyond.</p>\n\n<p>At the end of the Software Engineering Prep, your final task will be to use all\nof your new skills and knowledge to build and publish your own website!</p>",
			"exportId": "about-this-course"
		},
		{
			"id": 432725,
			"title": "How to Get Help",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-how-to-get-help\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-how-to-get-help\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-how-to-get-help/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Know how to get help</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We don't believe in learning alone. As you make progress, expect to bump into\nother learners just like you, ready and willing to help each other succeed.\nTogether, we can go further than we could ever go alone. Remember, you are going\nto get stuck sometimes! As with any new skill you learn, coding can be difficult\nand frustrating. After a certain point, being stuck on a problem becomes\ncounterproductive - you’re stuck and you need help getting unstuck!</p>\n\n<p>If you get stuck following the instructions or grasping a coding concept, there\nare a few things you can do. In this lesson, we'll look at some of the options\navailable.</p>\n\n<h2>Try Troubleshooting First</h2>\n\n<p>Troubleshooting is a critical skill for all programmers and spending time now to\nget better at it is time well spent. Improving your ability to troubleshoot will\nprovide a great return on your investment as you'll be able to get yourself\nunstuck and learn how to better approach issues. Whenever possible, try to\ntroubleshoot your issue independently first before seeking help.</p>\n\n<p>Most issues you'll encounter are error messages in your terminal. A few things\nto keep in mind about error messages:</p>\n\n<ul>\n<li>Not all error messages are equal. Some messages are just warnings. For\nexample, if you install a tool and it works, but produces an error when run -\nsomething is wrong, but it shouldn't be a <em>blocker</em> for you completing work.</li>\n<li>Error messages often provide clues into what may be going wrong. Often, our\nfirst inclination when faced with an error message is to <em>flee</em>. We see some\nincomprehensible output and immediately want to do something else. <strong>Don't do\nthis. Read the error!</strong> We'll come back to this with specific examples later\non in the course.</li>\n<li>Carefully check your spelling and syntax if you receive errors running\ncommands or code.</li>\n<li>Getting a different error message after trying something is often <em>good</em>. A\nnew message can give some indication as to what is working and what isn't.</li>\n</ul>\n\n<h3>Use the Resources Available to You</h3>\n\n<p>Sometimes, common issues are noted in lesson materials. Other times, errors\noccur when an essential step is missed. For these reasons, we recommend\nreviewing the resources available to you through Flatiron School:</p>\n\n<ul>\n<li>Re-read the lesson you're on thoroughly to make sure you’re not missing\nrelevant details</li>\n<li>Review previous lessons that may apply to the error or issue you’re\nexperiencing, retracing your steps</li>\n<li>Check out <a href=\"https://flatironschoolsupport.zendesk.com/hc/en-us\">Flatiron's help articles</a>\n— these articles include advice and answers to frequently asked questions from\nthe Flatiron School Team.</li>\n</ul>\n\n<h3>Use External Resources</h3>\n\n<p>If you can't find a solution in the internal resources, the best next step is\noften to turn to Google. Some things to note regarding searching:</p>\n\n<ul>\n<li>How you search yields different results, so it's worth attempting a few\nslightly different searches.</li>\n<li>Copying and pasting an error message is a great thing to search first. Try\nto identify the main part of an error message, often around the beginning or end.</li>\n<li>Refine your search based on the results you're getting. Sometimes, you may\nneed to be more specific (i.e. you're using a Mac and need to specify because\nall search results are referring to Windows). Sometimes, being too specific\nwill yield too few results. Avoid copying anything that may be specific to\nyour system, such as a username.</li>\n</ul>\n\n<p>When looking through solutions on the internet, always be very careful of\ncommands that alter system files. If you see a command you're not familiar\nwith, you can always google <em>that</em> command to better understand what it does\nbefore running it.</p>\n\n<p>Even if you aren't able to find an answer on your own, taking the time to try\nthe options above can help you clarify the question you're asking and eliminate\nunsuccessful solutions to the problem. Troubleshooting on your own means that\nwhen you <em>do</em> reach out, you'll be able to ask better, more specific questions.</p>\n\n<h2>Reach Out via Slack</h2>\n\n<p>There is a good chance that fellow students have encountered similar challenges\nto yours. Use the Slack channels available to you to get help:</p>\n\n<ul>\n<li>You can post in any public channel (e.g., #general)</li>\n<li>Shortly before you start with a cohort you will be given access to a\ncohort-specific Slack channel</li>\n<li>While you're completing Software Engineering Prep, you can post questions in\nthe #js-prework-support channel. There will be other students there who may be\nable to help, and this channel is also staffed by Flatiron School instructors\nfrom 11am to 7pm eastern time, Monday through Friday.</li>\n</ul>\n\n<p>Equally, if you find someone else asking a question on Slack that you can\nprovide insight on, please do! One of the best ways to confirm your own\nunderstanding of a concept is to try and help someone else understand it.</p>\n\n<h2>Set Yourself Up for Success</h2>\n\n<p>Flatiron's Academic Success Team runs an information session every week to\npass along tips for success and introduce students to the help resources available\nto them. These tools will help you as you complete Software Engineering Prep and\nthroughout your time in the program.</p>\n\n<p>Sign up for a session here: <a href=\"https://www.eventbrite.com/e/flatiron-school-prep-how-to-succeed-info-session-tickets-273022015197\">Flatiron School Prep: How to Succeed</a></p>",
			"exportId": "how-to-get-help"
		}]
	},
	{
		"id": 44848,
		"name": "Intro to Canvas",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g438edc3f67237e080a5db39a59400631",
		"items": [
		{
			"id": 432729,
			"title": "Introduction To Canvas",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-welcome-intro-to-canvas\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-welcome-intro-to-canvas\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-welcome-intro-to-canvas/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<p>Canvas is a learning platform used by universities and educational institutions\nacross the country and the world. Flatiron School uses Canvas to deliver all\ncurriculum content for your program.</p>\n\n<p>Canvas is where all official Flatiron School communication, assignment\nsubmission, grading, attendance, etc. will take place for the entirety of your\ncourse. You should check Canvas multiple times a day for updates, announcements,\nassignments, and the day's schedule. Canvas hosts many features which you will\nbecome familiar with over the course of your time with Flatiron School. The\nfollowing lessons will introduce you to and explain some of the most important\nfunctions.</p>",
			"exportId": "introduction-to-canvas"
		},
		{
			"id": 432730,
			"title": "Navigating Canvas",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-navigating-canvas\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-navigating-canvas\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-navigating-canvas/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/PVfkFD45hL0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>  <p><strong>Dashboard</strong> - the first thing you see when you log into Canvas, the Dashboard gives a high level view of the courses in which you're enrolled. Your instructor will release new courses as you go through the program.</p>  <p><strong>Global Navigation</strong> - static menu on the left side of the page and accessible from any page on Canvas, the Global Navigation gives you direct access to your courses and other information in Canvas.</p>  <p><strong>Sidebar</strong> - found within each course, the Sidebar houses various features that allow access to the course materials.</p>  <p>View the video tutorial for more information on how to use Canvas assignment.</p>",
			"exportId": "navigating-canvas"
		},
		{
			"id": 432731,
			"title": "Lesson Types",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-canvas-lesson-types\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-canvas-lesson-types\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-canvas-lesson-types/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>COURSES</h2>\n\n<p>Your Flatiron School program is broken up into courses. Each course represents a\nsection of our core curriculum.</p>\n\n<h2>MODULES</h2>\n\n<p>Flatiron School organizes content within courses by breaking them up into\nmodules.  The modules will control the entire flow of the course and within them\nyou'll find all your lessons, labs, assignments, and quizzes for the course.\nModules can be filled with different types of content:</p>\n\n<ul>\n<li><strong>Page:</strong> a page of content to read</li>\n<li><strong>Discussion:</strong> a course discussion in which teachers and students can\nactively participate</li>\n<li><strong>Quiz:</strong> a course quiz</li>\n<li><strong>Assignment:</strong> a course assignment</li>\n<li><strong>Link or External Tool:</strong> an external link or tool to view information\noutside of the course</li>\n<li><strong>File:</strong> a file to download or view</li>\n</ul>\n\n<p>You may be required to perform certain actions to complete a module.\nRequirements may include:</p>\n\n<ul>\n<li><strong>View:</strong> You must view the item.</li>\n<li><strong>Mark as done:</strong> You must mark the module item as done before you can\nprogress to the next item.</li>\n<li><strong>Contribute:</strong> You must post a reply to the discussion topic or contribute\ncontent to a page.</li>\n<li><strong>Submit:</strong> You must submit the assignment, graded discussion, or quiz.</li>\n<li><strong>Score at least X points:</strong> You must submit the assignment with a minimum\nof the shown score.</li>\n</ul>\n\n<p>You can find the 'Modules' button on the Sidebar on the left hand side within\neach course.</p>\n\n<h2>ASSIGNMENTS</h2>\n\n<p>While the module controls the flow of the entire course, you can also access a\nrunning list of your course assignments via the 'Assignments' button on your\nSidebar in the left hand side within the course.  </p>\n\n<p>By default, assignments are grouped by overdue assignments, upcoming\nassignments, undated assignments, and past assignments.</p>\n\n<p>Each assignment includes an icon designating whether it's an assignment,\ndiscussion, or quiz and will also display availability dates, due dates, and the\nnumber of points the assignment is worth.</p>\n\n<p>You can find the 'Assignments' button on the Sidebar on the left hand side\nwithin each course.</p>",
			"exportId": "lesson-types"
		},
		{
			"id": 432733,
			"title": "Introduction to the Local Environment Setup Instructions",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-environment-intro\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<p>We believe that it's important for each student to have confidence in creating\ncode on their own computers. Many of our lessons also include feedback in the\nform of code tests - these will only run in an environment set up for JavaScript\nand Ruby. For these reasons, we ask students to set up their local environments\nas early as possible. The next set of lessons will walk through the installing\nand configuring the tools you'll need. Separate instructions are provided for\nMac and Windows users.</p>\n\n<p>Local environment setup may take anywhere from 1 to 4 hours total depending on\nhow fast your computer is and your internet speeds. As you have time throughout\nthe week, try to install each of the tools and technologies listed in the setup\ninstructions and write down any issues that you run into. It is okay to install\nthe programs over the course of a few days.</p>\n\n<blockquote>\n<p><strong>NOTE</strong>: If you are using a Mac then you will work through the steps in the\n<strong>MacOS Environment Setup</strong> module and ignore the Windows set up. If you will\nbe using a Windows-based PC then you can skip past the Mac set up and work\nthrough the steps in the <strong>Windows Environment Setup</strong> module.</p>\n</blockquote>",
			"exportId": "introduction-to-the-local-environment-setup-instructions"
		}]
	},
	{
		"id": 44850,
		"name": "MacOS Environment Setup",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g136d63b5125e070802d0260d438f6cee",
		"items": [
		{
			"id": 432737,
			"title": "Introduction to MacOS Environment Setup",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-introduction\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-introduction\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-introduction/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<p>In this module, we will walk through the process of setting up your macOS local\ndevelopment environment.</p>\n\n<blockquote>\n<p><strong>Note:</strong> If you are not using a Mac computer for this course, skip the\nlessons in this module.</p>\n</blockquote>\n\n<h2>Brief History</h2>\n\n<h3>Understanding Environments</h3>\n\n<p>A <strong>software environment</strong> describes the set of tools that work together to\nenable you to develop and execute the code that you write. Environments\ntypically include the operating system, databases, programming languages, and\nrelated tools like text editors or browsers.</p>\n\n<h3>Comparing Environments with Machines</h3>\n\n<p>You may hear us use the term \"software environment\" and \"machine\" to mean\nsimilar things. A <strong>machine</strong> describes the physical hardware that your software\nenvironment runs on. You'll hear the term machine and computer used\ninterchangeably. Different machines (like PCs and Macs) use different hardware\nto run the programs that they use. Differences in those machines mean that\nsetting up your development environment on one type of machine could look much\ndifferent than setting it up on another.</p>\n\n<h3>macOS Operating System</h3>\n\n<p><strong>macOS</strong> is a UNIX-based operating system. UNIX-based operating systems are\nvery commonly used in professional software engineering settings. Learning how\nto use a UNIX-based operating system will be valuable for your future software\nengineering career. You may have heard of other UNIX-based operating systems\nlike Ubuntu, Debian, or Fedora, which include the Linux kernel (core software).\nThese types of operating systems work similarly.</p>\n\n<h3>Terminals and Shells</h3>\n\n<p>You may be familiar with opening files and applications on your computer by\nclicking icons, or viewing a website by typing an address into the address bar\nand seeing what pops up. These <strong>graphical user interfaces (GUIs)</strong> created a\nrevolution in computing and are still extremely helpful in getting work done for\nmany non-technical computer users.</p>\n\n<p>Before graphical user interfaces (GUIs), the way to tell the computer to do\nsomething was through a <strong>terminal</strong>. The terminal included a screen, which\nwould display only text, and a keyboard. The screen and keyboard were connected\nto a computer and you typed into the keyboard what you wanted the computer to do.\nThen, you would press <code>&lt;Enter&gt;</code> and wait for the computer to finish.</p>\n\n<p>Terminals are still used frequently today, especially in software development.\nWe can connect to another computer on the internet, give it instructions by\ntyping in commands, and view the result on our screen. The way that modern\ncomputers emulate the terminals of yesterday is through a program called a\n<strong>command-line interface</strong>, or a <strong>shell</strong>.</p>\n\n<p>Similar to operating systems, there are many different types of shells. The\nshell that Flatiron School supports on the macOS operating system is called\n<strong>zsh</strong>, short for Z Shell.</p>\n\n<h3>macOS Terminal</h3>\n\n<p>The \"Terminal\" application is a text-based way to browse and work with files on\nyour computer. We will be using the \"Terminal\" application during the\nenvironment setup and the duration of the program. For now, let's start to see\nwhat \"Terminal\" and more generally, <strong>shell</strong>s can do.</p>\n\n<h2>View Your Desktop in \"Finder\" and \"Terminal\" Applications</h2>\n\n<p>To complete the environment setup, you will need to be able to open\napplications. You can open new applications by using the \"Spotlight Search\"\nmagnifying glass icon in the top-right corner of your window.</p>\n\n<h3>Action Item: View Your Desktop in the \"Finder\"</h3>\n\n<p>The \"Finder\" application is a visual way to browse the files on your computer.\nYou may already be familiar with the \"Finder\" application. This application\nallows you to quickly see the files on your desktop, downloads, documents,\npictures, music, videos, and much more.</p>\n\n<ol>\n<li>Click on the \"Spotlight Search\" magnifying glass icon in the top-right corner\nof your window</li>\n<li>Type \"Finder\" and open the application</li>\n<li>Find and open the \"Desktop\" folder in your \"Finder\" application</li>\n</ol>\n\n<h3>Action Item: View Your Desktop in the \"Command Prompt\" Shell</h3>\n\n<p>The \"Terminal\" application is the terminal that will allow us to interface with\nour computer through a shell. This action item is to primarily get you\ncomfortable running commands in <em>any</em> shell so that you can work through the\nenvironment setup on your own.</p>\n\n<ol>\n<li>Open the \"Terminal\" application using the \"Spotlight Search\"</li>\n<li>Type <code>cd /Users</code> into the terminal and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>ls</code> (lowercase <code>L</code> and lowercase <code>S</code> together) into the terminal and\npress <code>&lt;Enter&gt;</code></li>\n<li>Look for your username in the list</li>\n<li>Type <code>cd</code> into the terminal, add a space, and type your name as it appears in\nthe list and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>ls</code> into the terminal and press <code>&lt;Enter&gt;</code></li>\n<li>Look for the \"Desktop\" folder in the list</li>\n<li>Type <code>cd Desktop</code> into the terminal and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>ls</code> into the terminal and press <code>&lt;Enter&gt;</code> <em>(Note: if prompted, allow\n\"Terminal\" to access files in your Desktop folder.)</em></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xoHO4qeo3AA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you were able to open your desktop in the \"Finder\" application and you were\nable to open the \"Terminal\" application and <code>cd</code> to your desktop in that\napplication, you should see that you can see the same list of files in both the\n<strong>graphical user interface (GUI)</strong> and in the <strong>command-line interface (CLI)</strong>\nor shell.</p>\n\n<p>This may be your first time using the \"Terminal\" application or any terminal or\nshell. Now you know how to see the items on your desktop through the \"Finder\"\napplication <em>and</em> through the \"Terminal\" application.</p>\n\n<h2>Preparing for Your Environment Setup</h2>\n\n<ul>\n<li>During the environment setup, you will be spending a lot of time in your\n\"Terminal\" application.</li>\n<li>As much as possible, copy and paste commands that we ask you to run there\ninstead of typing by hand to prevent environment setup issues.</li>\n<li>Specific keys that you need to press will be surrounded by <code>&lt;</code> <code>&gt;</code> (for\nexample, <code>&lt;Shift&gt;</code>, <code>&lt;Space&gt;</code>, <code>&lt;Enter&gt;</code>).</li>\n<li>You will need to be comfortable switching between windows; we will primarily\nbe using the browser and the \"Terminal\" application.</li>\n<li>You should be able to start and stop the environment setup.</li>\n<li>If you get stuck, reach out to your classmates or an instructor.</li>\n</ul>",
			"exportId": "introduction-to-macos-environment-setup"
		},
		{
			"id": 432739,
			"title": "MacOS System Setup",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-system\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-system\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-system/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<p>The following instructions are for macOS Catalina, BigSur, and Monterey. If you\nare not on one of these operating systems but have the option to update, we\nrecommend doing so before following the instructions below. If you are using a\nmachine with the M1 chip, we recommend updating to Monterey before you begin.</p>\n\n<p><strong>Note</strong>: Throughout the environment setup, you will see commands that look like\nthis:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">whoami</span>\n</code></pre></div>\n<p>Any time you see a command like this with a <code>$</code> at the beginning, those commands\nshould be entered in your terminal <strong>without</strong> the <code>$</code>. So for the example\nabove, you would type <code>whoami</code> in the terminal (without a <code>$</code>).</p>\n\n<h2>Check That Your macOS System is Compatible with Flatiron School's Requirements</h2>\n\n<p>When working on software, it is important that your computer and the software\nyou're using are compatible. In this step, we'll ensure that you can install all\nthe tools you will need to complete the program.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Click on the Apple menu in the top left of the window</li>\n<li>Choose \"About This Mac\" from the menu</li>\n<li>Look for the version name (for example, \"macOS Big Sur\")</li>\n<li>Look for the version number (for example, \"Version 11.4\")</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CF82Etkyfm8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If your version name is macOS Catalina, Big Sur, or Monterey, and your version\nnumber is greater than \"Version 10.15.0\", your computer meets our requirements\nfor the course and you can continue below.</p>\n\n<p>If your computer does not meet the requirements listed above, but you can\nupgrade, we recommend that you do so before completing the environment setup.</p>\n\n<p>If your computer does not meet the requirements and you can't upgrade, some\nprograms may not work for you. Please reach out to an instructor for more\ninformation.</p>\n\n<h2>Check that Your macOS System Has Enough Space for Flatiron School's Requirements</h2>\n\n<p>The programs that we'll be installing during environment setup and all of the\nwork you'll do with Flatiron School will need at least 4 GB of free disk\nspace. Follow the steps below to ensure that you have enough disk space to\ninstall all the programs needed during environment setup.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Click on the Apple menu in the top left of the window</li>\n<li>Choose \"About This Mac\" from the menu</li>\n<li>Click the \"Storage\" tab header</li>\n<li>Look for your macOS partition (for example, \"Macintosh HD\")</li>\n<li>Look for the storage (for example, \"119.59 GB available of 186 GB\")</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0Z0BzmiTqsk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If your free space for your macOS partition is greater than 4 GB, continue\nbelow. Otherwise, click \"Manage...\" to open the System Information window and\nfree up some storage space.</p>\n\n<h2>Install Homebrew</h2>\n\n<p><a href=\"https://brew.sh\">Homebrew</a> is a package manager for macOS. It allows us to quickly install\na number of programs we will need.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Follow the prompts on the screen during the installation (Note: this could\ntake a while.)</li>\n<li>After the installation has completed, you may be prompted to run two\nadditional commands to add Homebrew to your PATH. If so, run those two\ncommands in your terminal.</li>\n<li>Close the \"Terminal\" application</li>\n<li>Reopen the \"Terminal\" application using \"Spotlight Search\"</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/igtyCPu3JNk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>You can verify that Homebrew is successfully installed by running <code>brew help</code>.\nIf your terminal outputs a list of <code>brew</code> commands, you're all set.</p>\n\n<h3>Troubleshooting</h3>\n\n<p>If your machine has an M1 chip and you were unable to install Homebrew, try\nrunning the following command, then continue from step 2 above:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">arch</span> <span class=\"nt\">-x86_64</span> zsh\n</code></pre></div>\n<h2>Check Whether You Need to Install Zsh</h2>\n\n<p>Zsh is the new standard shell for the macOS and comes pre-installed with the\nlatest version of macOS, but it may need to be installed on older Macs.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>echo $SHELL</code> and press <code>&lt;Enter&gt;</code></li>\n<li><strong>If you see <code>/bin/zsh</code> or <code>/usr/local/bin/zsh</code> DO NOT continue with the next\nsteps. Move on to \"Check Your Work\".</strong></li>\n</ol>\n\n<p>Otherwise, to install Zsh:</p>\n\n<ol>\n<li>Type <code>brew install zsh</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>echo /usr/local/bin/zsh | sudo tee -a /etc/shells</code> and press <code>&lt;Enter&gt;</code>\n(Note: you will need to enter your password.)</li>\n<li>Type <code>chsh -s /usr/local/bin/zsh</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Close the \"Terminal\" application</li>\n<li>Reopen the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>If you receive a message starting with \"This is the Z Shell configuration\nfunction for new users, zsh-newuser-install\", press <code>0</code>.</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wiqcFoV2heU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you run <code>echo $SHELL</code>, the terminal should output <code>/bin/zsh</code> or <code>/usr/local/bin/zsh</code>.\nThis indicates that Zsh is in use and you are set to continue below.</p>\n\n<h2>Troubleshooting</h2>\n\n<p>If you see the following message when opening your terminal:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">zsh compinit: insecure directories, run compaudit for list.\nIgnore insecure directories and continue [y] or abort compinit [n]?\n</span></code></pre></div>\n<p>Type <code>y</code> and press enter, then run the following command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>compaudit | xargs <span class=\"nb\">chmod </span>g-w\n</code></pre></div>\n<p>Close and reopen your terminal to clear the error.</p>\n\n<h2>Install Google Chrome</h2>\n\n<p>Google Chrome is the browser that we will use for your Flatiron School Student\nPortal account and also for front-end web development. You are not required to\nuse Google Chrome for personal work, but we highly encourage you to download it\nfor access to your account and for development in the browser.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the <a href=\"https://www.google.com/chrome\">Google Chrome download webpage</a> (<a href=\"https://www.google.com/chrome\">https://www.google.com/chrome</a>)</li>\n<li>Click \"Download Chrome\" and \"Accept and Install\"</li>\n<li>Wait for the \"googlechrome.dmg\" file to download and find it in the \"Finder\"\napplication</li>\n<li>Open the \"googlechrome.dmg\" file and install Google Chrome</li>\n<li>Drag the \"Google Chrome\" application to your \"Applications\" folder</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YS_qinEgacI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you can open the \"Google Chrome\" application using \"Spotlight\nSearch\", continue below.</p>\n\n<h2>Install Visual Studio Code (VS Code)</h2>\n\n<p>Visual Studio Code (VS Code) is the tool that you'll use to edit your Ruby and\nJavaScript files. It is a text editor that provides some beneficial extensions\nfor developers. One such tool is an integrated terminal! This means that you can\nedit your code and use your terminal in the same window. Follow the steps below\nto get both set up.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the <a href=\"https://code.visualstudio.com/Download\">Visual Studio Code download webpage</a>\n(<a href=\"https://code.visualstudio.com/Download\">https://code.visualstudio.com/Download</a>)</li>\n<li>Click on the Mac download option and start the download</li>\n<li>Wait for the \".zip\" file to download and find it in the \"Finder\" application</li>\n<li>Open the \".zip\" file and install Visual Studio Code</li>\n<li>Drag the \"Visual Studio Code\" application to your \"Applications\" folder</li>\n<li>Open the \"Visual Studio Code\" application using \"Spotlight Search\"</li>\n<li>Click \"View\" in the toolbar, then click \"Command Palette\" in the dropdown\nmenu, or use the shortcut <code>&lt;Command ⌘&gt; + &lt;Shift&gt; + P</code></li>\n<li>Type \"shell command\" in the box and click on \"Shell Command: Install 'code'\ncommand in PATH\"</li>\n<li>Close the \"Visual Studio Code\" application</li>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>code</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5E2frsEGepE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If Visual Studio Code (VS Code) opened after typing <code>code</code> in your \"Terminal\"\napplication, continue to the next lesson, <strong>Installing Node on macOS</strong>.</p>",
			"exportId": "macos-system-setup"
		},
		{
			"id": 432741,
			"title": "Mac NodeJS Install",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-nodejs\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Install Node Version Manager (NVM)</h2>\n\n<p><a href=\"https://github.com/nvm-sh/nvm\">Node Version Manager (NVM)</a> is a tool that will allow you to download and\ninstall multiple versions of Node.js, one of the environments for the JavaScript\nprogramming language that we teach at Flatiron School. Installing NVM is the\nfirst step in installing Node.js on your macOS operating system.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>touch ~/.zshrc</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type\n<code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | zsh</code>\nand press <code>&lt;Enter&gt;</code></li>\n<li>Close the \"Terminal\" application</li>\n<li>Reopen the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>nvm</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/eM4GgBrTD5k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see a message ending with \"Note: to remove, delete, or uninstall nvm\",\ncontinue below.</p>\n\n<h2>Install Node.js</h2>\n\n<p>For our JavaScript labs and lessons, we expect that students use <a href=\"https://nodejs.org/en/\">Node.js</a>\non their macOS operating system. If Node Version Manager (NVM) has been\nsuccessfully installed, you can quickly install Node.js with a couple of\ncommands.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>nvm install --lts</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>nvm list</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NzWGzrBPRVI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see a message starting with \"-&gt; v14.13.0\" (or any higher number, like \"-&gt;\nv14.13.10\" or \"-&gt; v16.10.0\"), continue to the next lesson, <strong>Installing Ruby on\nmacOS</strong>.</p>",
			"exportId": "mac-nodejs-install"
		},
		{
			"id": 432744,
			"title": "Installing Ruby on MacOS",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-ruby\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-ruby\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-ruby/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Install the GMP and GnuPG Packages</h2>\n\n<p>Before installing RVM and Ruby, we will need to add two tools which help us to\nverify that we're installing the software that we're expecting.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>brew install gmp</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>brew install gnupg</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5JTWcR7n1xo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you get an error saying \"command not found: brew\", Homebrew may not be\ninstalled or failed to install correctly. Please go back through the \"MacOS\nSystem Setup\" lesson first before going through the rest of this one.</p>\n\n<p>If you get an error saying \"Warning: gnupg-1.4.19 already installed\", GnuPG is\ninstalled, but it may not be linked properly. To fix:</p>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>brew link gnupg</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h2>Install Ruby Environment Manager (RVM) on macOS</h2>\n\n<p><a href=\"https://rvm.io/\">Ruby Environment Manager (RVM)</a> is a tool that will allow you to download\nand install multiple versions of Ruby, one of the programming languages that we\nteach at Flatiron School. This is the first step in installing Ruby on your\nmacOS operating system.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type\n<code>gpg --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</code>\nand press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>\\curl -sSL https://get.rvm.io | bash -s stable</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Close and reopen the \"Terminal\" application</li>\n<li>Type <code>rvm</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KLPVQDUYu-I\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see a long message ending in \"For additional documentation please visit\n<a href=\"https://rvm.io\">https://rvm.io</a>\", continue below.</p>\n\n<p>If <code>rvm</code> is not found, check out the troubleshooting steps in the <strong>Verify and\nTroubleshoot your macOS Environment Setup</strong> lesson later on in this module.</p>\n\n<h2>Install Ruby version 2.7.4 on macOS</h2>\n\n<p>For our Ruby labs and lessons, we expect that students use Ruby version 2.7.4.\nIf Ruby Environment Manager (RVM) has been successfully installed, you can\nquickly install Ruby with a couple of commands.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>rvm install 2.7.4 --default</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>rvm list</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cKU3o2xqqtU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see a message starting with \"=* ruby-2.7.4\", continue below.</p>\n\n<h2>Install Ruby Gems</h2>\n\n<p>Ruby Gems are small programs written in Ruby that help you to code more easily\nin Ruby. The gems you will install today include: Bundler, which allows you to\nkeep track of which gems your projects need to work, and Pry, which allows you\nto pause Ruby code execution when it runs and inspect it.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>gem update --system</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>gem install bundler</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>gem install pry</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>gem list | wc -l</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rc5vn4FVvXc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you can complete each step without any issues and you see an output of a\nnumber around or above 60 from the last command, continue to the next lesson,\n<strong>Configuring Git and GitHub on macOS</strong>.</p>",
			"exportId": "installing-ruby-on-macos"
		},
		{
			"id": 432745,
			"title": "Mac Git And Github Configuration",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-git-github\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-git-github\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-git-github/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Install <code>git</code></h2>\n\n<p><a href=\"https://git-scm.com/\">Git</a> generally comes pre-installed with most operating systems, but you\ncan check by running <code>git version</code> in the terminal. If this gives you an error\nor does not come back with a version number, you'll need to install Git. You can\ninstall it using Homebrew.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>brew install git</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Close and reopen the \"Terminal\" application</li>\n<li>Type <code>git version</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D9Eudqng2sU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see a message starting with \"git version...\", continue below.</p>\n\n<h2>Create a GitHub Account</h2>\n\n<p>To work on and get credit for the labs and lessons that you work on during the\nprogram, you will need to sign up for a GitHub account <em>if you don’t already\nhave one</em>.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the <a href=\"https://github.com/join\">GitHub signup webpage</a> (<a href=\"https://github.com/join\">https://github.com/join</a>)</li>\n<li>Fill out the form and create your account</li>\n<li>Verify the email address connected to your GitHub account</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cVNLBQssm8g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you were able to verify your email address, continue below.</p>\n\n<h2>Configure Git and GitHub</h2>\n\n<p>Git is the tool that we’ll use to download and upload the work that we do in\nlabs and lessons. To use Git without signing in every time, you can create a\nSecure Shell (SSH) key and associate that to your GitHub account. Lastly, you\nwill want to run a few commands to make sure that when you use Git, you get the\nproper credit for your work. This step will ask you to do work both in your\nbrowser and your terminal.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Type <code>git config --global color.ui true</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>git config --global user.name</code> + <code>&lt;Space&gt;</code> + your name and press\n<code>&lt;Enter&gt;</code> <em>(Note: this should be your full name, not your GitHub username, in\nquotes.)</em></li>\n<li>Type <code>git config --global user.email</code> + <code>&lt;Space&gt;</code> + the email address you\nused to sign up to GitHub and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>git config --global init.defaultBranch main</code> to\n<a href=\"https://github.com/github/renaming\">update the default branch name</a> to <code>main</code></li>\n<li>Type <code>ssh-keygen</code> and press <code>&lt;Enter&gt;</code></li>\n<li>For each prompt <strong>do not type anything</strong>, just continue to press <code>&lt;Enter&gt;</code>.\nIt's particularly important that you <strong>do not enter a passphase</strong> and leave\nthe passphrase empty when prompted; otherwise, you'll have to enter that\npassphrase any time you interact with GitHub (which will happen a lot during\nthe program); and you may run into issues submitting assignments later.</li>\n<li>Type <code>cat ~/.ssh/id_rsa.pub | pbcopy</code> and press <code>&lt;Enter&gt;</code>. This will copy\nyour SSH key to your clipboard</li>\n<li>Open the <a href=\"https://github.com/settings/ssh/new\">GitHub New SSH key form</a> (<a href=\"https://github.com/settings/ssh/new\">https://github.com/settings/ssh/new</a>)\n<em>(Note: you need to be logged in to GitHub to access that link.)</em></li>\n<li>Type \"My personal Mac\" in the \"Title\" input field</li>\n<li>Leave the \"Key Type\" as \"Authentication Key\"</li>\n<li>Paste what’s on your clipboard from step 8 in the \"Key\" input field</li>\n<li>Click \"Add SSH Key\"</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2YF15UlenxM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see your new SSH key beneath the \"SSH keys\" heading, continue to the next\nlesson, <strong>Configuring the Flatiron Student Portal</strong>.</p>",
			"exportId": "mac-git-and-github-configuration"
		},
		{
			"id": 432746,
			"title": "Configuring the Flatiron Student Portal",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-configuring-the-flatiron-student-portal\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>The <code>learn-co</code> Gem</h2>\n\n<p>The <code>learn-co</code> gem is a tool that simplifies the process of completing labs and\nsubmitting your work in Canvas. Under the hood, this process consists of a\nnumber of steps:</p>\n\n<ol>\n<li><p><strong>Fork</strong> (create your own copy of) the assignment's repo on GitHub.</p></li>\n<li><p><strong>Clone</strong> your copy of the repo down to your local machine.</p></li>\n<li><p>Run a command (<code>npm install</code> for JavaScript labs, <code>bundle install</code> for Ruby\nlabs) to install any necessary <strong>dependencies</strong> for the repository (<em>...tools\nothers have built to make things easier for us</em>).</p></li>\n<li><p>Run <code>npm test</code> (JavaScript) or <code>rspec</code> (Ruby) to run tests.</p></li>\n<li><p>Use git commands to <strong>commit</strong> your changes and push them up to your repo on\nGitHub.</p></li>\n<li><p>Submit a link to your GitHub repo in Canvas to get credit for completing the\nlab.</p></li>\n</ol>\n\n<p>The <code>learn-co</code> gem will handle several of these steps for you automatically,\nsubstantially simplifying the workflow so you can focus your attention on\nlearning to code. You will learn how to complete and submit assignments using\nthe gem in the next section; for now, let's get it installed and ready to use.</p>\n\n<h2>Install the <code>learn-co</code> Gem</h2>\n\n<p>To install the gem, open the \"Terminal\" application (or \"Ubuntu\" for WSL users)\nand run this command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>gem <span class=\"nb\">install </span>learn-co\n</code></pre></div>\n<p>Before we can use the gem, we'll need to do two things:</p>\n\n<ul>\n<li>Connect your Flatiron School Portal account to GitHub</li>\n<li>Connect the local gem to your Flatiron School Portal account</li>\n</ul>\n\n<h2>Connect Your GitHub Account to your Flatiron School Portal Account</h2>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open <a href=\"https://base.flatironschool.com/account/manage\">Flatiron School's Base Account Management page</a>\n(<a href=\"https://base.flatironschool.com/account/manage\">https://base.flatironschool.com/account/manage</a>)</li>\n<li>Connect your GitHub account to your Flatiron School Portal account</li>\n</ol>\n\n<p>Your Account Management page should now look similar to this:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-flatiron-student-portal/base-account-manage.png\" alt=\"Github Successfully Connected\"></p>\n\n<h2>Configure the <code>learn-co</code> Gem</h2>\n\n<p>This step will ask you to do work both in your browser and your terminal.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application (or \"Ubuntu\" for WSL users).</li>\n<li>Type <code>touch ~/.netrc &amp;&amp; chmod 0600 ~/.netrc</code> and press <code>&lt;Enter&gt;</code>. <em>(Note: you\nmay be asked to enter your password.)</em></li>\n<li>Open <a href=\"https://base.flatironschool.com/account/manage\">Flatiron School's Base Account Management page</a>\n(<a href=\"https://base.flatironschool.com/account/manage\">https://base.flatironschool.com/account/manage</a>)</li>\n<li>Click the icon under \"OAuth Token\" to reveal your GitHub OAuth token.</li>\n<li>Copy the string of characters under the \"OAuth Token\" header.</li>\n<li>Go back to the terminal, type <code>learn whoami</code> and press <code>&lt;Enter&gt;</code>.</li>\n<li>Paste the string of characters at the prompt and press <code>&lt;Enter&gt;</code>.</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<p>Type <code>learn whoami</code> in the terminal. If you see a message with your name,\nusername, and email, continue to the next lesson, <strong>Verify and Troubleshoot Your\nEnvironment Setup</strong>.</p>",
			"exportId": "configuring-the-flatiron-student-portal"
		},
		{
			"id": 432747,
			"title": "Verify and Troubleshoot your macOS Environment Setup",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-verification\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-verification\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-verification/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Action Item</h2>\n\n<ol>\n<li>Open your \"Terminal\" application using \"Spotlight Search\"</li>\n<li>Run the following command:</li>\n</ol>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">curl -so- https://raw.githubusercontent.com/learn-co-curriculum/flatiron-manual-setup-validator/master/mac-os-phase-0-validation-script.sh | zsh 2&gt;</span><span class=\"w\"> </span>/dev/null\n</code></pre></div>\n<h2>Check Your Work</h2>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CNuoCmve-xc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If all checks pass, you have completed your environment setup and are ready to\nmove on!</p>\n\n<p>If something does not pass, that is okay. Revisit the installation instructions\nfor the item that did not pass. If you are able to run the commands listed in\nthe <strong>Check Your Work</strong> section for that item, this may just be an issue with\nthe validator.</p>\n\n<h2>Troubleshooting</h2>\n\n<h3>Fixing NVM and RVM Dotfile Issues for MacOS</h3>\n\n<p>If you are having trouble getting RVM, Ruby, NVM, or Node to work, you may have an issue with\nyour <code>.zshrc</code> file. To fix, we need to run two commands.</p>\n\n<p>The first command makes a backup of your current <code>.zshrc</code> file:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mv</span> ~/.zshrc<span class=\"o\">{</span>,.bak<span class=\"o\">}</span>\n</code></pre></div>\n<p>The second command replaces the contents of your <code>.zshrc</code> file with a default\ndot file:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>curl <span class=\"nt\">-sSL</span> https://raw.githubusercontent.com/flatiron-school/dotfiles/master/.zshrc <span class=\"o\">&gt;</span> ~/.zshrc\n</code></pre></div>\n<p>Close and reopen your terminal. With a new <code>.zshrc</code> file, we can now test out\neach tool.</p>\n\n<h3>Verify RVM is Installed</h3>\n\n<p>To confirm that RVM is working, run:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rvm\n</code></pre></div>\n<p>If you see a long message ending in\n<code>\"For additional documentation please visit https://rvm.io\"</code>, RVM is installed.</p>\n\n<blockquote>\n<p>If the command <code>rvm</code> is not recognized, do the following in your terminal:</p>\n\n<ol>\n<li>Type <code>brew install gmp</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>brew install gnupg</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>curl -sSL https://rvm.io/mpapis.asc | gpg --import -</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>curl -sSL https://rvm.io/pkuczynski.asc | gpg --import -</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>\\curl -sSL https://get.rvm.io | bash</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Close the \"Terminal\" application</li>\n<li>Reopen the \"Terminal\" application</li>\n</ol>\n</blockquote>\n\n<h3>Verify Ruby is Installed</h3>\n\n<p>To confirm Ruby is installed, run:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rvm list\n</code></pre></div>\n<p>If you see <code>=* ruby-2.7.4</code>, Ruby is installed and 2.7.4 set as the default\nversion and you are all set for Ruby.</p>\n\n<blockquote>\n<p>If you do not see <code>ruby-2.7.4</code> at all, install it with the following command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rvm <span class=\"nb\">install </span>ruby-2.7.4\n</code></pre></div>\n<p>If <code>ruby-2.7.4</code> is listed, but is not preceded by <code>=*</code>, make it the default version by running:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rvm use 2.7.4 <span class=\"nt\">--default</span>\n</code></pre></div></blockquote>\n\n<h3>Verify NVM is installed</h3>\n\n<p>To confirm NVM is installed, run:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>nvm\n</code></pre></div>\n<p>If you see a message ending with <code>\"Note: to remove, delete, or uninstall nvm…\"</code>, NVM is installed.</p>\n\n<blockquote>\n<p>If the <code>nvm</code> command is not recognized or you see an error\n<code>complete:13: command not found: compdef</code>, run the following command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>curl <span class=\"nt\">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n</code></pre></div></blockquote>\n\n<h3>Verify Node is Installed</h3>\n\n<p>To confirm Node is installed, run:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>nvm list\n</code></pre></div>\n<p>If you see a message starting with \"-&gt; v14.13.0\" (or any number higher than\nthis), a version of Node is installed that will work for this course.</p>\n\n<blockquote>\n<p>If you don't see this number, install the newest version of Node:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>nvm <span class=\"nb\">install </span>node\n</code></pre></div></blockquote>",
			"exportId": "verify-and-troubleshoot-your-macos-environment-setup"
		},
		{
			"id": 432750,
			"title": "Survey - MacOS Environment Setup",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<p>How many hours did you spend working on the MacOS Environment Setup module?</p>",
			"exportId": "g0d5d597a731c989e4f2f25dd247fba9d"
		}]
	},
	{
		"id": 44852,
		"name": "Windows Environment Setup",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "gb5ee42bfcc660b5db6a40d75896f8649",
		"items": [
		{
			"id": 432754,
			"title": "Introduction to Windows Subsystem for Linux (WSL2) Environment Setup",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-introduction\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-introduction\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-introduction/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<p>In this module, we will walk through the process of setting up your Windows 10\nlocal development environment.</p>\n\n<blockquote>\n<p><strong>Note:</strong> If you are not using a Windows computer for this course, skip the\nlessons in this module.</p>\n</blockquote>\n\n<h2>Brief History</h2>\n\n<h3>Understanding Environments</h3>\n\n<p>A <strong>software environment</strong> describes the set of tools that work together to\nenable you to develop and execute the code that you write. Environments\ntypically include the operating system, databases, programming languages, and\nrelated tools like text editors or browsers.</p>\n\n<h3>Comparing Environments with Machines</h3>\n\n<p>You may hear us use the term \"software environment\" and \"machine\" to mean\nsimilar things. A <strong>machine</strong> describes the physical hardware that your software\nenvironment runs on. You'll hear the term machine and computer used\ninterchangeably. Different machines (like PCs and Macs) use different hardware\nto run the programs that they use. Differences in those machines mean that\nsetting up your development environment on one type of machine could look much\ndifferent than setting it up on another.</p>\n\n<h3>Windows Subsystem for Linux (WSL)</h3>\n\n<p>To work around some of the differences between machines, and specifically\nbetween operating systems, we recommend that all students whose computers come\npre-installed with the Windows operating system use a tool called <strong>Windows\nSubsystem for Linux (WSL)</strong>. Windows Subsystem for Linux provides a Linux-based\nenvironment for interfacing with and developing on a Windows operating system.</p>\n\n<p><strong>Linux</strong> is a family of operating systems that share the same core operating\nsystem programs. Operating systems based on Linux are very commonly used in\nprofessional software engineering settings. Learning how to use a Linux-based\noperating system will be a valuable skill for your future software engineering\ncareer.</p>\n\n<p>The version, or distribution, of Linux that you will use is called <strong>Ubuntu</strong>.\nIt is one of the leading Linux distributions and has great support with Windows\nSubsystem for Linux. There are others like Debian and Fedora, and those should\nwork similarly.</p>\n\n<p>The advantage of using Windows Subsystem for Linux is that it's highly\nintegrated into Windows 10, works on most machines that support Windows 10, and\nonly needs to be enabled and configured.</p>\n\n<p>The first version of Windows Subsystem for Linux (WSL 1) was groundbreaking! It\ntranslates commands that you run with Linux into commands that Windows can\nunderstand. For this course, we'll use the second version of Windows Subsystem\nfor Linux (WSL 2). The first version had some compatibility issues and was\nslower compared to native Windows.</p>\n\n<h3>Terminals and Shells</h3>\n\n<p>You may be familiar with opening files and applications on your computer by\nclicking icons, or viewing a website by typing an address into the address bar\nand seeing what pops up. These <strong>graphical user interfaces (GUIs)</strong> created a\nrevolution in computing and are still extremely helpful in getting work done for\nmany non-technical computer users.</p>\n\n<p>Before graphical user interfaces (GUIs), the way to tell the computer to do\nsomething was through a <strong>terminal</strong>. The terminal included a screen, which\nwould display only text, and a keyboard. The screen and keyboard were connected\nto a computer, and you would type into the keyboard what you wanted the computer\nto do. Then, you would press <code>&lt;Enter&gt;</code> and wait for the computer to finish.</p>\n\n<p>Terminals are still used frequently today, especially in software development.\nWe can connect to another computer on the internet, give it instructions by\ntyping in commands, and view the result on our screen. The way that modern\ncomputers emulate the terminals of yesterday is through a program called a\n<strong>command-line interface</strong>, or a <strong>shell</strong>.</p>\n\n<p>Similar to operating systems, there are many different types of shells. The\nshell that Flatiron School supports on the Ubuntu operating system is called\n<strong>bash</strong>, short for Bourne Again Shell.</p>\n\n<h3>Windows Command Prompt</h3>\n\n<p>Before we get to <strong>bash</strong>, however, we need to do some work in the \"Command\nPrompt\", which is the built-in shell on Windows computers.</p>\n\n<p>The \"Command Prompt\" application is a text-based way to browse and work with\nyour computer files. We will only be using the \"Command Prompt\" application\nat the beginning of the environment setup. For now, let's start to see what\n\"Command Prompt\" and, more generally, <strong>shell</strong>s can do.</p>\n\n<h2>Action Items: View Your Desktop in \"File Explorer\" and \"Command Prompt\" Applications</h2>\n\n<p>To complete the environment setup, you will need to be able to open\napplications. You can open new applications by using the search bar at the\nbottom of your screen. The search bar says, \"Type here to search\".</p>\n\n<h3>View Your Desktop in the \"File Explorer\"</h3>\n\n<p>The \"File Explorer\" application is a visual way to browse the files on your\ncomputer. You may already be familiar with the \"File Explorer\" application. This\napplication allows you to quickly see the files on your desktop, downloads,\ndocuments, pictures, music, videos, and much more.</p>\n\n<ol>\n<li>Click on the \"Start\" menu search bar</li>\n<li>Type \"File Explorer\" and open the application</li>\n<li>Find and open the \"Desktop\" folder located on the left-hand side in your\n\"File Explorer\"</li>\n</ol>\n\n<h3>View Your Desktop in the \"Command Prompt\" Shell</h3>\n\n<p>The \"Command Prompt\" application is the terminal that will allow us to interface\nwith our computer through a shell. This action item is primarily to get you\ncomfortable running commands in <em>any</em> shell so that you can work through the\nenvironment setup on your own.</p>\n\n<ol>\n<li>Click on the \"Start\" menu search bar</li>\n<li>Type \"Command Prompt\" and open the application</li>\n<li>Type <code>cd /Users</code> into the terminal and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>dir</code> into the terminal and press <code>&lt;Enter&gt;</code></li>\n<li>Look for your username in the list</li>\n<li>Type <code>cd</code> into the terminal, add a space, and type your name as it appears in\nthe list and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>dir</code> into the terminal and press <code>&lt;Enter&gt;</code></li>\n<li>Look for the \"Desktop\" folder in the list</li>\n<li>Type <code>cd Desktop</code> into the terminal and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>dir</code> into the terminal and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gLtUXeP2T50\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you were able to open your Desktop folder in the \"File Explorer\" application\nand you were able to open the \"Command Prompt\" application and <code>cd</code> to the same\nfolder, you should see the same list of files and folders in both the\n<strong>graphical user interface (GUI)</strong> and in the <strong>command-line interface (CLI)</strong>\nor shell.</p>\n\n<p>This may be your first time using the \"Command Prompt\" or any terminal or shell.\nNow you know how to see the items in a particular folder through the \"File Explorer\"\n<em>and</em> through the \"Command Prompt\". This step is to get you familiar with using\na terminal to be able to complete the environment setup.</p>\n\n<h2>Preparing for Your Environment Setup</h2>\n\n<ul>\n<li>During the environment setup, you will be spending a lot of time in the\n\"Ubuntu\" application.</li>\n<li>As much as possible, copy and paste commands that we ask you to run there\ninstead of typing by hand to help prevent environment setup issues.</li>\n<li>Specific keys that you need to press will be surrounded by <code>&lt;</code> <code>&gt;</code> (for\nexample, <code>&lt;Shift&gt;</code>, <code>&lt;Space&gt;</code>, <code>&lt;Enter&gt;</code>).</li>\n<li>You will need to be comfortable switching between windows; we will primarily\nbe using the browser and the \"Ubuntu\" application.</li>\n<li>You should be able to start and stop the environment setup.</li>\n<li>If you get stuck, reach out to your classmates or an instructor.</li>\n</ul>",
			"exportId": "introduction-to-windows-subsystem-for-linux-wsl2-environment-setup"
		},
		{
			"id": 432756,
			"title": "Updating Your Windows System and Installing Applications",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-system\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<p>WSL2 is compatible with the Home, Pro, or Server editions of Windows but not\nWindows 10 S (although you can often upgrade to the Home edition for free).</p>\n\n<h2>Check That your Windows system is Compatible with Flatiron School's Requirements</h2>\n\n<p>When working on software, your computer and the software you're using must be\ncompatible. In this step, we'll ensure that you are able to install all the\ntools that you will need to complete the program.</p>\n\n<h3>Action Item: Check your Windows System Specifications</h3>\n\n<ol>\n<li>Open the \"Settings\" application using the \"Start\" menu</li>\n<li>Select the \"System\" option</li>\n<li>Select \"About\" at the bottom of the list</li>\n<li>Scroll down to the \"Windows specifications\" heading</li>\n<li>Check that your \"Edition\" is one of the following: Windows 10 Home, Windows\n10 Pro, Windows 10 Server, Windows 11</li>\n<li>Check that your \"Version\" is greater than or equal to \"2004\"</li>\n<li>Check that your \"OS build\" is greater than \"19041.000\"</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bbXbsOzLIE0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If your \"Edition\", \"Version\" and \"OS build\" meet the requirements listed above,\nskip the next step and continue below. Otherwise, continue with the next step to\nupdate to the latest version of Windows 10.</p>\n\n<h2>Update to the Latest Version of Windows 10</h2>\n\n<p>Before moving on, make sure that you're using the latest version of Windows 10.\nThe Windows May 2021 update is essential. Follow the steps below to update your\noperating system.</p>\n\n<h3>Action Item: Update to the Latest Version of Windows 10</h3>\n\n<ol>\n<li>Open the <a href=\"https://www.microsoft.com/en-us/software-download/windows10\">Windows 10 Disc Image</a> webpage\n(<a href=\"https://www.microsoft.com/en-us/software-download/windows10\">https://www.microsoft.com/en-us/software-download/windows10</a>)</li>\n<li>Click the \"Update now\" button</li>\n<li>Select \"Run\" from the pop-up and allow the app to make changes to your device</li>\n<li>Progress through the computer update</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/O7BGLGRd7H8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you can successfully update to the latest version of Windows 10,\ncontinue below. Otherwise, reach out to your instructor for next steps.</p>\n\n<h2>Check That Your Windows System has Enough Space for Flatiron School's Requirements</h2>\n\n<p>The programs that we'll be installing during environment setup and all of the\nwork you'll do with Flatiron School will need at least 4 GB of free disk space.\nFollow the steps below to ensure that you have enough disk space to install all\nthe programs needed during the environment setup.</p>\n\n<h3>Action Item: Check Your Storage</h3>\n\n<ol>\n<li>Open the \"Settings\" application using the \"Start\" menu</li>\n<li>Select the \"System\" option</li>\n<li>On the left-hand side, select \"Storage\"</li>\n<li>Check that the amount of free space listed beneath the \"C:\" drive heading is\ngreater than 4 GB</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nJouTCS7m7A\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If your free space for your \"C:\" drive is greater than 4 GB, continue below.\nOtherwise, use the <a href=\"https://www.lifewire.com/free-drive-space-with-disk-cleanup-3506869\">Disk Cleanup utility</a> to free more space on your computer.</p>\n\n<h2>Install Google Chrome</h2>\n\n<p>Google Chrome is the browser that we recommend you use for your Flatiron School\nStudent Portal account and also for front-end web development. You are not required\nto use Google Chrome for personal work, but we highly encourage you to download it\nfor access to your account and for development in the browser.</p>\n\n<h2>Action Item: Download and Install Google Chrome</h2>\n\n<ol>\n<li>Open the <a href=\"https://www.google.com/chrome\">Google Chrome webpage</a> (<a href=\"https://www.google.com/chrome\">https://www.google.com/chrome</a>)</li>\n<li>Click \"Download Chrome\"</li>\n<li>Select \"Run\" from the pop-up and allow the app to make changes to your device</li>\n</ol>\n\n<h2>Check Your Work</h2>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/X7B4gIwU2jI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you can open the \"Google Chrome\" application using the \"Start\" menu,\ncontinue below.</p>\n\n<h2>Install Visual Studio Code (VS Code) on Windows</h2>\n\n<p>Visual Studio Code (VS Code) is the tool that you'll use to edit your Ruby and\nJavaScript files. It is a text editor that provides some really useful\nextensions for developers. One such tool is an integrated terminal! This means\nthat you can edit your code and use your terminal in the same window. Follow the\nsteps below to get both set up.</p>\n\n<h3>Action item: download and install Visual Studio Code</h3>\n\n<ol>\n<li>Open the <a href=\"https://code.visualstudio.com/Download\">Visual Studio Code Download webpage</a>\n<a href=\"https://code.visualstudio.com/Download\">https://code.visualstudio.com/Download</a> in your browser</li>\n<li>Click on the Windows download option</li>\n<li>Download and run the Visual Studio Code installer</li>\n<li>Complete the installer</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/o7E2ZWhoJsI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you can open the \"Visual Studio Code\" application using the \"Start\" menu,\ncontinue to the next lesson, <strong>Setting up WSL2</strong>. Otherwise, reach out to\nyour teaching team for assistance.</p>",
			"exportId": "updating-your-windows-system-and-installing-applications"
		},
		{
			"id": 432758,
			"title": "Setting Up WSL2",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-windows-subsystem-linux\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-windows-subsystem-linux\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-windows-subsystem-linux/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<p>Windows Subsystem Linux (WSL) is <strong>not</strong> automatically enabled on windows. So,\nto start, we need to enable it!</p>\n\n<h2>Install Windows Subsystem for Linux (WSL) and Ubuntu</h2>\n\n<p>Now that we know your computer is ready for the rest of the environment setup,\nwe can install Windows Subsystem for Linux (WSL) and the Ubuntu Linux\ndistribution. You'll be doing the majority of your dev work using WSL and\nUbuntu, so this step is critical to complete before moving ahead.</p>\n\n<h3>Action Item: Install WSL Features</h3>\n\n<ol>\n<li>Search for the \"Command Prompt\" application using the \"Start\" menu</li>\n<li>Select \"Run as administrator\" from the right side of the search window</li>\n<li>Allow the program to make changes to your device and wait for the \"Command\nPrompt\" application to open</li>\n<li>Type <code>wsl --install -d Ubuntu</code> and press <code>&lt;Enter&gt;</code></li>\n<li>The terminal should output \"The requested operation is successful.\"</li>\n<li>Restart your computer to complete the installation.</li>\n</ol>\n\n<blockquote>\n<p><strong>Note:</strong> If you encounter an error message that says \"Ubuntu required feature\nnot installed\" then try enabling VSM in your BIOS. Follow\n<a href=\"https://bce.berkeley.edu/enabling-virtualization-in-your-pc-bios.html\">this guide</a> \nto access your BIOS and get to the virtualization settings. Enable VSM and\nvirtualization options from there. Check out\n<a href=\"https://github.com/microsoft/%3EWSL/issues/5689\">this issue</a> for reference.</p>\n</blockquote>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/w01AU7pl24w\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<h3>Action Item: Install the \"Ubuntu\" Application</h3>\n\n<p>You are ready to install and set up the Ubuntu operating system! Ubuntu is a\nLinux-based operating system and this is the application we'll use to run the\nremainder of the environment setup.</p>\n\n<ol>\n<li>Open the \"Microsoft Store\" application using the \"Start\" menu</li>\n<li>Search for \"Ubuntu\" <em>(Note: do not choose \"Ubuntu 16.04 LTS\", \"Ubuntu 18.04\nLTS\", or \"Ubuntu 20.04LTS\". Instead, choose the option that has no number\nnext to it.)</em></li>\n<li>Click \"Get\" and \"Install\" and wait for the application installation to complete</li>\n<li>Open the \"Ubuntu\" application</li>\n<li>When it says \"Enter new UNIX username:\" add a simple username and press\n<code>&lt;Enter&gt;</code> (Note: usernames may not start with a number, and may not include\ncapital letters)</li>\n<li>Where it says \"New password:\" add a simple password and press <code>&lt;Enter&gt;</code> <em>(Note:\nyou will not see any text when you are typing your password.)</em></li>\n<li>Where it says \"Retype new password:\" retype the same password from before and\npress <code>&lt;Enter&gt;</code> <em>(Note: store this password somewhere safe. You will need it to\nbe able to run commands in the future)</em></li>\n<li>The terminal should output \"Installation successful!\" and then print about 50\nlines that you can ignore</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cmLjpYx1Ys8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>Now, the last line in your \"Ubuntu\" application should say your username +\n\"@DESKTOP\" + some random numbers and letters. If you see that, continue below.</p>\n\n<h2>Update the Windows Subsystem for Linux (WSL) to WSL 2</h2>\n\n<p>Now that we have the Windows Subsystem for Linux (WSL) enabled and we have the\n\"Ubuntu\" application installed, we can update WSL to version 2 and update the\n\"Ubuntu\" application to use WSL 2.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Search for the \"Command Prompt\" application using the \"Start\" menu</li>\n<li>Select \"Run as administrator\" from the right side of the search window</li>\n<li>Allow the program to make changes to your device and wait for the \"Command\nPrompt\" application to open</li>\n<li>Type <code>wsl --set-default-version 2</code> into the terminal and press <code>&lt;Enter&gt;</code>\n<em>(Note: you should see a message starting with \"For information on key\ndifferences…\")</em></li>\n<li>Type <code>wsl --status</code> into the terminal and press <code>&lt;Enter&gt;</code>. You should see a\nmessage including \"Default Version 2\", which verifies that the default\nversion has been set correctly.</li>\n<li>Type <code>wsl --set-version Ubuntu 2</code> into the terminal and press <code>&lt;Enter&gt;</code></li>\n<li>Wait for the \"Conversion complete\" or \"This distribution is already the\nrequested version\" message in the terminal</li>\n<li>Type <code>wsl --list --verbose</code> into the terminal and press <code>&lt;Enter&gt;</code>. You should\nsee a message including \"NAME Ubuntu VERSION 2\", which verifies that the\ndefault version has been set correctly.</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Thy8DJEb7Pk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you saw the \"Conversion complete\" or \"This distribution is already the\nrequested version\" message in the \"Command Prompt\" application, close the\n\"Command Prompt\" application and continue below.</p>\n\n<blockquote>\n<p><strong>Note:</strong> If you encounter an error message that you need to enable the\nVirtual Machine Platform, but you've already enabled it, you may not be able\nto use WSL2. However, you may still be able to use WSL1. Run\n<code>wsl --set-default-version 1</code>, then run <code>wsl --set-version Ubuntu 1</code>. Wait for\nthe \"Conversion complete\" or \"This distribution is already the requested\nversion\" message in the terminal, then continue on with these instructions.</p>\n</blockquote>\n\n<h2>Configure VS Code to Work with WSL</h2>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Visual Studio Code\" application using the \"Start\" menu</li>\n<li>Click \"View\" in the toolbar, then click \"Extensions\" in the dropdown menu, or\nuse the shortcut <code>&lt;Control&gt;</code> + <code>&lt;Shift&gt;</code> + <code>X</code></li>\n<li>Search for \"Remote - WSL\" and click on the item in the list with the same\nname (Note: the description should start with \"Open any folder in the Windows\nSubsystem for Linux (WSL) …\")</li>\n<li>Click the \"Install\" button near the top of the page</li>\n<li>Click \"Terminal\" in the toolbar, then click \"New Terminal\" (Note: a new\nterminal should appear at the bottom of your VS Code window)</li>\n<li>If the dropdown in your terminal says \"1: wsl\", continue to step 9.\nOtherwise, click on the dropdown in the terminal that says \"1: powershell\"\nand choose \"Select Default Profile\"</li>\n<li>A dropdown should appear at the top of your VS Code window</li>\n<li>Click on \"Ubuntu (WSL)\" to enable VS Code to display your Ubuntu terminal</li>\n<li>Close the \"Visual Studio Code\" application</li>\n<li>Open the \"Ubuntu\" application using the \"Start\" menu</li>\n<li>Type <code>code</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UasRLsxCFRQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If the \"Visual Studio Code\" application opens when you type <code>code</code> in the\n\"Ubuntu\" application, continue to the next lesson, <strong>Installing Node on WSL2</strong>.</p>",
			"exportId": "setting-up-wsl2"
		},
		{
			"id": 432760,
			"title": "Installing Node.js on WSL2",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-nodejs\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Install Node Version Manager (NVM) on Ubuntu</h2>\n\n<p><a href=\"https://github.com/nvm-sh/nvm\">Node Version Manager (NVM)</a> is a tool that will allow you to download and install\nmultiple versions of Node.js, one of the environments for the JavaScript\nprogramming language that we teach at Flatiron School. Installing NVM is the\nfirst step in installing Node.js on your Ubuntu operating system.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Ubuntu\" application using the \"Start\" menu</li>\n<li>Type\n<code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</code>\nand press <code>&lt;Enter&gt;</code></li>\n<li>Close the \"Ubuntu\" application</li>\n<li>Reopen the \"Ubuntu\" application</li>\n<li>Type <code>nvm</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4X3ELqRnRd0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see a message ending with \"Note: to remove, delete, or uninstall nvm\",\ncontinue below.</p>\n\n<blockquote>\n<p><strong>Note:</strong> If <code>nvm</code> is not recognized, or you are seeing new errors when\nrestarting the \"Ubuntu\" application, check out the troubleshooting steps\nin the <strong>Verify and Troubleshoot your WSL2 Environment\nSetup</strong> lesson later on in this module.</p>\n</blockquote>\n\n<h2>Install Node.js on Ubuntu</h2>\n\n<p>For our JavaScript labs and lessons, we expect that students use Node.js on\nUbuntu. If Node Version Manager (NVM) has been successfully installed, you can\nquickly install Node.js with a couple of commands.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Ubuntu\" application using the \"Start\" menu</li>\n<li>Type <code>nvm install --lts</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>nvm list</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SqSwrdEENfI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see a message starting with \"-&gt; v16.0.0\" (or any higher number, like \"-&gt;\n16.11.1\"), continue to the next lesson, <strong>Windows WSL2 Ruby Installation</strong>.</p>",
			"exportId": "installing-node-dot-js-on-wsl2"
		},
		{
			"id": 432762,
			"title": "Windows WSL2 Ruby Installation",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-ruby\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-ruby\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-ruby/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Install Ruby Environment Manager (RVM) on Ubuntu</h2>\n\n<p><a href=\"http://rvm.io\">Ruby Environment Manager (RVM)</a> is a tool that will allow you to download\nand install multiple versions of Ruby, one of the programming languages that we\nteach at Flatiron School. Installing <a href=\"https://github.com/rvm/ubuntu_rvm\">RVM for Ubuntu</a> is the first\nstep in installing Ruby on your Ubuntu operating system.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Ubuntu\" application using the \"Start\" menu</li>\n<li>Type <code>sudo apt-get install software-properties-common</code> and press <code>&lt;Enter&gt;</code></li>\n<li>You may be asked to enter your Ubuntu terminal password</li>\n<li>Type <code>sudo apt-add-repository -y ppa:rael-gc/rvm</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>sudo apt-get update</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>sudo apt-get install rvm</code> and press <code>&lt;Enter&gt;</code> <em>(Note: if you are asked\n\"Do you want to continue [Y/n]\", type \"Y\" and press <code>&lt;Enter&gt;</code>)</em></li>\n<li>Type <code>sudo usermod -a -G rvm $USER</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Close the \"Ubuntu\" application</li>\n<li>Open the \"Ubuntu\" application using the \"Start\" menu</li>\n<li>Type <code>rvm</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tRLexZJS144\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see a long message ending in \"For additional documentation, please visit\n<a href=\"https://rvm.io\">https://rvm.io</a>\", continue below. If <code>rvm</code> is not found, consult the\ntroubleshooting steps in the <strong>Verify and Troubleshoot your WSL2 Environment\nSetup</strong> lesson later on in this module.</p>\n\n<h2>Install Ruby Version 2.7.4 on Ubuntu</h2>\n\n<p>For our Ruby labs and lessons, we recommend that students use Ruby version 2.7.4\non Ubuntu. If Ruby Environment Manager (RVM) has been successfully installed,\nyou can quickly install Ruby with a couple of commands.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Ubuntu\" application using the \"Start\" menu</li>\n<li>If the \"Ubuntu\" application is still open from the last step, close and\nre-open to prevent errors with running the next command.</li>\n<li>Type <code>rvm install 2.7.4 --default</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Enter your Ubuntu password if prompted</li>\n<li>Type <code>rvm list</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KYr66fx3nzc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see a message starting with <code>=* ruby-2.7.4</code>, continue below.</p>\n\n<blockquote>\n<p><strong>Note:</strong> If you see that Ruby 2.7.4 is installed, but does not display\n<code>=*</code> before it, close and reopen the \"Ubuntu\" application, then run\n<code>rvm use 2.7.4 --default</code>.</p>\n</blockquote>\n\n<h2>Troubleshooting Ruby Installs</h2>\n\n<p>If you encounter issues installing a version of Ruby via RVM, try the following\nin Ubuntu:</p>\n\n<ul>\n<li>Run <code>rvm group add rvm $USER</code></li>\n<li>Close Ubuntu and reopen</li>\n<li>Run <code>rvm fix-permissions</code></li>\n</ul>\n\n<p>After running the last command, try installing Ruby again with\n<code>rvm install 2.7.4 --default</code></p>\n\n<p>If you are continuing to have issues installing RVM, try running the following:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">sudo </span>usermod <span class=\"nt\">-a</span> <span class=\"nt\">-G</span> rvm <span class=\"nv\">$USER</span>\n</code></pre></div>\n<p>After running, try installing Ruby again.</p>\n\n<h2>Install Ruby Gems on Ubuntu</h2>\n\n<p>Ruby Gems are small programs written in Ruby that help you to code more easily\nin Ruby. The gems you will install today include: Bundler, which allows you to\nkeep track of which gems your projects need to work, and Pry, which allows you to\npause your Ruby code when it runs and inspect it.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Ubuntu\" application using the \"Start\" menu</li>\n<li>Type <code>gem update --system</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>gem install bundler</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>gem install pry</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>gem list</code> and press <code>&lt;Enter&gt;</code></li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/QeLOsZzz5pk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you are able to complete each step without any issues and see <code>pry</code> and\n<code>bundler</code> listed in the output from running <code>gem list</code>, continue to the next\nlesson, <strong>Configuring Git and GitHub on WSL2</strong>.</p>",
			"exportId": "windows-wsl2-ruby-installation"
		},
		{
			"id": 432763,
			"title": "Configuring Git and GitHub on WSL2",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-git-github\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-git-github\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-git-github/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Create a GitHub Account</h2>\n\n<p>To work on and get credit for the labs and lessons that you do during the\nprogram, you will need to sign up for a GitHub account <em>if you don't already\nhave one</em>.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the <a href=\"https://github.com/join\">GitHub signup webpage</a> at <a href=\"https://github.com/join\">https://github.com/join</a></li>\n<li>Fill out the form and create your account</li>\n<li>Verify the email address connected to your GitHub account</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/f2yf1RJUAp4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you were able to verify your email address, continue below.</p>\n\n<h2>Configure Git and GitHub</h2>\n\n<p><a href=\"https://git-scm.com/download/linux\">Git</a> is the tool that we'll use to download and upload the work we do in\nlabs and lessons. To use Git without signing in every time, you can create a\nSecure Shell (SSH) key and associate that to your GitHub account. You will also\nneed to run a few commands to make sure that when you use Git, you get the\nproper credit for your work. This step will ask you to do work both in your\nbrowser and your terminal.</p>\n\n<h3>Action Item: Update Git</h3>\n\n<ol>\n<li>Open the \"Ubuntu\" application using the \"Start\" menu</li>\n<li>Type <code>sudo add-apt-repository ppa:git-core/ppa</code> and press <code>&lt;Enter&gt;</code> to add a\npackage repository for downloading the latest version of Git. Follow the\nprompts in the terminal.</li>\n<li>Type <code>sudo apt update</code> and press <code>&lt;Enter&gt;</code> to update your local repository cache</li>\n<li>Type <code>sudo apt install git</code> and press <code>&lt;Enter&gt;</code> to install the latest version\nof Git</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hgAurDMhKAc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>You can check your work by typing <code>git --version</code> in the terminal. You should\nsee a version greater than 2.33.0.</p>\n\n<h3>Action Item: Configure Git</h3>\n\n<ol>\n<li>Open the \"Ubuntu\" application using the \"Start\" menu</li>\n<li>Type <code>git config --global color.ui true</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>git config --global user.name</code> + <code>&lt;Space&gt;</code> + your name and press\n<code>&lt;Enter&gt;</code> <em>(Note: this should be your full name, not your GitHub username, in\nquotes.)</em></li>\n<li>Type <code>git config --global user.email</code> + <code>&lt;Space&gt;</code> + the email address you\nused to sign up to GitHub and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>git config --global init.defaultBranch main</code> to\n<a href=\"https://github.com/github/renaming\">update the default branch name</a> to <code>main</code></li>\n<li>Type <code>ssh-keygen</code> and press <code>&lt;Enter&gt;</code>. For each prompt <strong>do not type\nanything</strong>, just continue to press <code>&lt;Enter&gt;</code>. It's particularly important\nthat you <strong>do not enter a passphase</strong>; you should leave the passphrase empty\nwhen prompted. If you enter a passphrase here, you'll have to enter it every\ntime you interact with GitHub (which will happen a lot during the program).\nYou may also run into issues submitting assignments later.</li>\n<li>Type <code>cat ~/.ssh/id_rsa.pub | clip.exe</code> and press <code>&lt;Enter&gt;</code>. This will copy\nyour SSH key to your clipboard</li>\n<li>Open the <a href=\"https://github.com/settings/ssh/new\">GitHub New SSH key form</a>\n(<a href=\"https://github.com/settings/ssh/new\">https://github.com/settings/ssh/new</a>) <em>(Note: you need to be logged in to\nGitHub to access that link.)</em></li>\n<li>Type \"My personal PC\" in the \"Title\" input field</li>\n<li>Paste what's on your clipboard from step seven in the \"Key\" input field</li>\n<li>Click \"Add SSH Key\"</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bRCOqNaYnKQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If you see your new SSH key beneath the \"SSH keys\" heading, continue to the next\nlesson, <strong>Configuring the Flatiron Student Portal</strong>.</p>",
			"exportId": "configuring-git-and-github-on-wsl2"
		},
		{
			"id": 432764,
			"title": "Configuring the Flatiron Student Portal",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-configuring-the-flatiron-student-portal\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>The <code>learn-co</code> Gem</h2>\n\n<p>The <code>learn-co</code> gem is a tool that simplifies the process of completing labs and\nsubmitting your work in Canvas. Under the hood, this process consists of a\nnumber of steps:</p>\n\n<ol>\n<li><p><strong>Fork</strong> (create your own copy of) the assignment's repo on GitHub.</p></li>\n<li><p><strong>Clone</strong> your copy of the repo down to your local machine.</p></li>\n<li><p>Run a command (<code>npm install</code> for JavaScript labs, <code>bundle install</code> for Ruby\nlabs) to install any necessary <strong>dependencies</strong> for the repository (<em>...tools\nothers have built to make things easier for us</em>).</p></li>\n<li><p>Run <code>npm test</code> (JavaScript) or <code>rspec</code> (Ruby) to run tests.</p></li>\n<li><p>Use git commands to <strong>commit</strong> your changes and push them up to your repo on\nGitHub.</p></li>\n<li><p>Submit a link to your GitHub repo in Canvas to get credit for completing the\nlab.</p></li>\n</ol>\n\n<p>The <code>learn-co</code> gem will handle several of these steps for you automatically,\nsubstantially simplifying the workflow so you can focus your attention on\nlearning to code. You will learn how to complete and submit assignments using\nthe gem in the next section; for now, let's get it installed and ready to use.</p>\n\n<h2>Install the <code>learn-co</code> Gem</h2>\n\n<p>To install the gem, open the \"Terminal\" application (or \"Ubuntu\" for WSL users)\nand run this command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>gem <span class=\"nb\">install </span>learn-co\n</code></pre></div>\n<p>Before we can use the gem, we'll need to do two things:</p>\n\n<ul>\n<li>Connect your Flatiron School Portal account to GitHub</li>\n<li>Connect the local gem to your Flatiron School Portal account</li>\n</ul>\n\n<h2>Connect Your GitHub Account to your Flatiron School Portal Account</h2>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open <a href=\"https://base.flatironschool.com/account/manage\">Flatiron School's Base Account Management page</a>\n(<a href=\"https://base.flatironschool.com/account/manage\">https://base.flatironschool.com/account/manage</a>)</li>\n<li>Connect your GitHub account to your Flatiron School Portal account</li>\n</ol>\n\n<p>Your Account Management page should now look similar to this:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-flatiron-student-portal/base-account-manage.png\" alt=\"Github Successfully Connected\"></p>\n\n<h2>Configure the <code>learn-co</code> Gem</h2>\n\n<p>This step will ask you to do work both in your browser and your terminal.</p>\n\n<h3>Action Item</h3>\n\n<ol>\n<li>Open the \"Terminal\" application (or \"Ubuntu\" for WSL users).</li>\n<li>Type <code>touch ~/.netrc &amp;&amp; chmod 0600 ~/.netrc</code> and press <code>&lt;Enter&gt;</code>. <em>(Note: you\nmay be asked to enter your password.)</em></li>\n<li>Open <a href=\"https://base.flatironschool.com/account/manage\">Flatiron School's Base Account Management page</a>\n(<a href=\"https://base.flatironschool.com/account/manage\">https://base.flatironschool.com/account/manage</a>)</li>\n<li>Click the icon under \"OAuth Token\" to reveal your GitHub OAuth token.</li>\n<li>Copy the string of characters under the \"OAuth Token\" header.</li>\n<li>Go back to the terminal, type <code>learn whoami</code> and press <code>&lt;Enter&gt;</code>.</li>\n<li>Paste the string of characters at the prompt and press <code>&lt;Enter&gt;</code>.</li>\n</ol>\n\n<h3>Check Your Work</h3>\n\n<p>Type <code>learn whoami</code> in the terminal. If you see a message with your name,\nusername, and email, continue to the next lesson, <strong>Verify and Troubleshoot Your\nEnvironment Setup</strong>.</p>",
			"exportId": "configuring-the-flatiron-student-portal"
		},
		{
			"id": 432766,
			"title": "Verify and Troubleshoot your WSL2 Environment Setup",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-verification\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-verification\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-verification/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Action Item</h2>\n\n<ol>\n<li>Open your \"Ubuntu\" application</li>\n<li>Run the following command:</li>\n</ol>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>curl <span class=\"nt\">-so-</span> https://raw.githubusercontent.com/learn-co-curriculum/flatiron-manual-setup-validator/master/wsl-phase-0-manual-setup-validator.sh | bash 2&gt; /dev/null\n</code></pre></div>\n<h2>Check Your Work</h2>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/LOAbYZmRc9I\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>If all checks pass, you have completed your environment setup and are ready to\nmove on!</p>\n\n<p>It may be that you are set up correctly, but the validator script can't tell. If\nthere is some sort of error, revisit the instructions for the item that is not\npassing. If you can run the commands listed in the <strong>Check Your Work</strong> section\nof that item, you should be all set and can disregard the validator.</p>\n\n<h3>Fixing NVM and RVM Issues for WSL2</h3>\n\n<p>If you are having trouble getting RVM, Ruby, NVM, or Node to work, you may have\nan issue with your <code>.bashrc</code> file. To fix, we need to run two commands.</p>\n\n<p>The first command makes a backup of your current <code>.bashrc</code> file:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mv</span> ~/.bashrc<span class=\"o\">{</span>,.bak<span class=\"o\">}</span>\n</code></pre></div>\n<p>The second command replaces the contents of your <code>.bashrc</code> file with a default\nfile:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>curl <span class=\"nt\">-sSL</span> https://raw.githubusercontent.com/flatiron-school/dotfiles/master/minimal-bashrc <span class=\"o\">&gt;</span> ~/.bashrc\n</code></pre></div>\n<p>Close and reopen your terminal. With a new <code>.bashrc</code> file, we can now test out\neach tool.</p>\n\n<h4>Verify RVM is Installed</h4>\n\n<p>To confirm that RVM is working, run:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rvm\n</code></pre></div>\n<p>If you see a long message ending in\n<code>\"For additional documentation please visit https://rvm.io\"</code>, RVM is installed.</p>\n\n<blockquote>\n<p>If the command <code>rvm</code> is not recognized, do the following in your terminal:</p>\n\n<ol>\n<li>Type <code>sudo apt-get install software-properties-common</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>sudo -E apt-add-repository -y ppa:rael-gc/rvm</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>sudo apt-get update</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>sudo apt-get install rvm</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Type <code>source /etc/profile.d/rvm.sh</code> and press <code>&lt;Enter&gt;</code></li>\n<li>Close the \"Ubuntu\" application</li>\n<li>Reopen the \"Ubuntu\" application</li>\n<li>Type <code>rvm</code> and press </li>\n</ol>\n</blockquote>\n\n<h4>Verify Ruby is Installed</h4>\n\n<p>To confirm Ruby is installed, run:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rvm list\n</code></pre></div>\n<p>If you see <code>=* ruby-2.7.4</code>, Ruby is installed and 2.7.4 set as the default\nversion and you are all set for Ruby.</p>\n\n<blockquote>\n<p>If you do not see <code>ruby-2.7.4</code> at all, install it with the following command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rvm <span class=\"nb\">install </span>ruby-2.7.4 <span class=\"nt\">--default</span>\n</code></pre></div>\n<p>If <code>ruby-2.7.4</code> is listed, but is not preceded by <code>=*</code>, make it the default\nversion by running:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>rvm use 2.7.4 <span class=\"nt\">--default</span>\n</code></pre></div></blockquote>\n\n<h4>Verify NVM is installed</h4>\n\n<p>To confirm NVM is installed, run:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>nvm\n</code></pre></div>\n<p>If you see a message ending with <code>\"Note: to remove, delete, or uninstall nvm…\"</code>,\nNVM is installed.</p>\n\n<blockquote>\n<p>If the <code>nvm</code> command is not recognized, install NVM with the following command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>curl <span class=\"nt\">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n</code></pre></div>\n<p>Close and reopen the \"Terminal\" application, then run <code>nvm</code> again.</p>\n</blockquote>\n\n<h4>Verify Node is Installed</h4>\n\n<p>To confirm Node is installed, run:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>nvm list\n</code></pre></div>\n<p>If you see a message starting with \"-&gt; v14.13.0\" (or any number higher than\nthis), a version of Node is installed that will work for this course.</p>\n\n<blockquote>\n<p>If you don't see this number, install a new version of Node:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>nvm <span class=\"nb\">install </span>node\n</code></pre></div></blockquote>\n\n<h3>Enabling Virtualization In the BIOS</h3>\n\n<p>For most Windows machines, enabling WSL and the Virtual Machine Platform should\nbe enough to get Ubuntu running. Some devices, however, require an additional\nstep - enabling hardware virtualization in the BIOS.</p>\n\n<blockquote>\n<p><strong>WARNING:</strong> Fiddling with your BIOS settings can <strong>trash your PC</strong>! Be\ncareful when making changes. Consult your manufacturer’s help pages or search\nfor online advice about your specific make and model.</p>\n</blockquote>\n\n<p>Accessing your BIOS is typically done by rebooting your computer and hitting a\nspecific key, usually <code>DEL</code>, <code>F2</code>, or <code>F10</code>, as the system starts. In the BIOS,\nlook for <strong>Virtualization Technology, VTx</strong> or something similar.</p>",
			"exportId": "verify-and-troubleshoot-your-wsl2-environment-setup"
		},
		{
			"id": 432767,
			"title": "Survey - Windows Environment Setup",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the Windows Environment Setup module?</p>\n</div>",
			"exportId": "gd5375df07b09f1a0e73c585b1db435bd"
		}]
	},
	{
		"id": 44855,
		"name": "Pre-Assessment",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g31e3dc73d2a2f6f7b78c6017218b5934",
		"items": [
		{
			"id": 432770,
			"title": "Pre-Assessment",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd6041668226cbaac3699ed99767f0a0f",
			"questionCount": 28,
			"timeLimit": null,
			"attempts": 1,
			"graded": true,
			"pointsPossible": 28.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<p>Welcome to your first quiz! Don't panic - we know you haven't done any coursework yet!&nbsp;</p>\n<p>This is a diagnostic pre-assessment. It is absolutely okay if you do not do well on this - your score on this quiz will not impact your admission to our programs. The goal of this quiz is to record a baseline of your understanding coming into this pre-work course.<br><br>This quiz will cover the core topics we will go through in the pre-work, including Git, HTML, CSS, and JavaScript. If you don't know the answer to a question, that is okay - you can select \"I don't know\". It's expected that you won't know lots of things as you're just starting out!<strong><br><br></strong></p>",
			"exportId": "g7ec93495baef2ebc47d46f87ff5eea81"
		}]
	},
	{
		"id": 44856,
		"name": "CLI",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "gb46d3873ce29900b50d6afd5e6bdb97d",
		"items": [
		{
			"id": 432774,
			"title": "Introduction to the Command Line Interface",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-the-cli\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-the-cli\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-the-cli/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define \"Command Line Interface\"</li>\n<li>Describe the purpose of CLIs</li>\n<li>Identify differences between command-line interface, terminal emulator, and\nshell</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Most computer users these days are familiar with performing actions and executing\ntasks using a <em>Graphical User Interface</em> (GUI). When you use things like\nMacOSX's \"Finder\" or Windows' \"File Explorer\", you're using a GUI.</p>\n\n<p>Prior to the early 1990's, however, the only way to interact with a computer was\nby using a <em>command-line interface</em> (CLI). Accomplishing tasks in those days\n(e.g., creating, viewing or manipulating files; launching software) required\nthe user to type commands into a <em>terminal</em>.</p>\n\n<p>Given how prevalent GUIs are at this point, the average computer user will\nprobably rarely or never need to use a command line to accomplish their tasks.\nThe same is not true for developers, however. Learning to use a CLI will allow\nyou to accomplish many tasks more quickly and reliably than you can using a GUI.\nFurthermore, there are some tools you will need as a developer that can only be\nused through the command-line interface.</p>\n\n<p>Lots of people worry that using the CLI will get them in trouble, that they'll\nbreak their computer. We encourage you to think about the CLI like a high-quality,\nsharp kitchen knife: if you pay attention when you use it, you're going to have\na valuable ally on your side.</p>\n\n<blockquote>\n<p><strong>WARNING</strong>: It's true, it is easier to run dangerous commands through the CLI\nthan through a GUI. Commands that list files or create directories are not\nlikely to break anything. Commands that remove files or directories, however,\n<em>should</em> be used with caution.</p>\n</blockquote>\n\n<h2>Define \"Command Line Interface\"</h2>\n\n<p>A CLI is a program that allows us to have a text-based conversation with the\ncomputer in which we type the commands for accomplishing tasks. With a CLI,\nusers have wide control over the file system and operating system, and the tasks\nbecome simple. For example, you can ask, through the CLI, which files are\nlocated on the <code>Desktop</code>. You can create a new folder or delete it. But on top\nof file-management kinds of activities, you can also find out how busy your CPU\nis, how full your hard drive is, and whether your computer can find a network\npath to <code>flatironschool.com</code>. On top of this, you don't have to click through\nseveral menus to get there!</p>\n\n<p>Experienced developers would say \"the CLI gives you more control\" or that it's\n\"more powerful.\" With a GUI you use the mouse and the keyboard to control the\nfile system or the operating system, which is going to be slower than using the\ncommand line (once you become familiar with the commands). In a CLI, users only\nuse the keyboard and may need to execute only a few short commands to complete\ntheir equivalent GUI tasks. CLI users' fingers never leave the \"home row\"\n(assuming they can touch type) which <em>adds</em> to their speed.</p>\n\n<p>While some tasks may seem \"easier\" to do with a GUI, development-like tasks are\noften much more easily completed in the CLI. If you had a task such as renaming\n100+ files in a folder according to a formula based on their file size, you\nmight well spend hours on it in the GUI. Doing the same with the CLI on your\nside could be completed in seconds. And if you do that sort of thing often, you\ncan save that process and run it again whenever you wish! This is called\n\"scripting.\"</p>\n\n<h2>Identify Differences Between Command-Line Interface, Terminal Emulator, and Shell</h2>\n\n<p>In the early days of computers, users didn't work on standalone, \"personal\"\ncomputers. Instead, their workstation consisted of only a keyboard and monitor —\nno mouse and no graphical user interface. This monitor + keyboard device was\ncalled a \"terminal,\" and multiple terminals were connected to a <em>shared</em>\ncomputer called a \"mainframe.\"</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-intro/Image_56_MainFrameDiagram.png\" alt=\"&quot;Mainframe Computers&quot;\"></p>\n\n<p>Nowadays, the \"terminal\" is emulated in software. It's virtual. You launch the\nemulator by opening a program. And instead of being connected to a remote\ncomputer by a cable, your \"terminal emulator\" talks to the computer you're\nactually typing on. For Mac users, the default terminal emulator program is\ncalled <strong>Terminal</strong>. For WSL users, the <strong>Ubuntu</strong> application will act as your\n\"terminal.\"</p>\n\n<p>When you launch the \"terminal emulator\" program, it will immediately start a\nprogram called a <em>shell</em> program. The <em>shell</em> program is what actually prompts\nyou for input and returns the output. <code>bash</code> and <code>zsh</code> are specific <code>shell</code>s\nused by Unix systems (like Mac OSX and Linux).</p>\n\n<p>To summarize:</p>\n\n<ul>\n<li><p>When discussing the terminal, we mean the \"terminal emulation\" program, i.e.\nthe thing that handles raw input and output.</p></li>\n<li><p>The <code>shell</code> is what handles <em>interpreting</em> the commands you type in to the\nterminal. It takes input, thinks, prints things out. It knows when a command\ndoesn't exist or make sense, and it knows how to ask the CPU to do work.</p></li>\n<li><p>The phrase \"command-line\" is roughly the same as <code>shell</code>. It's a style of\ninteraction with the <code>shell</code>.</p></li>\n</ul>\n\n<h2>Conclusion</h2>\n\n<p>Although using a command line interface might seem intimidating at first as it\nrequires learning dozens of different commands, it can be a valuable resource\nthat makes using a computer easier. Using a command line, you can perform almost\nall of the same tasks that can be done with a GUI. However, many tasks can be\nperformed quicker and can be much easier to automate.</p>\n\n<p>Ultimately though, many programming languages and programming tools assume that\nyou're comfortable with the CLI. You must have this comfort in order to be a\nsuccessful programmer.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><p><a href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\">Lifehacker on the Command Line</a></p></li>\n<li><p><a href=\"https://www.cybrary.it/0p3n/command-line-interface-cli-vs-graphical-user-interface-gui/\">Command Line Interface (CLI) vs. Graphical User Interface (GUI)</a></p></li>\n</ul>",
			"exportId": "introduction-to-the-command-line-interface"
		},
		{
			"id": 432776,
			"title": "CLI Navigation",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-bash-navigation\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-bash-navigation\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-bash-navigation/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Demonstrate How to Navigate from the CLI</li>\n<li>Identify your \"home directory\"</li>\n<li>Identify your logged-in username with <code>whoami</code></li>\n<li>Identify the \"current working directory\" with <code>pwd</code> (\"print working directory\")</li>\n<li>Navigate directories using <code>cd</code></li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Using the CLI (command line interface) might seem like a big challenge to\nfirst-time users who are afraid of making mistakes that could break their\ncomputers or ruin their files. Fear not! We'll step you through it.</p>\n\n<p>Unix-like operating systems like MacOS, Linux, and Windows Subsystem for Linux\n(WSL) all have a command-line interface, or \"shell\" application. While there are\nseveral different shell applications, like <code>zsh</code> (the default for MacOS) and\n<code>bash</code> (the default for Ubuntu in WSL), all these shell applications share a set\nof common commands which developers are familiar with. In this section, we'll\ncover some of the most common commands used by developers.</p>\n\n<p>To follow along, go ahead and launch your terminal (the Terminal application for\nMacOS and Ubuntu for WSL).</p>\n\n<h2>Demonstrate How to Navigate with a Command-Line Interface</h2>\n\n<p>To review: a <strong>shell</strong> is a text-based interpreter that provides a <em>command-line\ninterface</em> for controlling your computer. As a developer, you will use <strong>shell\ncommands</strong> to move around in your project directories to accomplish\ndifferent tasks (e.g., creating, renaming, moving or copying files or folders).\nProgrammers call this activity: <em>navigating</em>. In the CLI we imagine that we're\n\"traveling\" to different places. We'll use metaphors like \"go into the folder\"\nor \"go up one folder\" or \"visit the location at such-and-such <em>path</em>.\"</p>\n\n<p>When navigating through a directory, it often helps if we picture the file\nstructure as a tree. With this visualization, we can refer to \"moving up\" or\n\"moving down\" between directory levels, and keep better track of not only where\nour files are but where we are among our files. Here's an example:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-navigation/Image_58_DirectoryStructureDiagram.png\" alt=\"&quot;Directory tree structure diagram&quot;\"></p>\n\n<p>A location within a file system is identified using something called a <em>path</em>.\nFor example, the path to the <code>lesson1.txt</code> document in the file structure\npictured above would be:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">/home/my_site/webappdev/unix/notes/lesson1.txt\n</span></code></pre></div>\n<p>The <code>/</code> characters in the path represent the \"nesting\" of folders or files\ninside other folders.</p>\n\n<h3>Identify Our \"Home Directory\"</h3>\n\n<p>Whenever you open a terminal session, either by launching the program or by\nopening a new window, you will be placed in your <em>home directory</em>.</p>\n\n<p>Typically, the path to the home directory looks like this for Mac OSX:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">/Users/username\n</span></code></pre></div>\n<p>and like this for Linux:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">/home/username\n</span></code></pre></div>\n<p>The <code>/</code> on the far left of the path name means the very top of the file system\n\"tree.\" The <code>/</code> directory is also called the \"root\" directory. It contains all\nthe \"top-level directories\" that can contain sub-directories (...which can\ncontain sub-directories, which can contain sub-directories, on and on).</p>\n\n<p>So the home paths above indicate that the \"root\" contains a directory called\n<code>Users</code> or <code>home</code> (depending on your operating system), which in turn contains\n<code>username</code>. Obviously, our names (well, most of our names) are not <code>username</code>.\nInstead we log into our systems as <code>Byron Poodle</code> or <code>Nancy the Cat</code>. How can we\nfind out what our logged-in-user name is?</p>\n\n<h3>Identify My Logged-In Username with <code>whoami</code></h3>\n\n<p>We can ask the computer who we are logged in as using the <code>whoami</code> command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">whoami</span>\n</code></pre></div>\n<p><strong>Note:</strong> <em>Any time you see the</em> <code>$</code> <em>character, you shouldn't type it in. This\nis just a standard way to represent the command prompt in a shell application.\nYours may or may not be a</em> <code>$</code>.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/prework/whoami.jpg\" alt=\"&quot;whoami&quot;\"></p>\n\n<p>The <code>whoami</code> command lets you see which user account you're logged in to from\nthe CLI. This might seem obvious, especially if you're logged in on your\npersonal computer. But Unix machines have multiple accounts by default (though\nyou may not have seen them yet).</p>\n\n<p>My system says I am <code>kellyegreene</code>. Based on what we learned about home\ndirectories, I could figure out what my home directory should be, but there's an\neasier way: we can ask our computer to tell us what path we're in!</p>\n\n<h3>Identify the \"Current Working Directory\" With <code>pwd</code> (\"print working directory\")</h3>\n\n<p>Try running the following:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">pwd</span>\n</code></pre></div>\n<p>You should see some output describing the directory you are currently in. It's\nprobably something like <code>/Users/byron_the_poodle</code>.</p>\n\n<p>The <code>pwd</code> command stands for \"<strong>p</strong>rint <strong>w</strong>orking <strong>d</strong>irectory\". As you\n\"navigate\" your file system, you might get lost. Just like wandering in a big\ncity, you can look for street signs to find out where you are. The <code>pwd</code> command\nacts like those street signs. You'll never be lost again!</p>\n\n<p>We've just used <code>pwd</code> to verify that when we open the shell application, the\noperating system automatically \"puts\" us in our home directory. Now let's learn\nhow to do some real \"navigation\" in our file structure.</p>\n\n<h3>Change Directories Using <code>cd</code></h3>\n\n<p>Try typing this in the command line:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ..\n</code></pre></div>\n<p>This command \"moves up\" one level of nesting, so you should now be one\nlevel up from where you were and one level closer to the \"root\" directory.\nVerify this by running <code>pwd</code> again:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">/Users\n</span></code></pre></div>\n<p>The <code>cd</code> command stands for \"<strong>c</strong>hange <strong>d</strong>irectory\".</p>\n\n<p>The <code>..</code> is a shortcut for the directory <em>above</em> the working directory. The\nshell application provides a series of \"shortcuts\" for some commonly-used file\nsystem paths. <code>..</code> means \"this directory's containing folder\". These shortcuts\nlook strange but they're designed to be <em>short</em> and therefore <em>easy to type</em> and\ntherefore <em>fast</em> and, as we've hinted, the CLI is all about speed.</p>\n\n<p>So in this command example we said: <code>change directory to the parent folder</code>. You\ncould run the same command again to navigate up to the <code>/</code> (root) directory.</p>\n\n<p>Another shortcut, that might not seem very useful at first, is <code>.</code> meaning \"the\ncurrent directory I'm in.\"</p>\n\n<p>If you try this command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> <span class=\"nb\">.</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">pwd</span>\n</code></pre></div>\n<p>You should see you are still in the same directory where you wrote the command.\nYou will learn a bit later in the course about when and how the <code>.</code> is used.</p>\n\n<p>The shell application provides one additional shortcut: <code>~</code>. This symbol is used\nto indicate the home directory.</p>\n\n<p>If you haven't already, use <code>cd ..</code> a second time to go \"up\" another level to\nthe root directory. Run <code>pwd</code> to verify; you should see <code>/</code> output.</p>\n\n<p>You can then navigate back to your home directory by running:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> ~\n</code></pre></div>\n<p>You'll see you're back in your home directory. Use <code>pwd</code> to verify!</p>\n\n<blockquote>\n<p><strong>Note:</strong> Actually, you don't even need the <code>~</code>! If you enter <code>cd</code> with <em>no</em>\nargument from anywhere in your file structure, you'll be taken to your home\ndirectory.</p>\n</blockquote>\n\n<h3>Paths in Shell</h3>\n\n<p>In addition to shortcuts like <code>..</code> or <code>~</code>, you can also provide a <strong>path</strong> as\nthe argument to the <code>cd</code> command. For example, another way I could get back to my home\ndirectory is to run this command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd</span> /Users/kellyegreene\n</code></pre></div>\n<p>Or, equivalently (in this case):</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd </span>Users/kellyegreene\n</code></pre></div>\n<p>Note the difference between these two commands: the first one, which has the <code>/</code>\nat the front, is called an <em>absolute</em> path. The second, without the leading <code>/</code>,\nis a <em>relative</em> path.</p>\n\n<p>The difference between the two is that the <em>absolute</em> path will always get you\nto the destination folder, regardless of where you currently are in the file\nstructure. The absolute path tells the shell application to start from the root\ndirectory (<code>/</code>), then go \"down\" into <code>Users</code>, then \"down\" again into\n<code>kellyegreene</code>.</p>\n\n<p>The <em>relative</em> path, on the other hand, tells the shell application where to\nnavigate <strong>relative</strong> to where you currently are in the file structure. So, if\nI'm in the root directory, I can use the <code>cd Users</code> command, but if I'm\nsomewhere else in the file structure, typing <code>cd Users</code> will give me an error:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">cd: no such file or directory: Users\n</span></code></pre></div>\n<p>To get to the <code>Users</code> directory (without using one of the shortcuts), I\ncould either use <code>cd ..</code> until I'm back at the root directory then run <code>cd\nUsers</code> <strong>or</strong> I could use the absolute path.</p>\n\n<p>If the difference between relative and absolute paths is still unclear, try\nthinking of it in terms of giving a friend directions to your house. In most\ncases, you (or your friend's GPS system) will give them directions <em>relative</em> to\nsome starting point, but you could also give them the exact latitude and\nlongitude of your house, which will work no matter where they start from.</p>\n\n<h2>Time-Saving Tip: Tab Completion</h2>\n\n<p>As you type in commands in the shell, you can use \"tab completion.\" Tab\ncompletion allows the shell to be smart and to try and guess what command you\nwant to run when you hit the tab. If there's only one logical way to complete\nyour command, the shell application will fill in the rest for you. If there are\nmultiple possibilities, it will show those to you and you can continue to add\nletters until the shell application can tell exactly what you're trying to do.</p>\n\n<p>For example let's say I'm in a directory that has the following two sub-\ndirectories:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">/flatiron_school\n/flatiron_building\n</span></code></pre></div>\n<p>If I type <code>$ cd f</code> and then hit <code>tab</code>, it will fill in everything that's the\nsame, so I'll see <code>$ cd flatiron_</code>. If I then add the <code>s</code> and hit <code>tab</code> it will\nfill in <code>$ cd flatiron_school</code> and I can hit enter.</p>\n\n<p>Tab completion can also be used with the other shell commands we'll be learning\nin the lessons that follow.</p>\n\n<h2>Conclusion</h2>\n\n<p>As you continue to explore and work with the command line, you will start to unlock\nand understand its full potential! Becoming comfortable with working in the\nterminal will allow you to become more productive.</p>\n\n<p>So far we've been finding out where we are in the file system \"tree.\" Next,\nwe'll learn how to explore what's <em>in</em> these directories.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\">Lifehacker on the Command Line</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Path_(computing)\">More on paths - Wikipedia</a></li>\n</ul>",
			"exportId": "cli-navigation"
		},
		{
			"id": 432777,
			"title": "Working with Files and Directories in the CLI",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-navigating-files-in-bash\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-navigating-files-in-bash\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-navigating-files-in-bash/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>List files and directories with <code>ls</code></li>\n<li>Create new files with <code>touch</code></li>\n<li>Create new directories with <code>mkdir</code></li>\n<li>Move or rename files and directories with <code>mv</code></li>\n<li>Copy files and directories with <code>cp</code></li>\n<li>Remove files or directories with <code>rm</code></li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In the previous lesson we learned how to \"navigate\" the directory structure of\nour file system. But our file systems (and lives) would be so boring without\n<em>files</em>. Copying files, moving files, reading the contents of files, etc. We\nlooooooove files.</p>\n\n<p>This lesson will show you how to work with your files. In time, you might stop\nusing Finder and other graphical tools because it's so much faster (and more\nfun!) to use the CLI.</p>\n\n<h2>List Files and Directories with <code>ls</code></h2>\n\n<p>In a new terminal, which automatically puts you in your <em>home directory</em>,\ntry this:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls</span>\n</code></pre></div>\n<p>The command <code>ls</code> stands for \"<strong>list</strong>\" — the first character is a lower case\nletter L. After you run it, you should then see a list of the files and folders\nwithin your working directory.</p>\n\n<blockquote>\n<p><strong>Note:</strong> For Ubuntu/WSL users, your home directory may start out empty, so\nyou might not see anything when you run <code>ls</code>. If this is the case, try\ncreating a folder. In fact, now is a good time to create a <code>Development</code>\nfolder where you can store your coursework. (You'll finish setting up the\ndirectory structure for your coursework in the next lesson.) We'll use <code>mkdir</code>\nto create the folder (more on this a bit later in this lesson):</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mkdir </span>Development\n</code></pre></div>\n<p>Once the folder is created, run <code>ls</code> again and you should see <code>Development</code>\nlisted.</p>\n</blockquote>\n\n<p>True to Unix style the <code>ls</code> command is easy to type and <strong><em>short</em></strong> (both keys\non the home row of a keyboard, one letter on one hand the other on the other\nhand, it's about as fast as it can get; handy for a command we will run <em>all the\ntime</em>).</p>\n\n<p>We can list the contents of another directory by providing an absolute or\nrelative path:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls </span>pathname\n</code></pre></div>\n<h3>Using Flags with Commands</h3>\n\n<p>We can use flags on most Unix commands to give more specific instructions or to\nchange the output. Most programs accept flags, or options for execution.</p>\n\n<p>A flag is denoted by a <code>-</code> (\"dash\").</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls</span> <span class=\"nt\">-l</span>\n</code></pre></div>\n<p>This prints out a list of all the files with \"long form\" output: it will give us\nmore details, including  which user account owns the file, what the permissions\nfor users are on the file, etc.</p>\n\n<p>For example:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls</span>  /var/tmp\n<span class=\"go\">SIMToolKit\nhi\npfwtfp-dice-thrower-from-a-file\nsinatra-user-auth\n</span></code></pre></div>\n<p>becomes:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls</span> <span class=\"nt\">-l</span> /var/tmp\n<span class=\"go\">total 0\ndrwxrwxrwx   3 byron.poodle  wheel   96 Jun  5  2018 SIMToolKit\ndrwxr-xr-x   2 byron.poodle  wheel   64 Jun  5  2018 hi\ndrwxr-xr-x  12 byron.poodle  wheel  384 Nov  9 15:35 pfwtfp-dice-thrower-from-a-file\ndrwxr-xr-x  18 byron.poodle  wheel  576 May 21  2018 sinatra-user-auth\n</span></code></pre></div>\n<p>You don't need to know what all those extra bits of information mean now; just\nbe aware that flags can really enrich the output you get.</p>\n\n<p>Single-character options can typically be combined with each other. For example,\n<code>a</code> is an additional flag you can use with the <code>ls</code> command to show \"<strong>a</strong>ll\"\nfiles, including \"hidden files.\" (Hidden files have names that start with a <code>.</code>,\nand are often used for internal operating system configuration — we'll expand on\nthis in a moment.)</p>\n\n<p>We can combine the two flags when we use <code>ls</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls</span> <span class=\"nt\">-la</span>\n</code></pre></div>\n<p>Or, equivalently:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls</span> <span class=\"nt\">-l</span> <span class=\"nt\">-a</span>\n</code></pre></div>\n<p>When you run either of the commands above, you should receive a list of files\nthat includes some you didn't see when you ran just <code>$ ls</code>, without the flags:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">drwxr-xr-x   6 kellyegreene  staff   204B Jun  2 11:21 .\ndrwxr-xr-x   5 kellyegreene  staff   170B May 28 15:52 ..\n-rw-r--r--@  1 kellyegreene  staff   6.0K May 28 15:52 .DS_Store\ndrwxr-xr-x  13 kellyegreene  staff   442B Jun  2 11:02 .git\n-rw-r--r--   1 kellyegreene  staff    66B May 28 15:49 .learn\n-rw-r--r--   1 kellyegreene  staff    11K Jun  2 11:21 README.md\n</span></code></pre></div>\n<p>Notice that at the top of the file output that the current directory (<code>.</code>) and\nits parent (<code>..</code>) are listed first, followed by several files that start with\na <code>.</code>, like <code>.DS_Store</code>.</p>\n\n<p>Files like <code>.DS_Store</code> are not listed if you don't use the <code>a</code> flag. That's\nbecause files and directories that start with a <code>.</code> are <em>hidden</em> files. Shells\nare often configured by putting information in these <em>hidden</em> files. We'll not\ntalk about these types of files in this lesson except to say that you need to\nuse the <code>a</code> flag when you run <code>ls</code> if you want to see them.</p>\n\n<p><strong>Note:</strong> <em>Combining flags is only valid for single-letter options. A \"long\noption\" such as</em> <code>--force</code> <em>is defined with more than one character and cannot\nbe combined with other flags.</em></p>\n\n<h2>Create New Files with <code>touch</code></h2>\n\n<p>We can use the <code>touch</code> command to create a new (empty) file in the current\ndirectory. Try:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>hello_world.rb\n</code></pre></div>\n<p>Now try:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls</span>\n</code></pre></div>\n<p>You should see the file you just created, <code>hello_world.rb</code>, in the working\ndirectory. Note that this is an empty file and has nothing inside of it, because\nyou just created it.</p>\n\n<h2>Create New Directories with <code>mkdir</code></h2>\n\n<p>We can make directories with the <code>mkdir</code> command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mkdir </span>name_of_directory\n</code></pre></div>\n<p>Now if you enter <code>ls</code> you should see the empty directory you just created in the\nworking directory.</p>\n\n<h2>Move or Rename Files and Directories with <code>mv</code></h2>\n\n<p><code>mv</code> is the command that is used to move files or directories from one place to\nanother:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mv </span>filename destination_path\n</code></pre></div>\n<p>We first type the <code>mv</code> command, followed by the name of the file we want to\nmove. After that, we provide a second argument: a path (either relative or\nabsolute) that points to the folder we want to move our file into.</p>\n\n<p>If the file we want to move is not in the working directory (the directory we're\ncurrently in), we can provide a (relative or absolute) path to that as well:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">mv path_to_file/filename destination_path\n</span></code></pre></div>\n<p>Or, if we wanted to move that file from its current location into the working\ndirectory, we could do that like this:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">mv path_to_file/filename ./\n</span></code></pre></div>\n<p>Recall that <code>.</code> is a shell application shortcut for the \"current\" directory. The\ncommand above tells the shell to move the file <code>filename</code> in the location\nspecified by <code>path_to_file</code> into the working directory.</p>\n\n<p>You may also see <code>./</code> used to explicitly specify that we're starting from the\nworking directory. For example, to move a file into a subdirectory inside the\nworking directory, you could do the following:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">mv path_to_file/filename ./subdir\n</span></code></pre></div>\n<p>While the <code>./</code> is optional in this case, you will see this syntax used in other\nplaces (and later in the curriculum), so it's good to understand what it's\ndoing.</p>\n\n<p>In addition to <strong>moving</strong> files, We can also use the <code>mv</code> command to <strong>rename</strong>\na file or directory:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mv </span>original_program.rb renamed_program.rb\n</code></pre></div>\n<p>Or we could <strong>combine</strong> moving and renaming in one command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mv </span>temp_download.gif ~/Desktop/cats_with_weapons/ninja_cat.gif\n</code></pre></div>\n<p>Here, we are moving <code>temp_download.gif</code> from the working directory into the\n<code>cats_with_weapons</code> folder on our desktop and <strong>also</strong> renaming it to\n<code>ninja_cat.gif</code>. Note that we're using the <code>~</code> shortcut here! This expands into\n<code>/Users/username/Desktop/cats_with_weapons/ninja_cat.gif</code></p>\n\n<h2>Copy Files and Directories with <code>cp</code></h2>\n\n<p>If you think about it, move is really \"copy, but delete the original.\" Well,\n<code>cp</code> does a <code>mv</code>, but doesn't delete the original. It's therefore a \"copy.\"</p>\n\n<p>It uses the same syntax as <code>mv</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cp </span>letter_to_mom.txt letter_to_mom-2019-02-15.txt\n</code></pre></div>\n<p>If, instead of a single file, you want to copy a directory and its file\ncontents, you need to use the <code>-r</code> (<strong>r</strong>ecursive) flag:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cp</span> <span class=\"nt\">-r</span> february_cat_gifs ~/Desktop/vital_media_files\n</code></pre></div>\n<p>This command tells the shell application to copy the <code>february_cat_gifs</code> folder\n<strong>and all of its contents</strong> into the <code>vital_media_files</code> folder on the desktop.</p>\n\n<h2>Remove Files or Directories with <code>rm</code></h2>\n\n<p>To delete a file, we can use the <code>rm</code> command.</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">rm </span>hello_world.rb\n</code></pre></div>\n<p><strong>Important:</strong> Deleting a file with <code>rm</code> is <em>permanent</em>. This action cannot be\nundone!</p>\n\n<p>Much like <code>cp</code>, if you want to delete a directory (and all its contents), you\nneed to add the <code>-r</code> flag:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">rm</span> <span class=\"nt\">-r</span> ~/Desktop/pokemon_fan_fiction\n</code></pre></div>\n<p>There are additional options to <code>rm</code>:</p>\n\n<ul>\n<li><code>-i</code> (interactive): Prompts you to confirm the deletion. This option can stop\nyou from deleting a file by mistake.</li>\n<li><code>-f</code> (force): Overrides interactive mode and removes the file(s) without\nprompting. Use this with caution. This action cannot be undone!</li>\n<li><code>-v</code> (verbose): Shows the progress of the files as they are being removed.</li>\n</ul>\n\n<h2>Conclusion</h2>\n\n<p>There are a variety of commands you can use to manipulate files via the command\nline. If this list seems overwhelming at first, remember that it takes all\nprogrammers a little time to practice their CLI workflows. Refer back to these\nresources as you need to, and it will get easier as you go along.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\">Lifehacker on the Command Line</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Path_(computing)\">More on paths - Wikipedia</a></li>\n<li><a href=\"https://linux-audit.com/linux-history-how-dot-files-became-hidden-files/\">How Dot Files Became Hidden Files</a></li>\n</ul>",
			"exportId": "working-with-files-and-directories-in-the-cli"
		},
		{
			"id": 432778,
			"title": "Organizing Your Work for this Course",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-organizing-work-on-your-computer\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-organizing-work-on-your-computer\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-organizing-work-on-your-computer/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Configure a directory for storing lessons</li>\n<li>Understand the relationship between navigating directories in the terminal and\nnavigating directories in a graphical user interface like Finder</li>\n<li>Practice common terminal commands such as <code>pwd</code>, <code>ls</code>, <code>mkdir</code>, and <code>cd</code></li>\n</ul>\n\n<h2>Instructions</h2>\n\n<p>From now on, you'll be executing code on your own computer. For each and every\nlab, you'll be copying the code to your computer using\n<a href=\"https://git-scm.com\">Git</a>. You will then be able to run and test your code in\nyour terminal, and submit your work using the learn-co gem.</p>\n\n<h2>MacOS: Setting Up Your Directory Structure</h2>\n\n<p>For Mac users, follow along with this video:</p>\n\n<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/_zeNHyW9gvw\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<h2>WSL: Setting Up Your Directory Structure</h2>\n\n<p>For Windows users, follow along with this video:</p>\n\n<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/EwLe9M4xZlk\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<h2>Creating Folders to Organize Your Work</h2>\n\n<ul>\n<li>Go to your terminal and navigate to your home directory by typing <code>cd ~</code>.</li>\n<li>Navigate into the <code>Development</code> folder with <code>cd Development</code> (if you don't\nhave a <code>Development</code> folder yet, you can create it with <code>mkdir Development</code>,\nthen <code>cd</code> into it).</li>\n<li>Create a directory for all your assignments by typing <code>mkdir code</code>.</li>\n<li>Navigate into this folder with <code>cd code</code>.</li>\n<li>In here, create a directory for Software Engineering Prep with\n<code>mkdir se-prep</code>.</li>\n</ul>\n\n<p>You'll be going through multiple phases in this course, so it may be helpful\nto go one step further and also create folders for phases 1 through 5 within\n<code>code</code>. When making the phase folders use a <code>-</code> between words. For example,\nthe phase 1 folder should be named <code>phase-1</code>.</p>\n\n<p>Having a specific place for your work will make it easier to find if you ever\nneed to look back at an earlier project. It'll also keep the rest of your\ncomputer's folders clear of random code.</p>\n\n<h2>Terminal Command Reference</h2>\n\n<p>Here's a quick reference of the terminal commands used in these videos. For\nmore, check out this awesome <a href=\"https://github.com/0nn0/terminal-mac-cheatsheet\">cheatsheet</a>.</p>\n\n<table><thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>ls</td>\n<td>List all files and folders in the current directory</td>\n</tr>\n<tr>\n<td>ls -a</td>\n<td>List all files and folders, including hidden files</td>\n</tr>\n<tr>\n<td>mkdir [name]</td>\n<td>Make a new directory with the given [name]</td>\n</tr>\n<tr>\n<td>cd [folder]</td>\n<td>Change directories to the given [folder]</td>\n</tr>\n<tr>\n<td>cd ..</td>\n<td>Change directories to the parent directory</td>\n</tr>\n<tr>\n<td>cd ~</td>\n<td>Change directories to the home directory</td>\n</tr>\n<tr>\n<td>pwd</td>\n<td>Print the full path of the current working directory</td>\n</tr>\n<tr>\n<td>explorer.exe</td>\n<td>(Windows) Open the File Explorer to the current directory</td>\n</tr>\n<tr>\n<td>open .</td>\n<td>(Mac) Open the Finder application to the current directory</td>\n</tr>\n</tbody></table>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://github.com/0nn0/terminal-mac-cheatsheet\">Terminal Commands Cheatsheet</a></li>\n</ul>",
			"exportId": "organizing-your-work-for-this-course"
		},
		{
			"id": 432780,
			"title": "Complete Your First Software Engineering Assignment",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-completing-assignments\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Understand the steps needed to complete an assignment and submit it in Canvas</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>During this course, you will work on various assignments as you learn to code.\nAll assignments will be interactive pieces of curriculum that require some work.\nSome assignments may ask you to follow a set of instructions, while others will\nask you to figure out your own solution to pass specific tests. This lesson is\nyour first assignment!</p>\n\n<p>All assignments are hosted on GitHub. In order to work on them, however, you\nwill need to complete work on your local machine. The general process is:</p>\n\n<ul>\n<li>Click the blue \"Fork\" button in Canvas</li>\n<li>Create a personal copy (a 'fork') of the assignment in GitHub</li>\n<li>Download your personal copy (referred to as 'cloning') to your computer</li>\n<li>Complete the required work</li>\n<li>Submit your completed work to Canvas</li>\n</ul>\n\n<p>In this assignment, you'll learn the workflow that you will be using to complete\nyour assignments. You can follow along with the steps in the videos below, or\ncontinue reading to get a more detailed explanation of the process of working on\nlessons in Canvas.</p>\n\n<h2>WSL: Completing Assignments Code Along</h2>\n\n<p>For Windows users, follow along with this video:</p>\n\n<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/wkM_3VZT2Nw\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<h2>MacOS: Completing Assignments Code Along</h2>\n\n<p>For Mac users, follow along with this video:</p>\n\n<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/otfhhI-5qtM\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<h3>A Quick Note on Organizing Work on Your Machine</h3>\n\n<p>Throughout this course, you will be downloading many assignments, so it is\nimportant to keep your code organized. If you haven't yet, we recommend that you\ngo through the steps in\n<a href=\"https://github.com/learn-co-curriculum/phase-0-organizing-work-on-your-computer\">the previous lesson</a>\nto set up a directory where you can keep all of your work for this course.</p>\n\n<blockquote>\n<p><strong>Note:</strong> The process we'll go through in this lesson will create sub-folders\nautomatically. Whenever you are starting a new assignment, navigate back to\nyour main <code>prework</code> folder (<code>cd ~/Development/code/prework</code>) before cloning\nthe assignment to ensure these sub-folders don't get created\n<em>within each other</em>.</p>\n</blockquote>\n\n<h3>Accessing GitHub and Forking</h3>\n\n<p>All the lessons in this course have a corresponding repository (repo) in GitHub.\nOn this page in Canvas, you should see three icons in the <strong>upper right</strong>\ncorner. The first says <strong>Fork</strong>. The second is a button that looks like a\nlarge-headed cat (GitHub's 'Octocat' icon), which will open the lesson's GitHub\nrepo <em>without</em> forking. The third is a flag, which you can use to submit an\n<em>issue</em> for the lesson (e.g., if you find a typo or other error).</p>\n\n<p>One way to fork an assignment is to click the Octocat button to go to the\nassignment's GitHub repo and fork directly from that page. (We'll go through\nthat process in a later lesson.) However, when completing your Canvas\nassignments, you should use the <strong>Fork</strong> button. Doing so will automate several\nsteps for you and ensure that, when you complete a lab, it is registered as\ncomplete in Canvas.</p>\n\n<p>Go ahead and fork this assignment by clicking the <strong>Fork</strong> button at the top of\nthe page.</p>\n\n<figure>\n  <img src=\"https://curriculum-content.s3.amazonaws.com/fork-link.png\" alt=\"fork link\" height=\"25px\">\n  <figcaption>This is just a picture, the button is up at the top of the page.</figcaption>\n</figure>\n\n<p>Clicking the <strong>Fork</strong> button will do one of two things — it will either start\nthe forking process or bring you to a page where you select where to create your\nfork. If you're prompted to choose, select your personal GitHub account. The\nforking process will begin and may take a few moments. When complete, you will\nbe redirected to a new copy of the assignment that exists under <em>your</em> GitHub\naccount. The <code>README.md</code> file in your copy of the repository contains these\ninstructions, so you can continue this lesson here or in GitHub.</p>\n\n<p>Forking is a process which creates an exact copy of a collection of code and\nfiles. Once you've created a fork on your own GitHub account, you will be able\nto edit the files in the repository and write your own code solution without\ninterfering with the original copy.</p>\n\n<p>Once your fork is ready, the next step is to download (<strong>clone</strong>) your new\nrepository to your local machine.</p>\n\n<h3>Cloning to Your Local Machine</h3>\n\n<p>To download the repository for this lesson, make sure you're in your personal\nfork on GitHub, then click the <strong>Code</strong> button. A pop-up will appear which shows\nseveral options for cloning: <strong>HTTPS</strong>, <strong>SSH</strong>, and <strong>GitHub CLI</strong>. <strong>Before\ndoing anything else</strong>, be sure to switch to <strong>SSH</strong>. With <strong>SSH</strong> selected, you\nshould see what looks sort of like an email in the box below, starting with\n<code>git@github.com:</code>. You should see your GitHub name after the <code>:</code>.</p>\n\n<blockquote>\n<p><strong>Aside:</strong> Why SSH? If you followed the setup instructions, you have added\nyour personal SSH key to GitHub. GitHub will store your personal copies of all\nthe work you do in this course. Because you've added your SSH key, GitHub will\nknow who you are when you send work from your local machine to GitHub to be\nstored. Using HTTPS instead would require you to sign in from your terminal\nusing your log-in credentials each time you try to push your code to GitHub;\nit also may not work at all for some assignments.</p>\n</blockquote>\n\n<p>From here, click the copy button.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/completing-assignments/clone-repo.gif\" alt=\"clone-repo\"></p>\n\n<p>Now, open your terminal and navigate to where you'd like to download the\nassignment (e.g. <code>cd ~/Development/code</code>). Type <code>git clone</code> and a space, then\npaste in the copied SSH link from GitHub. It should look something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git clone git@github.com:&lt;your-user-name&gt;/phase-0-completing-assignments.git\n</code></pre></div>\n<p>Press enter, and you should see a flurry of terminal activity.</p>\n\n<blockquote>\n<p><strong>Troubleshooting</strong>: If you are a Mac user and you see the following message:</p>\n\n<p><code>xcrun: error: invalid active developer path</code></p>\n\n<p>You need to install the Xcode Command Line Tools. Run the following command to\ninstall them:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>xcode-select <span class=\"nt\">--install</span>\n</code></pre></div>\n<p>And follow the prompts. Then try running the <code>git clone</code> command again. See\n<a href=\"https://stackoverflow.com/a/52522566\">this Stack Overflow post</a> for more\ndetails. Note that you may need to re-install <code>xcode-select</code> any time you\nupdate your Mac OS version.</p>\n</blockquote>\n\n<p>Once the terminal gives you control to type again, a new folder with the GitHub\nname of the assignment will have been created. Change directory into this folder\nto access the assignment files.</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd </span>phase-0-completing-assignments\n</code></pre></div>\n<p>Now type <code>code .</code> to open up a text editor window with access to all of the\nassignment's files. These instructions are now also available on your local\nmachine in <code>README.md</code>.</p>\n\n<blockquote>\n<p>Note: the first time you open a directory in Visual Studio Code, you'll see a\nmessage asking \"Do you trust the authors of the files in this folders?\" This\nis a <a href=\"https://code.visualstudio.com/docs/editor/workspace-trust\">security feature</a> of Visual Studio Code. It's safe to\nchoose \"Yes\", and we recommend selecting the \"Trust the authors of all the\nfiles in the parent folder\" option to prevent this warning from coming up\nevery time you open a lesson. Just be sure to download your code from trusted\nsources!</p>\n</blockquote>\n\n<h3>Completing an Assignment</h3>\n\n<p>Most assignments will have tests that check your work and provide immediate\nfeedback in the terminal. We'll walk through some examples in upcoming lessons.</p>\n\n<p>This assignment has a single test: check to see if you've correctly cloned this\nassignment to your local machine. If you've followed the steps above, you've\ncompleted everything you need to do to pass the test; all that is left to do is\nrun it.</p>\n\n<p>Run <code>learn test</code> in the terminal. This command will install all the lesson\ndependencies and run the test. You should again see a flurry of text as\ndependencies are installed. Then you'll see the results of your test. By cloning\nthis assignment down, you've already passed the test!</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">This assignment\n    ✓ has been correctly cloned to your local environment\n\n\n  1 passing (5ms)\n</span></code></pre></div>\n<blockquote>\n<p><strong>Note:</strong> If you did not receive a passing test, or if your terminal produced\nsome sort of error, walk through the steps in this lesson again and make sure\nyou've followed each one. If you got a \"command not found\" error, go back to\nthe <a href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal\">Configuring the Flatiron Student Portal</a>\nlesson and go through the steps provided there to make sure the <code>learn-co</code> gem\nwas installed correctly. If you're still receiving errors, we recommend going\nback through the local environment setup instructions again to ensure\neverything is set up properly.</p>\n</blockquote>\n\n<p>Once the test is passing, you can head back to the assignment on Canvas. Refresh\nthe assignment page and you should see that Canvas now registers the assignment\nas both <strong>Submitted</strong> and <strong>Complete</strong>. A URL to your fork of the assignment has\nbeen submitted in Canvas, so you are ready to move on to the next lesson.</p>\n\n<p>Each assignment will be different and will include instructions on what is\nrequired to complete it. Some labs will have many tests. You can run\n<code>learn test</code> as many times as you'd like while working to solve these labs. You\nwill submit your work to Canvas each time you do, but the assignment will be\nmarked <strong>Incomplete</strong> until all tests are passing.</p>\n\n<h3>Your Work in GitHub</h3>\n\n<p>Every time you run <code>learn test</code>, all the changes you've made locally will be\nautomatically pushed to your GitHub fork of the repo. If you head back to your\nrepo after running <code>learn test</code>, you should see a message that a new branch,\n<code>fis-wip</code>, has been created:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-student-portal/fis-wip.jpg\" alt=\"pr_prompt\"></p>\n\n<p><strong>Note:</strong> you should <strong>disregard</strong> the <strong>Compare &amp; pull request</strong> button.</p>\n\n<p>This branch contains the work you've done so far. If you ever want to go back to\na previous solution, go to your repository on GitHub and switch to the <code>fis-wip</code>\nbranch.</p>\n\n<h2>Types of Assignments</h2>\n\n<p>For most assignments, you will go through the process we just walked through. In\nour curriculum, these assignments are often referred to as <strong>labs</strong> — coding\nlessons that include tests. There are a few other types of assignments, though,\nthat require slightly different submission steps:</p>\n\n<ul>\n<li>\n<strong>Code-alongs:</strong> These also require code, but will guide you through what\nneeds to be written. There are no tests to pass, but you will still need to go\nthrough forking, cloning, and running <code>learn test</code>. You should see a message\nstating that no tests were found, but if you check the assignment in Canvas,\nyou should see it is marked as <strong>Complete</strong>.</li>\n<li>\n<strong>Portfolio Projects:</strong> For these assignments, you'll be building fully\nfunctional applications. Some guidelines and requirements will be provided,\nbut it will be up to you to design and create your own app. These will\neventually become the projects you showcase to potential employers! You will\nsubmit your projects in Canvas by submitting a link to your GitHub repo.</li>\n<li>\n<strong>Blog Submissions:</strong> Blogs are a required part of our Software Engineering\ncourses. They help to develop your online presence and are a great way to\nreinforce the concepts you learn. You'll write your blog posts on a different\nplatform, but submit links to them in Canvas.</li>\n</ul>\n\n<h2>Submitting Projects and Blogs</h2>\n\n<p>For both portfolio projects and blog posts, you'll need to manually submit a\nlink to your work on Canvas. While viewing the assignment, you should see a\n<strong>Submit Assignment</strong> button in the upper-right section of the page.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/submit-assignment-canvas.png\" alt=\"submit assignment button\"></p>\n\n<p>Clicking this button will bring you to the bottom of the page where you can\nsubmit a URL link to your work.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/submit-assignment-canvas-form.png\" alt=\"submit assignment form\"></p>\n\n<p>Upon submission you should see confetti appear, indicating that your submission\nhas been accepted.</p>\n\n<blockquote>\n<p><strong>Note:</strong> It is possible to submit lab and code-along assignments manually\nthis way. However, the assignment will only be marked as <strong>Submitted</strong>, not\n<strong>Complete</strong>.</p>\n</blockquote>\n\n<h2>Conclusion</h2>\n\n<p>Congratulations! You've completed your first assignment using the <code>learn-co</code>\ngem! You now know how to work on and submit assignments going forward:</p>\n\n<ul>\n<li>Click the <strong>Fork</strong> button on the Canvas assignment</li>\n<li>Once the assignment is forked, clone it down to your local machine</li>\n<li>Complete any required work, then run <code>learn test</code>\n</li>\n<li>When all tests pass, the assignment will be submitted to Canvas and marked as\n<strong>Complete</strong>\n</li>\n<li>Your work will also be pushed to GitHub and will be available on the <code>fis-wip</code>\nbranch</li>\n</ul>\n\n<p>Equipped with this knowledge, you are now ready to tackle greater challenges!</p>",
			"exportId": "g5ff7d5760c88af65e785893eeee32111"
		},
		{
			"id": 432782,
			"title": "Survey - CLI",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the CLI module?</p>\n</div>",
			"exportId": "gf4b8c026b1d004597b234c5a1ec18429"
		}]
	},
	{
		"id": 44858,
		"name": "Programming as Conversation Part 1: Expressions",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g757b868a05844e442fb3bda2f8f011f5",
		"items": [
		{
			"id": 432786,
			"title": "Introduction to Programming as Conversation",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-intro\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-intro\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-intro/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Introduction</h2>\n\n<p>Welcome! In this module, we’re going to start learning how to program in\nJavaScript.</p>\n\n<p>It will be a long process and you will have moments of elation, excitement and,\nsometimes, frustration. But we <em>promise</em> you, learning to think in the\ndisciplined way that programming teaches will change your life for the better.</p>\n\n<h2>Programming as Conversation</h2>\n\n<p>Our method for teaching programming starts from a different place than you might\nexpect. If you've ever looked at a programming tutorial or book you might be\nexpecting lectures on how to convert decimal numbers to binary numbers, data\ntypes, variables, or something like that. We've designed our curriculum to <em>not</em>\ndo that.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_50_SadHead.png\" alt=\"Confused by code being front-loaded\"></p>\n\n<p>We think there's a different, and better, way: we start instead by thinking\ndeeply about having <em>conversations</em>.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_51_HappyHead.png\" alt=\"Conversations are a natural model for thinking about programming\"></p>\n\n<p>Many of the ideas we’ll share in this module ask you to reflect on \"when you\nlearned to talk\" or \"when you’re talking with a friend.\" We call this\n\"programming as conversation\" and it gets you to think about <em>communicating</em>\ninstead of \"memorizing strange programmer words, facts, and symbols.\" You'll\nlearn those strange words and symbols eventually, of course, but you'll see them\nas part of the act of communication, something you find natural right now.</p>\n\n<h2>Programming is About Communication</h2>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_53_TwoHeads_Evaluation.png\" alt=\"Turning Gears in Communication. Indicating that programming is about communicating your ideas through code.\"></p>\n\n<p>At its heart, programming is about communicating strategies for solving\nproblems. You:</p>\n\n<ul>\n<li>Document these strategies for yourself</li>\n<li>Communicate these documented strategies to others</li>\n<li>And then, lastly, ask a computer to run these strategies <em>very fast</em></li>\n</ul>\n\n<p>A \"program\" then is actually a strategy for solving a problem that people use to\ncommunicate with one another <em>as well as</em> give to a machine.</p>\n\n<p>A recipe for a fancy dish is a good comparison: you <strong>document</strong> the ingredients\nand preparation for yourself using human language. You can then <strong>communicate</strong>\nthat plan for food preparation by sharing the recipe with a friend.</p>\n\n<h2>Programs are Written in Notation</h2>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_82_GraphicNotationSystems.png\" alt=\"Notation Systems. Says graphic notations are used everywhere to including chemistry formulas, Music notes, road signs and Knitting symbols\"></p>\n\n<p>Even in recipes, we commonly use special <em>notation</em> like <code>3g</code> for \"3 grams\" or\n<code>½C.</code> for \"½ Imperial Cup.\" In recipes, we usually use <em>notation</em> to save time\nso our wrists don't get tired. But with computers, we have to communicate using\nnotation. Human language is often vague and imprecise and computers are\n<em>terrible</em> about handling unclear directions. To help prevent communication\nbreakdowns, we converse with them using a special notation. The \"special\nnotation\" is the programming language's rules or \"syntax.\"</p>\n\n<blockquote>\n<p><strong>DEFINITION</strong> Notation: A specialized vocabulary or system of symbols for\ncommunication. <strong>Examples</strong> Musical notation, arithmetic symbols, chemistry\nsymbols, traffic signs, or knitting patterns.</p>\n</blockquote>\n\n<h2>Programming Defined</h2>\n\n<p>Let's propose a definition of programming:</p>\n\n<blockquote>\n<p><strong>DEFINITION</strong> Programming: The act of creating programs, documents written in\na notation system that can be understood by other humans <em>as well as</em>\ncomputers.</p>\n</blockquote>\n\n<h2>Programming Language Defined</h2>\n\n<blockquote>\n<p><strong>DEFINITION</strong> Programming Language: A programming language defines the rules\nof notation (\"syntax\") that are required for it to ask the computer to do work\non your behalf.</p>\n</blockquote>\n\n<p>When programmers say \"I prefer Ruby to JavaScript\" they're saying \"I like the\nnotation system that Ruby uses for expressing problems and their solutions.\"\nIt's a lot like why some people like to play one instrument over another. In\nyour heart you might <em>feel</em> like a bassoonist, tuba player, or pianist —\nbut all those instruments play a Middle-C note at the same frequency.\nProgramming languages are similar: while their notation varies, they all ask the\nchips inside the computer to do the same work at the end of the day.</p>\n\n<p>As such, a lot of the \"fashion parade\" of \"what's hot\" in the technical scene is\njust fashion. The really important thing to learn is: \"What kind of problems or\nsolutions does this language make easier to express?\"</p>\n\n<h2>We Converse With Computers</h2>\n\n<p>One of the most essential ways of communicating, that we've all practiced\nthousands of times, is a <em>conversation</em>.  \"Conversation\" comes from the Latin\nwords meaning \"by taking turns.\" In conversation, we \"take turns\" <em>expressing</em>\nourselves.</p>\n\n<p>A unit of \"ideas\" is an <em>expression</em>. When a listener hears an <em>expression</em> they\ninterpret the words and symbols and sounds in the <em>expression</em> into a <em>meaning</em>.\nWe call the work they're doing <em>evaluation</em>. The result of <em>evaluation</em>\nfor a human is \"understanding.\" Computers show their understanding by returning\nthe result of that evaluation. That value is called a <em>return</em> value.</p>\n\n<p>Consider this diagram:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_52_TwoHeadsConversingSummary.png\" alt=\"Conversational Summary Graphic. Mentions the steps we use to converse. 1. Expressing a feeling (in this case &quot;I'm hungry&quot;). 2. The other person tries to evaluate the expression. 3. Then generate meaning from it (Understanding). 4. Analyze the expression to find a good solution (using logic). 5. Send back an appropriate expression resulting from the previous step.\"></p>\n\n<p>In the next lessons, we're going to see how JavaScript acts as a \"listener\" in a\nconversation. When given an <em>expression</em>, JavaScript will <em>evaluate</em> it and,\nlike a good friend, give you a reaction about <em>how</em> it evaluated your\nexpression. In the programming world, we call responses from the programming\nlanguage a <em>return value</em>.</p>\n\n<p><strong><em>When expressions are evaluated, they return something</em></strong></p>\n\n<p>Sometimes our expressions might not make sense to JavaScript, just like\nsometimes our conversations with friends don't <em>quite</em> make sense to them.</p>\n\n<p><code>Work, you stupid machine</code> is not part of the valid notation of JavaScript.\nBelow, we've embedded a tool that can read JavaScript. To see what happens when\nJavaScript tries to interpret <code>Work, you stupid machine</code>, you can simply type it\ninto the console window below and press enter. Give it a try.</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>Here we've broken the rules of the notation system. This is known as a <em>syntax\nerror</em>. Computers require us to honor <em>their</em> <strong><em>limited</em></strong> vocabulary. Syntax\nerrors are prompts from the programming language to help steer <em>our</em>\ncommunication to be more precise.</p>\n\n<p><strong>Note</strong>: Take a look at the green \"run\" button at the top of the window. When\nyou're experimenting in the console window, you can use this button to \"reset\"\nthe console. This will both clear out any code in the window and cause JavaScript\nto \"forget\" what you've run, which can come in handy if you're getting an error.</p>\n\n<p>When we follow the rules and adhere to the syntax, however, JavaScript will\nreturn something to us. This time, try typing <code>1 + 1</code> into the console window.\n(Don't forget to hit enter.) You should see the following:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/return-value.png\" alt=\"Console showing return value from the expression 1 + 1 which is number 2\"></p>\n\n<p>JavaScript has <em>evaluated</em> the <em>expression</em> <code>1 + 1</code> and the result — the\nexpression's <em>return value</em> — is returned on the next line.</p>\n\n<p>Sometimes, we might get something unexpected. Type in <code>1 + \"Cookie Monster\"</code>\n(including the quotes) and see what happens.</p>\n\n<p>You'll learn more about <em>why</em> this happened later. The important thing to know\nnow is that, as long as we follow JavaScript's syntax rules, we'll get\n<em>something</em> in return.</p>\n\n<p><strong>Top Tip</strong>: When you see an instruction to type something into the REPL, we\nsuggest you do exactly that rather than copy/pasting. Actually typing in the\ncode helps your brain learn!</p>\n\n<h2>Conclusion</h2>\n\n<p>Congratulations! You've finished your first lesson in thinking about programming\nas a conversation. As you might guess, <em>expressions</em> are important because\nthey're how we \"push\" ideas to computers and other programmers. We're going to\nspend the remainder of this module learning to build expressions and\nunderstanding how JavaScript will <em>evaluate</em> them. Make sure you've integrated\nthe vocabulary words of \"expression,\" \"evaluation,\" and \"return value\" before\nmoving on.</p>",
			"exportId": "introduction-to-programming-as-conversation"
		},
		{
			"id": 432788,
			"title": "Expressions in JavaScript",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-expressions-in-js\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-expressions-in-js\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-expressions-in-js/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define \"Expression\"</li>\n<li>Define \"Evaluation\"</li>\n<li>Expression and Evaluation with JavaScript</li>\n<li>Identify the Parts of an Expression</li>\n<li>Identify Core Operators in JavaScript</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Conversations, we've seen, are the things that result when two individuals — be\nthey human or machine — communicate <em>expressions</em> to one another.</p>\n\n<p>We've been imprecise in defining \"expression\" while we were getting the hang of\nit. In this lesson, we'll propose formal definitions for <em>expression</em> and\n<em>evaluation</em>.</p>\n\n<h3>Practice Practice Practice</h3>\n\n<p>Previously, we saw a tool that allowed us to have a conversation with\nJavaScript. This tool is known as a REPL, short for <a href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\">Read Evaluate Print\nLoop</a>. As we've seen, we can type in an expression in the console and the\nresponse, whatever is returned, will be printed below it. For example, if you\ntype <code>10 + 10</code> in the console below and press enter, you should see <code>20</code> appear\nunderneath.</p>\n\n<blockquote>\n<p>Remember you can hit the \"run\" button at the top of the window to reset\nthe console and clear out any old code you may have in there!</p>\n</blockquote>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>We strongly encourage you to experiment with this and other code examples as you\nwork through the curriculum. To this end, we recommend that you open <a href=\"https://replit.com/languages/javascript\">replit.com</a>\nwhen you're working so you always have a REPL available. This will enable you to\nexperiment with code from the lessons and to try coming up with your own examples.\nThe more you code, the more you'll learn!</p>\n\n<p><strong>Note</strong>: if you go to <a href=\"https://replit.com/languages/javascript\">replit.com</a>, you'll see that it opens with two windows\nrather than just one. The window on the left is the code window. You can\ndisregard it for now — we'll start using that in a later lesson. The window on\nthe right is the console window, which functions in the same way as the embedded\nREPL above.</p>\n\n<h2>Define \"Expression\"</h2>\n\n<p>An expression in a programming language is like a sentence in a spoken language.</p>\n\n<p>Some sentences are simple: \"Hello, world.\" Some sentences are complex: \"Only by\nlearning to live in harmony with your contradictions can you keep it all\nafloat.\"<a href=\"https://www.poetryfoundation.org/poets/audre-lorde\">-Audrey Lorde</a></p>\n\n<p>Some expressions are simple: <code>2</code>. Some expressions are complex <code>1 + 2</code>. Some\nexpressions are <em>really</em> complex: <code>10 + (3 * ( (-1) ** 3) + 2) / 18</code>.</p>\n\n<blockquote>\n<p><strong>Definition</strong>: Expression: A combination of information, called <em>data</em>, and\n<em>symbols</em> indicating how to combine <em>data</em>, called <em>operators</em>.</p>\n</blockquote>\n\n<h2>Define \"Evaluation\"</h2>\n\n<p><em>Evaluation</em> is the process of interpreting an expression, according to rules,\nto produce a return value.</p>\n\n<h2>Expression and Evaluation with JavaScript</h2>\n\n<p>These definitions should align with your experience of having a conversation\nwith REPLs so far. Think about <code>255 / 5</code>. Which parts of the expression are\n<em>data</em>? Which parts are <em>operators</em>?</p>\n\n<blockquote>\n<p><strong>Pro-tip</strong>: Think it through yourself. Which is a given thing (<em>data</em>) and\nwhich parts tell you how to combine things (<em>operators</em>)? When reading\ntechnical documents you can't simply read the answers, you <strong><em>have to think\nalong</em></strong> in order to learn. Active participation tells your brain that this\nstuff is important!</p>\n</blockquote>\n\n<h2>Identify the Parts of an Expression</h2>\n\n<p>The <em>data</em> are: <code>255</code> and <code>5</code></p>\n\n<p>The <em>operator</em>: is <code>/</code></p>\n\n<p>In this example, there is only one operator. It's certainly possible for\nexpressions to have multiple operators like <code>100 + 10 - 3</code>. In this example, the\n<em>operators</em> are <code>+</code> and <code>-</code>.</p>\n\n<h2>Identify Core Operators in JavaScript</h2>\n\n<p>Here's a table of other operators and their operations. While some of the\nsymbols used are different from their mathematical counterparts, the operations\nwork in the familiar way.</p>\n\n<table><thead>\n<tr>\n<th>Operator</th>\n<th>Operation</th>\n<th>Note</th>\n</tr>\n</thead><tbody>\n<tr>\n<td><code>+</code></td>\n<td>Addition</td>\n<td></td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td>Subtraction</td>\n<td></td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>Multiplication</td>\n<td>We use <code>*</code> instead of <code>×</code> because it looks like x-the-letter</td>\n</tr>\n<tr>\n<td><code>/</code></td>\n<td>Division</td>\n<td>We use <code>/</code> instead of <code>÷</code> because that's not on a keyboard</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>Exponentiation</td>\n<td>We use <code>**</code> instead of <code>^</code> because <code>^</code> means something else in programming languages</td>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td>Association</td>\n<td>Expressions inside of <code>()</code> get evaluated earlier</td>\n</tr>\n</tbody></table>\n\n<h2>Conclusion</h2>\n\n<p>In the next few lessons, we're going to introduce the <strong>Essential Three\nExpressions</strong>:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/expressions-in-javascript/essential-3-expressions.jpg\" alt=\"Three Essential Expression\"></p>\n\n<ol>\n<li>The constant expression</li>\n<li>The assignment expression (variable assignment)</li>\n<li>The variable lookup expression</li>\n</ol>\n\n<p><strong><em>All expressions, which are the core of every programming language, are built\non these Essential Three Expressions.</em></strong></p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\">Expressions</a></li>\n</ul></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\">Read-evaluate-print loop</a></li>\n</ul>",
			"exportId": "expressions-in-javascript"
		},
		{
			"id": 432790,
			"title": "The Constant Expression",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-constant-expression\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-constant-expression\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-constant-expression/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify the <em>constant expression</em></li>\n<li>Explain how the <em>constant expression</em> stops evaluation</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Lets repeat our definition of <em>expression</em></p>\n\n<blockquote>\n<p><strong>Definition</strong>: Expression: A combination of information, called <em>data</em>, and\n<em>symbols</em> indicating how to combine <em>data</em>, called <em>operators</em>.</p>\n</blockquote>\n\n<p>What if we were to make an expression that had no <em>operators</em>? What if it only\nhad <em>data</em>. For example, what if we just pass <code>9000</code> into a REPL:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<blockquote>\n<p><strong>Reminder</strong>: Click the \"run\" button to clear any old or unwanted code in\nyour code sandbox and reset the console!</p>\n</blockquote>\n\n<p>In response, we get <code>9000</code>. This type of expression is known as the <em>constant\nexpression</em> and it's very important, although very boring.</p>\n\n<p>It's boring because it doesn't <em>do</em> anything except be itself. But it's\nimportant because it confirms that JavaScript knows when to stop applying\noperations. It tells JavaScript to <em>stop</em>, you have an answer.</p>\n\n<h3>Explain How the <em>Constant Expression</em> Stops Evaluation</h3>\n\n<p>Let's consider a simple arithmetic expression. Keep in mind we apply operators\nin \"<a href=\"https://en.wikipedia.org/wiki/Order_of_operations\">PEMDAS</a>\" order: parenthesis, exponents, multiplication, division,\naddition, subtraction.</p>\n\n<p>We'll start with the expression:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step0.png\" alt=\"Math Expression: Step 0. 3*(10-4)\"></p>\n\n<p>JavaScript's mission is to find a constant piece of data or a <em>constant\nexpression</em>. Because of <code>()</code>, it goes there first. The <code>(10 - 4)</code> is clearly\n<strong>not</strong> a constant expression because of the <code>-</code> operator's presence. JavaScript\nmakes a \"tree\" of the two sides of the operator (<code>-</code>) and then looks on each\nside to see whether those sides are <em>constant expressions</em> i.e. \"plain old\ndata.\"</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step1.5.png\" alt=\"Math Expression: Step 1. The expression is divided into two parts subtraction and multiplication. The subtraction is evaluated first because of the parenthesis that surround it. Please refer to Resources section at the end of this page for the order of operations.\"></p>\n\n<p>Since both <code>4</code> and <code>10</code> are plain old data, it can apply <code>-</code> to them and produce\n<code>6</code> — a <em>constant expression</em>.</p>\n\n<p>So what JavaScript now sees looks like this:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step4.png\" alt=\"Math Expression: Step 2. 3 * 6\"></p>\n\n<p>Here again, JavaScript checks both sides of the operator <code>*</code> and, because both\nsides are now <em>constant expressions</em>, applies the <code>*</code> to <code>3</code> and <code>6</code> and creates\na new <em>constant expression</em>, the answer (or \"return value\"):</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step5.png\" alt=\"Math Expression: Step 3. number 18\"></p>\n\n<p>Whew! Fortunately, JavaScript does <em>all this work</em> of building a tree of\noperators and returning a value very quickly!</p>\n\n<p>The <em>constant expression</em> is <em>always</em> the last expression in a complex\nexpression. It's how JavaScript knows it has <em>data</em> that it can work with and\nthat no other operations need to be applied.</p>\n\n<h2>Table Explanation</h2>\n\n<p>Another way of looking at this process might be to look at a table. We'll repeat\nall the same things we just showed graphically, but if a table makes more sense\nfor you, then you'll like this one better!</p>\n\n<p>This is an important strategy when learning to program: if you like thinking in\ncode, try out the code; if you prefer diagrams, draw a diagram; if tables make\nmore sense to you, build a table. An important part of learning to be a\ntechnologist is learning to build the tools that will help you learn.</p>\n\n<table><thead>\n<tr>\n<th>Expression</th>\n<th>Has Operators?</th>\n<th>Operators</th>\n<th>Are we done?</th>\n<th>Next Step</th>\n</tr>\n</thead><tbody>\n<tr>\n<td><code>3*(10-4)</code></td>\n<td>YES</td>\n<td><code>*</code>, <code>()</code></td>\n<td>NO</td>\n<td>Zoom in on new sub-expression in <code>()</code> because of PEMDAS</td>\n</tr>\n<tr>\n<td><code>(10-4)</code></td>\n<td>YES</td>\n<td><code>-</code></td>\n<td>NO</td>\n<td>Evaluate sub-expressions</td>\n</tr>\n<tr>\n<td><code>10</code></td>\n<td>NO</td>\n<td>NONE</td>\n<td>YES</td>\n<td>Zoom in on expression <code>10</code>. Constant expression! Return the value of the constant, we're done!</td>\n</tr>\n<tr>\n<td><code>4</code></td>\n<td>NO</td>\n<td>NONE</td>\n<td>YES</td>\n<td>Zoom in on expression <code>4</code>. Constant expression! Return the value of the constant, we're done!</td>\n</tr>\n<tr>\n<td><code>(10-4)</code></td>\n<td>YES</td>\n<td><code>-</code></td>\n<td>NO</td>\n<td>Replace <code>( 10 - 4 )</code> with application of <code>-</code> to <code>10</code> and <code>4</code> making <code>6</code></td>\n</tr>\n<tr>\n<td><code>3*6</code></td>\n<td>YES</td>\n<td><code>*</code></td>\n<td>NO</td>\n<td>Zoom out and replace the sub-expression with its value we just determined</td>\n</tr>\n<tr>\n<td><code>3</code></td>\n<td>NO</td>\n<td>NONE</td>\n<td>YES</td>\n<td>Zoom in on expression <code>3</code>. Constant expression! Return the value of the constant, we're done!</td>\n</tr>\n<tr>\n<td><code>6</code></td>\n<td>NO</td>\n<td>NONE</td>\n<td>YES</td>\n<td>Zoom in on expression <code>6</code>. Constant expression! Return the value of the constant, we're done!</td>\n</tr>\n<tr>\n<td><code>3*6</code></td>\n<td>YES</td>\n<td><code>*</code></td>\n<td>NO</td>\n<td>Apply <code>*</code> to <code>3</code> and <code>6</code> making <code>18</code></td>\n</tr>\n<tr>\n<td><code>18</code></td>\n<td>NO</td>\n<td>NONE</td>\n<td>YES</td>\n<td>Constant expression! Return the value of the constant, we're done!</td>\n</tr>\n</tbody></table>\n\n<h2>Conclusion</h2>\n\n<p>While the <em>constant expression</em> might seem dull, it lets us (and JavaScript)\nknow when expression evaluation is done <em>and</em> establishes a groundwork for all\nthe following expressions. The first rule of Aristotle's logic is <code>A is A</code>; the\nconstant expression provides a similar \"foundation\" for programming.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://www.mathsisfun.com/operation-order-pemdas.html\">Order of Operations: PEMDAS</a></li>\n</ul>",
			"exportId": "the-constant-expression"
		},
		{
			"id": 432793,
			"title": "The Assignment Expression",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-assignment-expression\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-assignment-expression\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-assignment-expression/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define the <em>Assignment Expression</em></li>\n<li>Define Mutability / Immutability</li>\n<li>Learn what the Return Value of an <em>Assignment Expression</em> is</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>So you've seen the first of our <strong>essential three expressions</strong>, the <em>constant\nexpression</em>, which gives JavaScript some constant facts about the world: <code>2</code> is\n<code>2</code>, <code>3</code> is <code>3</code>, etc...</p>\n\n<p>It's really useful to associate an <em>expression's evaluated result</em> with a\n'name'. We call those names that we associate with the <em>expression's</em> result,\n<em>variable names</em> or, commonly, just <em>variables</em>. The process of bonding an\nexpression to a variable is called <em>assigning a variable</em>. Programmers also say\nthat \"the variable name 'points to' the expression that was assigned to it.\"</p>\n\n<p>A helpful metaphor here is that it's like adding a new entry to a dictionary:\n<code>aFunNumber</code>'s definition is <code>3 * (10 - 4)</code> or <code>myBirthYear</code>'s is <code>1989</code>. Or you\ncan think about a variable name as a label you put on a box. Using this\nmetaphor, the box labeled <code>aFunNumber</code> contains the value <code>3 * (10 - 4)</code>, and\nthe box labeled <code>myBirthYear</code> contains the value <code>1989</code>.</p>\n\n<p>We create the association between a variable name and a value by using the\nsecond of our <strong>essential three expressions</strong>: the <em>assignment expression</em>.</p>\n\n<h2>Define the <em>Assignment Expression</em></h2>\n\n<p>In JavaScript, the assignment expression is like so:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/assigning-a-variable.jpg\" alt=\"Assignment Expression Graphic. Variable name followed by an assignment operator followed by an expression. In this example the variable name is heightInCentimeters followed by an equal sign as the assignment operator followed by an expression like 180 or 160+2\"></p>\n\n<p>Here are some examples:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">aFunNumber</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"nx\">myBirthYear</span> <span class=\"o\">=</span> <span class=\"mi\">1989</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Variable names are most often descriptions of what their assigned expressions\n<em>mean</em>. In JavaScript, when a variable name is made of multiple words, every\nword after the first is capitalized. This is referred to as <em>camelCase</em> and\nalthough it isn't strictly required, it is a common convention in JavaScript.</p>\n\n<blockquote>\n<p><strong>Note</strong>: In JavaScript, it's <em>optional</em> to include a semi-colon at the end of\neach line. You may encounter JavaScript expressions written both ways.</p>\n</blockquote>\n\n<p>While you <em>can include</em> numbers and some symbols in variable names, let's keep\nthings simple for the moment and just use camelCased letters.</p>\n\n<p>Consider the following expression:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">maximumSpeed</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Run this alone in a REPL, and we get an error:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>ReferenceError: maximumSpeed is not defined\n</code></pre></div>\n<p>Here, JavaScript, by default, doesn't know anything about <code>maximumSpeed</code>.</p>\n\n<p>When we define a variable using the \"assignment expression\" we add something new\nto JavaScript.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">maximumSpeed</span> <span class=\"o\">=</span> <span class=\"mi\">9000</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Let's try this out in the REPL:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>Notice that by using the assignment expression, <code>maximumSpeed = 9000</code>, our code\nevaluates to <code>9000</code> when run. Once <code>maximumSpeed</code> is defined, JavaScript will\nknow what it is. Now try putting just <code>maximumSpeed</code> in and hitting enter and\nyou'll see that JavaScript remembered its value! (We'll look at this more\nclosely in the next lesson.)</p>\n\n<blockquote>\n<p><strong><em>SUPER-IMPORTANT</em></strong>: In the assignment expression <code>=</code> means \"assignment\". It\ndoes not mean \"what's on the left of the <code>=</code> is equal to what's on the right.\"\nIn math courses, we use <code>=</code> to say that the expressions on either side of the\n<code>=</code> are the same. JavaScript uses <code>==</code> and <code>===</code> for that purpose. It's very\ncommon — and very confusing — for beginners to have bugs where they confuse\n<code>=</code> for <code>==</code> or <code>===</code>.</p>\n</blockquote>\n\n<h2>Define Mutability / Immutability</h2>\n\n<p>A variable is said to be \"mutable.\" That means the value that the name \"points\nto\" can be changed during the running of the program. Being able to change the\nvalue a variable points to is very important. For example, if we need to do\nsomething 10 times, we need a variable to keep track of how many times the thing\nhappens. That variable will need to change: its value will need to increase by 1\neach time. Here's <em>mutability</em> in action:</p>\n\n<p>Many years ago my height in centimeters was 50cm; go ahead and add the following\nline into the REPL's console:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">heightInCentimeters</span> <span class=\"o\">=</span> <span class=\"mi\">50</span><span class=\"p\">;</span>\n</code></pre></div>\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>But today my height is 180cm. Let's now put the following code into the console:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">heightInCentimeters</span> <span class=\"o\">=</span> <span class=\"mi\">180</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Now that we have assigned <code>heightInCentimeters</code> to two different values, what do\nyou think the console will return if we just type <code>heightInCentimeters</code> and hit\nenter? Let's try it out!</p>\n\n<p>If you guessed we would see a return value of <code>180</code>, you were right! The last\nvalue assigned to the variable is what is saved.</p>\n\n<p>Sometimes, we might want to make a variable's value permanent. We might want to\nsay \"hey, this value should not change.\" We want to say that the value is\n<em>immutable</em>, the opposite of <em>mutable</em>. We do this by writing a <strong>constant</strong>\n(not the same as the constant expression we discussed previously). We'll go into\nmore detail on constants in the next part of this course.</p>\n\n<h2>Return Value of an <em>Assignment Expression</em></h2>\n\n<p>The return value of an <em>assignment expression</em> is the evaluated result of the\nexpression to the right of the <code>=</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">recurringExpressionValue</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; 18</span>\n</code></pre></div>\n<p>Pay attention here: the return value of the assignment expression <strong><em>IS NOT THE\nSAME THING</em></strong> as getting the value out of the variable name. We'll learn to get\nthe value \"back out of a variable\" in the next lesson. What JavaScript is saying\nis that the assignment expression's return value is the value of the expression\nto the right of the <code>=</code>.</p>\n\n<blockquote>\n<p><strong>Note</strong>: The line underneath <code>recurringExpressionValue</code> indicates what this\nexpression evaluates to; in this case, it's the number <code>18</code>. Any line that\nstarts with <code>//</code> in JavaScript is a \"comment\": it's code that is ignored by\nthe JavaScript engine, but can be used to indicate something to other\ndevelopers looking at your code.</p>\n</blockquote>\n\n<h2>Conclusion</h2>\n\n<p>Think about a baby who has never spoken before. The parent stands in front of\nit saying their name over and over (...and over) again.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/Image_55_Mama-Baby_1.png\" alt=\"Learning to talk 1. A mom trying to teach a baby to assign their face to the variable name &quot;Mama&quot; or &quot;Dada&quot;.\"></p>\n\n<p>They wave towards their bodies and say their names again and again. What the\nparent is trying to do is teach the baby to assign their face to the variable\nname \"Mama\" or \"Dada.\" But to the baby, this means nothing.</p>\n\n<p>While neither the baby or the (average) adult is aware of it, they're trying to\nteach the baby the second of the <em>three essential expressions</em>: the assignment\nexpression. Then, one magical day, it clicks for the baby. It performs an\nassignment in its precious little head:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/Image_55_Mama-Baby_2.png\" alt=\"Learning to talk 2. The Mom is still sad; she doesn't know if the baby has assigned the word &quot;mama&quot;: to the correct person.\"></p>\n\n<p>Unfortunately, Mom is still sad; she doesn't have any <em>proof</em> that the\nassignment was successful. For that to work, the baby will need to prove that it\ncan \"look up\" the variable assignment of who \"ma-ma\" points to. The baby will\nneed to learn the last of our <em>essential expressions</em>: the variable lookup\nexpression!</p>",
			"exportId": "the-assignment-expression"
		},
		{
			"id": 432795,
			"title": "The Variable Lookup Expression",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-variable-lookup-expression\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-variable-lookup-expression\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-variable-lookup-expression/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define the Variable Lookup Expression</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>The final of our <em>essential three</em> expressions is the variable lookup\nexpression. Like the <em>constant expression</em>, it is boring yet profound. Once\nwe've assigned a value to a <em>variable name</em> using the <em>assignment expression</em>,\nwe can use the <em>variable lookup expression</em> to retrieve that value. Using our\nmetaphors from the previous lesson, it looks up the variable's definition in the\ndictionary, or \"shakes out\" the value that was put in the labeled box.</p>\n\n<h2>Define the Variable Lookup Expression</h2>\n\n<p>To look up the value in a variable we simply type the variable's name in.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// Assignment expression that returns 32</span>\n<span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">32</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Type in the assigned name</span>\n<span class=\"nx\">age</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>In return, we get <code>32</code>. Try this out on your own in the below REPL console.\nRemember, the more you try things out, the more it will start to make sense!</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>That's it. The values we associate with the assignment expression can be\nretrieved by simply typing the variable's name.</p>\n\n<h2>Variable Lookup as Conversation</h2>\n\n<p>In the previous lesson, we talked about a parent and a baby. A parent repeats\ntheir name hundreds of times to get the baby to assign their face to the\nvariable <code>ma-ma</code>. When the baby first sees that face again and says \"<code>ma-ma</code>!\"\nthe parent has successfully taught the child \"variable lookup.\" Although there\nare no pages in baby journals for \"Baby's First Variable Lookup.\"</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-variable-lookup-expression/Image_55_Mama-Baby_4.png\" alt=\"Successful Lookup. The mom is happy, because when the baby first sees that face again and says &quot;ma-ma!&quot; the parent has successfully taught the child &quot;variable lookup&quot;.\"></p>\n\n<p>If you think about it, most of childhood education until early elementary school\nis giving them thousands of assignment expressions so they can participate in\nthe world: \"Red,\" \"one,\" \"eleven,\" \"far.\"</p>\n\n<p>Consider this scenario. Look for the <em>essential three</em> expressions in here.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Parent: See the doggie? That's a doggie.\nChild: Doggie?\nParent: That's right, that's a doggie. Doggies say \"Woof-woof!\"\nChild: Doggie?\nParent: Right. Doggie.\n</code></pre></div>\n<p><em>Some time later</em>...</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Child: Doggie!\nParent: That's right. Doggie!\n</code></pre></div>\n<p>Let's compare teaching a baby a four-legged animal's name and teaching JavaScript\nthat <code>a</code> is <code>4</code>.</p>\n\n<table><thead>\n<tr>\n<th>Expression</th>\n<th>Real-Life Conversation</th>\n<th>JavaScript Conversation</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>Constant Expression</td>\n<td>Parent points to the doggie</td>\n<td><code>4</code> (evaluates to <code>4</code>)</td>\n</tr>\n<tr>\n<td>Assignment Expression</td>\n<td>Parent teaches child that \"Doggie\" = <img alt=\"Puppy picture\" src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-variable-lookup-expression/small_puppy.JPG\"></td>\n<td><code>a = 4</code> (evaluates to <code>4</code>)</td>\n</tr>\n<tr>\n<td>Variable Lookup</td>\n<td>Child sees the dog and says \"Doggie!\"</td>\n<td><code>a</code> (evaluates to <code>4</code>)</td>\n</tr>\n</tbody></table>\n\n<h2>Conclusion</h2>\n\n<p>Now that the <em>essential three</em> expressions are under your control, we're going\nto start rapidly building up the richness of things you can do using\nexpressions. Whole programming languages are built around executing through\nevaluating expressions! Languages that work this way are called \"functional\nlanguages\" and they are some of the first programming languages ever created.</p>",
			"exportId": "the-variable-lookup-expression"
		},
		{
			"id": 432797,
			"title": "JavaScript Variables",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-variables\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define what a variable is</li>\n<li>Variable names in JavaScript</li>\n<li>Initializing variables in JavaScript</li>\n<li>Retrieving and changing the value of variables</li>\n<li>Identify when to use <code>const</code>, <code>let</code>, and <code>var</code> for declaring variables</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In an earlier lesson, we talked about using the <em>assignment expression</em> to save\ninformation into a variable. \"Saving\" to a variable allows us to <em>store</em> a\nresult so we can use it again later. Storing calculations to <em>temporary storage\nplaces</em> is the heart of making efficient programs. It's a simple idea that has\npowerful consequences.</p>\n\n<h2>What is a Variable?</h2>\n\n<p>A variable is a container in which we can store values for later retrieval.</p>\n\n<p>Imagine a box that can hold any type of data: a number, a string, etc. We take\nsome data that we want to store, place it inside the box, and hand the box off\nto the JavaScript engine, which stores it in memory. All done! Our data is\nsafely cached until we need to access it again.</p>\n\n<p><img src=\"https://user-images.githubusercontent.com/17556281/28639657-fea1930a-7216-11e7-8c38-45bc9fab96a7.gif\" alt=\"Raiders of the Lost Ark warehouse. View of a person pushing a package into a big warehouse.\"></p>\n\n<p>But wait! When we ask for the data back, how will the JavaScript engine know\n<em>which</em> box to retrieve? We need to assign a name to our variable —&nbsp;a\nlabel for our box — so that we can use the <em>variable lookup expression</em> to\ntell the engine exactly which piece of stored data we want to access.</p>\n\n<h2>Variable Names in JavaScript</h2>\n\n<p>Variable names in JavaScript can sometimes be complicated, but if you follow\nthese three rules you'll be fine:</p>\n\n<ul>\n<li>Start every variable name with a lowercase letter. Variable names starting\nwith a number are not valid.</li>\n<li>Don't use spaces. If a variable name consists of multiple words,\n<code>camelCaseYourVariableNames</code> (see the camel humps?) instead of\n<code>snake_casing_them</code> (think of the underscore as a snake that swallowed the\nwords).</li>\n<li>Don't use JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Reserved_keywords_as_of_ECMAScript_2015\">reserved words</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Future_reserved_keywords\">future reserved\nwords</a>.</li>\n</ul>\n\n<p>It's important to note that case matters, so <code>javaScript</code>, <code>javascript</code>,\n<code>JavaScript</code>, and <code>JAVASCRIPT</code> are four different variables.</p>\n\n<h2>Initializing Variables in JavaScript</h2>\n\n<p>Initializing variables in JavaScript is really a two-step process: first, we\n<em>declare</em> the variable, then we <em>assign a value</em> to it.</p>\n\n<p>To declare the variable, we use either the <code>let</code> or <code>const</code> reserved word. (And,\nin fact, there's a third option as well: <code>var</code>. We'll talk about when to use\neach a bit later in this lesson. For now, just know that when you see <code>const</code>,\n<code>let</code>, or <code>var</code>, those are reserved words that are used to declare a variable.)</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">pi</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n</code></pre></div>\n<p>The JavaScript engine sets aside a chunk of memory to store the declared\nvariable. Then, we assign a value to that variable using the <em>assignment\nexpression</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 3.14159</span>\n</code></pre></div>\n<p>We can make our code a bit more efficient by packaging both initialization steps\n—&nbsp;declaration and assignment —&nbsp;in a single line of code:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n</code></pre></div>\n<p>You will encounter cases later on where it makes sense to declare a variable\nwithout immediately assigning a value to it, but combining the two steps will\nwork most of the time.</p>\n\n<h2>Retrieving and Changing the Value of Variables</h2>\n\n<p>Say we've declared a variable <code>pi</code> and set its value:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>To retrieve the value of <code>pi</code>, we use the <em>variable lookup expression</em>, i.e., we\nsimply type in its name:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">pi</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 3.14159</span>\n</code></pre></div>\n<p>If we want to change (reassign) that value, we use the <em>assignment expression</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">pi</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 3.14159</span>\n<span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14</span><span class=\"p\">;</span>\n<span class=\"nx\">pi</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 3.14;</span>\n</code></pre></div>\n<h2>Identify When to Use <code>const</code>, <code>let</code>, and <code>var</code> for Declaring Variables</h2>\n\n<p>In the past, <code>var</code> was the only option available in JavaScript for declaring\nvariables. Then, in 2015, the language underwent a major revision that, among\nmany other changes, added two new options: <code>const</code> and <code>let</code>.</p>\n\n<blockquote>\n<p><strong>NOTE:</strong> Delving into the history of JavaScript and the many changes and\nimprovements that were made to it in 2015 is outside the scope of this lesson.\nHowever, as you're learning to code in JavaScript you may see references to\n<code>ECMAScript 2015</code>, <code>ES2015</code>, or <code>ES6</code>. These terms are interchangeable and\nrefer to that major revision. (ECMAScript is the \"official\" name of\nJavaScript.) There are some resources listed at the end of this lesson if\nyou're interested in learning more about <code>ES2015</code> and the history of\nJavaScript.</p>\n</blockquote>\n\n<p>The addition of <code>const</code> and <code>let</code> was in response to significant problems that\nthe use of <code>var</code> can cause. In particular, it can create scope issues (which is\na whole other topic that you'll learn about later) that lead to unpredictable\nand difficult to diagnose bugs in your code. You will likely see <code>var</code> used a\nlot in legacy code and older StackOverflow posts, so it's important to be\nfamiliar with it. <strong><em>However, there is no good reason to use <code>var</code> to declare\nvariables in your own code, and good reasons not to</em></strong>.</p>\n\n<h3><code>let</code></h3>\n\n<p>The main advantage of using <code>let</code> for declaring a variable is that, unlike\n<code>var</code>, it will throw an error if you try to declare the same variable a second\ntime:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">the ratio between a circle's circumference and diameter</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; Uncaught SyntaxError: Identifier 'pi' has already been declared</span>\n</code></pre></div>\n<p>Why is this a good thing? Well, you can imagine how easy it could be, especially\nin a lengthy program, to accidentally reuse a variable name. Doing so can cause\nunpredictable behavior because the value associated with the variable in one\npart of the program may be changed by code in a different part of the program.\nThese types of problems can be very difficult to track down and debug. Using\n<code>let</code> to declare your variables will reduce the likelihood of introducing such\nerrors into your code.</p>\n\n<p>While we can't <em>redeclare</em> a variable that is declared using <code>let</code>, we can still\n<em>reassign</em> its value:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n\n<span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">the ratio between a circle's circumference and diameter</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"the ratio between a circle's circumference and diameter\"</span>\n\n<span class=\"nx\">pi</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"the ratio between a circle's circumference and diameter\"</span>\n</code></pre></div>\n<h3><code>const</code></h3>\n\n<p>The <code>const</code> reserved word should be your go-to option for declaring variables in\nJavaScript. When you declare a variable with <code>const</code>, not only can it not be\nredeclared but it also <strong><em>cannot be reassigned</em></strong>.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n\n<span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">2.71828</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; Uncaught TypeError: Assignment to constant variable.</span>\n</code></pre></div>\n<p>When you (or another developer) sees that <code>pi</code> has been declared with <code>const</code>,\nyou immediately know that the variable points to the same value every other time\nit's referenced in the program. For variables declared with <code>let</code> (or <code>var</code>),\nyou cannot be so sure and will have to keep track of how those variables change\nthroughout the program. The extra information provided by <code>const</code> is valuable,\nand it comes at no extra cost to you! Just use <code>const</code> whenever possible and\nreap the benefits.</p>\n\n<blockquote>\n<p><strong>Note</strong>: With <code>let</code>, it's possible to declare a variable without assigning a value:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">pi</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n\n<span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 3.14159</span>\n</code></pre></div>\n<p>However, because <code>const</code> doesn't allow reassignment after the variable is\ninitialized, we <strong>must</strong> assign a value right away:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">pi</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; Uncaught SyntaxError: Missing initializer in const declaration</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">pi</span> <span class=\"o\">=</span> <span class=\"mf\">3.14159</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n</code></pre></div></blockquote>\n\n<p>As your JavaScript powers increase with experience, you'll develop a more\nnuanced understanding of what to use where. However, for now, this is a good\nrule of thumb:</p>\n\n<ul>\n<li><strong><em>Use <code>var</code>...</em></strong> never.</li>\n<li><strong><em>Use <code>let</code>...</em></strong> when you know the value of a variable will change. For\nexample, a <code>counter</code> variable that starts at <code>0</code> and is subsequently\nincremented to <code>1</code>, <code>2</code>, <code>3</code>, and so on. In the lessons on looping and\niteration in JavaScript, <code>let</code> will have its moment in the spotlight.</li>\n<li><strong><em>Use <code>const</code>...</em></strong> for <em>every</em> other variable.</li>\n</ul>\n\n<p>Best practice is to always declare variables with <code>const</code> and then, if you later\nrealize that the value has to change over the course of your program, circle\nback to change it to <code>let</code>.</p>\n\n<h2>Conclusion</h2>\n\n<p>We covered what a variable is, how to initialize and retrieve it, and how to\nassign or reassign its value. We also looked at best practices for naming\nvariables and for when to use <code>let</code>, <code>const</code>, and <code>var</code>.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#Variables\">MDN —&nbsp;Language basics crash course: Variables</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">MDN —&nbsp;<code>let</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">MDN —&nbsp;<code>const</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">MDN —&nbsp;<code>var</code></a></li>\n<li><a href=\"https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75\">JavaScript ES6+: <code>var</code>, <code>let</code>, or <code>const</code>?</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/JavaScript#History\">W3C - A Short History of JavaScript</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/ECMAScript#Versions\">Wikipedia - ECMAScript: Versions</a></li>\n</ul>",
			"exportId": "javascript-variables"
		},
		{
			"id": 432799,
			"title": "JavaScript Data Types",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-data-types\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define a data type</li>\n<li>Demonstrate basic type checking with the <code>typeof</code> operator</li>\n<li>Identify JavaScript's seven basic data types</li>\n<li>Describe interactions between data of various types in JavaScript</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Did you ever hear this song from educational TV?</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>One of these things is not like the others.\nOne of these things doesn't belong.\nCan you tell which thing is not like the other by the time\nI finish this song?\n</code></pre></div>\n<p>What this song is asking the young viewer to engage in is a pretty powerful\nbehavior: <em>abstraction</em>. It's looking at several <em>concrete</em> examples and finding\nsome sort of \"ideal\" that the <em>concrete</em> examples all have in common and using\nthat as a rule to find something that doesn't <em>quite</em> fit.</p>\n\n<p>Doing this is one of the most profound problems in philosophy and human\ndevelopment. No less an authority than Aristotle wrote a <a href=\"https://plato.stanford.edu/entries/aristotle-categories/\">whole book</a> on it\nand how humans do it (one of the essential reasons why he <a href=\"https://www.diffen.com/difference/Aristotle_vs_Plato\">differs</a> from his\nteacher, Plato).</p>\n\n<p>Who knew JavaScript would lead us to ancient Greece as well as \"Sesame Street?\"</p>\n\n<p>In JavaScript, <em>concrete</em> instances of data can be categorized into <em>abstract</em>\nnames called \"data types\" or, more simply, \"types.\"</p>\n\n<h2>What Is a Data Type?</h2>\n\n<p><strong><em>Everything in JavaScript is data</em></strong> except:</p>\n\n<ol>\n<li><strong>Operators</strong>: <code>+</code>, <code>!</code>, <code>&lt;=</code>, etc.</li>\n<li><strong>Reserved words</strong>: <code>function</code>, <code>for</code>, <code>debugger</code>, etc.</li>\n</ol>\n\n<p>Every piece of data falls into one of JavaScript's seven data types: numbers,\nstrings, booleans, symbols, objects, <code>null</code>, and <code>undefined</code>.</p>\n\n<h2>Basic Type Checking Using the <code>typeof</code> Operator</h2>\n\n<p>Throughout this lesson, we'll use the <code>typeof</code> operator to give us an idea of\nwhat data types we're dealing with. <code>typeof</code> accepts one argument, the piece of\ndata that we'd like to know the <em>type of</em>.</p>\n\n<blockquote>\n<p><strong>NOTE</strong> <code>typeof</code> is an operator, just like <code>+</code> or <code>!</code>. We get used to\noperators being only one character, but JavaScript (and many other languages)\nhave operators with <strong><em>more than one</em></strong> character. Because it's an operator,\n<strong>we don't need parentheses with <code>typeof</code></strong>. That said, JavaScript also\nsupports <code>()</code> after <code>typeof</code>, but it's commonly not done.</p>\n</blockquote>\n\n<h2>Identify JavaScript's Seven Basic Data Types</h2>\n\n<h3>Numbers</h3>\n\n<p>Some programming languages divide numbers up into integers, decimals, doubles,\nfloats, and so on. They do this so that they can have higher <em>precision</em> in\ntheir calculations. In a banking application or airplane wing engineering\napplication we want our interest rate or the curve of the wing to be <strong><em>as\naccurate as possible</em></strong>. For good reason: we want to make sure we get paid or\nhave a safe plane! When JavaScript was created, this level of precision was not\nthought to be a thing that would be needed, so JavaScript only has a single,\nall-encompassing number type:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">typeof</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"number\"</span>\n\n<span class=\"k\">typeof</span> <span class=\"mf\">3.141592653589793</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"number\"</span>\n\n<span class=\"k\">typeof</span> <span class=\"mi\">5</span><span class=\"nx\">e</span><span class=\"o\">-</span><span class=\"mi\">324</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"number\"</span>\n\n<span class=\"k\">typeof</span> <span class=\"o\">-</span><span class=\"kc\">Infinity</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"number\"</span>\n</code></pre></div>\n<blockquote>\n<p><strong>Think About This:</strong> As JavaScript has become a language for the back end as\nwell as the front end, its imprecision around numbers keeps it from entering\nmany banking or engineering applications where precision is vital.</p>\n</blockquote>\n\n<h3>Strings</h3>\n\n<p>Strings are how we represent text in JavaScript. A string consists of a matching\npair of <code>'single quotes'</code>, <code>\"double quotes\"</code>, or <code>`backticks`</code> with zero or\nmore characters in between:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">typeof</span> <span class=\"dl\">\"</span><span class=\"s2\">I am a string.</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"string\"</span>\n\n<span class=\"k\">typeof</span> <span class=\"dl\">'</span><span class=\"s1\">Me too!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"string\"</span>\n\n<span class=\"k\">typeof</span> <span class=\"s2\">`Me three!`</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"string\"</span>\n</code></pre></div>\n<p>Even empty strings are strings:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">typeof</span> <span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"string\"</span>\n</code></pre></div>\n<h3>Booleans</h3>\n\n<p>A boolean can only be one of two possible values: <code>true</code> or <code>false</code>. Booleans\nplay a big role in <code>if</code> statements and looping in JavaScript.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">typeof</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"boolean\"</span>\n\n<span class=\"k\">typeof</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"boolean\"</span>\n</code></pre></div>\n<h3>Objects</h3>\n\n<p>A JavaScript object, unlike the types we've looked at so far, is a <em>collection</em>\nof data rather than a single value. An object consists of a list of properties,\nwrapped in curly braces <code>{}</code> and separated by commas. Each property in the list\nconsists of a name — also known as a <code>key</code> — which points to a value:\n<code>\"name\": \"JavaScript\"</code>. The example below has four properties, with the names\n(or <code>key</code>s) \"name\", \"createdBy\", \"firstReleased\", and \"isAwesome\":</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">js</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">JavaScript</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">createdBy</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Brendan</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Eich</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">firstReleased</span><span class=\"p\">:</span> <span class=\"mi\">1995</span><span class=\"p\">,</span>\n  <span class=\"na\">isAwesome</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">typeof</span> <span class=\"p\">{};</span>\n<span class=\"c1\">//=&gt; \"object\"</span>\n</code></pre></div>\n<p>A dictionary is a good metaphor here: an object is a collection of terms (the\nnames or keys) and their definitions (the values). In fact, the programming\nlanguage Python has a similar data type which is called a dictionary.</p>\n\n<p>Note that objects' properties can point to values of any data type. In the\nexample above, the properties have values of four different types: a string, a\nnumber, a boolean, and another object!</p>\n\n<h3>Arrays</h3>\n\n<p>Technically, Arrays are not a data type in JavaScript — they are instead a\nspecial case of the object data type. However, because they are used quite\nfrequently in JavaScript code, we are including them here.</p>\n\n<p>An array is just a list of values enclosed in square brackets: <code>[\"Byron\",\n\"Cubby\", \"Boo Radley\", \"Luca\"]</code>. As with objects, the values can be of any data\ntype.</p>\n\n<p>If we check the data type of our array, we can confirm that arrays are really\nobjects in JavaScript:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">dogs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Byron</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Cubby</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Boo Radley</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Luca</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"k\">typeof</span> <span class=\"nx\">dogs</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"object\"</span>\n</code></pre></div>\n<p>This may seem strange at first, but will make more sense as we learn more about\nobjects and arrays in future lessons.</p>\n\n<h3><code>null</code></h3>\n\n<p>The <code>null</code> data type represents an intentionally absent object. For example, if\na piece of code returns an object when it successfully executes, we could have\nit return <code>null</code> in the event of an error. Confusingly, the <code>typeof</code> operator\nreturns <code>\"object\"</code> when called with <code>null</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">typeof</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"object\"</span>\n</code></pre></div>\n<h3><code>undefined</code></h3>\n\n<p>The bane of many JS developers, <code>undefined</code> is a bit of a misnomer. Instead of\n'not defined,' it actually means something more like 'not yet assigned a value.'</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">typeof</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"undefined\"</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">unassignedVariable</span><span class=\"p\">;</span>\n<span class=\"k\">typeof</span> <span class=\"nx\">unassignedVariable</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"undefined\"</span>\n\n<span class=\"nx\">unassignedVariable</span> <span class=\"o\">=</span> <span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n<span class=\"k\">typeof</span> <span class=\"nx\">unassignedVariable</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"string\"</span>\n</code></pre></div>\n<p>Any variable declared but not defined will be <code>undefined</code> until a value is assigned.</p>\n\n<blockquote>\n<p><strong><em>Top Tip</em></strong>: When writing JavaScript code, it's good practice to <strong><em>never</em></strong>\nset a variable equal to <code>undefined</code>. Variables will be <code>undefined</code> until we\nexplicitly assign a value, so encountering an <code>undefined</code> variable is a strong\nsignal that the variable was declared but not assigned prior to the reference.\nThat's valuable information that we can use while debugging, and it comes at\nno additional cost to us.</p>\n</blockquote>\n\n<h3>Symbols</h3>\n\n<p>Symbols are a relatively new data type (introduced in ES2015) that's primarily\nused as an alternative way to add properties to objects. Don't worry about\nsymbols for now.</p>\n\n<h3>Primitive Types</h3>\n\n<p>Six of the seven JavaScript data types — everything except object — are\n<strong>primitive</strong>. All this means is that they represent <em>single</em> values, such as\n<code>7</code> or <code>\"hello\"</code> or <code>false</code>, instead of a collection of values.</p>\n\n<h2>How Different JavaScript Data Types Interact</h2>\n\n<p>Every programming language has its own rules governing the ways in which we can\noperate on data of a given type. For example, it's rather uncontroversial that\nnumbers can be subtracted from other numbers...</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 1</span>\n</code></pre></div>\n<p>...and that strings can be added to other strings:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"dl\">\"</span><span class=\"s2\">Hello</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">, </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"s2\">`world!`</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Hello, world!\"</span>\n</code></pre></div>\n<p>But what happens if you mix them?</p>\n\n<p>Some programming languages, such as Python, are strict about how data of\ndifferent types can interact, and they will refuse to compile a program that\nblends types. Well, that's rather strict.</p>\n\n<p>Other languages, such as Ruby, will attempt to handle the interaction by\nconverting one of the data types so all data is of the same type. For example,\ninstead of throwing an error when an integer (<code>3</code>) is added to a floating-point\nnumber (<code>0.14159</code>), Ruby will simply convert the integer into a floating-point\nnumber and correctly calculate the sum:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mf\">0.14159</span>\n<span class=\"c1\">#=&gt; 3.14159</span>\n</code></pre></div>\n<p>Ruby throws errors when some stranger cases come up:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"s2\">\"THX-\"</span> <span class=\"o\">+</span> <span class=\"mi\">1138</span>\n<span class=\"c1\">#=&gt; TypeError: no implicit conversion of Fixnum into String</span>\n</code></pre></div>\n<p>That seems pretty reasonable: Ruby won't make the <code>Integer</code>, <code>1138</code>, into a\n<code>String</code> without being directly told that you want it to be a <code>String</code> (same as\nPython's rule).</p>\n\n<p>That seems like a good baseline. JavaScript, on the other hand, is a little\n<em>too</em> nice when handling conflicting data types. <strong>No matter what weird\ncombination of types you give it, JavaScript won't throw an error and will\nreturn <em>something</em> (though that <em>something</em> might make no sense at all).</strong></p>\n\n<p>Sometimes it makes <em>some</em> sense:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"dl\">\"</span><span class=\"s2\">High </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"High 5!\"</span>\n</code></pre></div>\n<p>...and sometimes it's downright <a href=\"https://www.destroyallsoftware.com/talks/wat\">comical</a>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kc\">null</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">// null to the power of 2</span>\n<span class=\"c1\">//=&gt; 0</span>\n\n<span class=\"kc\">undefined</span> <span class=\"o\">**</span> <span class=\"kc\">null</span><span class=\"p\">;</span> <span class=\"c1\">// undefined to the power of null</span>\n<span class=\"c1\">//=&gt; 1</span>\n\n<span class=\"p\">{}</span><span class=\"o\">+</span><span class=\"p\">{};</span> <span class=\"c1\">// empty object plus empty object</span>\n<span class=\"c1\">//=&gt; \"[object Object][object Object]\" &lt;-- That's a string!</span>\n</code></pre></div>\n<p>Why JavaScript returns a string when we ask it to add two empty objects is\nanyone's guess, but its heart is in the right place. The language always tries\nto bend over backwards for us, returning actionable data instead of throwing\nerrors. However, JavaScript's eagerness occasionally results in data type issues\nthat surprise novice and expert programmers alike.</p>\n\n<p>Try to follow along with what's happening here:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 15</span>\n\n<span class=\"dl\">\"</span><span class=\"s2\">1</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"12345\"</span>\n\n<span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"12345\"</span>\n\n<span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">3</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"3345\"</span>\n\n<span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">4</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"645\"</span>\n\n<span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">5</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"105\"</span>\n</code></pre></div>\n<p>As long as we are only adding numbers to other numbers, JavaScript performs the\nexpected addition. However, as soon as we throw a string in the mix, we stop\nadding and start concatenating everything together into a string. Let's take a\nlook at an example to see how this works:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">3</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"3345\"</span>\n</code></pre></div>\n<p>First, we add the numbers <code>1</code>and <code>2</code> together to get <code>3</code> (a number). We then ask\nJavaScript to add <code>3</code> (a number) to <code>\"3\"</code> (a string). JavaScript can't perform\naddition with a string, so it decides to concatenate the two operands instead,\nresulting in <code>\"33\"</code> (a string). The next operation, <code>\"33\" + 4</code>, is also between\na string and a number, and JavaScript once again concatenates, giving us the\nresult of <code>\"334\"</code> (a string). In the final operation, we're adding <code>\"334\"</code> with\n<code>5</code> (a number). Again, JavaScript concatenates, giving the final result of\n<code>\"3345\"</code>.</p>\n\n<p>You'll encounter a lot of these weird data type behaviors throughout your\nJavaScript programming, but fear not: they'll trip you up less and less often as\nyou gain experience.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson we've learned about data types, which are abstractions used to\ncategorize pieces of information, or data. JavaScript defines seven different\ntypes: numbers, strings, booleans, symbols, objects, <code>null</code>, and <code>undefined</code>.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">MDN — JavaScript data types and data structures</a></li>\n<li><a href=\"https://www.destroyallsoftware.com/compendium/types?share_key=baf6b67369843fa2\">Destroy All Software — Types</a> – A cross-language examination of type in various languages</li>\n<li><a href=\"https://www.destroyallsoftware.com/talks/wat\">Destroy All Software — Wat</a> – A beloved <strong><em>and hilarious</em></strong> talk in which JavaScript's friendliness when mixing types is discussed at a feverish pace – with awesome slides</li>\n</ul>",
			"exportId": "javascript-data-types"
		},
		{
			"id": 432801,
			"title": "Working With Strings",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-working-with-strings\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-working-with-strings\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-working-with-strings/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Recognize how to declare a <code>String</code></li>\n<li>Define <em>interpolation</em></li>\n<li>Explain how different quote characters allow flexibility</li>\n<li>Join <code>String</code>s using <code>+</code></li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Thus far in programming as conversation, we've used numbers as data most of the\ntime. Numbers are great because they reach across languages and cultures. But\nthere are times when we need our programs to return information in the form of\ntext. In this lesson, we'll learn more about using text (i.e. <code>String</code>s) in our\nJavaScript expressions.</p>\n\n<h2>Recognize How to Declare a <code>String</code></h2>\n\n<p>We declare <code>String</code>s most often by enclosing our text in double quotes:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello, folks</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The letters inside of a <code>String</code> are often called \"characters.\"</p>\n\n<p>The pair of matching <code>\"</code>s are called \"<code>String</code> delimiters\" because they form a\nboundary or <em>limit</em> around the characters that make up the <code>String</code>.</p>\n\n<p>We can also declare <code>String</code>s by putting the characters in single quotes:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Hello, folks</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>or backticks:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">`Hello, folks`</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Single quotes and double quotes can be used interchangeably in JavaScript — they\nare treated the same. Using backticks to enclose a string, however, brings some\nadditional capabilities. A string enclosed in backticks forms a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literal</a>,\nwhich allows you to <em>interpolate</em> data into the <code>String</code>.</p>\n\n<h2>Define <em>interpolation</em></h2>\n\n<p>String <em>interpolation</em> is the process of injecting the value of an expression\n(often, but not necessarily, the <em>variable lookup expression</em>) into a <code>String</code>.\nYou wrap the expression inside the <em>interpolation operator</em> which lets\nJavaScript know that it should interpret the value of the expression, convert it\nto a <code>String</code> if necessary, and insert it into the containing <code>String</code> where the\n<em>interpolation operator</em> appeared.</p>\n\n<p>The <em>interpolation operator</em> looks like this: <code>${}</code>. When it appears in a\nbacktick-delimited <code>String</code>, the return value of the expression inside the\noperator is \"plugged in\" to the containing <code>String</code>.</p>\n\n<p>In a single or double-quoted <code>String</code> there is no interpolation possible.\nJavaScript would not interpret the value inside the <code>${}</code>; instead, it would\ncreate a literal string containing the operator and whatever expression is\ninside it.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">barkCount</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">backtick</span> <span class=\"o\">=</span> <span class=\"s2\">`Spinach barks </span><span class=\"p\">${</span><span class=\"nx\">barkCount</span><span class=\"p\">}</span><span class=\"s2\"> times`</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinach barks 3 times\"</span>\n<span class=\"kd\">const</span> <span class=\"nx\">singleQuote</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Spinach barks ${barkCount} times</span><span class=\"dl\">'</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinach barks ${barkCount} times\"</span>\n<span class=\"kd\">const</span> <span class=\"nx\">doubleQuote</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach barks ${barkCount} times</span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinach barks ${barkCount} times\"</span>\n</code></pre></div>\n<p>The expression inside the <code>${}</code> does not need to be a variable lookup. Any\nexpression, i.e., any statement that returns a value, can be used:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">spinach</span> <span class=\"o\">=</span> <span class=\"s2\">`Spinach is </span><span class=\"p\">${</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">}</span><span class=\"s2\"> years old`</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinach is 5 years old\"</span>\n</code></pre></div>\n<p>Here JavaScript knows to interpret the value inside the interpolation operator\nbecause the string is enclosed in backticks. It evaluates the expression\n(<code>2 + 3</code> yields the value <code>5</code>), turns the result into a string and inserts it in\nplace.</p>\n\n<h2>Explain How Different Quote Characters Allow Flexibility</h2>\n\n<p>What if you needed to store some <em>dialog</em> as a <code>String</code>:</p>\n\n<p>In the book it would look like:</p>\n\n<blockquote>\n<p>\"Wait,\" said Jo, \"Do not go without me!\"</p>\n</blockquote>\n\n<p>If we want to create a string containing this text, we might try wrapping the\nwhole thing in quotes, like this:</p>\n\n<blockquote>\n<p>\"\"Wait,\" said Jo, \"Do not go without me!\"\"</p>\n</blockquote>\n\n<p>However, because <code>\"</code> is the <code>String</code> delimiter, JavaScript would get confused.\nIt would attempt to end the <code>String</code> right before the <code>W</code> as the two <code>\"</code>s\n\"delimit\" the <code>String</code>. Not what we wanted.</p>\n\n<p>To fix this, we can use single quotes as our delimiter instead:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">littleWomanEsque</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">\"Wait,\" said Jo, \"Do not go without me!\"</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Because the opening delimiter of the <code>String</code> was <code>'</code>, JavaScript will \"close\"\nthe <code>String</code> at the next <code>'</code> — at the very end. Inside of the single quotes, the\n<code>\"</code> loses its meaning of \"here's a <code>String</code>\" and, instead, is just a plain\nliteral, letter-like character <code>\"</code>.</p>\n\n<p>But oh my goodness, what if the speaker said <code>Don't</code> instead of <code>Do not</code>. That\nwould break our <code>String</code> <em>again</em> as JavaScript attempted to use the <code>'</code> inside\n<code>Don't</code> as the closing delimiter.</p>\n\n<p>Sometimes we need to tell JavaScript, \"Don't use this <code>'</code> or <code>\"</code> as a <code>String</code>\ndelimiter. To do this we need <em>escaping</em>.</p>\n\n<p>We can \"escape\" the power of <code>\"</code> or <code>'</code> to close a <code>String</code> by putting a <code>\\</code> in\nfront of it:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">littleWomanEsque</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">\"Wait,\" said Jo, \"Don</span><span class=\"se\">\\'</span><span class=\"s1\">t go without me!\"</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Without the backslash, JavaScript would interpret the apostrophe inside\n<code>\"Don't\"</code> as the end of the string, and we'd end up with a mess. <strong><em>BUT</em></strong> since\nthere is a <code>\\</code> immediately before the second <code>'</code> (the apostrophe), thus\n<em>escaping</em> it, JavaScript says \"Oh you mean to use this as a character, not as a\n<code>String</code> delimiter. I'll find the next unescaped <code>'</code>.\"</p>\n\n<p>It doesn't find an unescaped <code>'</code> until the very end, just like we want.</p>\n\n<h2>Join <code>String</code>s using <code>+</code></h2>\n\n<p>We already know that we can use <code>+</code> as an arithmetical operator to add two\n<code>Number</code>s together. But we can also use it as a <code>String</code> operator: when placed\nbetween two <code>String</code>s, it joins them and returns a <strong><em>new</em></strong> <code>String</code>.</p>\n\n<p>You may want to follow along with the examples in\n<a href=\"https://replit.com/languages/javascript\">replit</a>. Remember to use the console\nwindow (the one on the right), and that, if you get an error, you can \"reset\"\nthe console by clicking the run button.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinachius</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">clanName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Karbitus</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">commonName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Maris</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">fullName</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// With +</span>\n<span class=\"nx\">fullName</span> <span class=\"o\">=</span> <span class=\"nx\">firstName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">clanName</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\"> </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"nx\">commonName</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinachius Karbitus Maris\"</span>\n\n<span class=\"c1\">// Or, with interpolation</span>\n<span class=\"nx\">fullName</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\"> </span><span class=\"p\">${</span><span class=\"nx\">clanName</span><span class=\"p\">}</span><span class=\"s2\"> </span><span class=\"p\">${</span><span class=\"nx\">commonName</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinachius Karbitus Maris\"</span>\n\n<span class=\"c1\">// Keep in mind it returns a _new_ String; therefore:</span>\n<span class=\"nx\">firstName</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinachius\"</span>\n<span class=\"nx\">clanName</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Karbitus\"</span>\n<span class=\"nx\">commonName</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Maris\"</span>\n<span class=\"nx\">fullName</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinachius Karbitus Maris\"</span>\n</code></pre></div>\n<h3>A Warning About Mixing Data Types</h3>\n\n<p>Recall from the lesson on data types that JavaScript, unlike some other\nprogramming languages, will bend over backwards to return a value instead of\nthrowing a type error. This means that the following will work in JavaScript:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">fact</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach is </span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// fact is of type `String`</span>\n<span class=\"kd\">const</span> <span class=\"nx\">tail</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\"> years old</span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// tail is of type `String`</span>\n<span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"c1\">// age is of type `Number`</span>\n\n<span class=\"nx\">fact</span> <span class=\"o\">+</span> <span class=\"nx\">age</span> <span class=\"o\">+</span> <span class=\"nx\">tail</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinach is 5 years old\"</span>\n</code></pre></div>\n<p>If we were to try this in Ruby or Python, we would get an error, but JavaScript\nreturns what it <em>thinks</em> we meant to do. While in this case this seems pretty\nreasonable, there are times when JavaScript's behavior will yield unexpected\nresults. For this reason, best practice is <strong>not</strong> to depend on JavaScript to\nhandle mixed data types in this way. A better way to handle this situation is by\nusing interpolation instead:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">fact</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach is</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">tail</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">years old</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n<span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">fact</span><span class=\"p\">}</span><span class=\"s2\"> </span><span class=\"p\">${</span><span class=\"nx\">age</span><span class=\"p\">}</span><span class=\"s2\"> </span><span class=\"p\">${</span><span class=\"nx\">tail</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinach is 5 years old\"</span>\n</code></pre></div>\n<p>Here, by using backticks and the interpolation operator, we are explicitly\ntelling JavaScript to <em>interpret</em> the expression inside the <code>${}</code>, convert it to\na string (if necessary), and insert it into our String.</p>\n\n<p>Another alternative is to use JavaScript's <code>toString()</code> method:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">fact</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach is </span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// fact is of type `String`</span>\n<span class=\"kd\">const</span> <span class=\"nx\">tail</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\"> years old</span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// tail is of type `String`</span>\n<span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"c1\">// age is of type `Number`</span>\n\n<span class=\"nx\">fact</span> <span class=\"o\">+</span> <span class=\"nx\">age</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"nx\">tail</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; \"Spinach is 5 years old\"</span>\n</code></pre></div>\n<h2>When to Use <code>+</code> vs. <code>${}</code></h2>\n\n<p>The choice of whether to use <code>+</code> or interpolation is, to a certain extent, a\nmatter of personal preference — you can accomplish what you need to using either\nmethod. That said, however, JavaScript programmers tend to use interpolation\nmore often than <code>+</code>. As you gain experience working with strings, you may find\nthat using interpolation results in cleaner code that's easier to read. As a\ngeneral rule, if the string you're constructing is simple and short, using <code>+</code>\nmay be cleaner but you may want to consider using interpolation with more\ncomplex strings.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we learned how to declare <code>String</code>s, how to interpolate the\nvalue of expressions into <code>String</code>s, how to use different quote delimiters and\nescaping to create more complicated <code>String</code>s, and a couple different methods\nfor joining <code>String</code>s.</p>",
			"exportId": "working-with-strings"
		},
		{
			"id": 432802,
			"title": "Boolean Expressions",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-booleans\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Explain What a Boolean Expression Is</li>\n<li>Describe Truthy and Falsey Values in JavaScript</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Quite commonly in our computer programs, we want to execute code\n<em>conditionally</em>, i.e., if some condition is true (or false). For example:</p>\n\n<ul>\n<li><em>If</em> the user has entered the correct login credentials, <em>then</em> log them into\nour web app</li>\n<li><em>If</em> there isn't enough money in the user's account to execute the transfer,\n<em>then</em> send them an error message</li>\n</ul>\n\n<p>In the following lessons, we will learn about operators we can use to construct\nthose conditional statements. Before we get to that, however, we need to\nunderstand <em>boolean expressions</em> and the concepts of <em>truthy-ness</em> and\n<em>falsey-ness</em>.</p>\n\n<h2>Explain What a Boolean Expression Is</h2>\n\n<p>We have learned that <em>expressions</em> are code statements that return a value: the\n<em>constant expression</em> returns the value of the constant, the <em>assignment\nexpression</em> returns the value that is assigned, and the <em>variable lookup\nexpression</em> returns the value of a variable. We have also learned that\nJavaScript has a <code>Boolean</code> data type that has only two values: <code>true</code> or\n<code>false</code>. As you might expect, therefore, a <em>Boolean expression</em> is an expression\nthat returns either <code>true</code> or <code>false</code>.</p>\n\n<h2>Describe the Difference Between Truthy and Falsey Values</h2>\n\n<p>All values in Javascript, of any data type (<code>String</code>, <code>Number</code>, etc.), are\ntreated as either <em>truthy</em> or <em>falsey</em>. The following values are <strong>falsey</strong>:</p>\n\n<ul>\n<li><code>false</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>0</code></li>\n<li><code>NaN</code></li>\n<li>An empty string (<code>\"\"</code>, <code>''</code>)</li>\n</ul>\n\n<p><strong><em>Every other value is truthy</em></strong>.</p>\n\n<p>To check whether a value is truthy or falsey, we can pass it to the global\n<code>Boolean</code> object, which converts the value into its boolean equivalent. You may\nwant to try these out yourself in\n<a href=\"https://replit.com/languages/javascript\">replit</a>.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">NaN</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"nb\">Boolean</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; true</span>\n</code></pre></div>\n<p>Don't worry if this seems a little theoretical at this point. We will learn how\nthis information is used in constructing Boolean expressions in the following\nlessons.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we've learned what a <em>Boolean expression</em> is. We've also learned\nwhich values in JavaScript are considered <em>truthy</em> and which are considered\n<em>falsey</em>. With these understandings, we are now ready to learn how to construct\nBoolean expressions that return <code>true</code> or <code>false</code>.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\">Truthy</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsey</a></li>\n</ul></li>\n</ul>",
			"exportId": "boolean-expressions"
		},
		{
			"id": 432803,
			"title": "Comparisons in JavaScript",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-comparisons-in-javascript\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify equality operators</li>\n<li>Compare numbers using relational operators</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Now that we know what <em>Boolean expressions</em> are we'll start learning how to\ncreate them. In this lesson we'll learn about comparison operators, which enable\nus to check to see if a value is what we're expecting. Follow along with the\nexamples below in <a href=\"https://replit.com/languages/javascript\">replit</a>.</p>\n\n<p><strong>Note:</strong> JavaScript includes both <em>strict</em> and <em>loose</em> comparison operators.\nWhen writing JavaScript, you should strongly prefer the <strong>strict</strong> operators.</p>\n\n<p>The reason for this is the loose operators will return true even if the data\ntypes aren't the same, which can result in unexpected behavior and bugs that can\nbe difficult to track down. Even if you find you need to compare two values of\ndifferent data types, you should avoid using loose operators. You will be better\noff converting the data type of one of the variables so they have the same type,\nthen comparing them using a strict operator.</p>\n\n<h2>Identify equality operators</h2>\n\n<p>JavaScript includes four equality operators:</p>\n\n<ul>\n<li><strong>strict equality operator</strong> (<code>===</code>)</li>\n<li><strong>strict inequality operator</strong> (<code>!==</code>)</li>\n<li><strong>loose equality operator</strong> (<code>==</code>)</li>\n<li><strong>loose inequality operator</strong> (<code>!=</code>)</li>\n</ul>\n\n<p>These operators allow us to compare values and determine whether they are the\nsame.</p>\n\n<h3>Strict Equality Operator <code>===</code> and Strict Inequality Operator <code>!==</code></h3>\n\n<p>The <strong>strict equality operator</strong> returns <code>true</code> if two values are equal <em>without\nperforming type conversions</em>. Even if the values on both sides of the operator\nlook similar (e.g., <code>'42' === 42</code>), the <code>===</code> operator will only return <code>true</code>\nif the data types also match:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">42</span> <span class=\"o\">===</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"mi\">42</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">42</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"kc\">true</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"dl\">\"</span><span class=\"s2\">0</span><span class=\"dl\">\"</span> <span class=\"o\">===</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"kc\">null</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"dl\">\"</span><span class=\"s2\"> </span><span class=\"dl\">\"</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n</code></pre></div>\n<p>This is logical and accurate!</p>\n\n<p>The <strong>strict inequality operator</strong> returns <code>true</code> if two values are <em>not</em> equal\n<em>without</em> performing type conversions:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">9000</span> <span class=\"o\">!==</span> <span class=\"mi\">9001</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"mi\">9001</span> <span class=\"o\">!==</span> <span class=\"dl\">'</span><span class=\"s1\">9001</span><span class=\"dl\">'</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"p\">[]</span> <span class=\"o\">!==</span> <span class=\"dl\">''</span>\n<span class=\"c1\">// =&gt; true</span>\n</code></pre></div>\n<p><strong><em>You should prefer <code>===</code> and <code>!==</code> for comparisons</em></strong>.</p>\n\n<h3>Loose Equality Operator <code>==</code> and Loose Inequality Operator <code>!=</code></h3>\n\n<p>The <strong>loose equality operator</strong> returns <code>true</code> if two values are equal:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">42</span> <span class=\"o\">==</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n</code></pre></div>\n<p>However, it will <em>also</em> return <code>true</code> if it can perform a type conversion (e.g.,\nchanging the string <code>'42'</code> into the number <code>42</code>) that makes the two values\nequal:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">42</span> <span class=\"o\">==</span> <span class=\"dl\">\"</span><span class=\"s2\">42</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"kc\">true</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"dl\">\"</span><span class=\"s2\">0</span><span class=\"dl\">\"</span> <span class=\"o\">==</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"kc\">null</span> <span class=\"o\">==</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"dl\">\"</span><span class=\"s2\"> </span><span class=\"dl\">\"</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n</code></pre></div>\n<p>The <strong>loose inequality operator</strong> is the opposite of <code>==</code>. It returns <code>true</code> if\ntwo values are <em>not</em> equal, performing type conversions as necessary:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">9000</span> <span class=\"o\">!=</span> <span class=\"mi\">9001</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"mi\">9001</span> <span class=\"o\">!=</span> <span class=\"dl\">'</span><span class=\"s1\">9001</span><span class=\"dl\">'</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"p\">[]</span> <span class=\"o\">!=</span> <span class=\"dl\">''</span>\n<span class=\"c1\">// =&gt; false</span>\n</code></pre></div>\n<p>This is confusing and inaccurate! It makes no sense that the string <code>'0'</code> is\nequal to the boolean <code>false</code> or that <code>null</code> and <code>undefined</code> — two <strong>completely\ndifferent</strong> data types — are equivalent.</p>\n\n<p><strong><em>You should prefer <code>===</code> and <code>!==</code> for comparisons</em></strong>. There are <a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">a lot of\nrules</a> that JavaScript follows when performing type coercion\nusing the <code>==</code> operator, and it's not worth keeping track of them all.</p>\n\n<h2>Compare Numbers with Relational Operators</h2>\n\n<p>JavaScript includes four relational operators:</p>\n\n<ul>\n<li><strong>greater than</strong> (<code>&gt;</code>)</li>\n<li><strong>greater than or equals</strong> (<code>&gt;=</code>)</li>\n<li><strong>less than</strong> (<code>&lt;</code>)</li>\n<li><strong>less than or equals</strong> (<code>&lt;=</code>)</li>\n</ul>\n\n<p>The behavior of these operators is consistent with the meaning of the\ncorresponding symbols in mathematics:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">88</span> <span class=\"o\">&gt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"mi\">88</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">88</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"mi\">88</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n</code></pre></div>\n<p>However, beware of type conversion when comparing non-numbers against numbers.\nFor instance, when a string is compared with a number, the JavaScript engine\ntries to convert the string to a number:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">88</span> <span class=\"o\">&gt;</span> <span class=\"dl\">\"</span><span class=\"s2\">9</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n</code></pre></div>\n<p>If the engine can't convert the string into a number, the comparison will always\nreturn <code>false</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">88</span> <span class=\"o\">&gt;=</span> <span class=\"dl\">\"</span><span class=\"s2\">hello</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"mi\">88</span> <span class=\"o\">&lt;=</span> <span class=\"dl\">\"</span><span class=\"s2\">hello</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n</code></pre></div>\n<p>Strings are compared with other strings lexicographically, meaning\ncharacter-by-character from left-to-right. The following returns <code>false</code> because\nthe Unicode value of <code>8</code>, the first character in <code>88</code>, is less than the Unicode\nvalue of <code>9</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"dl\">\"</span><span class=\"s2\">88</span><span class=\"dl\">\"</span> <span class=\"o\">&gt;</span> <span class=\"dl\">\"</span><span class=\"s2\">9</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n</code></pre></div>\n<p>If you aren't sure what data type you are going to be receiving, but you still\nneed to compare them, make sure that you tell JavaScript to <a href=\"https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/\">convert the string\nto a number\nfirst</a>,\nand then compare.</p>\n\n<blockquote>\n<p><strong>Top Tip</strong>: Stick to comparing <em>numerical</em> values with the relational\noperators and you'll be golden.</p>\n</blockquote>\n\n<h2>Conclusion</h2>\n\n<p>JavaScript contains both equality and relational operators that we can use in\nwriting code to compare two values. The resulting statements are <em>Boolean\nexpressions</em> — they always return <code>true</code> or <code>false</code>.</p>\n\n<p>Make sure you're using the strict equality operators whenever possible, and only\ncomparing numerical values using the relational operators, and you'll avoid\nannoying errors that can be time consuming to troubleshoot!</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">Comparison operators</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality comparisons and sameness</a></li>\n</ul></li>\n<li><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\">JavaScript Equality Table</a></li>\n<li><a href=\"https://forum.freecodecamp.org/t/javascript-comparison-operators/14660\">freeCodeCamp Forum —&nbsp;JavaScript Comparison Operators</a></li>\n</ul>",
			"exportId": "comparisons-in-javascript"
		},
		{
			"id": 432804,
			"title": "Logical Operators",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-logical-operators\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Describe how to use <code>!</code> to negate an expression</li>\n<li>Describe how to convert an expression to a Boolean using <code>!!</code></li>\n<li>Define the <code>&amp;&amp;</code> and <code>||</code> operators</li>\n<li>Describe how to link conditions using the <code>&amp;&amp;</code> and <code>||</code> operators</li>\n<li>Practice What We Learned</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In this lesson, we will continue to expand our tool set for creating Boolean\nexpressions by learning about logical operators. Using JavaScript's three\nlogical operators, NOT (<code>!</code>), AND (<code>&amp;&amp;</code>), and OR (<code>||</code>), we'll learn how to\nnegate and combine expressions. These operators, in combination with the\nequality and relational operators we learned earlier, will enable us to create\nmore complex and sophisticated Boolean expressions.</p>\n\n<h2>Describe How to Use <code>!</code> to Negate an Expression</h2>\n\n<h3><code>!</code> NOT</h3>\n\n<p>In an earlier lesson, we learned about truthy and falsey values in JavaScript.\nThe logical NOT operator (<code>!</code>), also called the <em>bang operator</em>, operates on an\nexpression, returning the opposite of the expression's truthiness. If <code>x</code>\nresolves to a truthy value, <code>!x</code> returns <code>false</code>. If <code>x</code> is falsey, <code>!x</code> returns\n<code>true</code>. Let's add the following code into our REPL and see what the values are.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">truthyValue</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">This value is truthy.</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">falseyValue</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"o\">!</span><span class=\"nx\">truthyValue</span><span class=\"p\">;</span>\n</code></pre></div>\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>Verify the above code works in the REPL console. You will see the bang operator\nin action, returning the reverse of <code>truthyValue</code>'s truthiness. Be sure to\nverify that it works for <code>falseyValue</code> as well. Remember to click the run\nbutton to reset the console if you get an error or want to clear out the code.</p>\n\n<h2>Describe How to Convert an Expression to a Boolean Using <code>!!</code></h2>\n\n<p>In an earlier lesson, we passed values into the <code>Boolean()</code> <em>constructor\nfunction</em> to check their truthiness. We'll learn all about constructor functions\nlater in the course; for now, just think of <code>Boolean()</code> as a function that takes\nin some input, <em>constructs</em> a new Boolean from that input, and outputs the newly\nconstructed Boolean.</p>\n\n<p>As a shorter way to convert any value into a Boolean, we can use two NOT\noperators. Let's try running <code>!!truthyValue</code> in our console to see the difference.</p>\n\n<p>The JavaScript engine reads from left to right: it sees the first <code>!</code> and looks\nto the right to check what we're asking it to invert (<code>!truthyValue</code>). It then\nsees the second <code>!</code> and looks to the right <em>again</em>, this time finding our\n<code>truthyValue</code> variable. At this point, the engine resolves <code>truthyValue</code> to\n<code>\"This value is truthy.\"</code>, which (as it tells us) is truthy. It then executes\nthe inner <code>!</code> operator on it. <code>!truthyValue</code> returns <code>false</code>, so instead of\n<code>!!truthyValue</code> JavaScript is now evaluating <code>!false</code>. Executing the outer <code>!</code>\noperator on <code>false</code> returns <code>true</code>.</p>\n\n<p>Try inverting various values in the REPL above to get a feel for the NOT\noperator. See what happens when you stack a ton of them: <code>!!!!!!!!!truthyValue</code>.</p>\n\n<p>On to the next!</p>\n\n<h2>Define the <code>&amp;&amp;</code> and <code>||</code> Operators</h2>\n\n<h3><code>&amp;&amp;</code> (AND)</h3>\n\n<p>The logical AND (<code>&amp;&amp;</code>) operator takes two expressions:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">expression1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">expression2</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The return value of the <code>&amp;&amp;</code> operator is always <strong>one of the two expressions</strong>.\nIf the first expression is falsey, <code>&amp;&amp;</code> returns the value of the first\nexpression. If the first expression is truthy, <code>&amp;&amp;</code> returns the value of the\nsecond expression.</p>\n\n<p>Again, if the first expression is falsey, <code>&amp;&amp;</code> returns that value and exits\n<em>without ever checking the second expression</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kc\">false</span> <span class=\"o\">&amp;&amp;</span> <span class=\"dl\">\"</span><span class=\"s2\">Anything</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"c1\">// 4 * 0 returns 0, which is falsey</span>\n<span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"dl\">\"</span><span class=\"s2\">Anything</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; 0</span>\n</code></pre></div>\n<p>If the first expression is truthy, <code>&amp;&amp;</code> then returns whatever the second\nexpression evaluates to:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kc\">true</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; false</span>\n\n<span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"dl\">\"</span><span class=\"s2\">Whatever</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; \"Whatever\"</span>\n\n<span class=\"dl\">\"</span><span class=\"s2\">The truthiest of truthy strings</span><span class=\"dl\">\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"mi\">9</span> <span class=\"o\">*</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; 81</span>\n</code></pre></div>\n<p>There are three different ways the <code>&amp;&amp;</code> operator can be evaluated:</p>\n\n<table><thead>\n<tr>\n<th>Left side</th>\n<th>Right side</th>\n<th>Return value</th>\n<th>Truthiness of return value</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>Falsey</td>\n<td>Doesn't matter</td>\n<td>Left side</td>\n<td>Falsey</td>\n</tr>\n<tr>\n<td>Truthy</td>\n<td>Falsey</td>\n<td>Right side</td>\n<td>Falsey</td>\n</tr>\n<tr>\n<td>Truthy</td>\n<td>Truthy</td>\n<td>Right side</td>\n<td>Truthy</td>\n</tr>\n</tbody></table>\n\n<ol>\n<li>If the left-side expression is falsey, the right-side expression doesn't\nmatter at all. The <code>&amp;&amp;</code> operator returns the left side's falsey value and\nfinishes.</li>\n<li>If the left-side expression is truthy, the <code>&amp;&amp;</code> operator returns the right\nside's value (whether it's truthy or falsey) and finishes.</li>\n</ol>\n\n<p>What this means is that the return value of the expression will be truthy if the\nvalues on either side of the <code>&amp;&amp;</code> are <em>both</em> truthy, and falsey otherwise.</p>\n\n<p>If you're feeling a little confused, that's ok. This is one of those concepts\nthat's a bit hard to understand unless you've played around with it in code. You\nwill have an opportunity to practice at the end of the lesson.</p>\n\n<h3><code>||</code> (OR)</h3>\n\n<p>The logical OR (<code>||</code>) operator also takes two expressions:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">expression1</span> <span class=\"o\">||</span> <span class=\"nx\">expression2</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>As with <code>&amp;&amp;</code>, the return value of the <code>||</code> operator is always <strong>one of the two\nexpressions</strong>. If the first expression is truthy, <code>||</code> returns the value of the\nfirst expression. If the first expression is falsey, <code>||</code> returns the value of\nthe second expression.</p>\n\n<p>If the first expression is truthy, that value is immediately returned and the\nsecond expression is never evaluated:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kc\">true</span> <span class=\"o\">||</span> <span class=\"dl\">\"</span><span class=\"s2\">Whatever</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"dl\">\"</span><span class=\"s2\">Whatever</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; 2</span>\n</code></pre></div>\n<p>If the first expression is falsey, <code>||</code> returns whatever the second expression\nevaluates to:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kc\">false</span> <span class=\"o\">||</span> <span class=\"dl\">\"</span><span class=\"s2\">Whatever</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; \"Whatever\"</span>\n\n<span class=\"mi\">1</span> <span class=\"o\">===</span> <span class=\"mi\">2</span> <span class=\"o\">||</span> <span class=\"mi\">8</span> <span class=\"o\">*</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; 64</span>\n\n<span class=\"dl\">\"\"</span> <span class=\"o\">||</span> <span class=\"dl\">\"</span><span class=\"s2\">Not </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">an </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">empty </span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; \"Not an empty string\"</span>\n</code></pre></div>\n<p>There are three different ways the <code>||</code> operator can be evaluated:</p>\n\n<table><thead>\n<tr>\n<th>Left side</th>\n<th>Right side</th>\n<th>Return value</th>\n<th>Truthiness of return value</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>Truthy</td>\n<td>Doesn't matter</td>\n<td>Left side</td>\n<td>Truthy</td>\n</tr>\n<tr>\n<td>Falsey</td>\n<td>Truthy</td>\n<td>Right side</td>\n<td>Truthy</td>\n</tr>\n<tr>\n<td>Falsey</td>\n<td>Falsey</td>\n<td>Right side</td>\n<td>Falsey</td>\n</tr>\n</tbody></table>\n\n<ol>\n<li>If the left-side expression is truthy, the right-side expression doesn't\nmatter at all. The <code>||</code> operator returns the left side's truthy value and\ncompletes.</li>\n<li>If the left-side expression is falsey, the <code>||</code> operator returns the right\nside's value (regardless of whether it's truthy or falsey) and completes.</li>\n</ol>\n\n<p>What this means is that the return value of the expression will be truthy if\n<em>one or both</em> of the values on either side of the <code>||</code> are truthy, and falsey\notherwise.</p>\n\n<h2>Practicing What We've Learned</h2>\n\n<p>Okay, let's get some practice with logical operators. Take a look at the first\nun-commented out line in the snippet below: <code>0 &amp;&amp; false;</code>. What do you think the\nexpression will return? Think it through and come up with an answer, then copy &amp;\npaste it into the REPL console and hit enter to check whether you're right. When\nyou're done with the first expression, work your way down through the remaining\nexpressions in turn. Be sure you think each example through and figure out your\nanswer before running the code.</p>\n\n<p>If you're having difficulty with the examples, try following this procedure:</p>\n\n<ol>\n<li>Evaluate each side of the operator individually: what is the <em>return value</em>\nof each individual expression, and what is the <em>truthiness</em> of each of those\nvalues?</li>\n<li>Find the corresponding row in the appropriate table above and refer to the\n'Return value' column to determine the return value of the full expression.</li>\n</ol>\n\n<p>Finally, once you're done with the provided expressions, experiment with some\nexamples of your own to cement your understanding.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">//What should each of the following expressions return? </span>\n<span class=\"c1\">//Once you have an answer, copy the expression in question into the console and hit enter to see if you're right!</span>\n\n<span class=\"c1\">// Practice with AND</span>\n<span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n<span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n\n<span class=\"kc\">true</span> <span class=\"o\">&amp;&amp;</span> <span class=\"kc\">NaN</span><span class=\"p\">;</span>\n\n<span class=\"kc\">true</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"o\">!</span><span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"dl\">\"</span><span class=\"s2\">This is a string</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"o\">!</span><span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n\n<span class=\"o\">!</span><span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!!</span><span class=\"dl\">\"\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Practice with OR</span>\n<span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n<span class=\"kc\">true</span> <span class=\"o\">||</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n<span class=\"kc\">true</span> <span class=\"o\">||</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"o\">!</span><span class=\"kc\">true</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"kc\">false</span>\n\n<span class=\"o\">!</span><span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"mi\">0</span>\n</code></pre></div>\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<h2>Conclusion</h2>\n\n<p>In the last few lessons, we've been introduced to powerful tools for creating\nBoolean expressions: comparison operators (equality and relational) and logical\noperators. With these tools, we can construct very sophisticated expressions. A\nbit later in the course, we will learn how to use these expressions to execute\ncode conditionally, which will enable us to implement powerful logic in our\nprograms.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/\">MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\">Logical operators</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals\">Review of conditionals, comparisons, and logical operators</a></li>\n</ul>",
			"exportId": "logical-operators"
		},
		{
			"id": 432806,
			"title": "Programming with Expressions",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-programming-with-expressions\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Use the code window in replit to try out code</li>\n<li>Identify the Ternary Expression</li>\n<li>Write a program with conditional logic using expressions</li>\n<li>Refactor code</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>You've traveled quite a road! You started, from a conversational perspective,\nmute and unable to interact, and now you can converse with JavaScript.</p>\n\n<p>As conversationalists with computers, we are now able to construct complex,\nsophisticated <em>expressions</em>. But so far our expressions have followed a single\ntrack: <em>evaluate</em> this one single expression, or line of thought. It's like a\nworld of absolute certainty in every statement: \"My outfit today: rain boots\" or\n\"My outfit today: sun hat.\" In real life, however, we sometimes need to base our\ndecisions on a test of some sort. \"<strong>IF</strong> it's raining: rain boots...\n<strong>OTHERWISE</strong>: sun hat.\" This means that <em>complexity</em> is entering our\nexpressions; we <em>need</em> that complexity so that we can express our\nproblem-solving strategies in code.</p>\n\n<p>In this lesson, we will learn how to write an expression that expresses\n\"conditional thinking\" or \"if-then\" logic. It's called the <strong>ternary\nexpression</strong>. It's an expression that takes a Boolean value or expression and\nreturns one of two values, depending on the truth-status of that first\nexpression. We will also learn how to write a program using conditional\nexpressions. Before we get to that, though, let's expand our <a href=\"https://replit.com/languages/javascript\">replit</a> skills a\nbit.</p>\n\n<h2>Using the Code Window in replit</h2>\n\n<p>So far, we've been using the console window in <a href=\"https://replit.com/languages/javascript\">replit</a> and ignoring the code\nwindow. Now we're going to learn how we can use the code window to make it\neasier to write, test, and experiment with code. Go ahead and open <a href=\"https://replit.com/languages/javascript\">replit</a>.</p>\n\n<p>When you open it, you'll see a single line of code in the code window on the\nleft side:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Hello, world!</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>If you click the \"Run\" button, you will see the message \"Hello, world!\" written\nout in the console window on the right. You will learn more about using\n<code>console.log()</code> a bit later in this section. For now, just know that\n<code>console.log()</code> allows us to write code in the code window and print out results\nof that code to the console.</p>\n\n<p>When you pressed \"Run\", the REPL <em>evaluated</em> the expression inside the\nparentheses, and then printed that value out to the console. In this case, there\nis a constant expression inside the parentheses, so that value is what is\noutput. But we can put other types of expressions in the parentheses as well.</p>\n\n<p>For example, try entering the following into the code window, then press \"Run\".</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">sum</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You should see the value <code>2</code> written to the console.</p>\n\n<p>What do you think will happen if you type the following into the code window and\nrun it?</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>As long as whatever is inside the parentheses <em>evaluates to a value</em> — i.e., as\nlong as it's an expression — that value will be logged in the console.</p>\n\n<p>So now we know two different ways to check the value of an expression in the\nREPL: we can either wrap it in a <code>console.log()</code> in the code window and press\n\"Run\", or we can enter it directly in the console window and hit enter.</p>\n\n<p>Note that we could also combine the two approaches. Go ahead and enter this line\nof code into the code window and click \"Run\":</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">difference</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">-</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Although it doesn't appear that anything happens because nothing is printed to\nthe console, when we clicked \"Run\", JavaScript evaluated the arithmetic\nexpression and stored that value in the variable <code>difference</code>. Now type\n<code>difference;</code> in the <em>console window</em> and hit enter.</p>\n\n<p><strong>Important</strong>: the evaluation and assignment happen when you click \"Run\". If you\njust paste the code into the code window and then try to check the value of\n<code>difference</code> in the console, it won't work.</p>\n\n<p>Often, it's inconvenient to type or copy/paste code into the console — if you're\nworking with a large block of code, for example, or if you want to be able to\nmake multiple changes. Putting code in the code window makes it easier to\ncorrect errors and try different things.</p>\n\n<p>As you work through the curriculum, we encourage you to use <a href=\"https://replit.com/languages/javascript\">replit</a> to try\nout code samples from the lessons and to experiment with your own examples. Now\nthat you know how to use the code window, you have another tool at your\ndisposal.</p>\n\n<h2>Identify the Ternary Expression</h2>\n\n<p>The ternary expression looks like this:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/programming-with-expressions/ternary.jpg\" alt=\"Ternary Graphic\"></p>\n\n<p>Or, in code:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">booleanExpression</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">thingToReturnIfTrue</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">thingToReturnIfFalse</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>If the expression in the first position evaluates to a truthy value, then the\nreturn value of the ternary expression is whatever is in the second position;\nhere, <code>\"thingToReturnIfTrue\"</code>. If the expression in the first position is\nfalsey, however, whatever is in the last position is returned; here,\n<code>\"thingToReturnIfFalse\"</code>.</p>\n\n<p>Let's try an example. Go ahead and copy the code below into the <em>code window</em> of\nreplit. When you click the \"Run\" button, JavaScript will log the value of\n<code>clothingChoice</code> to the console.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">likelyToRain</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">clothingChoice</span> <span class=\"o\">=</span> <span class=\"nx\">likelyToRain</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">rain boots</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">sun hat</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">clothingChoice</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The expression in the first position evaluates to <code>true</code>, so the ternary\nexpression returns the value after the question mark, \"rain boots\". Try changing\nthe variable <code>likelyToRain</code> from <code>true</code> to <code>false</code> in the code window, then\npress \"Run\" again. The return value of our ternary expression should now be <code>sun\nhat</code>.</p>\n\n<p>We now have the ability to express conditional logic. You should try writing\nseveral ternary expressions yourself in the REPL to make sure you've gotten the\nhang of things.</p>\n\n<blockquote>\n<p><strong>Note</strong>: we will add <code>console.log()</code>s to the code samples in this lesson so\nyou just need to click \"Run\" to see the results. If you want to check the\nvalue of any other expressions or variables, you can either add more\n<code>console.log()</code>s to the code window or check the values directly in the\nconsole. Remember to click \"Run\"!</p>\n\n<p><strong>LEARNING TIP</strong>: Developers learn their craft by making slight experiments to\ngiven code: be sure you're adopting that habit now.</p>\n</blockquote>\n\n<h3>Moving Beyond Boolean Values</h3>\n\n<p>Above we had a variable, <code>likelyToRain</code>, in which the literal Boolean value\n<code>true</code> was stored and we used that as our Boolean expression in our ternary. But\nwe can, in fact, use <em>any</em> Boolean expression, not just literal Boolean values.\nSpecifically, we can use the comparison operators and logical operators that we\nlearned about in the previous lessons to construct our expression.</p>\n\n<p>Let's look at an example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">rainPercentage</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">clothingChoice</span> <span class=\"o\">=</span> <span class=\"nx\">rainPercentage</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.3</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">rain boots</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">sun hat</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">clothingChoice</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Here we see we can make a decision based on a <em>comparison</em>. <em>If</em> the chance of\nrain is greater than 30%, we know we should take our rain boots; <em>otherwise</em>\nwe'll grab our sun hat. Try different values for <code>rainPercentage</code> and see what\nhappens.</p>\n\n<p>With this understanding of ternary expressions, we are now ready to write a\nprogram using expressions.</p>\n\n<h2>Write a Program with Conditional Logic Using Expressions</h2>\n\n<p>Guess what? We've already done this!\n<a href=\"https://en.wikipedia.org/wiki/Computer_program\">According to Wikipedia</a>, a\nprogram is \"a collection of instructions that can be executed by a computer to\nperform a specific task.\" The ternary (set of instructions) we looked at above\nis an <em>expression</em> that performs the task of <em>evaluating a condition</em> and, based\non the results, <em>returning a value</em>. But of course we can expand on this, making\nour conditions more sophisticated and our return values more informative:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// Input values: we could easily imagine asking a user for these values.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Your name here</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">temperatureInC</span> <span class=\"o\">=</span> <span class=\"mi\">26</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Create our message</span>\n<span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`Hello, </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">, with a rain chance of </span><span class=\"p\">${</span><span class=\"nx\">probabilityOfRain</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">}</span><span class=\"s2\">% and a temperature of </span><span class=\"p\">${</span><span class=\"nx\">temperatureInC</span><span class=\"p\">}</span><span class=\"s2\">C we recommend that you `</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">probabilityOfRain</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.3</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">take an umbrella</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">enjoy this rain-free day</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n<span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">temperatureInC</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">26</span> <span class=\"p\">?</span> <span class=\"dl\">'</span><span class=\"s1\"> and watch out for heatstroke.</span><span class=\"dl\">'</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\"> and bask in this fine weather.</span><span class=\"dl\">'</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Now we have three variables and we're using them not only to construct ternary\nexpressions but also to output a more informative message. Try experimenting\nwith the values of the variables and see how it affects the return value.</p>\n\n<p>Although this code works — JavaScript knows what we want it to do — that doesn't\nmake it good code. Recall that programming is <em>conversation</em>, not just with the\nJavaScript engine but <em>also</em> with other programmers or ourselves in the future.\nHow easy is it to read the line of code that defines our return value? How much\nwork does it take to figure out how it works? Writing good code means writing\ncode that not only works but is also as clean and readable as we can make it.</p>\n\n<h2>Refactoring our Code</h2>\n\n<p>We have learned that, in assigning values to variables, we can use constant\nvalues:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach the Shiba</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Or values evaluated from an expression:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">rainPercentage</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>We can also include variables as part of the evaluated expression:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">rainPercentage</span> <span class=\"o\">=</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>In fact, <strong><em>you can assign virtually any <em>expression</em> as the value of a\nvariable</em></strong>, including <em>comparison</em> expressions. So to start, let's use our new\n<code>rainPercentage</code> variable and also create a couple of appropriately named\nvariables to store the conditions we're checking in our ternary statements. The\ncondition <code>probabilityOfRain &gt; 0.3</code> is basically checking whether it's likely to\nrain, while the condition <code>temperatureInC &gt;= 26</code> is checking whether it's hot\nenough that we should stay out of the sun. Once we've created these variables,\nwe can then use them instead of including the math in the message, which will\nmake it a little easier to read:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach the Shiba</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">temperatureInC</span> <span class=\"o\">=</span> <span class=\"mi\">26</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">likelyToRain</span> <span class=\"o\">=</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.3</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">sunIsDangerous</span> <span class=\"o\">=</span> <span class=\"nx\">temperatureInC</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">26</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">rainPercentage</span> <span class=\"o\">=</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`Hello, </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">, with a rain chance of </span><span class=\"p\">${</span><span class=\"nx\">rainPercentage</span><span class=\"p\">}</span><span class=\"s2\">% and a temperature of </span><span class=\"p\">${</span><span class=\"nx\">temperatureInC</span><span class=\"p\">}</span><span class=\"s2\">C we recommend that you `</span> <span class=\"o\">+</span>\n  <span class=\"p\">(</span><span class=\"nx\">likelyToRain</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">take an umbrella</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">enjoy this rain-free day</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n  <span class=\"s2\">`</span><span class=\"p\">${</span>\n    <span class=\"nx\">sunIsDangerous</span>\n      <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\"> and watch out for heatstroke!</span><span class=\"dl\">\"</span>\n      <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\"> and bask in this fine weather.</span><span class=\"dl\">\"</span>\n  <span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>This is already a bit easier to read. We've:</p>\n\n<ol>\n<li>moved the math and some of the logic out of our return value</li>\n<li>used meaningful variable names that make it clearer how we're using our\nconditions and, by extension, what the ternary expressions are doing</li>\n<li>split out our message onto multiple lines to make it easier to follow the\nlogic.</li>\n</ol>\n\n<p>But we can do better.</p>\n\n<p>We mentioned above that we can assign virtually any expression as the value of a\nvariable; this includes <em>ternary expressions</em>.</p>\n\n<p>A ternary expression returns a value, just like any other expression; the value\nit returns is what is assigned to the variable. Here's an example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">advice</span> <span class=\"o\">=</span> <span class=\"nx\">raining</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">take an umbrella</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">enjoy this rain-free day</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The value assigned to <code>advice</code> will be \"take an umbrella\" if <code>raining</code> is\n<code>true</code>, and \"enjoy this rain-free day\" otherwise.</p>\n\n<p>Note that we can write ternary expressions on one line, as we did above, or on\nmultiple lines:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">rainAdvice</span> <span class=\"o\">=</span> <span class=\"nx\">likelyToRain</span>\n  <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">take an umbrella</span><span class=\"dl\">\"</span>\n  <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">enjoy this rain-free day</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Let's create variables to hold the results of our ternary expressions and use\nthose in our message as well:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach the Shiba</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">temperatureInC</span> <span class=\"o\">=</span> <span class=\"mi\">26</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">likelyToRain</span> <span class=\"o\">=</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.3</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">sunIsDangerous</span> <span class=\"o\">=</span> <span class=\"nx\">temperatureInC</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">26</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">rainPercentage</span> <span class=\"o\">=</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">rainAdvice</span> <span class=\"o\">=</span> <span class=\"nx\">likelyToRain</span>\n  <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">take an umbrella</span><span class=\"dl\">\"</span>\n  <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">enjoy this rain-free day</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">sunAdvice</span> <span class=\"o\">=</span> <span class=\"nx\">sunIsDangerous</span>\n  <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\"> and watch out for heatstroke</span><span class=\"dl\">\"</span>\n  <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\"> and bask in this fine weather</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`Hello, </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">, with a rain chance of </span><span class=\"p\">${</span><span class=\"nx\">rainPercentage</span><span class=\"p\">}</span><span class=\"s2\">% and a temperature of </span><span class=\"p\">${</span><span class=\"nx\">temperatureInC</span><span class=\"p\">}</span><span class=\"s2\">C we recommend that you `</span> <span class=\"o\">+</span> <span class=\"nx\">rainAdvice</span> <span class=\"o\">+</span> <span class=\"nx\">sunAdvice</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Much better! But there are still some improvements we can make. For one thing,\nit looks a little strange that we're using both interpolation and the <code>+</code>\noperator; let's fix that. And, while we're at it, we can take the \" and\" and the\npunctuation out of the <code>sunAdvice</code> ternary and incorporate them into our return\nvalue instead. This not only improves the readability of our return message, it\nalso makes our code more flexible: if we decide to reverse the order of\n<code>rainAdvice</code> and <code>sunAdvice</code> in our message, or to add a third piece of advice,\nwe don't need to go back and edit the values returned by the ternary.</p>\n\n<p>Once we've done all that, the code defining our return value is much easier to\nread: it no longer includes a jumble of mathematical, comparison, and ternary\nexpressions. Furthermore, by using meaningful variable names, we've made it\nclear what the final message will consist of.</p>\n\n<p>Be sure to verify that our refactored code still works!</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach the Shiba</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">temperatureInC</span> <span class=\"o\">=</span> <span class=\"mi\">26</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">likelyToRain</span> <span class=\"o\">=</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.3</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">sunIsDangerous</span> <span class=\"o\">=</span> <span class=\"nx\">temperatureInC</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">26</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">rainPercentage</span> <span class=\"o\">=</span> <span class=\"nx\">probabilityOfRain</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">rainAdvice</span> <span class=\"o\">=</span> <span class=\"nx\">likelyToRain</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">take an umbrella</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">enjoy this rain-free day</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">sunAdvice</span> <span class=\"o\">=</span> <span class=\"nx\">sunIsDangerous</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">watch out for heatstroke</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">bask in this fine weather</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`Hello, </span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\">, with a rain chance of </span><span class=\"p\">${</span><span class=\"nx\">rainPercentage</span><span class=\"p\">}</span><span class=\"s2\">% and a temperature of </span><span class=\"p\">${</span><span class=\"nx\">temperatureInC</span><span class=\"p\">}</span><span class=\"s2\">C we recommend that you </span><span class=\"p\">${</span><span class=\"nx\">rainAdvice</span><span class=\"p\">}</span><span class=\"s2\"> and </span><span class=\"p\">${</span><span class=\"nx\">sunAdvice</span><span class=\"p\">}</span><span class=\"s2\">.`</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Nice!</p>\n\n<p>One final note before we move on. In the example above, we used simple <code>String</code>s\nas the return values in our ternary expressions. But we can use any data type\nhere — numbers, Booleans, objects, etc. And, of course, we can also use more\ncomplex expressions. Let's look at an example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">first</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">second</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">problem</span> <span class=\"o\">=</span> <span class=\"mi\">99</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">luckyNumber</span> <span class=\"o\">=</span> <span class=\"nx\">first</span> <span class=\"o\">&gt;</span> <span class=\"nx\">second</span> <span class=\"p\">?</span> <span class=\"p\">(</span><span class=\"nx\">problem</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"p\">:</span> <span class=\"nx\">problem</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"nx\">luckyNumber</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; ??? (Test it out yourself!)</span>\n</code></pre></div>\n<p>What's the value of <code>luckyNumber</code>? Step through the expressions to make sure you\nunderstand what happens step by step.</p>\n\n<p>The ternary expression enables us to make a leap upward in the complexity of our\nexpression-writing. An important thing to remember is that a ternary is an\nexpression that, itself, is made up of three \"inner\" expressions.</p>\n\n<blockquote>\n<p><strong>NOTE</strong>: Those familiar with programming languages might be wondering, why\nnot use <code>if/else</code> statements. We'll work our way up to them, but for now we\nhave the ability to implement simple conditional decisions in one line of\ncode!</p>\n</blockquote>\n\n<h2>Conclusion</h2>\n\n<p>Congratulations, you've learned the art of conversing with JavaScript at a basic\nlevel. You should be proud of this accomplishment. Learning any programming\nlanguage generally follows these same steps. It's a proven general structure for\nfinding your bearings in a programming language. Feel free to return to it.</p>\n\n<p>As you build code in future lessons, be sure to try to make tiny changes and\nmake sure the code still works. Flatiron School has learned that the students\nwho are most successful in our programs are those who make the most \"small hops\"\naway from the given content to make the content their own. Programmers usually\ncall this \"playing with the code.\" Try swapping out a conditional expression,\nnesting a ternary within a ternary, turning a conditional from &lt; to &lt;=, etc. As\nyou move on, make sure you continue to play with all the skills you've learned\nso far. If you need help making those \"small hops\" be sure to work with your\ncommunity via Slack. You won't regret the investment.</p>\n\n<p>By the way, doing this exact work is how most programmers orient themselves to a\nnew language. Having the skill of getting started in a new language is a rocket\nbooster for your career.</p>\n\n<p>But to take your skills to the next level, you need to learn a new type of\nconstruction: a statement. Unlike an expression which always returns a value,\nstatements are used to help choose which expressions to evaluate or to do\nrepetitive tasks. That's Programming as Conversation Part II: Statements. Take a\nvirtual high-five from us! You've come a long way!</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Conditional (ternary) operator</a></li>\n</ul></li>\n</ul>",
			"exportId": "programming-with-expressions"
		},
		{
			"id": 432808,
			"title": "Survey - Programming as Conversation Part 1",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the Programming as Conversation Part 1 module?</p>\n</div>",
			"exportId": "g98d22273478b00f37fc86950063f6191"
		}]
	},
	{
		"id": 44860,
		"name": "Programming as Conversation Part 2: Statements",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g3ae5c97a4f464a725aa409482edaaa18",
		"items": [
		{
			"id": 432813,
			"title": "Programming as Conversation 2: Introduction",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-intro\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define a statement versus an expression</li>\n<li>Understand the Default Execution Order</li>\n<li>Identify two core categories of code statements</li>\n<li>Provide an example of selection statement</li>\n<li>Provide an example of repetition statement</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Welcome to Programming as Conversation, Part 2! In this module, we'll be\nenriching the kinds of conversations we have with JavaScript. In Part 1, we\nlearned to recognize <em>expressions</em> and saw that the data and operations they are\ncomprised of are <em>evaluated</em> to produce a result or \"return value.\" We also\nlearned three important expressions: the constant expression, the assignment\nexpression, and the variable lookup expression. In this next module, we'll see\nthat evaluations of expressions, while powerful, need <em>statements</em> to control\nwhen (sequence), whether (selection), and how many times (repetition) they are\n<em>evaluated</em>. Code of this type is called a \"statement.\"</p>\n\n<p>We can see a parallel between expressions and statements with how children\n<em>first</em> learn to speak and how they enrich their communication with time.\nLearning to talk is a gigantic achievement. It's a much-loved moment for parents\nwhen a child learns to communicate through words instead of screaming fits. In\nthis early phase, however, some of their statements lack politeness and\nsensitivity.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Image_92_CookieNOW.png\" alt=\"Raw id, uncouth expression of desire for a cookie\"></p>\n\n<p>Part of growing in their ability to converse is learning to wrap their desires\nin politeness and consideration for the listener. \"Would you mind giving me a\ncookie?\" and \"Would you care to join me for a cookie?\" both express the same\ndesire as our \"rougher\" example above, but show maturity.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Image_93_CookiePolite.png\" alt=\"A mannerly cookie request\"></p>\n\n<p>The same is true in code: we can do a great amount of work using just\n<em>expressions</em>. However, <em>mature</em> \"speakers\" of code learn to wrap their\n<em>expressions</em> in other <em>decisions</em> and <em>context</em>. This ensures not only that the\nright thing happens, <strong><em>but also</em></strong> that others can understand the code easily.\nLearning to \"wrap\" expressions in reader-friendly context will continue into\nProgramming as Conversation Part 3 as well.</p>\n\n<p>Let's start learning how to wrap our <em>expressions</em> in <em>statements</em> that will\ngive us greater flexibility <strong>and</strong> enrich our communication.</p>\n\n<h2>Define a Statement Versus an Expression</h2>\n\n<p>We have learned that all JavaScript expressions have a return value. JavaScript\nstatements, on the other hand, don't necessarily. We can think of a statement\nas an <em>instruction</em> for some action we want to carry out.</p>\n\n<p>We've already seen one type of statement: the variable declaration. A variable\ndeclaration has no return value; this is the case regardless of whether we\nassign a value at the time the variable is declared:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n<span class=\"kd\">let</span> <span class=\"nx\">string2</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n<span class=\"nx\">string2</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">World</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"World\"</span>\n<span class=\"nx\">string2</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"World\"</span>\n</code></pre></div>\n<p>A <em>variable declaration</em> is a statement, while a <em>variable assignment</em> and a\n<em>variable lookup</em> (as we have learned) are expressions.</p>\n\n<blockquote>\n<p><strong>Note:</strong> If you recall the previous lesson on data types, <code>undefined</code> is\n<em>technically</em> its own <strong>thing</strong> in JavaScript. However, it is used to\nrepresent a <em>lack</em> of any particular value, so we treat it as such when we say\nthat variable declaration has no return value.</p>\n</blockquote>\n\n<p>One type of statement you will encounter frequently as you learn JavaScript is a\n<em>block statement</em>. A block statement (also called a <em>code block</em>) consists of\none or more expressions or statements wrapped inside curly brackets (<code>{}</code>). We\nwill see them in action in upcoming lessons.</p>\n\n<p>Some of the most commonly used statements in JavaScript and other languages\nallow us to alter the order in which code is evaluated, in other words, to\nchange the <em>default execution order</em>.</p>\n\n<h2>Understand the Default Execution Order</h2>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Sequence_thick.png\" alt=\"Sequence Image\"></p>\n\n<p>JavaScript by default will read our code according to the rules of a <strong>default\nsequence</strong> or <strong>default flow</strong>: \"every line, top to bottom, left to right as\nruled by order of operations.\" The \"icon\" above represents that rule. When you\nsee it in the following lessons, you should immediately think about \"execution\norder.\"</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nx\">result</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 2</span>\n</code></pre></div>\n<p>You probably have an intuitive model of the <strong>default sequence</strong> since you have\nthe general mindset that English text is read \"top to bottom, left to right\" and\nexpect that to apply to code. It does! Isn't it nice when things meet our\ndefault assumptions?</p>\n\n<p>This is why you intuitively grasp why JavaScript would throw an error with the\nfollowing code:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">result</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; Error</span>\n<span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This error makes sense because this code is trying to do a variable lookup\n<em>before</em> initializing the variable that is looked up.</p>\n\n<h2>Identify Two Core Categories of Code Statements</h2>\n\n<p>There are two types of statements that affect whether code is executed and in\nwhat order:</p>\n\n<ul>\n<li><strong>Selection</strong>: Given the default order (or \"sequence\"), can we choose to run\ncertain lines of code and not others? How do we do so?</li>\n<li><strong>Repetition</strong>: Given the default order (or \"sequence\"), can we choose to do\nsomething until a condition is met or until code has run some number of times?</li>\n</ul>\n\n<h2>Provide An Example of Selection Statement</h2>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Selection Image\"></p>\n\n<p>As represented in the icon above, sometimes we need to deviate from the default\n<strong>sequence</strong>. We might need to <strong>select</strong> a different path. There's a <a href=\"https://www.poetryfoundation.org/poems/44272/the-road-not-taken\">poem by\nRobert Frost</a>\nabout it.</p>\n\n<p>In this case, the traveler is JavaScript, traveling fatefully down the default\nsequence. We, as programmers, create a fork, a \"split\" in fate, and ask\nJavaScript to take one path (or the other, or a third, or a fourth...and so on)\nbased on a Boolean \"test\" expression's return value. We ask JavaScript to\n<em>select</em> the path.</p>\n\n<p>The first  <strong>selection</strong> tool we'll learn is <code>if</code>. The <code>if</code> statement disrupts\nthe \"default sequence\" by asking JavaScript to run a test, decide whether to\nfollow the path, and then move back to the default sequence. Go ahead and open\n<a href=\"https://replit.com/languages/javascript\">replit</a>, paste the code below into the code window, and run it:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">favoriteNumber</span> <span class=\"o\">=</span> <span class=\"mi\">32</span><span class=\"p\">;</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">favoriteNumber</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// evaluating favoriteNumber &gt;= 10 returns true</span>\n  <span class=\"nx\">favoriteNumber</span> <span class=\"o\">=</span> <span class=\"nx\">favoriteNumber</span> <span class=\"o\">+</span> <span class=\"mi\">10</span>\n<span class=\"p\">}</span> \n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">favoriteNumber</span><span class=\"p\">);</span>\n</code></pre></div>\n<p><strong>Selection</strong> lets us disrupt default flow by <em>making a choice</em>. JavaScript\nevaluates the condition in the parentheses and, if it returns <code>true</code>, executes\nthe code inside the <em>block</em> (the code enclosed in <code>{}</code>). If <code>favoriteNumber</code>\nwere assigned <code>0</code> at the time the <code>if</code> statement is evaluated, it would skip\nover the code inside the block. That's why our icon shows the default flow\n\"hopping\" from one point to another, skipping what's in the middle.</p>\n\n<p>Try changing the initial value of <code>favoriteNumber</code> or using a different\ncomparison operator and see what happens.</p>\n\n<h2>Provide An Example of Repetition Statement</h2>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Repetition_thick.png\" alt=\"Repetition Graphic\"></p>\n\n<p><strong>Repetition</strong> lets us disrupt default flow by <em>repeating</em>. The <code>while</code> loop,\nwhich we will introduce formally in a few lessons, means \"do something <code>while</code>\n(or \"as long as\") some condition is true.\" That \"something\" is held inside a\ncode block:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">favoriteNumber</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">favoriteNumber</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">favoriteNumber</span> <span class=\"o\">=</span> <span class=\"nx\">favoriteNumber</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">favoriteNumber</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Run this code in the REPL as well. Try changing the value we're using in our\ncondition, or experiment with where you put the <code>console.log()</code>, and see what\nhappens.</p>\n\n<p><strong>Repetition</strong> lets us disrupt default flow by marking off a set of commands\nthat should be re-evaluated multiple times before resuming default flow. It's\neven possible to get into a repetition statement that you never exit.\nProgrammers call that an \"infinite loop.\" Most of the time, that's not a\ndesirable situation. Our icon shows the more desirable situation of us following\ndefault sequence, then finding a block that we repeat multiple times, then\nreturning to default sequence.</p>\n\n<h2>Conclusion</h2>\n\n<p>This concludes our introduction to this module. This module is like a writing\nclass: we know how to write basic <em>sentences</em> with a simple subject and a simple\nverb. We're now going to try to write complete sentences with conjunctions and\npunctuation (like the cookie examples!). We improve our basic sentences by using\nSELECTION or REPETITION statements that allow us to create code that deviates\nfrom the default \"flow\" or SEQUENCE.</p>",
			"exportId": "programming-as-conversation-2-introduction"
		},
		{
			"id": 432815,
			"title": "Default Sequence and Comments",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-default-sequence-and-comments\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-default-sequence-and-comments\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-default-sequence-and-comments/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Recognize the comment marker</li>\n<li>Add a comment to code</li>\n<li>'Comment out' code</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>As said in the introduction to this section:</p>\n\n<blockquote>\n<p>JavaScript by default will read our code according to the rules of a <strong>default\nsequence</strong> or <strong>default flow</strong>: \"every line, top to bottom, left to right as\nruled by order of operations.\"</p>\n</blockquote>\n\n<p>Using SELECTION statements we can make JavaScript \"skip\" over code if some\nBoolean <em>evaluation</em> is (or is not) <code>true</code>. Using REPETITION statements, we can\nmake JavaScript \"stay put\" on one line and do it over and over until some\nBoolean <em>evaluation</em> is (or is not) <code>true</code>. The only way to make JavaScript \"not\nsee\" a line without a Boolean <em>evaluation</em> at play is to \"hide\" it from\nJavaScript using a <em>comment</em>.</p>\n\n<p>Be sure to \"play along\" with the examples below in <a href=\"https://replit.com/languages/javascript\">replit</a>. We need to build\ncomfort with working along with the lessons.</p>\n\n<h2>Recognize the Comment Marker</h2>\n\n<p>We can exclude a line from the <strong>default sequence</strong> by starting the line with\nthe comment marker: <code>//</code>. After JavaScript sees a <code>//</code>, it will ignore from the\n<code>//</code> to the next line.</p>\n\n<p>Be careful! A comment placed in the middle of an expression can confuse JavaScript.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// Don't do this:</span>\n<span class=\"kd\">const</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"p\">(</span> <span class=\"mi\">1</span> <span class=\"c1\">//+ 1);</span>\n</code></pre></div>\n<p>As a rule of thumb, try to comment out whole lines only (i.e., place the comment\nmarker at the beginning of the line) to reduce the chances of breaking your code.\nWhile you <em>can</em> place comments within a line of code, it's best to keep things simple\nfor now.</p>\n\n<h2>Add a Comment to Code</h2>\n\n<p>Comments are <strong>primarily</strong> used to provide references or explanations about\nwhat's going on in code.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// Perform a constant expression evaluation</span>\n<span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"c1\">// Assign constant 3 to variable triangleSides</span>\n<span class=\"kd\">const</span> <span class=\"nx\">triangleSides</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Comments such as these are not particularly helpful. They're just restating\nwhat the code does. More often we add comments with motivation, or references,\nor blog posts, or bug reports:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// From the Three Dog Night song: \"Joy to the World (Jeremiah was a Bullfrog)\"</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineOne</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy to the world</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineTwo</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">All the boys and girls</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineThree</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy to the fishes in the deep blue sea</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineFour</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy to you and me</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// The '\\n' inserts a new line into the string</span>\n<span class=\"kd\">const</span> <span class=\"nx\">chorus</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">lineOne</span><span class=\"p\">}</span><span class=\"s2\">\\n</span><span class=\"p\">${</span><span class=\"nx\">lineTwo</span><span class=\"p\">}</span><span class=\"s2\">\\n</span><span class=\"p\">${</span><span class=\"nx\">lineThree</span><span class=\"p\">}</span><span class=\"s2\">\\n</span><span class=\"p\">${</span><span class=\"nx\">lineFour</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>If you enter the code above into the REPL's code window and click \"Run\", you'll\nsee that nothing happens — which is good! JavaScript has recognized the\ncommented-out lines as comments and ignored them. If you try \"un-commenting out\"\none of them and rerunning the code, you'll get a <code>SyntaxError</code>.</p>\n\n<p>So far, so good, but we still haven't verified that our code is doing what we\nwant it to do. Go ahead and check the value of <code>chorus</code>. Try it using both of\nthe methods we've learned: adding a <code>console.log()</code> of the variable in the code\nwindow, and directly checking its value in the console. Remember that, with\neither option, you need to <em>Run</em> the code.</p>\n\n<blockquote>\n<p><strong>A-HA! Moment</strong>. Recall that the \"return value\" documentation shorthand\n<code>//=&gt;</code> starts with a comment marker. This indicates that what's after <code>//</code> is\nnot part of the code itself. That's why it's used as an \"in-code\"\ndocumentation convention.</p>\n</blockquote>\n\n<h2>Comment Out code</h2>\n\n<p>Another way to use comments is to \"comment out\" code, to \"hide\" or \"mute\" buggy\nor unused code from the <strong>default sequence</strong>.</p>\n\n<p>With our current code:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">lineOne</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy to the world</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineTwo</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">All the boys and girls</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineThree</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy to the fishes in the deep blue sea</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineFour</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy to you and me</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">chorus</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">lineOne</span><span class=\"p\">}</span><span class=\"s2\">\\n</span><span class=\"p\">${</span><span class=\"nx\">lineTwo</span><span class=\"p\">}</span><span class=\"s2\">\\n</span><span class=\"p\">${</span><span class=\"nx\">lineThree</span><span class=\"p\">}</span><span class=\"s2\">\\n</span><span class=\"p\">${</span><span class=\"nx\">lineFour</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><strong>Default sequence</strong> satisfies our expectations if we check the value of\n<code>chorus</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Joy to the world\nAll the boys and girls\nJoy to the fishes in the deep blue sea\nJoy to you and me\n</code></pre></div>\n<p>Now let's \"comment out\" <code>lineThree</code>. We'll also need to modify <code>chorus</code>\naccordingly. (If you aren't sure why, try <strong>just</strong> commenting out <code>lineThree</code> in\nyour REPL and see what happens when you run the code.) We'll comment out the\ncurrent version of <code>chorus</code> to save it and modify a copy:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">lineOne</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy to the world</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineTwo</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">All the boys and girls</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//const lineThree = \"Joy to the fishes in the deep blue sea\";</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineFour</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy to you and me</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// const chorus = `${lineOne}\\n${lineTwo}\\n${lineThree}\\n${lineFour}`;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">chorus</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">lineOne</span><span class=\"p\">}</span><span class=\"s2\">\\n</span><span class=\"p\">${</span><span class=\"nx\">lineTwo</span><span class=\"p\">}</span><span class=\"s2\">\\n</span><span class=\"p\">${</span><span class=\"nx\">lineFour</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Now, if we run the code and check the value of <code>chorus</code>, it returns:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Joy to the world\nAll the boys and girls\nJoy to you and me\n</code></pre></div>\n<p>If we want to go back to the original version, we simply \"comment back in\"\n<code>lineThree</code> and the original <code>chorus</code> variable, and comment out or delete the\nmodified version of <code>chorus</code>.</p>\n\n<p>If we want to comment out <em>multiple</em> lines, we can either place the comment\nmarker at the beginning of each line, <em>or</em> we can wrap the lines with <code>/*</code> and\n<code>*/</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"cm\">/*\nconst lineOne = \"Joy to the world\";\nconst lineTwo = \"All the boys and girls\";\nconst lineThree = \"Joy to the fishes in the deep blue sea\"; \n*/</span>\n<span class=\"kd\">const</span> <span class=\"nx\">lineFour</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy to you and me</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">lineFour</span><span class=\"p\">;</span> <span class=\"c1\">// =&gt; \"Joy to you and me\"</span>\n</code></pre></div>\n<p>It's common for developers to test two code paths (in effect, doing a selection\nstatement's work by hand!) by \"commenting out\" and \"commenting back in\" code.</p>\n\n<h2>Conclusion</h2>\n\n<p>The <strong>default sequence</strong> is how JavaScript reads and executes each of the\nstatements and commands in JavaScript code. To \"hide\" a line of code from being\nseen by the JavaScript engine, start the line with the comment marker <code>//</code>. We\nuse comments to provide lightweight documentation or to hide code while we debug\nor test it.</p>",
			"exportId": "default-sequence-and-comments"
		},
		{
			"id": 432816,
			"title": "Selection with Conditionals: the if Statement",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-selection-with-conditionals\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Learn to use the <code>if</code> statement</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We've covered the default sequence the JavaScript engine follows when reading\nand executing JavaScript code. We've also learned that there are two types of\nstatements that will enable us to change the default sequence: <strong>selection</strong>\nstatements and <strong>repetition</strong> statements. In this lesson and the next one, we'll\nlearn more about <strong>selection</strong> statements, i.e., conditionals.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Selection Image\"></p>\n\n<p><strong>Conditional</strong> statements enable us to execute code if a certain condition is\ntrue (or false). Some real-life examples might look like:</p>\n\n<ul>\n<li><code>if</code> hungry → make a meal.\n\n<ul>\n<li><code>else</code> → don't make a meal.</li>\n</ul></li>\n<li><code>if</code> light is green → press gas pedal.\n\n<ul>\n<li><code>else</code> → press brake pedal.</li>\n</ul></li>\n<li><code>if</code> it's the first of the month → pay the bill.\n\n<ul>\n<li><code>else</code> → don't pay the bill.</li>\n</ul></li>\n</ul>\n\n<p>You might also hear this referred to as <strong>control flow</strong> because it helps\ncontrol the flow (i.e., sequence) of an application.</p>\n\n<p>JavaScript includes three structures for implementing code conditionally: <em>if\nstatements</em>, <em>switch statements</em>, and <em>ternary expressions</em>. In this lesson, we\nwill learn how to construct <code>if</code> statements.</p>\n\n<h3>Note about the Embedded REPL's in this Lesson</h3>\n\n<p>You'll notice that the embedded REPL's in this lesson look a little different\nfrom the ones you've seen in previous lessons. They include both a code window\non the top, and the console window on the bottom. Code is pre-written in the\ncode window so you just need to click the \"Run\" button to see what it does.</p>\n\n<p>Note, however, that if you want to experiment with any of the code (which we\nstrongly recommend), you'll need to open <a href=\"https://replit.com/languages/javascript\">replit</a> in the browser and\ncopy/paste the code there.</p>\n\n<h2>Learn to Use the <code>if</code> Statement</h2>\n\n<p>To write a basic <code>if</code> statement, we use the following structure:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">condition</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Block of code</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>It consists of the <code>if</code> keyword followed by the condition to be checked in\nparentheses. After that comes a <em>block statement</em> (more commonly called a <em>code\nblock</em>): one or more JavaScript expressions or statements enclosed in <code>{}</code>. The\n<em>code block</em> contains the code we want to execute <em>if</em> the condition returns a\ntruthy value:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/FixedUnacceptableCable?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>In the code above, age is initialized to 30, so the condition (<code>age &gt;= 18</code>)\nresolves to <code>true</code>. The code in the code block executes, setting the <code>isAdult</code>\nvariable to <code>true</code>. Copy/paste the code above into <a href=\"https://replit.com/languages/javascript\">replit</a> and try making\nsome changes (e.g., assigning different values to <code>age</code>; changing the\nconditional statement) to see what happens.</p>\n\n<h3><code>else</code></h3>\n\n<p>Often we want to run one block of code when the condition returns a <code>truthy</code>\nvalue and a <em>different</em> block of code when it returns a <code>falsey</code> value. To do\nthis, we use an <code>else</code> clause:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/CourteousEquatorialTree?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>Note that the <code>else</code> clause <strong>does not take a condition</strong> — if the condition for\nthe <code>if</code> returns a falsey value, we want the <code>else</code> code block to run <strong>no\nmatter what</strong>. This means that exactly one of the code blocks will <em>always</em> run.</p>\n\n<h3>The Ternary Expression</h3>\n\n<p>Recall that this is the exact situation where we can use a ternary expression.\nHere's what the code above would look like using a ternary:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/EnchantedAchingProcedurallanguage?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>Here, we assign <code>isAdult</code> as <code>true</code> if the condition returns a truthy value and\nas <code>false</code> otherwise, exactly like the version using <code>if</code>.</p>\n\n<p>Remember that a ternary is an <em>expression</em> — it returns a <em>value</em>. What this\nmeans is that we can simplify the code above a bit and assign the <em>result</em> of\nthe ternary directly to a variable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">26</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span> <span class=\"p\">?</span> <span class=\"kc\">true</span> <span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n<span class=\"nx\">isAdult</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; true</span>\n</code></pre></div>\n<p>The ternary expression is evaluated and resolved to <code>true</code>, and that value is\nassigned to the variable <code>isAdult</code>. Try this version out in <a href=\"https://replit.com/languages/javascript\">replit</a> to verify\nthat it works.</p>\n\n<p><strong>Advanced:</strong> What is the ternary above doing? Basically, it's saying: \"when the\nconditional code returns <code>true</code>, return <code>true</code>, and when the conditional code\nreturns <code>false</code>, return <code>false</code>.\" Sounds a bit redundant, doesn't it? When the\nreturn values are <code>true</code> and <code>false</code> as in the example above, you actually don't\nneed to use a ternary — or an <code>if...else</code> — at all! This is because <strong><em>the\nconditional is an expression as well</em></strong>. The return value of <code>age &gt;= 18</code> is a\n<em>Boolean value</em> (<code>true</code> or <code>false</code>), so it can be assigned directly to our\n<code>isAdult</code> variable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span><span class=\"p\">;</span>\n\n<span class=\"nx\">isAdult</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; false</span>\n</code></pre></div>\n<p>The ternary (or <code>if...else</code>) is only necessary if the desired return value is\nsomething other than a Boolean:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">ageMessage</span> <span class=\"o\">=</span>\n  <span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span>\n    <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">Congratulations! You're an adult!</span><span class=\"dl\">\"</span>\n    <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Enjoy your childhood while it lasts!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">ageMessage</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Congratulations! You're an adult!\"</span>\n</code></pre></div>\n<blockquote>\n<p><strong>Top Tip:</strong> Be careful not to overuse the ternary expression. It's fine for\nslimming down a simple <code>if...else</code>, but be conscious of how easy your code is\nto understand for an outsider. Remember, you generally write code once, but it\ngets read (by yourself and others) <strong>far</strong> more than once. The ternary is\noften more difficult to quickly interpret than a regular old <code>if...else</code>, so\nmake sure the reduction in code is worth any potential reduction in\nreadability.</p>\n</blockquote>\n\n<h3><code>else if</code></h3>\n\n<p>We've discussed the case where our condition is <em>binary</em> (one code block\nexecutes if the conditional returns true and a second executes otherwise), but\nsometimes we need to check multiple conditions. We can handle this situation by\nusing one or more <code>else if</code> clauses.</p>\n\n<p>Let's say that instead of just deciding whether the passed-in <code>age</code> meets the\ncriterion for <code>isAdult</code>, we want to add in some other examples of adulthood (in\nAmerican society, at least): <code>canWork</code>, <code>canEnlist</code>, and <code>canDrink</code>.\n16-year-olds can legally work; 18-year-olds can do what 16-year-olds can do\n<strong>plus</strong> they can enlist and they are legal adults; 21-year-olds can do what 16-\nand 18-year-olds can do <strong>plus</strong> they can drink (at the federally set minimum\nage).</p>\n\n<p>Here's how we can handle that using <code>else if</code> clauses:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/SuburbanScentedAccounting?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>Any time you use an <code>if...else if</code> construction, <strong>at most one code block will\nbe executed</strong>. As soon as one of the conditions returns a truthy value, the\nattached code block runs and the conditional statement ends. In the example\nabove, we have not included an <code>else</code> statement so, if none of the conditions is\ntruthy, no code blocks will be run. If we had included an <code>else</code> clause, exactly\none code block would be run.</p>\n\n<p>Try different values for <code>age</code> in <a href=\"https://replit.com/languages/javascript\">replit</a> and check the resulting values of\nthe four variables.</p>\n\n<h3>Nested <code>if</code> Statements</h3>\n\n<p>You may have noticed that there is some redundancy in the example above: three\nof the four variables appear in more than one of the conditions. In this\ncircumstance, we can streamline our code a bit by using nested conditional\nstatements:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/MutedUntrueAdware?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>The first <code>if</code> condition checks for the \"base level\" of adulthood (<code>age &gt;= 16</code>),\nand each subsequent nested <code>if</code> \"adds on.\" Note that each inner <code>if</code> statement\nis nested <strong>inside</strong> the code block of the one before. This means that the inner\n<code>if</code> statements will only execute if the outer ones are truthy. This makes\nsense: if age is less than 16, we're done — there's no need to check the\nremaining conditions because we know they have to be false as well. Otherwise\nJavaScript will keep checking each subsequent condition until it either comes to\none that is false or finishes running all the code blocks.</p>\n\n<p>While nested <code>if</code>s are more efficient than <code>if...else if</code>s for handling\noverlapping categories, they are also more difficult to read. An <code>if...else if</code>\nconstruction will always work. You should consider the tradeoff of readability\nvs. efficiency in deciding which construction to use.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we've learned about one of the <em>selection statements</em> that\nenable us to modify the <em>default sequence</em>: the <code>if</code> statement. In the simplest\ncase, the <code>if</code> statement consists of the <code>if</code> clause, a condition, and a code\nblock to run if the condition returns <code>true</code>. In more complex situations, we can\nadd one or more <code>else if</code> clauses or an <code>else</code> clause.</p>\n\n<p>In the next lesson, we'll learn about another selection statement we can use to\ncreate conditional code: the <code>switch</code> statement.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#Conditional_statements\">Conditional statements</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"><code>if...else</code> statement</a></li>\n</ul></li>\n</ul>",
			"exportId": "selection-with-conditionals-the-if-statement"
		},
		{
			"id": 432817,
			"title": "Selection with Conditionals: the 'switch' Statement",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-switch-statements\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Learn to use the <code>switch</code> statement</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We've now learned about two of the three <em>selection</em> tools available to us in\nJavaScript: the <code>if</code> statement and the <code>ternary</code> expression. In this lesson,\nwe'll learn about a third: the <code>switch</code> statement. The <code>switch</code> statement\nprovides an alternate way of expressing conditional code that is less repetitive\nin cases where you want to test multiple conditions against a single value.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Selection is a deviation from the default execution path of a program. By choosing a different path using a conditional (switch-case) statement.\"></p>\n\n<h2>Learn to Use the Switch Statement</h2>\n\n<p>Let's say we have a program that includes a variable containing a person's name\nand we want to execute certain code depending on what that person's name is.\nUsing an <code>if...else if</code> construction, that might look like this:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Alice</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">greeting</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">Alice</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello, Alice!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">The White Rabbit</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Don't be late, White Rabbit</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">The Mad Hatter</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Welcome to the tea party, Mad Hatter</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">The Queen of Hearts</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Please don't chop off my head!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n  <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Whoooo are you?</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">greeting</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Hello, Alice!\"</span>\n</code></pre></div>\n<p>As we can see, there's quite a bit of repetition here: we always test <code>name</code> and\nwe always compare with <code>===</code>. This is a pretty common selection need. It's so\nstandard that the <code>switch</code> statement was created to enable us to streamline our\ncode. Here's the <code>switch</code> version of the code above:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/VastVividPreprocessor?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>The JavaScript engine compares the value passed in to the <code>switch</code> statement\n(here, <code>name</code>) against each of the <code>case</code> values <em>using strict equality</em>\n(<code>===</code>). When a match is found, the statements nested under that <code>case</code> are\nexecuted. In this example, by using the <code>switch</code> statement, we avoid the need to\nrepeat the <code>if (name === _____)</code> line for each possibility.</p>\n\n<p>We can also assign the same set of statements to multiple cases:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/LatestAshamedStrategy?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>In the above example, if the <code>name</code> variable matches the names of any of the\ndwarves, the <code>characterType</code> variable will be set to \"dwarf\".</p>\n\n<p>The <code>default</code> and <code>break</code> keywords are both <em>optional</em> in <code>switch</code> statements,\nbut can be useful. In more complicated statements, they become necessary to\nensure the correct flow.</p>\n\n<h3><code>default</code></h3>\n\n<p>The <code>default</code> keyword is similar to the <code>else</code> clause in an <code>if...else</code>\nconstruction. It specifies a set of statements to run after all of the <code>switch</code>\nstatement's <code>case</code>s have been checked. However, it is different from an <code>else</code>\nin that <strong>the only time it does <em>not</em> run is if the engine hits a <code>break</code> in one\nof the <code>case</code> statements</strong>. If you only want one code block in your <code>switch</code>\nstatement to execute, you should always include the <code>break</code> keyword.</p>\n\n<h3><code>break</code></h3>\n\n<p>In the previous example, <code>break</code> is used to stop the <code>switch</code> statement from\ncontinuing to look at case statements once it finds a match. If we left out the\n<code>break</code> keywords, the JavaScript engine would first assign <code>characterType</code> to\n\"dwarf\" when it reached the \"Grumpy\" case (as desired), but the code would\n<strong>continue to execute</strong> and <code>characterType</code> would wind up being reset to \"minor\ncharacter.\" To keep that from happening, we use <code>break</code> to tell the JavaScript\nengine to stop executing the <code>switch</code> statement as soon as it finds a match. You\nwill often see switch statements where <code>break</code> is used in every case as a way to\nensure there is no unexpected behavior from multiple cases executing.</p>\n\n<p><strong>Advanced:</strong> Sometimes we <em>want</em> to potentially match multiple cases, and we\nwill need to leave out <code>break</code> in order to do this. Let's revisit an example\nfrom the lesson on <code>if</code> statements:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span> <span class=\"nx\">isAdult</span><span class=\"p\">,</span> <span class=\"nx\">canWork</span><span class=\"p\">,</span> <span class=\"nx\">canEnlist</span><span class=\"p\">,</span> <span class=\"nx\">canDrink</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">21</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canEnlist</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canDrink</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canEnlist</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"nx\">isAdult</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"nx\">canWork</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"nx\">canEnlist</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; true</span>\n\n<span class=\"nx\">canDrink</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; undefined</span>\n</code></pre></div>\n<p>We can refactor the above <code>if...else if...else</code> chain as a more compact, less\nrepetitious <code>switch</code> statement. To make it work, we will employ a neat little\ntrick: we'll use comparisons for our <code>case</code> statements instead of a simple\nvalue.</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/YummyThreadbareResource?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>We specified <code>true</code> as the value to <code>switch</code> on. All of our <code>case</code>s are\n<em>comparison expressions</em> that return <code>true</code> or <code>false</code>. Therefore, if a\ncomparison returns <code>true</code>, its statements will be run. Because we did not\ninclude any <code>break</code> statements, once <em>one</em> case statement matches, all\nsubsequent statements will execute. This is what we want here: if <code>age</code> is\ngreater than 21, it's also greater than 18 and 16, so we want <em>all</em> the\nassignments to be made.</p>\n\n<p>If we set <code>age</code> to <code>20</code> in the above example, the first <code>case</code>, <code>age &gt;= 21</code>,\nreturns <code>false</code> and the assignment of <code>canDrink</code> never happens. The engine then\nproceeds to the next <code>case</code>, <code>age &gt;= 18</code>, which returns <code>true</code>, assigning the\nvalue <code>true</code> to <code>isAdult</code> and <code>canEnlist</code>. Since it encounters no <code>break</code>\nstatement, it then proceeds to the last case statement where <code>canWork</code> is set to\ntrue as well.</p>\n\n<h2>Conclusion</h2>\n\n<p>You now have three different tools available to you to use <em>selection</em> in\nJavaScript: the <code>if</code> statement, the <code>ternary</code> expression, and the <code>switch</code>\nstatement. The <code>if</code> statement is the one you will use most often — in fact, you\ncan <em>always</em> construct your conditional code using some combination of <code>if</code>,\n<code>else if</code>, and <code>else</code>. It may not be the most efficient way to write the code,\nbut it will always do the trick.</p>\n\n<p>As a rule of thumb, you may find it makes sense to start with <code>if</code> statements\nand, once you've got the code working, consider refactoring it to use a ternary\nor switch statement if they're better suited for what you need to do.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"><code>switch</code> statement</a></li>\n</ul></li>\n</ul>",
			"exportId": "selection-with-conditionals-the-switch-statement"
		},
		{
			"id": 432819,
			"title": "Logging in JavaScript",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-logging-in-javascript\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-logging-in-javascript\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-logging-in-javascript/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Learn about logging in JavaScript</li>\n<li>Use <code>console.log()</code> in the development process</li>\n<li>Use <code>console.log()</code> for debugging</li>\n</ul>\n\n<h2>Logging</h2>\n\n<p>The venerable <code>console.log()</code> is an all-purpose logging <em>method</em>. (A <strong>method</strong>\nor a <strong>function</strong> is a bit of code that <em>does</em> something. We <em>call</em> them when we\nwant them to act.) In programming, <em>logging</em> refers to the process of printing\ninformation about the program as it runs. Note that <code>console.log()</code> is a\n<em>development</em> tool; it's not something that's used in deployed code.</p>\n\n<p>Let's take a look at how it works. Open up <a href=\"https://replit.com/languages/javascript\">replit</a> and follow along.</p>\n\n<p>As we've seen before, there is an example provided in the code window:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>We've also seen that we can log more than just a simple message. In fact, we can\npass any number of messages to <code>console.log()</code> by separating them with commas;\nwhen printed, they'll be separated by a space:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">one</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">two</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">three</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>We can also include values of different types. Give this a try:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">I must have logged</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">times today.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Note that, for that first string (\"I must have logged\"), the comma is <em>after</em>\nthe end quotation mark. This is because the comma is not part of the string;\ninstead, it's how we tell JavaScript, \"Hey, I'm going to give you something\nelse!\"</p>\n\n<p>As we saw earlier in this section, we can also pass <em>variables</em> to\n<code>console.log()</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Spinach the Shiba</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello,</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>As a reminder, we can log any <em>expression</em> — even very complex ones — using\n<code>console.log()</code>.</p>\n\n<h2>Using <code>console.log()</code> in the Development Process</h2>\n\n<p>Where <code>console.log()</code> gets really helpful is when you use it to check that your\ncode is functioning as you want it to. Let's revisit an example from an earlier\nlesson:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">isAdult</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">canWork</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">canEnlist</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">canDrink</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">21</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canEnlist</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canDrink</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canEnlist</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Let's say we want to run some tests to make sure that we have our <code>if</code> statement\nset up properly. We can do this by checking the values of the four variables for\ndifferent values of <code>age</code>. Here's where <code>console.log()</code> comes in.</p>\n\n<p>Go ahead and open <a href=\"https://replit.com/languages/javascript\">replit</a> and copy/paste the code above into the code window.\nNext, let's add the following to the end of our code:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">canWork</span><span class=\"p\">,</span> <span class=\"nx\">canEnlist</span><span class=\"p\">,</span> <span class=\"nx\">isAdult</span><span class=\"p\">,</span> <span class=\"nx\">canDrink</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Next, let's set the <code>age</code> variable to a value of 16 and click the run button.\nYou should see the following output to the terminal:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">true false false false\n</span></code></pre></div>\n<p>It looks like our code is working if <code>age</code> is set to 16, but our message could\nbe a little more informative. We can see that only one of the variables is\n<code>true</code>, which is what we want, but it's not immediately apparent <em>which</em> of the\nvariables is the one that's <code>true</code>. So let's add some labels. To do this, we'll\nuse a combination of strings and variables inside our <code>console.log()</code>. While\nwe're at it, let's log the <code>age</code> value as well. Replace the existing\n<code>console.log()</code> with the following:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Age:</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"nx\">age</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Can work:</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"nx\">canWork</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Can enlist:</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"nx\">canEnlist</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Is a legal adult:</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"nx\">isAdult</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Can drink:</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"nx\">canDrink</span>\n<span class=\"p\">);</span>\n</code></pre></div>\n<p>This looks complicated, but all we're doing here is stringing together a series\nof expressions — some of them simple string values, and some of them variables —\nwith commas between each one.</p>\n\n<p>Alternatively, we can use string interpolation inside our <code>console.log()</code> to do\nthe same thing:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span>\n  <span class=\"s2\">`Age: </span><span class=\"p\">${</span><span class=\"nx\">age</span><span class=\"p\">}</span><span class=\"s2\">, Can work: </span><span class=\"p\">${</span><span class=\"nx\">canWork</span><span class=\"p\">}</span><span class=\"s2\">, Can enlist: </span><span class=\"p\">${</span><span class=\"nx\">canEnlist</span><span class=\"p\">}</span><span class=\"s2\">, Is a legal adult: </span><span class=\"p\">${</span><span class=\"nx\">isAdult</span><span class=\"p\">}</span><span class=\"s2\">, Can drink: </span><span class=\"p\">${</span><span class=\"nx\">canDrink</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n<span class=\"p\">);</span>\n</code></pre></div>\n<p>With this approach, we're passing <em>a single expression</em> to <code>console.log()</code>\ninstead of a series of them. The commas here, therefore, are part of the string.\nBe sure to run both versions in the REPL so you can see the difference.</p>\n\n<p>If we were writing user-facing code here, we would probably want to make it\neasier to read by putting each variable on its own line. We could do that either\nby using multiple <code>console.log()</code>s, or by using the new line character (<code>\\n</code>).\nBut since the <code>console.log()</code> is just for our (the developer's) use, the above\nmay be perfectly acceptable.</p>\n\n<p>With this <code>console.log()</code> set up we can try our code with as many age values as\nwe like, checking each time to verify that the variables have been set\ncorrectly.</p>\n\n<h2>Using <code>console.log()</code> for Debugging</h2>\n\n<p>Let's say we've gotten our code to this point:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">18</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">isAdult</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">canWork</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">canEnlist</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">canDrink</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">21</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canEnlist</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canDrink</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canEnlist</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Age: </span><span class=\"p\">${</span><span class=\"nx\">age</span><span class=\"p\">}</span><span class=\"s2\">\\nCan work: </span><span class=\"p\">${</span><span class=\"nx\">canWork</span><span class=\"p\">}</span><span class=\"s2\">\\nCan enlist: </span><span class=\"p\">${</span><span class=\"nx\">canEnlist</span><span class=\"p\">}</span><span class=\"s2\">\\nIs a legal adult: </span><span class=\"p\">${</span><span class=\"nx\">isAdult</span><span class=\"p\">}</span><span class=\"s2\">\\nCan drink: </span><span class=\"p\">${</span><span class=\"nx\">canDrink</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>We have our <code>console.log()</code> set up and we're ready to start testing it. We\ndecide to start with our 'least adult' category, which is children under age 16,\nso we set <code>age</code> equal to 15 and click run. Everything looks fine — we get four\n<code>false</code>s — so we change <code>age</code> to 16, then 17. So far, so good. But then when we\ntest it for an <code>age</code> of 18, we see the following:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">Age: 18\nCan work: true\nCan enlist: false\nIs a legal adult: false\nCan drink: false\n</span></code></pre></div>\n<p>Hmm, obviously we've got an error somewhere. The code for ages 18-20 isn't\nreturning the expected result, so let's take a look at that conditional:\n<code>else if (age &gt; 18)</code>. With a simple condition like this, we might realize right\naway that we accidentally used <code>&gt;</code> instead of <code>&gt;=</code>. But imagine a case where our\ncondition is more complex and we don't immediately see the problem. Let's think\nabout some ideas for ways we can use <code>console.log()</code> to help us find and correct\nit. Be sure to follow along in the REPL.</p>\n\n<p>To start, we could try logging a message <em>inside</em> the block for the condition\nwhere the error is (i.e., inside the block that <em>should</em> be executing):</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">18</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">isAdult</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">canWork</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">canEnlist</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">canDrink</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">21</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canEnlist</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canDrink</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">The condition returned true</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">canEnlist</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"nx\">isAdult</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">age</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">canWork</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Age: </span><span class=\"p\">${</span><span class=\"nx\">age</span><span class=\"p\">}</span><span class=\"s2\">\\nCan work: </span><span class=\"p\">${</span><span class=\"nx\">canWork</span><span class=\"p\">}</span><span class=\"s2\">\\nCan enlist: </span><span class=\"p\">${</span><span class=\"nx\">canEnlist</span><span class=\"p\">}</span><span class=\"s2\">\\nIs a legal adult: </span><span class=\"p\">${</span><span class=\"nx\">isAdult</span><span class=\"p\">}</span><span class=\"s2\">\\nCan drink: </span><span class=\"p\">${</span><span class=\"nx\">canDrink</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If we click the Run button, the message does <em>not</em> get logged so we know the\ncode block is not getting executed. This tells us that there's something wrong\nwith the conditional itself. If the message <em>did</em> get logged we would know that\nthe problem is somewhere inside the code block instead.</p>\n\n<p>Next, we could try changing <code>age</code> to 19. In this case, the message <em>does</em> get\nlogged, so we know our conditional is only broken for age 18. This gives us\nanother clue as to how to fix it.</p>\n\n<p>If we had a more complicated conditional and still couldn't find the problem, we\ncould try logging the conditional itself, simplifying it one step at a time\nuntil it <em>does</em> return <code>true</code>. As soon as we get a <code>true</code> return value, we know\nthat the last thing we removed was what was causing the problem. For example, if\nour overall condition is comprised of two conditions joined by <code>&amp;&amp;</code>, we could\ncheck each expression individually. Whichever one returns <code>false</code> instead of\n<code>true</code> is the one with the problem. We could then continue to \"drill down\" as\nnecessary until we find what's wrong.</p>\n\n<blockquote>\n<p><strong>Top Tip</strong>: Even better, we can use <code>console.log()</code> as we're building the\nconditional in the first place, using an approach like the one outlined below.\nOnly after you have the conditions working the way you need them to would you\nbegin building out the code blocks. Taking this incremental approach will make\nit much easier to find and fix any errors.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">condition1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Condition 1 returned true</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">condition2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Condition 2 returned true</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></blockquote>\n\n<p>You should think of the ideas presented above as examples of a general approach\nto debugging. Debugging is largely a matter of using <em>logic</em> to narrow in on the\nproblematic bit of code until you find the error. It is worth getting\ncomfortable using <code>console.log()</code> because it can be a valuable tool in this\nprocess.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we've learned how to use the <code>console.log()</code> method. We've also\nexplored some ways we can use it to help us with writing and debugging code.</p>",
			"exportId": "logging-in-javascript"
		},
		{
			"id": 432821,
			"title": "Repetition: the while Loop",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-while-loop\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-while-loop\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-while-loop/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define the basic <code>while</code> structure</li>\n<li>Write an infinite loop</li>\n<li>Using Control-C to break out of an infinite loop</li>\n<li>Terminate a <code>while</code> loop naturally</li>\n<li>Use operators to increment/decrement values</li>\n<li>Use a <code>do...while</code> loop</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>The final piece of using <em>statements</em> to control the flow of JavaScript\nexecution is <strong>repetition</strong>.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Repetition_thick.png\" alt=\"Repetition Graphic\"></p>\n\n<p>While the <strong>default sequence</strong> requires JavaScript to execute top-down, left to\nright, we've seen that we can skip chunks of code using <em>selection</em> statements\n(<code>if</code> or <code>switch</code>). In some ways the reverse of <em>selection</em> is <em>repetition</em>:\n\"Don't move on,\" we tell JavaScript. \"Instead do something else until I say it's\nOK to move on.\" The most fundamental <em>repetition</em> construct, present in pretty\nmuch every programming language, is the <code>while</code> loop.</p>\n\n<h2>Define the Basic <code>while</code> Structure</h2>\n\n<p>A basic <code>while</code> loop looks like:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">condition</span> <span class=\"nx\">expression</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"c1\">// stuff to do</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>As long as the condition expression is <code>true</code> (or truthy), the code inside the\ncode block will run. Keep in mind the condition expression can be quite rich,\nusing <code>&amp;&amp;</code>, <code>||</code>, <code>()</code>, etc.</p>\n\n<h2>Write an Infinite Loop</h2>\n\n<p>Given this definition of <code>while</code>, any truthy expression will make the loop run\nforever.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">say this forever...</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This will output:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>say this forever...\nsay this forever...\nsay this forever...\nsay this forever...\nsay this forever...\n...\n</code></pre></div>\n<p>Note that the condition expression doesn't need to be the literal value <code>true</code> —\nany truthy value will have the same effect:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// -1 is truthy....</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">say this forever...</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>By contrast, a <code>false</code> (or falsey) condition expression will keep the code block\nfrom executing at all:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">I will never run</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Using Control-C to Break Out of an Infinitely Looping Program</h2>\n\n<p>When you start writing code and creating loops yourself, you will almost\ncertainly inadvertently create infinite loops from time to time. If you try to\nrun the code and it either logs over and over without end <strong>or</strong> never seems to\nfinish, you're probably stuck in an infinite loop.</p>\n\n<p>In most programming environments, you can break out of an infinite loop by\ntyping Control-C. That's an old-school UNIX key combination that means\nINTERRUPT. In order for this to work, you first need to make the terminal\nportion of the programming environment (where the results of running the\ncode are displayed) the active window by clicking inside it.</p>\n\n<h2>Terminate a <code>while</code> Loop Naturally</h2>\n\n<p>Most loops aren't meant to run infinitely. There's some condition that they\ncross, captured in the <em>condition expression</em>, that tells JavaScript that it's\ntime to return to the <strong>default sequence</strong> and execute the code after the while\nloop.</p>\n\n<p>So, somehow we need to create an expression that's true when the <code>while</code> begins\n(so that the code in the <code>{}</code> runs), but that eventually becomes false.</p>\n\n<p>Here's a simple example that uses a very common approach:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// Initialize a counter variable; note that we need to use `let` here</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">//A Boolean expression that uses the counter to decide whether to keep looping</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`I am the </span><span class=\"p\">${</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"s2\">, I love to count!`</span><span class=\"p\">);</span> <span class=\"c1\">// The work the loop does</span>\n  <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// Update the counter variable; this keeps track of how many times the loop has executed</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In the last line, <code>count = count + 1</code>, we are <em>assigning</em> a new value to the\n<code>count</code> variable, where the new value is equal to its current value plus 1.</p>\n\n<p>The code above produces:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>I am the 0, I love to count!\nI am the 1, I love to count!\nI am the 2, I love to count!\n</code></pre></div>\n<p>Let's say we forgot the line <code>count = count + 1</code>. If our <code>count</code> variable never\nchanges, our <em>condition expression</em> would <em>always</em> be <code>true</code> and we'd have an\ninfinite loop. (Hint: this is a very common mistake, even for experienced\nprogrammers.)</p>\n\n<blockquote>\n<p>You may wonder why we're starting our counter variable at <code>0</code>instead of <code>1</code>\nThe answer may sound a bit... opaque. It's because, in computer science,\narrays are <em>indexed</em> starting with 0 instead of 1. In other words, we need to\nuse the <em>index</em> value of 0 to retrieve the first element from an array.\nBecause loops are frequently used to access elements in arrays, the\n<em>convention</em> is to start loop counter variables at 0 instead of 1. If this\ndoesn't entirely make sense at this point, don't worry — it will become\nclearer when we learn about arrays.</p>\n</blockquote>\n\n<h2>Learn About Operators Used to Increment/Decrement</h2>\n\n<p>Let's look back at that previous example to notice how we're moving from a\ntrue or truthy statement to a false or falsey statement. Within each loop, the\nfollowing code is executed:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>which slowly moves <code>count</code> to a place where it is no longer less than 3, thus\nending the loop.</p>\n\n<p>But writing <code>count = count + 1</code> is a bit long-winded (although very explicit;\nsometimes a few extra keystrokes can save you headaches with debugging,\nespecially when you're first learning to code). This pattern of \"incrementing\" a\nvariable is very common, so JavaScript includes a couple of shorthand operators\nyou can use. It's like a contraction in conversation: very few English speakers\nsay \"can not,\" \"have not,\" or \"would not\" <strong>all</strong> the time. You're likely to\nhear them use <em>contractions</em> (from the Latin: \"pulling together\") like \"can't,\"\n\"haven't,\" and \"wouldn't.\" In the code below, we are combining the addition and\nassignment with the <code>addition assignment operator</code>, <code>+=</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">// take the value of count, add 1 to it and then assign that result to count</span>\n<span class=\"nx\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Unsurprisingly <code>-=</code> does the reverse of <code>+=</code>: it \"decrements\" the variable's\nvalue and re-assigns the new value to the variable. JavaScript has a number of\nother <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators\">assignment operators</a> that allow you to use multiplication (<code>*=</code>),\ndivision (<code>/=</code>), and a variety of other operations.</p>\n\n<p>The assignment operators will work with any <em>number</em>. If you want to add 10 or\nmultiply by 3.14, the assignment operators will do that for you. For the special\n(but common) case where you want to add (or subtract) 1, however, there is\nanother option: the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment_and_decrement\">increment and decrement operators</a>, <code>++</code> and <code>--</code>. For a\ncase such as the above, where we're using a counter variable to keep track of\nwhere we are in our loop, the <code>increment operator</code> is frequently used:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@LizBurton/EuphoricNoteworthyMuse?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>Get comfortable using the different options for incrementation and experiment\nwith writing some loops of your own.</p>\n\n<h2>Use a <code>do...while</code> Loop</h2>\n\n<p>The <code>do...while</code> loop is similar to <code>while</code>, in that it will execute a block of\ncode based on a condition or set of conditions. The difference, however, is that\n<strong>it will always execute at least once</strong>. The reason is that the condition isn't\nevaluated until <strong>after</strong> the code block executes the first time:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">do</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`I will execute once`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The JavaScript engine will enter the loop, execute the <code>console.log()</code>, then\nevaluate the condition. Because the condition returns <code>false</code> the loop will stop\nexecuting there.</p>\n\n<p>This construction is helpful any time you want to make sure that the loop\nexecutes at least once. As an example, this might be useful for asking a user to\ncreate a password. The <code>do while</code> loop will always ask them to enter their\npassword the first time, and can continue to ask as long as (<code>while</code>) the value\nthey enter doesn't meet the password requirements.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we have learned how to use a <em>repetition</em> statement, the <code>while</code>\nloop. JavaScript includes some other looping mechanisms that you'll learn about\nlater in the course. But for now, with an understanding of <em>sequence</em>,\n<em>selection</em> and now <em>repetition</em> on top of your experience with expressions, you\ncan write powerful programs! Be sure to experiment with writing your own loops\nand don't forget, if your code is not responding, you can use Control-C to\ninterrupt the program!</p>",
			"exportId": "repetition-the-while-loop"
		},
		{
			"id": 432823,
			"title": "Survey - Programming as Conversation Part 2",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the Programming as Conversation Part 1 module?</p>\n</div>",
			"exportId": "g8c810d94ee17a3795585af037591ae8f"
		}]
	},
	{
		"id": 44862,
		"name": "Programming as Conversation Part 3: Bundling Expressions and Statements into Functions",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g5640a4410609590d5b562023ad7afaff",
		"items": [
		{
			"id": 432827,
			"title": "Programming as Conversation Part 3: Introduction",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Revisit abstraction</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Before we jump into more code, let's think for a moment about something you\nencounter pretty much every day when you read a news article or email: the way\nwe organize words to express and clarify meaning. For example, a <strong>paragraph</strong>\nis a collection of sentences, introduced by a topic sentence and bundled up or\nclosed by a closing sentence. A <strong>paragraph</strong> can persuade or offend, direct or\nexplain. A paragraph has a <em>function</em>.</p>\n\n<p>\"Code paragraphs\" are called, depending on language, \"functions,\" \"procedures,\"\n\"methods,\" or \"subroutines.\" They bundle up expressions and statements to\naccomplish a task. Just as \"Make a Sandwich\" encompasses specific, \"atomic\"\nactions like \"get slice of bread,\" \"get jelly,\" etc., <code>executeTransfer</code>\nencompasses logic like <code>if (accountStatus === \"open\")</code> or <code>if (accountBalance &gt;=\ntransactionAmount)</code>.</p>\n\n<p>To have code that is easy to read, debug, and maintain, we need to bundle\ncollections of atomic activities into \"code paragraphs\" that do work. JavaScript\ncalls these \"functions.\"</p>\n\n<h2>Abstraction</h2>\n\n<p>This process of bundling up small atoms into a <em>function</em> is called\n\"abstraction.\" \"Abstraction\" comes from the Latin word for \"to pull away.\" When\nwe're further away, many details are hard to see. Only the most relevant shapes\nare recognizable. For example, when you're on an airplane overlooking a city,\nthe details of the cars below — the mileage, what's in the cup holder, the\nmake or model — are invisible; they're not <em>essential</em>. But what we may be\nable to see is the vehicle type (car vs. truck) or the color of the car. By\nabstracting we see what's true at a higher level, or more <em>generally</em>.</p>\n\n<p>Here are a few more \"abstractions:\"</p>\n\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Jerry_Seinfeld\">Jerry Seinfeld</a>, <a href=\"https://en.wikipedia.org/wiki/Ruth_Bader_Ginsburg\">Ruth Bader Ginsburg</a>, and <a href=\"https://en.wikipedia.org/wiki/Cardi_B\">Cardi B</a> are\natomic individuals, but we can refer to them all collectively by the\nabstraction (or they can be <em>abstracted</em> into) \"famous New Yorkers\"</li>\n<li>Books about a killer dog, a scary alter ego, and a scary clown can be\n<em>abstracted</em> into the name \"horror novels (by Stephen King)\"</li>\n<li>Individuals with strange powers and (usually) strange clothing can be\n<em>abstracted</em> into \"superheroes\"</li>\n</ul>\n\n<p>Abstraction is a natural part of learning to converse. When you're first\nlearning to communicate, you don't know enough to start talking about\nabstractions. You prefer to think about real, visible, tangible things. But as\nyou learn about opposites, how things are similar (and how perhaps one thing is\ndissimilar) you grow in your ability to <em>abstract</em>.</p>\n\n<p>In fact, the thing that makes most higher learning \"higher\" is that the\ndiscussion, work, and discovery is focused on uncovering general principles\nthat allow us to predict how things will work more-or-less most of the time.\nAmazingly, this was considered a pretty revolutionary idea at the time when\nGalileo and Newton started doing it. The moment that natural philosophers\nstarted looking for these \"general rules of how things work,\" science as we\nknow it was born.</p>\n\n<h2>Next Steps</h2>\n\n<p>In Programming as Conversation 3, we'll learn to take our JavaScript\n<em>expressions</em> and <em>statements</em> and bundle them up into abstractions called\n<em>functions</em>. Before we get to that, however, we first need to learn a little\nabout <em>testing</em> in JavaScript.</p>",
			"exportId": "programming-as-conversation-part-3-introduction"
		},
		{
			"id": 432829,
			"title": "Testing With Javascript",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-what-is-a-test\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Learn about testing in JavaScript</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Many of the labs you will complete in this program use tests. Passing the tests\nverifies that the code you write behaves as desired and produces the expected\nresults. But writing tests is also a way to provide specifics about exactly how\nthe code should function. In a common development strategy known as <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">test-driven\ndevelopment</a> (or TDD), programmers <em>first</em> write the test for a specific\nfunction of the code <em>then</em> write the code to make the tests pass. TDD is\nconsidered the most reliable methodology for delivering quality code.</p>\n\n<p>What this means is that the results of running the tests will be an important\ntool in figuring out how to get those tests passing. Code testing can feel like\nan abstract concept at first, but it's worth starting to learn how they work.\nWhen you're having difficulty passing a test, being able to read and understand\nthe test output — and the tests themselves — can be an invaluable skill.</p>\n\n<h2>Getting Started</h2>\n\n<p>The lesson is set up as a code-along, so you'll first need to fork and\nclone it to your local environment.</p>\n\n<p><strong>Quick Review:</strong></p>\n\n<p><strong>1.</strong> click the <strong>Fork</strong> icon in the upper right of this page. This will bring\nyou to GitHub. If you are prompted to choose where to fork, choose your personal\nGitHub account.</p>\n\n<p><strong>2.</strong> Once your fork is created, click the <strong>Code</strong> button in GitHub, make sure\n<strong>SSH</strong> is selected, and copy the provided git URL info.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/completing-assignments/clone-repo.gif\" alt=\"clone-repo\"></p>\n\n<p>Then, in your terminal:</p>\n\n<p><strong>3.</strong> Make sure you're in <code>Development/code</code> (or wherever you're storing your\ncode for the course) and clone the repo to your local machine with <code>git clone</code>\nfollowed by the git URL you copied.</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git clone git@github.com:learn-co-curriculum/phase-0-pac-3-what-is-a-test.git\n</code></pre></div>\n<p><strong>4.</strong> The previous command will create a folder in the location you're\ncurrently in containing your fork of this lab's repository. <code>cd</code> into the\nrepository that you just cloned down in the terminal, then run <code>code .</code> to open\nthe files in Visual Studio Code.</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd </span>phase-0-pac-3-what-is-a-test\n<span class=\"gp\">$</span><span class=\"w\"> </span>code <span class=\"nb\">.</span>\n</code></pre></div>\n<p>Open up <code>index.js</code> in your code editor. You are going to see mostly familiar\nthings:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joe</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"mi\">74</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\"> is </span><span class=\"p\">${</span><span class=\"nx\">height</span><span class=\"p\">}</span><span class=\"s2\"> inches tall`</span><span class=\"p\">;</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">height</span><span class=\"p\">,</span> <span class=\"nx\">message</span> <span class=\"p\">};</span>\n</code></pre></div>\n<p>This should all look familiar except for that last line. You don't need to worry\nabout it for now — just know that line of code makes the variables available to\nthe test file.</p>\n\n<p>Take a look at the <code>message</code> variable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\"> is </span><span class=\"p\">${</span><span class=\"nx\">height</span><span class=\"p\">}</span><span class=\"s2\"> inches tall`</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>We can use <code>console.log</code> to take a look at the value of the <code>message</code> variable.\nTo do that, first type <code>console.log(message);</code> on the last line of <code>index.js</code>\nand save the file. Next, navigate to the terminal, and type the following\ncommand in the command line and hit enter (be sure you're still in the lab's\ndirectory):</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>node index.js\n</code></pre></div>\n<p>The <code>node</code> command <em>executes</em> the code in whatever file you specify (in this\ncase, <code>index.js</code>). You should see <code>\"Joe is 74 inches tall\"</code> logged in the\nterminal.</p>\n\n<blockquote>\n<p><strong>Top Tip</strong>: <code>console.log</code> is one of the debugging tools you can use as you're\nwriting your code. Logging a variable and executing the code will allow you to\nverify that the value of the variable is what you're expecting.</p>\n</blockquote>\n\n<p>In the line of code above, we are using <em>string interpolation</em> to inject the\nvalues of the <code>name</code> and <code>height</code> variables into the message. Recall that, for\nthis to work, you have to wrap the entire string in backticks and wrap the\nvariables themselves in <code>${}</code>. If you'd like a refresher, try leaving out the\n<code>${}</code>s or switching to a different type of quotes and run your code again to see\nwhat the value of <code>message</code> is. The backticks and the <code>${}</code> tell Javascript to\ngrab the <em>value</em> inside the variable, not just that variable name.</p>\n\n<h3>The Tests</h3>\n\n<p>We have our code, now let's take a look at the tests. They are located in the\n<code>test</code> folder inside a file named <code>index-test.js</code>. In this lesson we'll get\nfamiliar with the tests, and then run them in the next lesson.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">height</span><span class=\"p\">,</span> <span class=\"nx\">message</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">../index.js</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"cm\">/*\ndescribe('what-is-a-test', () =&gt; {\n  describe('Name', () =&gt; {\n    it('returns \"Susan\"', () =&gt; {\n      expect(name).toEqual('Susan')\n    })\n  })\n\n\n  describe('Height', () =&gt; {\n    it('is less than 40', () =&gt; {\n      expect(height).toBeLessThan(40)\n    })\n  })\n\n  describe('Message', () =&gt; {\n    it('gives the name and height', () =&gt; {\n      expect(message).toInclude(name)\n      expect(message).toInclude(height)\n    })\n  })\n})\n*/</span>\n</code></pre></div>\n<p>In the first line, we're enabling the tests to access the variables in\n<code>index.js</code>. You don't need to worry about exactly how this works at this point —\njust know that the <code>module.exports</code> and <code>require</code> keywords allow us to access\nvariables written in the <code>index.js</code> file from within the test file.</p>\n\n<p>The next thing to notice is that the test code itself is commented out using the\n<code>/*</code> and <code>*/</code> block commenting syntax. This is because, as mentioned above, we\ndon't actually want to run the tests yet. We will run the tests in the lab that\nfollows this lesson; in the version of the files provided for the lab, you'll see\nthat the <code>/*</code> and <code>*/</code> have been removed.</p>\n\n<p>Next, note that the test code consists of three individual tests (each starting\nwith <code>describe</code>) nested inside a block for the tests as a whole (also starting\nwith <code>describe</code>).</p>\n\n<p>The first grouping is testing our <code>name</code> variable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Name</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">returns \"Susan\"</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Susan</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Take a look at the line that begins with <code>expect</code>. If we read it out loud, we\nget \"Expect <code>name</code> to equal Susan\". That's exactly what it's saying! If we\ncontinue down to the Height section you'll see this code:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Height</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">is less than 40</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">height</span><span class=\"p\">).</span><span class=\"nx\">toBeLessThan</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Again, reading the line starting with <code>expect</code> out loud, we get \"Expect <code>height</code>\nto be less than 40.\" Again, this is just what the test is checking. Let's look\nat the final one:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Message</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">gives the name and height</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toInclude</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toInclude</span><span class=\"p\">(</span><span class=\"nx\">height</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>This one has two <code>expect</code> statements. If you read them out as English you'll\ndiscover that the tests expect the value of <code>index.message</code> to include both\n<code>index.name</code> and <code>index.height</code>.</p>\n\n<p>OK Great. You now understand what the tests are saying. In the next lesson we\nare going to cover how to run them, and then you will solve the lab!</p>\n\n<h2>Submitting the Assignment</h2>\n\n<p>To register completion of this lesson, submit the URL for your forked copy of\nthe repo in Canvas. Even though you didn't need to write any code for this\nlesson, you'll need to submit a link in order for this lesson to be marked as\ncomplete in Canvas.</p>\n\n<ol>\n<li>Go to your repository in GitHub and copy the URL. Note, this should be copied\nfrom the browser's address bar, and should start with <a href=\"https://github.com/\">https://github.com/</a>\n</li>\n<li>Go to the assignment in Canvas and click Submit Assignment (or Start\nAssignment)</li>\n<li>Paste in your GitHub URL as your submission</li>\n</ol>",
			"exportId": "g664bf104061e1538845ab8917c670d57"
		},
		{
			"id": 432831,
			"title": "Testing with JavaScript Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-what-is-a-test-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Learn about testing in JavaScript</li>\n<li>Run JavaScript tests</li>\n<li>Learn how to read test results</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Many of the labs you will complete in this program use tests. Passing the tests\nverifies that the code you write behaves as desired and produces the expected\nresults. But writing tests is also a way to provide specifics about exactly how\nthe code should function. In a common development strategy known as <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">test-driven\ndevelopment</a> (or TDD), programmers <em>first</em> write the test for a specific\nfunction of the code <em>then</em> write the code to make the tests pass. TDD is\nconsidered the most reliable methodology for delivering quality code.</p>\n\n<p>What this means is that the results of running the tests will be an important\ntool in figuring out how to get those tests passing. Code testing can feel like\nan abstract concept at first, but it's worth starting to learn how they work.\nWhen you're having difficulty passing a test, being able to read and understand\nthe test output — and the tests themselves — can be an invaluable skill.</p>\n\n<h2>Getting Started</h2>\n\n<p>Recall that in the previous lesson, the tests were commented out. Be sure to fork\nand clone this lab into your local environment so you have the version of the test\nfile that is not commented out.</p>\n\n<p>Navigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.)</p>\n\n<p>Open up <code>index.js</code> in your code editor. You are going to see mostly familiar\nthings:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Joe</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"mi\">74</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\"> is </span><span class=\"p\">${</span><span class=\"nx\">height</span><span class=\"p\">}</span><span class=\"s2\"> inches tall`</span><span class=\"p\">;</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">height</span><span class=\"p\">,</span> <span class=\"nx\">message</span> <span class=\"p\">};</span>\n</code></pre></div>\n<p>This should all look familiar except for that last line. You don't need to worry\nabout it for now — just know that line of code makes the variables available to\nthe test file.</p>\n\n<p>Take a look at the <code>message</code> variable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">name</span><span class=\"p\">}</span><span class=\"s2\"> is </span><span class=\"p\">${</span><span class=\"nx\">height</span><span class=\"p\">}</span><span class=\"s2\"> inches tall`</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>We can use <code>console.log</code> to take a look at the value of the <code>message</code> variable.\nTo do that, first type <code>console.log(message);</code> on the last line of <code>index.js</code>\nand save the file. Next, navigate to the terminal, and type the following\ncommand in the command line and hit enter (be sure you're still in the lab's\ndirectory):</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>node index.js\n</code></pre></div>\n<p>The <code>node</code> command <em>executes</em> the code in whatever file you specify (in this\ncase, <code>index.js</code>). You should see <code>\"Joe is 74 inches tall\"</code> logged in the\nterminal. If you don't, make sure you saved the <code>index.js</code> file.</p>\n\n<blockquote>\n<p><strong>Top Tip</strong>: <code>console.log</code> is one of the debugging tools you can use as you're\nwriting your code. Logging a variable and executing the code will allow you to\nverify that the value of the variable is what you're expecting.</p>\n</blockquote>\n\n<p>In the line of code above, we are using <em>string interpolation</em> to inject the\nvalues of the <code>name</code> and <code>height</code> variables into the message. Recall that, for\nthis to work, you have to wrap the entire string in backticks and wrap the\nvariables themselves in <code>${}</code>. If you'd like a refresher, try leaving out the\n<code>${}</code>s or switching to a different type of quotes and run your code again to see\nwhat the value of <code>message</code> is. The backticks and the <code>${}</code> tell Javascript to\ngrab the <em>value</em> inside the variable, not just that variable name.</p>\n\n<p>Go ahead and delete the <code>console.log</code> from <code>index.js</code> before moving on.</p>\n\n<h3>The Tests</h3>\n\n<p>We have our code, now let's take a look at the tests. They are located in the\n<code>test</code> folder inside a file named <code>index-test.js</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">height</span><span class=\"p\">,</span> <span class=\"nx\">message</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">../index.js</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">what-is-a-test</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Name</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">returns \"Susan\"</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Susan</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Height</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">is less than 40</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">height</span><span class=\"p\">).</span><span class=\"nx\">toBeLessThan</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Message</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">gives the name and height</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toInclude</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n      <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toInclude</span><span class=\"p\">(</span><span class=\"nx\">height</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><strong>Important</strong>: You should never need to make changes to test files unless a\nlab's instructions specifically tell you to do so.</p>\n\n<p>In the first line, we're enabling the tests to access the variables in\n<code>index.js</code>. You don't need to worry about exactly how this works at this point —\njust know that the <code>module.exports</code> and <code>require</code> keywords allow us to access\nvariables written in the <code>index.js</code> file from within the test file.</p>\n\n<p>Next, note that the test code consists of three individual tests (each starting\nwith <code>describe</code>) nested inside a block for the tests as a whole (also starting\nwith <code>describe</code>).</p>\n\n<p>The first grouping is testing our <code>name</code> variable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Name</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">returns \"Susan\"</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Susan</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Take a look at the line that begins with <code>expect</code>. If we read it out loud, we\nget \"Expect <code>name</code> to equal Susan\". That's exactly what it's saying! If we\ncontinue down to the Height section you'll see this code:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Height</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">is less than 40</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">height</span><span class=\"p\">).</span><span class=\"nx\">toBeLessThan</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Again, reading the line starting with <code>expect</code> out loud, we get \"Expect <code>height</code>\nto be less than 40.\" Again, this is just what the test is checking. Let's look\nat the final one:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Message</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">gives the name and height</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toInclude</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toInclude</span><span class=\"p\">(</span><span class=\"nx\">height</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>This one has two <code>expect</code> statements. If you read them out as English you'll\ndiscover that the tests expect the value of <code>index.message</code> to include both\n<code>index.name</code> and <code>index.height</code>.</p>\n\n<p>OK great. Now that you understand what the tests are saying, it's time to run\nthem.</p>\n\n<h2>Running Tests</h2>\n\n<p>To run the tests, make sure you're inside the lab's directory in the terminal,\nthen run <code>learn test</code>. Recall that this command first installs the lab's\ndependencies, then shows the results of running the tests.</p>\n\n<blockquote>\n<p>What exactly do we mean by installing dependencies? Open the <code>package.json</code>\nfile and scroll down to the bottom. You'll see a list of 'DevDependencies'.\nWhat's listed here are JavaScript <em>packages</em>: files or sets of files full of\nexisting, reusable code. They are designed to be shared, allowing many\ndevelopers to use the same code in their own projects. The packages you see\nlisted in <code>package.json</code> make it possible to run the lab's tests. In order to\nuse the packages, we have to install them. One of the things <code>learn test</code> does\nfor us is run <code>npm install</code>, which is the command that installs the\ndependencies.</p>\n</blockquote>\n\n<p>The next step is learning how to read the results that the tests give you.</p>\n\n<h2>Reading Results of Tests</h2>\n\n<p>The first time you run <code>learn test</code>, you should see something that looks like\nthis:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">&gt;</span><span class=\"w\"> </span>js-functions-lab@0.1.0 <span class=\"nb\">test</span>\n<span class=\"gp\">&gt;</span><span class=\"w\"> </span>mocha <span class=\"nt\">--timeout</span> 5000 <span class=\"nt\">-R</span> mocha-multi <span class=\"nt\">--reporter-options</span> <span class=\"nv\">spec</span><span class=\"o\">=</span>-,json<span class=\"o\">=</span>.results.json\n<span class=\"go\">\n\n  what-is-a-test\n    Name\n      1) returns \"Susan\"\n    Height\n      2) is less than 40\n    Message\n      ✓ gives the name and height\n\n\n  1 passing (552ms)\n  2 failing\n\n  1) what-is-a-test\n       Name\n         returns \"Susan\":\n\n      Error: Expected 'Joe' to equal 'Susan'\n      + expected - actual\n\n      -Joe\n      +Susan\n\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:6:26<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n\n  2) what-is-a-test\n       Height\n         is less than 40:\n     Error: Expected 74 to be less than 40\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:13:28<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n\nnpm ERR! Test failed.  See above for more details.\n</span></code></pre></div>\n<blockquote>\n<p><strong>Note</strong>: If you also get an error that ends with \"unexpected character (after\n) at line 1, column 1 <a>parse.c:769</a>\", go back to the\n<code>index.js</code> file and remove the <code>console.log</code> we added earlier, then run\n<code>learn test</code> again.</p>\n</blockquote>\n\n<p>Let's break this down a bit. If you look about a third of the way down in the\noutput, you'll see a summary of how the tests went:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>  1 passing (552ms)\n  2 failing\n</code></pre></div>\n<p>Great! We've already got one test passing! Now let's see how we failed the other\ntwo tests.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>  1) what-is-a-test\n       Name\n         returns \"Susan\":\n\n      Error: Expected 'Joe' to equal 'Susan'\n      + expected - actual\n\n      -Joe\n      +Susan\n\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n      at Context.&lt;anonymous&gt; (test/index-test.js:6:26)\n      at processImmediate (internal/timers.js:461:21)\n\n  2) what-is-a-test\n       Height\n         is less than 40:\n     Error: Expected 74 to be less than 40\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\n      at Context.&lt;anonymous&gt; (test/index-test.js:13:28)\n      at processImmediate (internal/timers.js:461:21)\n</code></pre></div>\n<p>While there is no hard and fast rule, and there will be exceptions, it is most\noften best to address your test errors in order. So let's take a look at our\nfirst error:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>1) what-is-a-test\n       Name\n         returns \"Susan\":\n\n      Error: Expected 'Joe' to equal 'Susan'\n      + expected - actual\n\n      -Joe\n      +Susan\n\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n      at Context.&lt;anonymous&gt; (test/index-test.js:6:26)\n      at processImmediate (internal/timers.js:456:21)\n</code></pre></div>\n<p>Here is the specific error:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>      Error: Expected 'Joe' to equal 'Susan'\n      + expected - actual\n\n      -Joe\n      +Susan\n</code></pre></div>\n<p>It tells us what the test is expecting (<code>Expected 'Joe' to equal 'Susan'</code>) and\nthen gives us details about the <code>expected</code> and <code>actual</code> values. This shows you\nexactly how the value your code is returning (the <code>actual</code> value) differs from\nwhat the test is looking for. Make sure you understand what this is telling you\n— it will come in handy in later labs!</p>\n\n<p>This error makes sense because we have the <code>name</code> variable set equal to \"Joe\" in\nour <code>index.js</code> file. Let's change that line of code to set <code>name</code> equal to\n\"Susan\" instead. Run the tests again by typing <code>learn test</code> in the terminal's\ncommand line, and you should see that we are now passing 2 of the 3 tests!</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>  what-is-a-test\n    Name\n      ✓ returns \"Susan\"\n    Height\n      1) is less than 40\n    Message\n      ✓ gives the name and height\n\n\n  2 passing (736ms)\n  1 failing\n\n  1) what-is-a-test\n       Height\n         is less than 40:\n     Error: Expected 74 to be less than 40\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\n      at Context.&lt;anonymous&gt; (test/index-test.js:13:28)\n      at processImmediate (internal/timers.js:461:21)\n</code></pre></div>\n<p>Woot! You passed another one. Now go ahead and try to pass the remaining test on\nyour own.</p>\n\n<h3>Common Errors</h3>\n\n<p>While you are solving the other tests you may come across a few errors. Let's go\nover some common ones:</p>\n\n<h4>Variable Not Defined</h4>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>ReferenceError: name is not defined\n</code></pre></div>\n<p>That one says that the <code>name</code> variable is not defined. That makes no sense! We\ninitialized the <code>name</code> variable in <code>index.js</code>! What that actually means is that\nthe test couldn't find the variable <code>name</code>. You'll get this error if the name of\none of your variables is different than the test is expecting. Check to make\nsure you used the correct variable names and look carefully for typos.</p>\n\n<h4>Unexpected Identifier</h4>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/index.js:1\ncnst name = \"Susan\";\n     ^^^^\n\nSyntaxError: Unexpected identifier\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require (internal/modules/cjs/helpers.js:88:18)\n    at Object.&lt;anonymous&gt; (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/test/index-test.js:1:15)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require (internal/modules/cjs/helpers.js:88:18)\n    at /Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:311:36\n    at Array.forEach (&lt;anonymous&gt;)\n    at Mocha.loadFiles (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:308:14)\n    at Mocha.run (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:849:10)\n    at Object.exports.singleRun (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:108:16)\n    at exports.runMocha (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:143:13)\n    at Object.exports.handler (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run.js:305:3)\n    at Object.runCommand (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/lib/command.js:242:26)\n    at Object.parseArgs [as _parseArgs] (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:1104:24)\n    at Object.parse (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:566:25)\n    at Object.exports.main (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/cli.js:68:6)\n    at Object.&lt;anonymous&gt; (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/bin/mocha:133:29)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\nnpm ERR! Test failed.  See above for more details.\n</code></pre></div>\n<p>Whoa! So many words that make no sense. Don't worry though. The most important\nline is the <code>SyntaxError: Unexpected identifier</code> line. What that means is you\nhave some sort of typo or syntax mistake. It could be a HUGE variety of things\nbut usually, JS will try and give you a hint. This time it's pointing to the\n<code>cnst name = \"Susan\"</code> line of code. Take a look and read <em>very carefully</em>:\n<code>const</code> is misspelled. Whoops! Once we fix that everything will work.</p>\n\n<p>One note on this type of error is that it is sort of a catch-all. Tons and tons\nof problems end in that sort of error message. Whenever you see it, be sure to\nread over your code with a fine-toothed comb... and you'll find the problem!</p>\n\n<h2>Type Errors</h2>\n\n<p>On the second test, there is a chance you might see the following error:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>1) what-is-a-test\n       Height\n         is less than 40:\n     Error: The \"actual\" argument in expect(actual).toBeLessThan() must be a number\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\n      at Context.&lt;anonymous&gt; (test/index-test.js:13:28)\n      at processImmediate (internal/timers.js:456:21)\n</code></pre></div>\n<p>This error is slightly different than the last two. In this case, the test is\ngiving us a unique message because it recognizes a problem. If we look at this\ntest in <code>test/index-test.js</code>, we see this:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Height</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">is less than 40</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">height</span><span class=\"p\">).</span><span class=\"nx\">toBeLessThan</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>We can see that the word <code>\"actual\"</code> in this case is referring to the <code>height</code>\nvariable. The error message is telling us that <code>height</code> <strong>must be a number</strong>. If\nyou're seeing this, make sure that you have set the <code>height</code> variable to a\n<strong>number</strong> that's less than 40 (e.g. <code>39</code>), not a <strong>string</strong> (<code>\"39\"</code>). The test\nwill interpret the value as a string due to the quotation marks wrapping it.</p>\n\n<h2>Optional Mocha Configuration</h2>\n\n<p>In this lab, we only had three tests to pass, but as you continue through the\ncurriculum you will encounter labs with many more tests. You can imagine that\nthe test output could get very long, making it more difficult to focus in on how\nto fix a particular error.</p>\n\n<p>To help with this issue, there is some very simple setup you can put in place in\nMocha that will cause the tests to stop as soon as the first failing test is\nencountered.</p>\n\n<p>To implement this, open up the <code>package.json</code> file and find the test script. It\nshould look something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json\"</span><span class=\"w\">\n</span></code></pre></div>\n<p>Add the <code>--bail</code> flag to the end of the line, inside the quotes:</p>\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\"</span><span class=\"w\">\n</span></code></pre></div>\n<p>That's it!</p>\n\n<h2>Conclusion</h2>\n\n<p>Once you've got all your tests passing, you're ready to move on.\nCongratulations! You've solved your first JavaScript tests!</p>",
			"exportId": "g05bb825dd4cd623e71242416c1a462cd"
		},
		{
			"id": 432832,
			"title": "Introduction to Functions in JavaScript",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro-to-functions\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Writing and calling JavaScript functions</li>\n<li>Understand <code>arguments</code> and <code>parameters</code></li>\n<li>Learn what a return value is in JavaScript</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In this lesson, we'll introduce functions and cover how to create and execute\nthem. There are no tests, but be sure to follow along with the examples.</p>\n\n<h2>Getting Started</h2>\n\n<p>To start, fork and clone this lesson into your local environment. Since this\nlesson doesn't have a \"Fork\" button, you'll need to click the GitHub \"octocat\"\nbutton at the top of the page to open the lesson's repo in GitHub, then click\nthe fork button in the upper right corner.</p>\n\n<p><img src=\"http://readme-pics.s3.amazonaws.com/fork_button.jpg\" alt=\"Fork Button\"></p>\n\n<p>Once the lesson has been forked, clone it to your local environment, navigate\ninto the lesson directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.) You will be writing your code in the <code>index.js</code> file, and\nrunning it by entering <code>node index.js</code> in the terminal. Remember that you need\nto save the file before running the command.</p>\n\n<h2>Writing and Calling JavaScript Functions</h2>\n\n<p>So far, our programs have consisted of writing individual lines of code directly\ninto a REPL. This is a great way to test out JavaScript functionality and to get\na feel for how it handles different values and operations, but it's not super\nextensible. What if, for example, we wanted to log <code>\"Hello, world!\"</code> a bunch of\ntimes? We could write the statement out repeatedly:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>But that quickly gets tiresome, and it's easy to see how even small programs\nwould come to rival <em>War and Peace</em> in length.</p>\n\n<p>The good news is, there's a better way! We can use a function!</p>\n\n<p>Functions are ways of giving instructions to the JavaScript interpreter that can\nbe reused over and over again by <em>calling</em> the function. Functions are the basic\nbuilding blocks of programming in many languages (although they aren't always\ncalled <em>functions</em>), serving both to store the instructions for how to perform a\ncertain task, and to help organize the code in our programs. By using functions\n— and giving them meaningful names — we can make our code easier to\nread, debug and maintain.</p>\n\n<p>In JavaScript, functions are written with the <code>function</code> keyword:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">doNothing</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n</code></pre></div>\n<p>As you can see, when we declare a function, we start with the <code>function</code>\nkeyword, followed by a name for the function (in this case, <code>doNothing</code>),\nfollowed by a pair of parentheses. Next comes a pair of curly braces, which\ncontains the code to be executed when the function is called. In this case, the\nfunction, as its name implies, doesn't do much. Copy the function into\n<code>index.js</code> and then execute it by running <code>node index.js</code> in the terminal.</p>\n\n<p>...</p>\n\n<p>Anything happen? No? Good! This isn't surprising because even though we declared\nthe function, we didn't give it any instructions. (Conventionally, a function\nthat does nothing is called a \"noop\" (pronounced \"no op\") — sometimes they\ncome in handy!)</p>\n\n<p>Let's declare another function and this time give it something to do. As\nmentioned above, we put the code that we want to be executed when our function\nis called inside the curly braces — this is called the <em>function body</em>.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">sayHello</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here we have a function called <code>sayHello</code>; its body reads\n<code>console.log('Hello!');</code>. Add this function to <code>index.js</code> and then execute it\nagain.</p>\n\n<p>What happened this time? Still nothing? That's because the code above is just\nthe <em>function declaration</em>. So far, all we have done is <em>define</em> the function.\nIn order to actually execute the code in the function body, we have to <em>call</em>\nit. To call the function, we simply type the name of the function followed by\n<code>()</code>.</p>\n\n<p>Add the following to <code>index.js</code>, after the function declaration:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">sayHello</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>Now when you execute the code, you should see <code>Hello!</code> printed in the\nterminal!</p>\n\n<blockquote>\n<p>Note: We've just learned that, in order for the code in a function to be\nexecuted, the function must be called. Any time you're trying out code, either\nin a REPL or in your local environment, you'll need to add the function call,\nas we did above, before executing the code. For <strong>labs</strong>, however, you will\ngenerally <em>not</em> need to do this yourself. The tests will take care of it for\nyou.</p>\n</blockquote>\n\n<h3>Saying hello</h3>\n\n<p>Let's write a function to say hello to Guadalupe — be sure to follow along!</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">sayHelloToGuadalupe</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, Guadalupe!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Run this code and see what you get. Don't forget to include the function call!</p>\n\n<p>Now what if we want to say hello to Liz? Well, we could write another function\nand add it to <code>index.js</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">sayHelloToLiz</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, Liz!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When we can call it, we should see <code>Hello, Liz!</code> written out in the terminal.</p>\n\n<p>Okay, now we're going to say hello to Samip — you know the drill!</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">sayHelloToSamip</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, Samip!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now let's call all three!</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">sayHelloToGuadalupe</span><span class=\"p\">();</span>\n<span class=\"nx\">sayHelloToLiz</span><span class=\"p\">();</span>\n<span class=\"nx\">sayHelloToSamip</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>We can stack all three of these calls in <code>index.js</code> and, when we execute the\ncode, we should see all three messages output in the terminal.</p>\n\n<p>While these functions are undoubtedly useful, they're only useful if we only\ntalk to Guadalupe, Liz, and Samip. Every time we want to greet someone new (or\nuse a greeting other than \"Hello,\" for that matter), we need to define a new\nfunction.</p>\n\n<p>What if there was some way to take what's similar about these functions —\nthe fact that they all call <code>console.log()</code> with \"Hello,\" a name, and an\nexclamation point — and substitute what's different (the name) as we go?</p>\n\n<p>Turns out, we can! We can use something called an <em>argument</em> to pass information\nto a function.</p>\n\n<h2>Understand <code>arguments</code> and <code>parameters</code></h2>\n\n<p>Arguments give us a way to pass information into a function to make our\nfunctions more flexible. We pass the argument at the time that we <strong>call</strong> the\nfunction, by including it inside the parentheses after the name of the function:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"nx\">thing</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">thing</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">doSomething</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">anything</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// passing the argument 'anything' into our function</span>\n</code></pre></div>\n<p>Try this out with a few different arguments. You'll see that whatever value we\npass in when we <em>call</em> the function is what the function logs. Pretty cool,\nright?</p>\n\n<p>We can easily extend this to our \"say hello to\" example; by using an argument,\nwe no longer need a separate function for each person we want to say hello to:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">sayHelloTo</span><span class=\"p\">(</span><span class=\"nx\">firstName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Hello, </span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\">!`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">sayHelloTo</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Guadalupe</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// \"Hello, Guadalupe!\"</span>\n<span class=\"nx\">sayHelloTo</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Jane</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// \"Hello, Jane!\"</span>\n<span class=\"nx\">sayHelloTo</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">R2-D2</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// \"Hello, R2-D2!\"</span>\n<span class=\"nx\">sayHelloTo</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// \"Hello, 1!\"</span>\n\n<span class=\"c1\">// ^ Note that in the above, JavaScript coerces the number 1 to the string \"1\"</span>\n</code></pre></div>\n<p>In the example above, you may have noticed that there's also something inside\nthe parentheses in the function <em>declaration</em>: <code>function sayHelloTo(firstName)</code>.\nThis is called the <strong>parameter</strong>, in this case <code>firstName</code>. A <strong>parameter</strong> is a\nplaceholder that stores whatever value gets passed in as an <strong>argument</strong>. For\nexample, when we run the function call <code>sayHelloTo('Guadalupe')</code>, the value of the\nargument, 'Guadalupe', gets stored in the parameter <code>firstName</code>. Then, inside the\nfunction body, we access that value by using the parameter name, interpolate it\ninto the string, and log the string to the terminal.</p>\n\n<p>Essentially, the arguments are the actual values that we pass to the function,\nand the parameters are the named references where we store those passed-in\nvalues. An argument can be any JavaScript expression —&nbsp;any piece of\nJavaScript code that evaluates to a value —&nbsp;from something as simple as\n<code>5</code> or <code>'Avi'</code> to something as complex as an entire function.</p>\n\n<p>Defining a parameter in our function declaration ensures that the argument gets\nstored as a local, function-level variable that's available anywhere in the\nfunction body. We access the value simply by using the name of the parameter\nthat it's stored in.</p>\n\n<p>Note that we can only access parameters within the body of the function. Try\nadding <code>console.log(firstName)</code> to the end of the <code>index.js</code> and running the\ncode. You should see a <code>ReferenceError</code> telling you that <code>firstName</code> is not\ndefined. This relates to a very important concept in JavaScript, <em>variable\nscope</em>.</p>\n\n<h3>Variable Scope</h3>\n\n<p>Variables in JavaScript exist within a particular <strong>scope</strong>. For example, if a\nvariable is defined in a function — whether it's defined as a parameter or\ninside the body of the function — it can only be accessed inside that\nfunction.</p>\n\n<p>Variables can also be declared in the <em>global scope</em>, i.e., outside of any\nfunction. These variables will be accessible (and can potentially be\noverwritten) everywhere within the program. As a general rule, it is best to\navoid global variables as much as possible because they can lead to bugs that\ncan be difficult to track down. Using local variables instead makes it easier to\nkeep track of the values of your variables and makes your code easier to debug\nand maintain.</p>\n\n<p>The topic of scope in JavaScript is quite complex. You will learn more about it,\nand its implications, later in the course.</p>\n\n<h3>Saying something new</h3>\n\n<p>What if we want our function to say something other than \"Hello\"? Well, we can\nmove the greeting to a parameter as well:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">say</span><span class=\"p\">(</span><span class=\"nx\">greeting</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">greeting</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\">!`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Add the above to your <code>index.js</code> file along with the function call\n<code>say(\"Goodbye\", \"Julio\");</code>. When you run the code you should see \"Goodbye,\nJulio!\" written out to the terminal.</p>\n\n<h3>Order of Arguments</h3>\n\n<p>What if we reversed the order of our arguments? Try this function call:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">say</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Julio</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">hello</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You should now see \"Julio, hello!\" in the terminal. It looks like the name is\nnow stored in the <code>greeting</code> parameter and the greeting is stored in the <code>name</code>\nvariable. We can verify that by adding a couple more <code>console.log()</code>s:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">say</span><span class=\"p\">(</span><span class=\"nx\">greeting</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">firstName: </span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">greeting: </span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">greeting</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">greeting</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\">!`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When you run this using the function call above, you should see this:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>firstName:  hello\ngreeting:  Julio\nJulio, hello!\n</code></pre></div>\n<p>You've just illustrated an important point: <strong>the parameter names only have\nmeaning to us, the programmer; JavaScript assigns values to parameters based\nsolely on the order of the arguments that are passed.</strong></p>\n\n<h2>Return Values in JavaScript</h2>\n\n<p>These functions we've been coding are pretty cool, but they don't actually do a\nwhole lot — mostly they just print things to the terminal. We've seen how\nwe can make them a little bit more dynamic with arguments, but how do we make\nthem do something for us? For example, we might want to create a function\n<code>add()</code> that allows us to add together two numbers. Enter the following in\n<code>index.js</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When we return inside a function, we're giving that value back to the world\noutside the function. Let's add the function call <code>add(1, 2)</code> and run the code.\nWait — nothing happened! What's going on here? Well, our function is\n<em>returning</em> the value of the sum <code>x + y</code> but we can't see that because we aren't\ndoing anything with it. So let's use our handy developer tool, <code>console.log()</code>,\nto see what it's returning. Rerun the code after modifying your function call as\nfollows:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>See that? We got <code>3</code> back! What if we pass 80 and 9000 as our arguments instead?\nWhoa! We got 9080!</p>\n\n<p>Let's unpack what's happening here. We're <em>calling</em> our <code>add()</code> function,\npassing in two numbers as the arguments. The function is <em>returning</em> the value\nof the sum of the two arguments, and we're <em>logging</em> that result in the terminal\nso we can see it. The difference between this and what we were doing before\n— having the <em>function itself</em> log something to the terminal — may\nseem subtle, but it's actually quite important. Let's look at another example.\nBe sure to follow along.</p>\n\n<p>Let's rewrite our <code>say()</code> function from above so that now instead of\n<code>console.log()</code>-ing what it says, it returns it.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">say</span><span class=\"p\">(</span><span class=\"nx\">greeting</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">greeting</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\">!`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now when we call <code>console.log(say(\"Hello\", \"Liz\"));</code> we'll see\n<code>Hello, Liz!</code>, just as we did before. But what if we try logging the result of\ncalling the <em>original</em> version of the function:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">say</span><span class=\"p\">(</span><span class=\"nx\">greeting</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">greeting</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\">!`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now <code>console.log(say(\"Hello\", \"Liz\"));</code> will result in the following:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Hello, Liz!\nundefined\n</code></pre></div>\n<p>The first line comes from the <code>console.log()</code> inside the function body, and the\nsecond line comes from logging the result of the function call. What this shows\nus is that this version of our function <strong>does not have a return value</strong>! This\nis because a <code>console.log()</code> doesn't return anything — it just writes\nsomething out for the developer to see. <strong>In JavaScript, in order to have our\nfunction return a value, we need to use the <code>return</code> keyword.</strong></p>\n\n<p>We can also see this if we go back to our <code>add()</code> function, and remove the\n<code>return</code> keyword:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span> <span class=\"nx\">y</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now if you call the function and log the results:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>you'll see that the function has no return value. Our function is doing the\naddition but we can't do anything with the result, which makes it pretty\nuseless. Be sure to add the <code>return</code> keyword back in.</p>\n\n<p>Setting up your function to return a value means that value is available to be\nused elsewhere in your program. So how might we use the return value of our\n<code>add()</code> function? Let's say we're creating a simple calculator function. A\nhigh-level outline of how it could work might be:</p>\n\n<ol>\n<li>the calculator function asks the user to enter two numbers they want to be\nadded together,</li>\n<li>the values are stored into variables (<code>num1</code> and <code>num2</code>, perhaps),</li>\n<li>the function then calls the <code>add()</code> function, passing <code>num1</code> and <code>num2</code> as\narguments,</li>\n<li>the <code>add()</code> function <em>returns</em> the sum</li>\n<li>the calculator function returns a message to the user telling them what the\nsum is.</li>\n</ol>\n\n<p>Note what's happening in step 3: our calculator function is <strong>calling</strong> our add\nfunction. This is an important thing to know about functions: they can be called\nby other functions! Eventually we'll want our calculator to do more than just\nadd. Rather than build one very long function that contains code for adding,\nsubtracting, multiplying, etc., we can <em>encapsulate</em> the code for each operator\ninto its own function and call them.</p>\n\n<p>The code that calls the <code>add()</code> function and creates the message might look\nsomething like this:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">sum</span> <span class=\"o\">=</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">num1</span><span class=\"p\">,</span> <span class=\"nx\">num2</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`The sum of your numbers is: </span><span class=\"p\">${</span><span class=\"nx\">sum</span><span class=\"p\">}</span><span class=\"s2\">.`</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Or, equivalently:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">`The sum of your numbers is: </span><span class=\"p\">${</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">num1</span><span class=\"p\">,</span> <span class=\"nx\">num2</span><span class=\"p\">)}</span><span class=\"s2\">.`</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The <code>message</code> could then be written out to the screen.</p>\n\n<h3>One Last Point About <code>return</code></h3>\n\n<p>There's one additional thing it's important to know about <code>return</code>. If we wanted\nto both <code>return</code> <em>and</em> log a string in our <code>say()</code> function, we might try\nwriting:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">say</span><span class=\"p\">(</span><span class=\"nx\">greeting</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">greeting</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\">!`</span><span class=\"p\">;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">I was called!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Let's call the function and log the result:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">say</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Howdy</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">partner</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>When you run that code, the return value is logged, but the <code>console.log()</code>\ninside the function body does not execute!</p>\n\n<p>This is because <code>return</code> <strong>ends the execution inside the function</strong>. Nothing\nafter the line with the <code>return</code> will be executed.</p>\n\n<blockquote>\n<p><strong>Top Tip:</strong> Take a look at the above code in <code>index.js</code>. Depending on which\ntext editor you're using, you may see that the line with the <code>console.log()</code>\nis \"grayed out.\" This is the text editor giving you a hint that that line of\ncode is unreachable.</p>\n</blockquote>\n\n<p>To both log and return like we want to, we can switch the order around:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">say</span><span class=\"p\">(</span><span class=\"nx\">greeting</span><span class=\"p\">,</span> <span class=\"nx\">firstName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">I was called!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">greeting</span><span class=\"p\">}</span><span class=\"s2\">, </span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\">!`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now if we rerun the code, we should see the output of both <code>console.log()</code>s.</p>\n\n<h2>Your turn!</h2>\n\n<p>Try rewriting some of the functions that we've written in this lesson to get\nused to the difference between <code>return</code>-ing and printing (<code>console.log()</code>-ing)\nto the terminal. Try writing a function of your own that returns something.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\">MDN - Functions</a></li>\n</ul>",
			"exportId": "introduction-to-functions-in-javascript"
		},
		{
			"id": 432833,
			"title": "Introduction to Functions Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro-to-functions-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Practice reading tests and test errors</li>\n<li>Practice writing functions</li>\n<li>Learn how to use JavaScript's <code>toUpperCase()</code> and <code>toLowerCase()</code> methods</li>\n<li>Practice using <code>return</code> and <code>console.log()</code>\n</li>\n<li>Practice creating conditional statements</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Welcome to the JavaScript functions lab! You'll notice a few new things in this\nlesson that we haven't encountered before. Don't worry, we'll walk you through\nthem.</p>\n\n<p>If you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.)</p>\n\n<h3>Code-Along</h3>\n\n<p>To start, open up <code>index.js</code> in your text editor. You should see, well, nothing.\nWe'll fix that soon.</p>\n\n<p>Now open up <code>test/root.js</code>. Hey, there's something! What's all of this stuff\ndoing?</p>\n\n<p>At the very top of the file, you'll see</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nx\">expect</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">expect</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">babel</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">babel-core</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">jsdom</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">jsdom</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">path</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>This might be a bit bewildering, but all we're doing is referencing different\n<em>libraries</em> that help us run the tests. You may recall that we talked about\n<em>packages</em> in an earlier lesson. A library is similar: it's code that someone\nelse (usually multiple someones) wrote for our use. The code above makes the\nlibraries available inside our test environment, which enables us to run the\ntests.</p>\n\n<p>If you go to <code>test/index-test.js</code>, you'll see</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">shout(string)</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// there's stuff in here, too</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p><code>describe</code> is a function provided by our test runner (in this case, we're using\n<a href=\"https://mochajs.org/\">Mocha</a>) — it's basically a container for our tests.</p>\n\n<p>Let's take a closer look at that <code>describe()</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">shout(string)</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">receives one argument and returns it in all caps</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// we'll get to this in a sec</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>These internal <code>describe()</code> calls are used for <em>describing</em> the functions that\nyou're going to write. In this case, the test is saying, \"Okay, I think there's\ngoing to be a function called <code>shout</code>, and it should take one argument (it\ndoesn't actually matter what the argument is called, but <code>string</code>, is nice and\nspecific, don't you think?). It should <em>return</em> that argument in all caps.</p>\n\n<p>Finally, we have</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">shout</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">hello</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">HELLO</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>which says that it <em>expects</em> a call to <code>shout()</code> with the string <code>'hello'</code> will\n<code>equal</code> the string <code>'HELLO'</code>. This is the actual test — otherwise called a spec,\nexpectation, or assertion — for this function. We can have more than one test\nper function, but let's start with this one.</p>\n\n<h3>Running the Tests</h3>\n\n<p>To run the tests, run <code>learn test</code> in the terminal. The first output you'll see\nwill look something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>learn <span class=\"nb\">test</span>\n<span class=\"gp\">&gt;</span><span class=\"w\"> </span>java-script-intro-to-functions-lab@0.1.0 <span class=\"nb\">test</span>\n<span class=\"gp\">&gt;</span><span class=\"w\"> </span>mocha <span class=\"nt\">--timeout</span> 5000 <span class=\"nt\">-R</span> mocha-multi <span class=\"nt\">--reporter-options</span> <span class=\"nv\">spec</span><span class=\"o\">=</span>-,json<span class=\"o\">=</span>.results.json\n<span class=\"go\">\n\n\n  shout(string)\n    1) receives one argument and returns it in all caps\n\n  whisper(string)\n    2) receives one argument and returns it in all lowercase\n\n  logShout(string)\n    3) takes a string argument and logs it in all caps using console.log()\n\n  logWhisper(string)\n    4) takes a string argument and logs it in all lowercase using console.log()\n\n  sayHiToHeadphonedRoommate(string)\n    5) returns \"I can't hear you!\" if `string` is lowercase\n    6) returns \"YES INDEED!\" if `string` is uppercase\n    7) returns \"I would love to!\" if `string` is \"Let's have dinner together!\"`\n\n\n  0 passing (120ms)\n  7 failing\n\n  1) shout(string)\n       receives one argument and returns it in all caps:\n     ReferenceError: shout is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:4:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n\n  2) whisper(string)\n       receives one argument and returns it in all lowercase:\n     ReferenceError: whisper is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:10:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n\n  3) logShout(string)\n       takes a string argument and logs it in all caps using console.log():\n     ReferenceError: logShout is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:18:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n\n  4) logWhisper(string)\n       takes a string argument and logs it in all lowercase using console.log():\n     ReferenceError: logWhisper is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:30:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n\n  5) sayHiToHeadphonedRoommate(string)\n       returns \"I can't hear you!\" if `string` is lowercase:\n     ReferenceError: sayHiToHeadphonedRoommate is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:40:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n\n  6) sayHiToHeadphonedRoommate(string)\n       returns \"YES INDEED!\" if `string` is uppercase:\n     ReferenceError: sayHiToHeadphonedRoommate is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:44:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n\n  7) sayHiToHeadphonedRoommate(string)\n       returns \"I would love to!\" if `string` is \"Let's have dinner together!\"`:\n     ReferenceError: sayHiToHeadphonedRoommate is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:48:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.j\n</span></code></pre></div>\n<p>Hm, seven failed tests - that seems like a lot to navigate. Let's go ahead and\nget Mocha set up to only show the first failing test. Find the test script in\nthe <code>package.json</code> file and add the <code>--bail</code> tag to the end:</p>\n<div class=\"highlight\"><pre class=\"highlight json\"><code><span class=\"nl\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\"</span><span class=\"w\">\n</span></code></pre></div>\n<p>Save the file and run the tests. You should now see something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>npm <span class=\"nb\">test</span>\n<span class=\"go\">\n</span><span class=\"gp\">&gt;</span><span class=\"w\"> </span>java-script-intro-to-functions-lab@0.1.0 <span class=\"nb\">test</span>\n<span class=\"gp\">&gt;</span><span class=\"w\"> </span>mocha <span class=\"nt\">--timeout</span> 5000 <span class=\"nt\">-R</span> mocha-multi <span class=\"nt\">--reporter-options</span> <span class=\"nv\">spec</span><span class=\"o\">=</span>-,json<span class=\"o\">=</span>.results.json <span class=\"nt\">--bail</span>\n<span class=\"go\">\n\n\n  shout(string)\n    1) receives one argument and returns it in all caps\n\n  0 passing (159ms)\n  1 failing\n\n  1) shout(string)\n       receives one argument and returns it in all caps:\n     ReferenceError: shout is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:4:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n\n\n</span></code></pre></div>\n<p>Much better! Now let's see if we can get that first test to pass. Open up\n<code>index.js</code>.</p>\n\n<p>When we write our code, we follow the guidance of the tests. Let's take a look\nat that first error:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">  1) shout(string)\n       receives one argument and returns it in all caps:\n     ReferenceError: shout is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:4:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n</span></code></pre></div>\n<p>The output above comes from this test in <code>index-test.js</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">shout(string)</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">receives one argument and returns it in all caps</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">shout</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">hello</span><span class=\"dl\">\"</span><span class=\"p\">)).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">HELLO</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>We know that the test is expecting a function called <code>shout</code> that accepts an\nargument. The error tells us that <code>shout</code> isn't defined. So let's start by\ndeclaring our function in <code>index.js</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">shout</span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// todo</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We know we won't pass the test yet because our function doesn't do anything yet.\nHowever, if we rerun the test, it should now give us more information about what\nwe need to do:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">  1) shout(string)\n       receives one argument and returns it in all caps:\n     Error: Expected undefined to equal 'HELLO'\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:4:28<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n</span></code></pre></div>\n<p>Anytime you see <code>Error: Expected undefined to equal [something]</code>, that means\nthat the test is looking for a <code>return</code> value. We can also see the description\nof what the function should do: it <code>receives one argument and returns it in all caps</code>.</p>\n\n<p>Okay, so with that information, we know that our function should return whatever\nstring is passed in as an argument:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">shout</span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But we're still missing one piece: how do we make <code>string</code> all caps? JavaScript\nhas a built-in method for that! It's called <code>toUpperCase()</code>. We can call it on\nany string:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"dl\">\"</span><span class=\"s2\">Hello!</span><span class=\"dl\">\"</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">();</span> <span class=\"c1\">// 'HELLO!'</span>\n</code></pre></div>\n<p>Above, we've called it directly on a literal string but, of course, we can also\ncall it on a variable. So let's try it with our <code>shout()</code> function:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">shout</span><span class=\"p\">(</span><span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">string</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and run our tests again. We get:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">  shout(string)\n    ✓ receives one argument and returns it in all caps\n\n  whisper(string)\n    1) receives one argument and returns it in all lowercase\n\n  1 passing (147ms)\n  1 failing\n\n  1) whisper(string)\n       receives one argument and returns it in all lowercase:\n     ReferenceError: whisper is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:10:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:461:21)\n</span></code></pre></div>\n<p>Hey! We got one to pass! Time to tackle the next error!</p>\n\n<h2>Your Turn</h2>\n\n<p>Now it's your turn to get the rest of the tests to pass. Note that some of them\nrequire you to use <code>console.log()</code> instead of <code>return</code> — follow the guidance of\nthe tests!</p>\n\n<h3>Instructions</h3>\n\n<p>In this lab, we're writing functions that \"speak\" at different volumes — they\nwhisper or they shout. The next test is similar to the first:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">1) whisper(string)\n       receives one argument and returns it in all lowercase:\n     ReferenceError: whisper is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:10:5<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (internal/timers.js:456:21)\n</span></code></pre></div>\n<p>This test is telling us that <code>whisper(string)</code> receives one argument and returns\nit in all lowercase. At the moment, the test is failing because whisper is not\ndefined.</p>\n\n<blockquote>\n<p><strong>Note:</strong> Just like <code>.toUpperCase()</code> changes any string to all uppercase in\nJavaScript, <code>.toLowerCase()</code> (e.g., <code>'HELLO'.toLowerCase()</code>) changes any\nstring to all lowercase.</p>\n</blockquote>\n\n<p>After you get <code>whisper(string)</code> passing, the next two tests will be checking to\nsee if a specific string is logged when a function is called. You will still\nneed to use the <code>.toUpperCase()</code> and <code>.toLowerCase()</code> methods for\n<code>logShout(string)</code> and <code>logWhisper(string)</code>. Keep in mind, though, that these\ntests are not looking for return values, only logs.</p>\n\n<p>The final function you need to create is <code>sayHiToHeadphonedRoommate()</code>. Your\nroommate is very into their music, so whispering can be a bit difficult, but\nthey'll always hear you if you say, \"Let's have dinner together!\" This time,\nyou will need to return different strings depending on the string passed into\nthe function.</p>\n\n<p><strong>Note:</strong> Although there are 3 tests for <code>sayHiToHeadphonedRoommate()</code>, you only\nneed to write <strong>one</strong> function. This function should be able to handle all three\ntest conditions:</p>\n\n<ul>\n<li>If the string that is passed into the function is all lowercase, the function\nshould return \"I can't hear you!\"</li>\n<li>If the string that is passed into the function is all uppercase, the function\nshould return \"YES INDEED!\"</li>\n<li>If the string that is passed into the function is equal to \"Let's have dinner\ntogether!\", the function should return \"I would love to!\"</li>\n</ul>\n\n<p>How do we check if a string is all lowercase or all uppercase? Let's take a look\nusing a REPL:</p>\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/InsubstantialTanInternet?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>In the first line we're defining a string variable. In the next two lines we log\nthe original variable, then the variable after calling <code>toUpperCase()</code> on it.\nFinally, we're checking to see whether those two values are equal. If you click\nthe Run button, you'll see that the original string is mixed case and the upper\ncased version of it is (not surprisingly) uppercase. It should not come as a\nsurprise, therefore, that comparing them with the equality operator (<code>===</code>)\nreturns false. What do you think will happen if we initialize <code>string</code> to\n\"HELLO!\" instead? Play around with different values for <code>string</code> in <a href=\"https://replit.com/languages/javascript\">replit</a>\nand see what happens. Also try doing the same thing with <code>toLowerCase()</code> and\nmake sure you understand what's happening.</p>\n\n<p>Basically, if we compare a string to its uppercased (or lowercased) version and\nthe two values are equal, then we know that the original string is uppercase (or\nlowercase). So now that we know how to make these comparisons, how can we use\nthem to conditionally return different strings? If you need a refresher, go back\nand review the lesson on Selection with Conditionals.</p>\n\n<p>Remember that punctuation is important! Humans might be able to understand that\n\"Lets have dinner together\" is close enough to \"Let's have dinner together!\" and\nmeans the same thing, but JavaScript will not consider these equal!</p>\n\n<p><strong>Reminder:</strong> As you're working through the tests, you can run your code by\nrunning <code>node index.js</code> in the terminal. If you want to do this, remember that\nyou'll need to <em>call</em> the function inside <code>index.js</code>. If you are just running\ntests, however, you don't need to include a function call — the tests will\nhandle that for you.</p>\n\n<p>Good luck!</p>",
			"exportId": "ga60b64877463f070ac1f8cdfb67852c2"
		},
		{
			"id": 432835,
			"title": "JavaScript Function Parameters Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-function-parameters-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define a function that uses a parameter</li>\n<li>Define a function that uses two parameters</li>\n<li>Define a function with a parameter that has a default value</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In this lab, we'll practice using parameters in our functions. We'll also learn\nhow to create a default value for a parameter.</p>\n\n<p>If you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.)</p>\n\n<p>You will be writing your code in the <code>index.js</code> file and running the tests by\nrunning <code>learn test</code> in the terminal.</p>\n\n<h2>Define a Function That Uses a Parameter</h2>\n\n<p><strong>Instructions:</strong> Define a function called <code>introduction</code> that defines a\nparameter, <code>name</code>, and returns the phrase: \"Hi, my name is ${name}.\"</p>\n\n<h2>Define a Function That Uses Two Parameters</h2>\n\n<p>Setting up your function to use two parameters is straightforward: simply\ninclude both parameters in the parentheses in the function declaration line,\nseparated by a comma:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">logTwoValues</span><span class=\"p\">(</span><span class=\"nx\">value1</span><span class=\"p\">,</span> <span class=\"nx\">value2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`The two values are </span><span class=\"p\">${</span><span class=\"nx\">value1</span><span class=\"p\">}</span><span class=\"s2\"> and </span><span class=\"p\">${</span><span class=\"nx\">value2</span><span class=\"p\">}</span><span class=\"s2\">.`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>As you might expect, if we instead wanted to log three values — or ten\nvalues — we can just continue listing the parameters in the parentheses,\nwith commas between each.</p>\n\n<p><strong>Instructions:</strong> To pass the second test, you'll need to define a function\ncalled <code>introductionWithLanguage</code> that defines two parameters, <code>name</code> and\n<code>language</code>, and returns the phrase: \"Hi, my name is [name] and I am learning to\nprogram in [language].\"</p>\n\n<h2>Define a Function That Uses an Optional Parameter</h2>\n\n<p>In a previous lesson, we created a function that logs a personalized greeting:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">sayHelloTo</span><span class=\"p\">(</span><span class=\"nx\">firstName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Hello, </span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\">!`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>What if we wanted to make this function work <em>whether or not</em> a first name is\npassed in as an argument? We can do this by setting a <em>default value</em> for the\n<code>firstName</code> parameter:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">sayHelloTo</span><span class=\"p\">(</span><span class=\"nx\">firstName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">User</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Hello, </span><span class=\"p\">${</span><span class=\"nx\">firstName</span><span class=\"p\">}</span><span class=\"s2\">!`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Note that we have used the assignment operator (<code>=</code>) here to assign a default\nvalue. The way this works is, if the function is called <em>with</em> an argument, the\nargument's value will supersede the default value. If it's called <em>without</em> an\nargument, the function will use the default value, logging \"Hello, User!\"</p>\n\n<p><strong>Instructions:</strong> Copy the function you created for the second test and name it\n<code>introductionWithLanguageOptional</code>. It should have two parameters, <code>name</code> and\n<code>language</code>, and the second parameter should have a default value of\n\"JavaScript\".</p>",
			"exportId": "gd45939ac3df3f22e33431eccd843cd0d"
		},
		{
			"id": 432837,
			"title": "JavaScript Calculator Challenge Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-arithmetic-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Practice doing math with JavaScript</li>\n<li>Practice writing functions that do things with numbers</li>\n<li>Practice parsing strings as numbers</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In this lab, we're going to practice writing functions and manipulating numbers\nin JavaScript. First, though, we need to review some basic math. In this lab,\nwe're going to learn about various arithmetic operators. What's an operator, you\nsay? It's a symbol that <em>operates</em> on one or more (usually two) objects —\n<code>+</code> is a good example. The <code>+</code> operator says \"add what's to the left of <code>+</code> and\nwhat's to the right of <code>+</code> together.\"</p>\n\n<p>If you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.)</p>\n\n<p>As you read through this lesson, you're going to be adding your solutions to\n<code>index.js</code>. You'll write a total of eight functions. Use the results of running\n<code>learn test</code> to guide you towards the right function names and functionality.</p>\n\n<h2>Basic Math</h2>\n\n<p>The most fundamental math operations work as one might expect in JavaScript: <code>+</code>\nadds two numbers; <code>-</code> subtracts one number from another; <code>*</code> multiplies two\nnumbers; and <code>/</code> divides one number by another.</p>\n\n<p>Give it a try: type each of the following math examples into the REPL console.\nYou can use the embedded console below or open <a href=\"https://replit.com/languages/javascript\">replit</a> in a separate window\nif you prefer.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">80</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 81</span>\n<span class=\"mi\">60</span> <span class=\"o\">-</span> <span class=\"mi\">40</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 20</span>\n<span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mf\">3.4</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 6.8</span>\n<span class=\"mf\">5.0</span> <span class=\"o\">/</span> <span class=\"mf\">2.5</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 2</span>\n</code></pre></div>\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n<p>Go ahead and run <code>learn test</code> and take a look at the first failing test:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">  1) basic math functions\n       'add()' is a valid function:\n     ReferenceError: add is not defined\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:10:12<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (node:internal/timers:464:21)\n</span></code></pre></div>\n<p>The description of the test, <code>'add()' is a valid function</code>, along with the error\nmessage, <code>referenceError: add is not defined</code>, tells us that we need to define a\nfunction <code>add()</code>. Go ahead and create the <code>add()</code> function in <code>index.js</code>. This\ntest is only looking for the function to exist, so we can leave the code block\nempty for now:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// we'll fill this in shortly</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Once you've added the empty function, run <code>learn test</code> again; the first test\nshould be passing. Go ahead and get the next three tests passing as well before\nmoving on.</p>\n\n<p>Once you have the first four tests passing, the first error you get should look\nsimilar to this:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code>  <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"nx\">basic</span> <span class=\"nx\">math</span> <span class=\"nx\">functions</span>\n       <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"nx\">adds</span> <span class=\"nx\">two</span> <span class=\"nx\">numbers</span> <span class=\"nx\">and</span> <span class=\"nx\">returns</span> <span class=\"nx\">the</span> <span class=\"nx\">result</span><span class=\"p\">:</span>\n     <span class=\"nb\">Error</span><span class=\"p\">:</span> <span class=\"nx\">Expected</span> <span class=\"kc\">undefined</span> <span class=\"nx\">to</span> <span class=\"nx\">equal</span> <span class=\"mi\">1078</span>\n      <span class=\"nx\">at</span> <span class=\"nx\">assert</span> <span class=\"p\">(</span><span class=\"nx\">node_modules</span><span class=\"o\">/</span><span class=\"nx\">expect</span><span class=\"o\">/</span><span class=\"nx\">lib</span><span class=\"o\">/</span><span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">js</span><span class=\"p\">:</span><span class=\"mi\">29</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n      <span class=\"nx\">at</span> <span class=\"nx\">Expectation</span><span class=\"p\">.</span><span class=\"nx\">toEqual</span> <span class=\"p\">(</span><span class=\"nx\">node_modules</span><span class=\"o\">/</span><span class=\"nx\">expect</span><span class=\"o\">/</span><span class=\"nx\">lib</span><span class=\"o\">/</span><span class=\"nx\">Expectation</span><span class=\"p\">.</span><span class=\"nx\">js</span><span class=\"p\">:</span><span class=\"mi\">81</span><span class=\"p\">:</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n      <span class=\"nx\">at</span> <span class=\"nx\">Context</span><span class=\"p\">.</span><span class=\"o\">&lt;</span><span class=\"nx\">anonymous</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"nx\">test</span><span class=\"o\">/</span><span class=\"nx\">index</span><span class=\"o\">-</span><span class=\"nx\">test</span><span class=\"p\">.</span><span class=\"nx\">js</span><span class=\"p\">:</span><span class=\"mi\">26</span><span class=\"p\">:</span><span class=\"mi\">23</span><span class=\"p\">)</span>\n      <span class=\"nx\">at</span> <span class=\"nx\">processImmediate</span> <span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">:</span><span class=\"nx\">internal</span><span class=\"o\">/</span><span class=\"nx\">timers</span><span class=\"p\">:</span><span class=\"mi\">464</span><span class=\"p\">:</span><span class=\"mi\">21</span><span class=\"p\">)</span>\n</code></pre></div>\n<blockquote>\n<p>Note: the test document is randomly creating numbers to pass as arguments to\nthe functions in this lab, so the specific values you see in your errors will\nbe different from what's shown in this lesson, and will be different each time\nyou run the tests!</p>\n</blockquote>\n\n<p>The tests have found our <code>add()</code> function, getting us past the first test, and\nnow we need to write the code inside the function to return what the test is\nexpecting. Let's break down the information from our error:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"nx\">adds</span> <span class=\"nx\">two</span> <span class=\"nx\">numbers</span> <span class=\"nx\">and</span> <span class=\"nx\">returns</span> <span class=\"nx\">the</span> <span class=\"nx\">result</span><span class=\"p\">:</span>\n<span class=\"nb\">Error</span><span class=\"p\">:</span> <span class=\"nx\">Expected</span> <span class=\"kc\">undefined</span> <span class=\"nx\">to</span> <span class=\"nx\">equal</span> <span class=\"mi\">1078</span>\n</code></pre></div>\n<p>The first line tells us what our function needs to do, and the second line tells\nus the specific error that is being thrown. Any time you see the error \"Expected\nundefined to equal\" something, that means the test is expecting your function to\n<em>return</em> a value but it's currently not returning anything (<code>undefined</code>). Let's\nsee if we can just get that specific error cleared. We won't worry about exactly\n<em>what</em> we're returning just yet:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"dl\">\"</span><span class=\"s2\">something</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Running the tests now we get:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">  1) basic math functions\n       add(a, b) adds two numbers and returns the result:\n     Error: Expected 'something' to equal 853\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n</span><span class=\"gp\">      at Context.&lt;anonymous&gt;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">test</span>/index-test.js:26:23<span class=\"o\">)</span>\n<span class=\"go\">      at processImmediate (node:internal/timers:464:21)\n</span></code></pre></div>\n<p>Great! So now our function is returning \"something\" instead of nothing! So the\nnext step is to look more closely at the test's description of the function to\nfigure out what should be returned:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">add(a, b) adds two numbers and returns the result\n</span></code></pre></div>\n<p>The <code>add(a, b)</code> tells us the test is trying to pass two <em>arguments</em> to our\nfunction, so let's get that set up:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"dl\">\"</span><span class=\"s2\">something</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The rest of the description tells us we need to add the two arguments together\nand return that value:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>With this code, both tests for the <code>add()</code> function should now be passing!</p>\n\n<h3>A Quick Note about Hard Coding</h3>\n\n<p>Think back to the errors we were getting above, e.g., <code>Expected undefined to\nequal 1078</code>. One thing that might be tempting to do when addressing an error\nlike this is to explicitly return exactly what the test is looking for:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"mi\">1078</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This is what's known as <strong>hard coding</strong> and is virtually never what you should\ndo! If you think about it, it doesn't really make sense. We've created an\n<code>add()</code> function that can take any two numbers as arguments but will always\nreturn 1078. This makes it a pretty useless function. Instead, we want to create\nfunctions that will return the correct answer for whatever argument or arguments\nwe pass in.</p>\n\n<p>Go ahead and tackle the next three tests on your own. You should follow a\nprocess very similar to what we did above. Once you have those passing, continue\nto the next section.</p>\n\n<h2>Math + Assignment</h2>\n\n<p>Recall that we can increment (<code>++</code>) and decrement (<code>--</code>) a number if it's\nassigned to a variable. Don't forget to follow along in the REPL console.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n<span class=\"nx\">number</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 5... hmmmm</span>\n\n<span class=\"nx\">number</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 6 -- the number was incremented after it was evaluated</span>\n\n<span class=\"nx\">number</span><span class=\"o\">--</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 6</span>\n\n<span class=\"nx\">number</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 5</span>\n</code></pre></div>\n<p>We can also put the increment and decrement operators before the number, in\nwhich case the number is evaluated <em>after</em> the operator is executed:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"o\">--</span><span class=\"nx\">number</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 4</span>\n\n<span class=\"nx\">number</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 4</span>\n\n<span class=\"o\">++</span><span class=\"nx\">number</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 5</span>\n\n<span class=\"nx\">number</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 5</span>\n</code></pre></div>\n<p>But generally, you will see them placed <em>after</em> the number (and we recommend\nthat that's where you put them). If you're interested in the difference, take a\nlook at the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\">MDN documentation</a>.</p>\n\n<p>And, while we're on the subject, you'll usually only want to use these\nincrementors and decrementors when the shorthand makes what you're writing\neasier to read (more on when <em>exactly</em> in a later lesson). Instead, it's best to\nuse the basic arithmetic operators combined with <code>=</code>.</p>\n\n<p>Follow along in the REPL console. You can pick up where we left off with the\nprevious examples. Start by setting <code>number</code> equal to 5.</p>\n\n<ul>\n<li>\n<code>+=</code> modifies the value to the operator's left by adding to it the value to\nthe operator's right:</li>\n</ul>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">number</span> <span class=\"o\">+=</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 8</span>\n</code></pre></div>\n<ul>\n<li>\n<code>-=</code> modifies the value to the operator's left by subtracting from it the\nvalue to the operator's right:</li>\n</ul>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">number</span> <span class=\"o\">-=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 6</span>\n</code></pre></div>\n<ul>\n<li>\n<code>*=</code> modifies the value to the operator's left by multiplying it by the value\nto the operator's right:</li>\n</ul>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">number</span> <span class=\"o\">*=</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 60</span>\n</code></pre></div>\n<ul>\n<li>\n<code>/=</code> modifies the value to the operator's left by dividing it by the value to\nthe operator's right:</li>\n</ul>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">number</span> <span class=\"o\">/=</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"c1\">//=&gt; 12</span>\n</code></pre></div>\n<p>Note that these methods modify the variable in place. So, if we have two\nfunctions that depend on the same external variable, the order in which they are\ncalled matters. Follow along in the console:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"c1\">//reset number</span>\n<span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">add5</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">number</span> <span class=\"o\">+=</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">divideBy3</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">number</span> <span class=\"o\">/=</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">divideBy3</span><span class=\"p\">();</span> <span class=\"c1\">//=&gt; 3.3333333333333335</span>\n\n<span class=\"nx\">add5</span><span class=\"p\">();</span> <span class=\"c1\">//=&gt; 8.333333333333334</span>\n\n<span class=\"c1\">// reset number</span>\n<span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n<span class=\"nx\">add5</span><span class=\"p\">();</span> <span class=\"c1\">//=&gt; 15</span>\n\n<span class=\"nx\">divideBy3</span><span class=\"p\">();</span> <span class=\"c1\">//=&gt; 5</span>\n</code></pre></div>\n<p><strong>Because these methods are more explicit, we prefer <code>+=</code> to <code>++</code> and <code>-=</code> to\n<code>--</code> (usually).</strong></p>\n\n<p>Okay, now we're ready to write solutions for the next two functions:\n<code>increment(n)</code> and <code>decrement(n)</code>. As indicated by the tests, these methods\nshould take a number as an argument, increment/decrement the provided value by\none, and return the result.</p>\n\n<h2>Parsing Numbers</h2>\n\n<p>Sometimes, we'll receive a number wrapped in quotes. We recognize it as a\nnumber, but JavaScript will think it's a string. Luckily, JavaScript gives us\ntools to turn these strings into proper numbers (that is, numbers that\nJavaScript understands).</p>\n\n<h3><code>parseInt()</code></h3>\n\n<p>The first such tool is the function <code>parseInt()</code>, which accepts two arguments:\nthe value to parse and the base of the value being parsed (called the <em>radix</em>).\n<em>Usually</em> you will want to work with base 10, so a typical call to <code>parseInt()</code>\nlooks like:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span> <span class=\"c1\">//=&gt; 2</span>\n</code></pre></div>\n<p>What happens if we pass a representation of a non-integer to <code>parseInt()</code>? Let's\ntry it:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">2.2222</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If we enter the above in the REPL console, we will see that <code>parseInt()</code> forces\nthe parsed number to be an integer — which makes sense when we think about it,\nright?</p>\n\n<p>What happens, though, if we pass utter nonsense to <code>parseInt()</code>? Go ahead and\ntry it — something like:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">nonsense!</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>What did it return? <code>NaN</code>? What is that?</p>\n\n<p><code>NaN</code> stands for \"Not a Number\" — pretty handy, right? This is the number (in\nthe JavaScript sense) that JavaScript returns when it can't determine a valid\nvalue for a numeric operation.</p>\n\n<p><strong>Note</strong>: You may see <code>parseInt()</code> used without a radix specified. In most\ncases, the radix will default to 10, <strong>but not always</strong>! To be safe, you should\n<strong>always specify a radix</strong>.</p>\n\n<h3><code>parseFloat()</code></h3>\n\n<p>Above, we saw that <code>parseInt()</code> lops off everything after the decimal point and\nonly returns integers. If we want to preserve decimals, we'll need to use\n<code>parseFloat()</code>.</p>\n\n<p>Unlike <code>parseInt()</code>, <code>parseFloat()</code> accepts only a single argument, the thing to\nbe parsed. We can use it like so:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">parseFloat</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">80.123999</span><span class=\"dl\">\"</span><span class=\"p\">);</span> <span class=\"c1\">// 80.123999</span>\n</code></pre></div>\n<p>You now have the information you need to write the final two functions,\n<code>makeInt(string)</code> and <code>preserveDecimal(string)</code>. <code>makeInt(string)</code> should take\nin a string, parse it into a base 10 integer and return it.\n<code>preserveDecimal(string)</code> should take in a string, parse it into a float and\nreturn it.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">MDN - parseInt()</a></p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">MDN - parseFloat()</a></p></li>\n</ul>",
			"exportId": "g4019c79cc846a8a6d051fea96db6124a"
		},
		{
			"id": 432839,
			"title": "Survey - Programming as Conversation Part 3",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the Programming as Conversation Part 3 module?</p>\n</div>",
			"exportId": "g9d456e4944d39921d1877407a2e6ce7d"
		}]
	},
	{
		"id": 44864,
		"name": "Working with Data Structures",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "ga6f6f326137c27ad7fd69f851e837622",
		"items": [
		{
			"id": 432843,
			"title": "Introduction to Working with Data Structures",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-working-with-data-structures-intro\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Compare collection data types to other data types</li>\n<li>Define <code>Array</code></li>\n<li>Define <code>Array</code> element</li>\n<li>Define <code>Array</code> index</li>\n<li>Define <code>Object</code></li>\n<li>Define <code>Object</code> key</li>\n<li>Define <code>Object</code> value</li>\n<li>Demonstrate nesting of collection data structures</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Thus far, we've been storing simple data in our variables, values like:</p>\n\n<ul>\n<li><code>String</code>s</li>\n<li><code>Boolean</code>s</li>\n<li><code>Number</code>s</li>\n<li>etc.</li>\n</ul>\n\n<p>But sometimes we want to refer to a <em>collection</em> of values by a common name.\nThis is very natural in conversation: we know \"The Beatles\" refer to four guys\nfrom Liverpool who sang \"I Wanna Hold Your Hand.\" \"Grocery List\" is something\nthat contains multiple small elements that we identify by \"the third item on my\ngrocery list, or the last item on my grocery list.\" Ordered lists in JavaScript\nare called \"Arrays.\"</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/working-with-data-structures-intro/grocery-list.png\" alt=\"Grocery List\"></p>\n\n<p>Another collection type we know about from daily life are dictionaries: we use\none thing to \"look up\" a value. We \"look up\" the word \"computer\" in a real\ndictionary and we are \"pointed to\" a long <code>String</code> that tells us what the word\nmeans. Lookup tables, or dictionaries, in JavaScript, are called \"Objects.\"</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/working-with-data-structures-intro/dictionary.png\" alt=\"Dictionary\"></p>\n\n<p>Learning to store and to work with the data held in data structures will be the\nfocus of this section. In this lesson, we'll give you a broad, conceptual\nintroduction to collection data types.</p>\n\n<h2>Compare Collection Data Types to Scalar Data Types</h2>\n\n<p><code>String</code>s and <code>Number</code>s are scalar data types, they can be put on a scale. A\ncollection type holds multiple pieces of data and allows us to talk about the\ncollection as an <em>abstraction</em>. \"The Beatles\" is an <em>abstraction</em> used to refer\nto the individuals John, Paul, George, and Ringo. Because collection types can't\nbe put on a scale, they <strong><em>are not</em></strong> called scalar data types.</p>\n\n<h2>Define <code>Array</code></h2>\n\n<p>An <code>Array</code> is a collection that holds multiple pieces of data under a single\nname (\"Countries\", \"Fast and the Furious Movies\"). In daily life, we call them\n\"lists.\"</p>\n\n<p><strong>The Beatles</strong></p>\n\n<table><thead>\n<tr>\n<th>Index</th>\n<th>Data</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>0</td>\n<td>\"John Lennon\"</td>\n</tr>\n<tr>\n<td>1</td>\n<td>\"Paul McCartney\"</td>\n</tr>\n<tr>\n<td>2</td>\n<td>\"Ringo Starr\"</td>\n</tr>\n<tr>\n<td>3</td>\n<td>\"George Harrison\"</td>\n</tr>\n</tbody></table>\n\n<p>or</p>\n\n<p><strong>Groceries</strong></p>\n\n<table><thead>\n<tr>\n<th>Index</th>\n<th>Data</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>0</td>\n<td>\"Parsnips\"</td>\n</tr>\n<tr>\n<td>1</td>\n<td>\"English Toffee\"</td>\n</tr>\n<tr>\n<td>2</td>\n<td>\"Milk\"</td>\n</tr>\n<tr>\n<td>3</td>\n<td>\"Sprouted Rye Bread\"</td>\n</tr>\n</tbody></table>\n\n<p>The individual <em>elements</em> that make up this collection (or list) are identified\nby an <em>index</em>.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/working-with-data-structures-intro/beatles.png\" alt=\"Beatles\"></p>\n\n<p>It might seem strange that we start our list at <code>0</code> instead of <code>1</code>. Programmers\nlike <code>0</code> and most programming languages start their index at <code>0</code>. Otherwise,\nit's pretty much a list like you've been making most of your life.</p>\n\n<p>To define this \"list\" in JavaScript we would type:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">theBeatles</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">John Lennon</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Paul McCartney</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Ringo Starr</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">George Harrison</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n</code></pre></div>\n<p>You provide a name (<code>theBeatles</code>), an assignment operator (<code>=</code>) and then a list\nof data, separated by commas, that should go in the <code>Array</code>, wrapped in <code>[]</code>.\nEach bit of information is often a scalar value, but it could also be another\ncollection (more on that later).</p>\n\n<h2>Define <code>Array</code> Element / Member</h2>\n\n<p>The individual pieces of data inside an <code>Array</code> are called <em>elements</em>. Some\npeople also call the <em>elements</em> the <em>members</em>. In a collection of\n<code>theBeatles</code>, the <code>String</code> <code>\"George Harrison\"</code> is an <em>element</em>.</p>\n\n<h2>Define <code>Array</code> Index</h2>\n\n<p><code>Array</code>s provide a number that identifies each <em>element</em> called an <em>index</em>. The\nindex for the <em>element</em> <code>\"Ringo Starr\"</code> above is <code>2</code>.</p>\n\n<p>We'll cover adding, removing, retrieving, and deleting <em>elements</em> via their\n<em>index</em> in another lesson.</p>\n\n<h2>Define <code>Object</code></h2>\n\n<p>Another way of thinking about <code>Array</code>s is that they are like tables that have an\nidentifier that is a <code>Number</code>. If we let the identifier be a <code>String</code> <em>instead</em>\nof a <code>Number</code>, then we'd basically be describing an <code>Object</code>.</p>\n\n<p>What if we wanted to take our list of the Beatles and describe each member not\nby some <code>Number</code> <em>index</em>, but rather by the instrument they played in the band?\nAs a table this might look like:</p>\n\n<table><thead>\n<tr>\n<th>Instrument</th>\n<th>Beatle</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>\"Rhythm Guitar\"</td>\n<td>\"John Lennon\"</td>\n</tr>\n<tr>\n<td>\"Bass\"</td>\n<td>\"Paul McCartney\"</td>\n</tr>\n<tr>\n<td>\"Drums\"</td>\n<td>\"Ringo Starr\"</td>\n</tr>\n<tr>\n<td>\"Lead Guitar\"</td>\n<td>\"George Harrison\"</td>\n</tr>\n</tbody></table>\n\n<p>An <code>Object</code> is a collection data type that holds multiple pieces of data under a\ncollected name whose members can be read and updated by using a <em>key</em> instead of\nan <em>index</em>. In daily conversation we use <em>keys</em> to retrieve <em>values</em> all the\ntime: \"Who was the guy who played <strong>drums</strong> in <strong>The Beatles</strong>?\"</p>\n\n<p>We can think of <code>Object</code>s like a table that looks like this:</p>\n\n<table><thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>\"liverpool\"</td>\n<td>\"The Beatles\"</td>\n</tr>\n<tr>\n<td>\"manchester\"</td>\n<td>\"The Smiths\"</td>\n</tr>\n<tr>\n<td>\"coventry\"</td>\n<td>\"Delia Derbyshire and the BBC Radiophonic Band\"</td>\n</tr>\n<tr>\n<td>\"london\"</td>\n<td>\"Ziggy Stardust and the Spiders from Mars\"</td>\n</tr>\n</tbody></table>\n\n<p>To define this \"table\" in JavaScript we would type:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">englishBandsByCity</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">liverpool</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">The Beatles</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">manchester</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">The Smiths</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">coventry</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Delia Derbyshire and the BBC Radiophonic Band</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">london</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Ziggy Stardust and the Spiders from Mars</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>You provide a name (<code>englishBandsByCity</code>), an assignment operator (<code>=</code>) and then\na list of pairs, separated by commas, that should go in the <code>Object</code>, wrapped in\n<code>{}</code>. Each pair should have a key, a colon (<code>:</code>), and a value. A value is often\na scalar value, but it could be another collection; more on that later.</p>\n\n<h2>Define <code>Object</code> Key</h2>\n\n<p><code>Object</code>s are like tables that have a name that is a piece of data, typically a\n<code>Symbol</code> or a <code>String</code>. This identifier is called a <em>key</em>.</p>\n\n<h2>Define <code>Object</code> Value</h2>\n\n<p>The value that's returned from asking an <code>Object</code> what a given <em>key</em> points to\nis known as the key's <em>value</em>.</p>\n\n<p>We'll cover adding, removing, retrieving, and deleting <em>values</em> via their\n<em>key</em> in another lesson.</p>\n\n<h2>Demonstrate Nesting of Collection Data Structures</h2>\n\n<p>Now that you know about <code>Array</code>s (grocery lists, band members, todo lists) and\n<code>Object</code>s (abbreviation to full name lookup, a stock symbol to trading value\nlookup, instrument to band member name lookup) you might be a bit unimpressed.\n\"Surely the world's data needs are more complex than simple lists and lookup\ntables,\" you might exclaim.</p>\n\n<p>You'd be right, but the amazing thing about collections is that they can\ncontain <em>other</em> collections as part of a process called <em>nesting</em>. Can you\nimagine an <code>Array</code> of <code>Object</code>s? Or an <code>Object</code> of <code>Arrays</code> of <code>Object</code>s of\n<code>Array</code>s? You can cover a staggeringly huge model of data with nesting of these\ntwo data types.</p>\n\n<p>We want to provide a really complex example of <code>Array</code>s and <code>Object</code>s working\ntogether. Most programming texts don't share this concept this early and it\nmakes \"nesting\" sound scary and complex. We're going to give you a short\ndemonstration here so that you can see why you want to have these complex data\nstructures. The details on how to build them etc... will come in later lessons.</p>\n\n<p>The <em>elements</em> in an <em>Array</em> and the <em>values</em> in an <em>Object</em> can be <code>Object</code>s or\n<code>Array</code>s <em>themselves</em>. This leads to \"nesting\" such that you could build a\ncomplex data structure like the following:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">englishMusicByCity</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">manchester</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">bandName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">The Smiths</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">memberNames</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Morrissey</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Johnny</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Andy</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Mike</span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">bandName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Joy Division</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">memberNames</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Peter</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Stephen</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Bernard</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Ian</span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>The <em>abstraction</em> <code>englishMusicByCity</code> hides the complexity in that piece of data.</p>\n\n<p>As a peek ahead, we can use bracket notation (<code>[]</code>) to \"dig into\" this nested\ncollection and get interesting information out:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">englishMusicByCity</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">manchester</span><span class=\"dl\">\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"dl\">\"</span><span class=\"s2\">bandName</span><span class=\"dl\">\"</span><span class=\"p\">];</span> <span class=\"c1\">//=&gt; \"The Smiths\"</span>\n<span class=\"nx\">englishMusicByCity</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">manchester</span><span class=\"dl\">\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"dl\">\"</span><span class=\"s2\">memberNames</span><span class=\"dl\">\"</span><span class=\"p\">];</span> <span class=\"c1\">//=&gt; [\"Morrissey\", \"Johnny\", \"Andy\", \"Mike\"]</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span>\n  <span class=\"s2\">`There were </span><span class=\"p\">${</span><span class=\"nx\">englishMusicByCity</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">manchester</span><span class=\"dl\">\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"dl\">\"</span><span class=\"s2\">memberNames</span><span class=\"dl\">\"</span><span class=\"p\">].</span><span class=\"nx\">length</span><span class=\"p\">}</span><span class=\"s2\"> members in </span><span class=\"p\">${</span><span class=\"nx\">englishMusicByCity</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">manchester</span><span class=\"dl\">\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"dl\">\"</span><span class=\"s2\">bandName</span><span class=\"dl\">\"</span><span class=\"p\">]}</span><span class=\"s2\">`</span>\n<span class=\"p\">);</span>\n<span class=\"c1\">//=&gt; \"There were 4 members in The Smiths\"</span>\n</code></pre></div>\n<h2>Conclusion</h2>\n\n<p>This has been a broad tour of JavaScript's collection data types, <code>Object</code>\nand <code>Array</code>. Individually, they are data structures that can hold list- and\ndictionary-like data. Amazingly, they can even <em>hold each other</em> — and that\nmeans we can make very complex data structures from them! We'll practice with\nthese types in the following lessons!</p>",
			"exportId": "introduction-to-working-with-data-structures"
		},
		{
			"id": 432845,
			"title": "Arrays",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-arrays\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify data structures and <code>Array</code>s</li>\n<li>Create <code>Array</code>s</li>\n<li>Access the elements in an <code>Array</code></li>\n<li>Learn about nested <code>Array</code>s</li>\n<li>Introduce <code>Array</code> methods</li>\n<li>Understand mutability</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>So far, we've been focusing on JavaScript's <em>primitive</em> data types — types\nthat represent a single value — in particular, strings, Booleans, and\nnumbers. But sometimes we need a way to store a <em>collection</em> of data. For this,\nwe need data structures. In this and the next lesson, we will learn about a very\nuseful data structure: <code>Array</code>s.</p>\n\n<p>Be sure to follow along with the examples in <a href=\"https://replit.com/languages/javascript\">replit</a>. Remember that you can\nsee the value of variables and other expressions by either using a <code>console.log</code>\nin the code window or entering them directly in the console window.</p>\n\n<h2>Identify Data Structures and Arrays</h2>\n\n<p>A <em>data structure</em> is a means for associating and organizing information.\nOutside of the programming world, we use data structures all the time. For\nexample, we might have a shopping list of the items we need to buy on our next\ngrocery run or an address book for organizing contact information.</p>\n\n<p>If we have a lot of related data, it's best to represent it in a related system.\nImagine that we're working on a lottery application that has to represent the\nwinning lottery numbers. We could do that as follows:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">firstNumber</span> <span class=\"o\">=</span> <span class=\"mi\">32</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">secondNumber</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">thirdNumber</span> <span class=\"o\">=</span> <span class=\"mi\">14</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">fourthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">33</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">fifthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">48</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">powerBall</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>We've represented all six pieces of data, but there's no way to refer to them as\na group. Every single time we want to reference that combination of winning\nnumbers, we need to remember and type out six different variable names:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">firstNumber</span> <span class=\"o\">=</span> <span class=\"mi\">32</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">secondNumber</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">thirdNumber</span> <span class=\"o\">=</span> <span class=\"mi\">14</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">fourthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">33</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">fifthNumber</span> <span class=\"o\">=</span> <span class=\"mi\">48</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">powerBall</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">logWinningNumbers</span><span class=\"p\">(</span><span class=\"nx\">first</span><span class=\"p\">,</span> <span class=\"nx\">second</span><span class=\"p\">,</span> <span class=\"nx\">third</span><span class=\"p\">,</span> <span class=\"nx\">fourth</span><span class=\"p\">,</span> <span class=\"nx\">fifth</span><span class=\"p\">,</span> <span class=\"nx\">power</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Winning numbers:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">first</span><span class=\"p\">,</span> <span class=\"nx\">second</span><span class=\"p\">,</span> <span class=\"nx\">third</span><span class=\"p\">,</span> <span class=\"nx\">fourth</span><span class=\"p\">,</span> <span class=\"nx\">fifth</span><span class=\"p\">,</span> <span class=\"nx\">power</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">logWinningNumbers</span><span class=\"p\">(</span>\n  <span class=\"nx\">firstNumber</span><span class=\"p\">,</span>\n  <span class=\"nx\">secondNumber</span><span class=\"p\">,</span>\n  <span class=\"nx\">thirdNumber</span><span class=\"p\">,</span>\n  <span class=\"nx\">fourthNumber</span><span class=\"p\">,</span>\n  <span class=\"nx\">fifthNumber</span><span class=\"p\">,</span>\n  <span class=\"nx\">powerBall</span>\n<span class=\"p\">);</span>\n<span class=\"c1\">// LOG: Winning numbers: 32 9 14 33 48 5</span>\n<span class=\"c1\">// =&gt; undefined</span>\n</code></pre></div>\n<p>That's so much typing! There are much, much better ways to organize data in\nJavaScript. Let's learn about one of the most common: the <em><code>Array</code></em>.</p>\n\n<h2>Create Arrays</h2>\n\n<p>An <code>Array</code> is a list, with the items listed in a particular order, surrounded by\nsquare brackets (<code>[]</code>) and separated by commas:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">This</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">is</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">an</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">array</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">of</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">strings.</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; [\"This\", \"is\", \"an\", \"array\", \"of\", \"strings.\"]</span>\n</code></pre></div>\n<p>The <em>members</em> or <em>elements</em> in an <code>Array</code> can be data of any type in JavaScript:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Hello, world!</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"kc\">NaN</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; [\"Hello, world!\", 42, null, NaN]</span>\n</code></pre></div>\n<blockquote>\n<p><strong>NOTE</strong>: In some other languages <code>Array</code>s <em>cannot include elements of\nmultiple types</em>. In C, C++, Java, Swift, and others you cannot mix types.\nJavaScript, Python, Ruby, Lisp, and others permit this.</p>\n</blockquote>\n\n<p>Arrays are <em>ordered</em>, meaning that the elements in them will always appear in\nthe same order. This also means that the <code>Array</code> <code>[1, 2, 3]</code> is different from\nthe <code>Array</code> <code>[3, 2, 1]</code>.</p>\n\n<p>Just like any other type of JavaScript data, we can assign an <code>Array</code> to a\nvariable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">primeNumbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">flowers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Rose</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tulip</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Orchid</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Lily</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>We can find out how many elements an <code>Array</code> contains by checking the <code>Array</code>'s\nbuilt-in <code>length</code> property:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">myArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">This</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">array</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">has</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">elements</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; 5</span>\n</code></pre></div>\n<p>We defined the above <code>Array</code>s using the <em>array literal</em> syntax —&nbsp;that is, we\nliterally typed out the <code>Array</code> that we wanted to create, square brackets and all.\nThere are other ways to create new <code>Array</code>s, but they are only necessary for very\nrare circumstances. For now, use <code>Array</code> literals.</p>\n\n<p>To get a sense of just how effective <code>Array</code>s are at keeping data organized, let's\nrewrite our lottery code to use an <code>Array</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">winningNumbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">];</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">logWinningNumbers</span><span class=\"p\">(</span><span class=\"nx\">numbers</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Winning numbers:</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">numbers</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">logWinningNumbers</span><span class=\"p\">(</span><span class=\"nx\">winningNumbers</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: Winning numbers: [32, 9, 14, 33, 48, 5]</span>\n<span class=\"c1\">// =&gt; undefined</span>\n</code></pre></div>\n<p>The <code>Array</code> provides organization, and we only have to remember <em>one</em> identifier\n(<code>winningNumbers</code>) instead of six (<code>firstNumber</code>, <code>secondNumber</code>, and so on). We\ncan also call <code>Array</code>s <em>expressive</em> because putting all the winning numbers in a\nshared data structure communicates to other programmers \"Hey, these things go\ntogether.\"</p>\n\n<p>The one benefit of storing all six lottery numbers separately is that we had a\nreally easy way to access each individual number. For example, we could just\nreference <code>powerBall</code> to grab the sixth number. Luckily, <code>Array</code>s offer an\nequally simple syntax for accessing individual members.</p>\n\n<h2>Using Bracket Notation</h2>\n\n<p>Every element in an <code>Array</code> is assigned a unique index value that corresponds to\nits place within the collection, <strong>starting at 0</strong>. The first element in the\n<code>Array</code> is at index <code>0</code>, the fifth element at index <code>4</code>, and the 428th element\nat index <code>427</code>. We can use <strong>bracket notation</strong> (<code>[]</code>) to access the element at\na given index.</p>\n\n<h3>Accessing an Element</h3>\n\n<p>To access an element, we use bracket notation like this: <code>nameOfArray[index]</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">winningNumbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; undefined</span>\n\n<span class=\"nx\">winningNumbers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; 32</span>\n\n<span class=\"nx\">winningNumbers</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; 33</span>\n</code></pre></div>\n<p>Let's take a minute to think about how we could access the <strong>last</strong> element in\nany <code>Array</code>.</p>\n\n<p>If <code>myArray</code> contains 10 elements, the final element will be at <code>myArray[9]</code>. If\n<code>myArray</code> contains 15000 elements, the final element will be at\n<code>myArray[14999]</code>. So the index of the final element is always one less than the\nnumber of elements in the <code>Array</code>. If only we had an easy way to figure out how\nmany elements are in the <code>Array</code>...</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">alphabet</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">a</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">b</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">c</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">d</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">e</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">f</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">g</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">h</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">i</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">j</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">k</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">l</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">m</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">n</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">o</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">p</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">q</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">r</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">s</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">t</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">u</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">v</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">w</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">x</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">y</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">z</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; undefined</span>\n\n<span class=\"nx\">alphabet</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; 26</span>\n\n<span class=\"nx\">alphabet</span><span class=\"p\">[</span><span class=\"nx\">alphabet</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; \"z\"</span>\n</code></pre></div>\n<p>We placed an expression (<code>alphabet.length - 1</code>) inside the square brackets, and\nthe JavaScript engine <em>computed</em> the value of that expression to determine which\nelement we were trying to access. In this case, <code>alphabet.length - 1</code> evaluated\nto <code>25</code>, so <code>alphabet[alphabet.length - 1]</code> became <code>alphabet[25]</code>.</p>\n\n<h2>Updating the Value of an Element</h2>\n\n<p>We can also use bracket notation (<code>[]</code>) — along with the assignment operator\n(<code>=</code>) — to update the value of an element in the array.</p>\n\n<p>Say we've defined an array, <code>planets</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">planets</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Mercury</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Venus</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Earth</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Mars</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Juptier</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Saturn</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Uranus</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Neptune</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; undefined</span>\n</code></pre></div>\n<p>Looks like we've misspelled Jupiter. Let's fix it. To do that, we access\nthe element we want (<code>planets[4]</code>), then reassign that element's value using <code>=</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">planets</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Jupiter</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Jupiter\"</span>\n\n<span class=\"nx\">planets</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]</span>\n</code></pre></div>\n<p>You might wonder why that worked, given that we declared <code>planets</code> using\n<code>const</code>. After all, declaring with <code>const</code> is supposed to prevent us from\nreassigning the value of the variable! This is an important thing to know about\nhow <code>const</code> works with <code>Array</code>s. We are not able to reassign the array <em>itself</em>\nbut we <strong>can</strong> reassign any of its elements. We can also add or delete elements.\nJavaScript <code>Object</code>s work similarly when declared using <code>const</code> (which isn't\nsurprising, given that <code>Array</code>s are a special type of <code>Object</code>). The only thing\n<code>const</code> prevents us from doing is assigning a new value to the variable\n<code>planets</code> using the <code>=</code> operator:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">planets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">new</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">array</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; Uncaught TypeError: Assignment to constant variable.</span>\n</code></pre></div>\n<h2>Nested Arrays</h2>\n\n<p>We mentioned above that arrays can contain elements of <strong>any</strong> data type; this includes\n<strong>other <code>Array</code>s</strong>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">egregiouslyNestedArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">How</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">deep</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">can</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">we</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">go</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">?</span><span class=\"dl\">\"</span><span class=\"p\">],</span> <span class=\"dl\">\"</span><span class=\"s2\">Pretty</span><span class=\"dl\">\"</span><span class=\"p\">],</span> <span class=\"dl\">\"</span><span class=\"s2\">dang</span><span class=\"dl\">\"</span><span class=\"p\">],</span> <span class=\"dl\">\"</span><span class=\"s2\">deep,</span><span class=\"dl\">\"</span><span class=\"p\">],</span> <span class=\"dl\">\"</span><span class=\"s2\">it</span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">seems.</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n</code></pre></div>\n<p>If you examine the array above, you'll see it contains three elements, the\nsecond of which is itself an array.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">egregiouslyNestedArray</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; 'How'</span>\n\n<span class=\"nx\">egregiouslyNestedArray</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; [ 'deep', [ 'can', [ 'we', [Array], 'dang' ], 'deep,' ], 'it' ]</span>\n\n<span class=\"nx\">egregiouslyNestedArray</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; 'seems.'</span>\n</code></pre></div>\n<p>So we know we can access the inner array using <code>egregiouslyNestedArray[1]</code>, but\nhow do we access the array nested inside <em>that</em> array? We simply add another set\nof brackets:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">egregiouslyNestedArray</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; 'deep'</span>\n\n<span class=\"nx\">egregiouslyNestedArray</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; [ 'can', [ 'we', [ 'go', [Array], 'Pretty' ], 'dang' ], 'deep,' ]</span>\n\n<span class=\"nx\">egregiouslyNestedArray</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; 'it'</span>\n</code></pre></div>\n<p>We can continue drilling down in this way, adding another set of brackets for\neach nested array, until we get to the innermost array:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">egregiouslyNestedArray</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; ['?']</span>\n</code></pre></div>\n<p>That innermost array contains only one element, so how would we access that?</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">egregiouslyNestedArray</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; '?'</span>\n</code></pre></div>\n<p>While it's great that <code>Array</code>s allow us to store other <code>Array</code>s inside them,\nthis is a terrible way to represent a deeply nested data structure. In general,\nit is best to keep your <code>Array</code>s to <em>no more than two levels deep</em>. Two levels\nis perfect for representing two-dimensional things, like a tic-tac-toe board:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">board</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">X</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">O</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\"> </span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\"> </span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">X</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">O</span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">X</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\"> </span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">O</span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n<span class=\"p\">];</span>\n\n<span class=\"nx\">board</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [[\"X\", \"O\", \" \"], [\" \", \"X\", \"O\"], [\"X\", \" \", \"O\"]]</span>\n</code></pre></div>\n<p>The cool thing about representing a game board like that is in how we can access\nthe different squares by specifying coordinates. The first <code>[]</code> operator grabs\nthe <strong>row</strong> that we want, top (<code>board[0]</code>), middle (<code>board[1]</code>), or bottom\n(<code>board[2]</code>). For example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">board</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; [\" \", \"X\", \"O\"]</span>\n</code></pre></div>\n<p>The second <code>[]</code> operator specifies the column, or the square within that row:\nleft (<code>board[1][0]</code>), middle (<code>board[1][1]</code>), or right (<code>board[1][2]</code>). For\nexample:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; \"X\"</span>\n\n<span class=\"nx\">board</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; \" \"</span>\n\n<span class=\"nx\">board</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; \"O\"</span>\n</code></pre></div>\n<p>Effectively, we're using X and Y coordinates to refer to data within a two-\ndimensional structure.</p>\n\n<h2>Array Methods</h2>\n\n<p>JavaScript includes a number of built-in <code>Array</code> <em>methods</em>, functions that\n<em>belong to</em> (i.e., can only be called on) <code>Array</code>s. These methods allow us to\nmanipulate arrays in various ways, for example, to add an element to the\nbeginning or end of an <code>Array</code>.</p>\n\n<p>We have seen methods already in this course. In an earlier lesson, for example,\nwe learned how to use a <code>String</code> method, <code>toUpperCase()</code>, to get the uppercase\nversion of a <code>String</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">string</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">();</span>\n<span class=\"c1\">//=&gt; \"HELLO\"</span>\n</code></pre></div>\n<p>As shown above, we call <code>String</code> methods <em>on</em> a string using dot notation.\n<code>Array</code> methods work in the same way. Some of them will take one or more\narguments — for example, the element we want to add to the array. The arguments\nare passed in the parentheses after the method name.</p>\n\n<p>We will learn about these <code>Array</code> methods in the next lesson. Before we get to\nthat, however, we need to introduce one more concept.</p>\n\n<h2>Mutability</h2>\n\n<p>Some methods update or <em>mutate</em> the object they are called on; these methods are\nreferred to as <em>destructive</em>. Other methods, known as <em>nondestructive</em> methods,\nleave the object intact. For example, the <code>String</code> method <code>toUpperCase()</code> is\n<em>nondestructive</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hello</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">string</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">();</span>\n<span class=\"c1\">//=&gt; \"HELLO\"</span>\n\n<span class=\"nx\">string</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Hello\"</span>\n</code></pre></div>\n<p>The <code>toUpperCase()</code> method returns the uppercased version of <code>string</code>, it does\nnot <em>change</em> its value to uppercase.</p>\n\n<p>Sometimes we want to mutate the original object but, in general, it's good\npractice to avoid mutating a program's state whenever possible. Otherwise, we\nwon't always know what we're dealing with. You will learn more about\nimmutability and why it's important later in the course. But, in the meantime,\nit's important to know which JavaScript methods are destructive and which are\nnondestructive so you can choose the appropriate method for what you need to\naccomplish.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we learned about JavaScript <code>Array</code>s, including how to create\nthem, access their elements, and change the value of elements. We also learned\nthat arrays can contain elements of any data type, including other <code>Array</code>s; we\nrefer to these as <em>nested</em> arrays. Finally, we talked a little bit about the\nconcept of mutability. Armed with this knowledge, we are now ready to tackle\nJavaScript <code>Array</code> methods.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">MDN: Array reference</a></li>\n</ul>",
			"exportId": "arrays"
		},
		{
			"id": 432847,
			"title": "Array Methods",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-methods\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Add elements to an <code>Array</code></li>\n<li>Remove elements from an <code>Array</code></li>\n<li>Replace elements in an <code>Array</code></li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In the last lesson, we learned about JavaScript <code>Array</code>s, including how to\ncreate them and access their elements. In this lab, we will dive into\nJavaScript's <code>Array</code> methods, which enable us to add, remove, and change\nelements.</p>\n\n<p>We discussed the fact that it's important to pay attention to whether the method\nis <em>destructive</em> (i.e., it <em>mutates</em> the array) or <em>nondestructive</em>. Another\nfactor to pay attention to is what the <em>return value</em> of each of these methods\nis. Be sure to follow along and experiment with each method in <a href=\"https://replit.com/languages/javascript\">replit</a> until\nyou understand how it works, what it does to the original array, and what it\nreturns.</p>\n\n<h2>Add Elements to an Array</h2>\n\n<p>We'll start with the JavaScript methods we can use to add elements to an array:\n<code>.push()</code> and <code>.unshift()</code>, which are <em>destructive</em> methods, and the spread\noperator, which is <em>nondestructive</em>.</p>\n\n<h3><code>.push()</code> and <code>.unshift()</code></h3>\n\n<p>These two methods work in the same way:</p>\n\n<ul>\n<li>They take one or more arguments (the element or elements you want to add)</li>\n<li>They <em>return</em> the length of the modified array</li>\n<li>They are <em>destructive</em> methods</li>\n</ul>\n\n<p>The difference is that the <code>.push()</code> method adds elements to the end of an\n<code>Array</code> and <code>.unshift()</code> adds them to the beginning of the array:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">superheroes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Catwoman</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Storm</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Jessica Jones</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">superheroes</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Wonder Woman</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; 4</span>\n\n<span class=\"nx\">superheroes</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Catwoman\", \"Storm\", \"Jessica Jones\", \"Wonder Woman\"]</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">cities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">San Francisco</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">cities</span><span class=\"p\">.</span><span class=\"nx\">unshift</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Boston</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Chicago</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; 4</span>\n\n<span class=\"nx\">cities</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Boston\", \"Chicago\", \"New York\", \"San Francisco\"]</span>\n</code></pre></div>\n<p>Before moving on, try out the examples above as well as some examples of your\nown in the REPL.</p>\n\n<h3>Spread Operator</h3>\n\n<p>The <em>spread operator</em>, which looks like an ellipsis: <code>...</code>, allows us to \"spread\nout\" the elements of an existing <code>Array</code> into a new <code>Array</code>, creating a copy:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">coolCities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">San Francisco</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">copyOfCoolCities</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">coolCities</span><span class=\"p\">];</span>\n\n<span class=\"nx\">copyOfCoolCities</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [\"New York\", \"San Francisco\"]</span>\n</code></pre></div>\n<p>You might wonder why we would do this rather than just\n<code>copyOfCoolCities = coolCities</code>. The answer is that <code>coolCities</code> <em>points to a\nlocation in memory</em> and when you use the assignment operator to create a copy,\nyou create a second variable that points to the <em>same</em> location. What this means\nis that, if you change <code>copyOfCoolCities</code>, <code>coolCities</code> is changed as well (and\nvice versa).</p>\n\n<blockquote>\n<p><strong>A note about copying arrays in JavaScript</strong> Copying arrays in\nJavaScript is complicated! Some methods of copying create <em>deep</em> copies and\nsome create <em>shallow</em> copies. Using the spread operator to copy an array\ncreates a shallow copy. What this means is that, if you use it to copy a\nnested array, the inner array (or arrays) <em>still points to the same location\nin memory</em> as in the original array. So if you modify the <em>inner</em> array in the\ncopy, it changes the inner array in the original array as well (and vice\nversa). Don't worry too much about shallow and deep copies at this point: just\nknow that you can safely use the spread operator to clone <em>non-nested</em> arrays.</p>\n</blockquote>\n\n<p>Because the spread operator is an operator rather than a method, it\nworks differently than <code>push()</code> and <code>unshift()</code>: in the example above, we're\nconstructing an <code>Array</code> using <em>literal</em> notation (i.e., typing the square\nbrackets) and populating it by using the spread operator on the <code>Array</code> we want\nto copy.</p>\n\n<p>Where the spread operator comes in especially handy is when we want to add one\nor more new elements either before or after the elements in the original array\n(or both) without mutating the original array. To add an element to the front of\nthe new array, we simply type in the new element before spreading the elements\nin the original array:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">coolCities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">San Francisco</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">allCities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Los Angeles</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">coolCities</span><span class=\"p\">];</span>\n\n<span class=\"nx\">coolCities</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"New York\", \"San Francisco\"]</span>\n\n<span class=\"nx\">allCities</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Los Angeles\", \"New York\", \"San Francisco\"]</span>\n</code></pre></div>\n<p>And, as you might expect, to add a new item to the end of an <code>Array</code>, we type in\nthe new element <em>after</em> spreading the elements in the original array:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">coolCats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Hobbes</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Felix</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tom</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">allCats</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">coolCats</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Garfield</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">coolCats</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Hobbes\", \"Felix\", \"Tom\"]</span>\n\n<span class=\"nx\">allCats</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Hobbes\", \"Felix\", \"Tom\", \"Garfield\"]</span>\n</code></pre></div>\n<p>Note that, in both cases, we created a new <code>Array</code> instead of modifying the\noriginal one — our <code>coolCities</code> and <code>coolCats</code> <code>Array</code>s were untouched. Because\nwe didn't modify the original array, in order to save the results of our work we\nhad to assign it to a variable.</p>\n\n<p>Be sure to experiment with the spread operator in <a href=\"https://replit.com/languages/javascript\">replit</a> until you're\ncomfortable with how it works — it will come in handy later!</p>\n\n<h2>Remove Elements from an Array</h2>\n\n<p>As complements for <code>.push()</code> and <code>.unshift()</code>, respectively, we have <code>.pop()</code>\nand <code>.shift()</code>.</p>\n\n<h3><code>.pop()</code> and <code>.shift()</code></h3>\n\n<p>As with <code>.push()</code> and <code>.unshift()</code>, these two methods work in the same way:</p>\n\n<ul>\n<li>they don't take any arguments</li>\n<li>they remove a single element</li>\n<li>they <em>return</em> the element that is removed</li>\n<li>they are <em>destructive</em> methods</li>\n</ul>\n\n<p>The <code>.pop()</code> method removes the last element in an <code>Array</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">pop</span><span class=\"p\">();</span>\n<span class=\"c1\">// =&gt; \"Sun\"</span>\n\n<span class=\"nx\">days</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]</span>\n</code></pre></div>\n<p>The <code>.shift()</code> method removes the first element in an <code>Array</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n<span class=\"c1\">// =&gt; \"Mon\"</span>\n\n<span class=\"nx\">days</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]</span>\n</code></pre></div>\n<p>Notice above that both methods returned the removed element and mutated the\noriginal array.</p>\n\n<h3><code>.slice()</code></h3>\n\n<p>To remove elements from an <code>Array</code> nondestructively (without mutating the\noriginal <code>Array</code>), we can use the <code>.slice()</code> method. Just as the name implies,\n<code>.slice()</code> returns a portion, or <strong>slice</strong>, of an <code>Array</code>. The method takes 0,\n1, or 2 arguments and returns a new array containing the sliced elements.</p>\n\n<h4>With No Arguments</h4>\n\n<p>If we don't provide any arguments, <code>.slice()</code> will return a copy of the original\n<code>Array</code> with all elements intact:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">copyOfPrimes</span> <span class=\"o\">=</span> <span class=\"nx\">primes</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">();</span>\n\n<span class=\"nx\">primes</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [2, 3, 5, 7]</span>\n\n<span class=\"nx\">copyOfPrimes</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [2, 3, 5, 7]</span>\n</code></pre></div>\n<p>Note that creating a copy using <code>.slice()</code> works the same way as if you use the\nspread operator: they both create a <em>shallow</em> copy, and with both the copy\npoints to a different object in memory than the original. If you add an element\nto one of the arrays, it does <strong>not</strong> get added to the others:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">copyOfPrimesUsingSlice</span> <span class=\"o\">=</span> <span class=\"nx\">primes</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">();</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">copyOfPrimesUsingSpreadOperator</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">primes</span><span class=\"p\">];</span>\n\n<span class=\"nx\">primes</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; 5</span>\n\n<span class=\"nx\">primes</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [2, 3, 5, 7, 11]</span>\n\n<span class=\"nx\">copyOfPrimesUsingSlice</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [2, 3, 5, 7]</span>\n\n<span class=\"nx\">copyOfPrimesUsingSpreadOperator</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [2, 3, 5, 7]</span>\n</code></pre></div>\n<h4>With Arguments</h4>\n\n<p>We can also provide one or two arguments to <code>.slice()</code>: the first is the index\nwhere the slice should begin and the second is the index <strong>before which</strong> it\nshould end:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Wed\", \"Thu\", \"Fri\"]</span>\n</code></pre></div>\n<p>If no second argument is provided, the slice will run from the index specified\nby the first argument to the end of the <code>Array</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Sat\", \"Sun\"]</span>\n</code></pre></div>\n<p>To return a new <code>Array</code> with the first element removed, we call <code>.slice(1)</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]</span>\n</code></pre></div>\n<p>And we can return an array with the last element removed in a way that will look\nfamiliar from the previous lesson:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]</span>\n</code></pre></div>\n<p>However, <code>.slice()</code> provides an easier syntax for referencing the last element\n(or elements) in an <code>Array</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Sun\"]</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Fri\", \"Sat\", \"Sun\"]</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]</span>\n</code></pre></div>\n<p>When we provide a negative index, the JavaScript engine knows to start counting\nfrom the last element in the <code>Array</code> instead of the first.</p>\n\n<h3><code>.splice()</code></h3>\n\n<p>Unlike <code>.slice()</code>, which is nondestructive, <code>.splice()</code> performs destructive\nactions. Depending on how many arguments we give it, <code>.splice()</code> allows us to\nremove elements, add elements, or replace elements (or any combination of the\nthree).</p>\n\n<h4>With a Single Argument</h4>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">array</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"nx\">start</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The first argument expected by <code>.splice()</code> is the index at which to begin the\nsplice. If we only provide the one argument, <code>.splice()</code> will destructively\nremove a chunk of the original <code>Array</code> beginning at the provided index and\ncontinuing to the end of the <code>Array</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]</span>\n\n<span class=\"nx\">days</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Mon\", \"Tue\"]</span>\n</code></pre></div>\n<p>Notice that <code>.splice()</code> <strong>both</strong> mutated the original array (by removing a\nchunk, leaving just <code>[\"Mon\", \"Tue\"]</code>) <strong>and</strong> returned a new array containing\nthe removed chunk.</p>\n\n<p>We can use a negative 'start' index with <code>splice()</code>, the same as with <code>slice()</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Sat\", \"Sun\"]</span>\n\n<span class=\"nx\">days</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"]</span>\n</code></pre></div>\n<h4>With Two Arguments</h4>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">array</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"nx\">start</span><span class=\"p\">,</span> <span class=\"nx\">deleteCount</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>When we provide two arguments to <code>.splice()</code>, the first is still the index at\nwhich to begin splicing, and the second dictates how many elements we want to\nremove from the <code>Array</code>. For example, to remove <code>3</code> elements, starting with the\nelement at index <code>2</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">days</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Mon</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Tue</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Wed</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Thu</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Fri</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Sun</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">// =&gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]</span>\n\n<span class=\"nx\">days</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Wed\", \"Thu\", \"Fri\"]</span>\n\n<span class=\"nx\">days</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Mon\", \"Tue\", \"Sat\", \"Sun\"]</span>\n</code></pre></div>\n<p>Here again, we see that <code>splice()</code> removed elements from the original array,\nmutating that array, and returned the removed elements in a new array.</p>\n\n<h2>Replace Elements in an Array</h2>\n\n<h3><code>.splice()</code> with 3+ arguments</h3>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">array</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"nx\">start</span><span class=\"p\">,</span> <span class=\"nx\">deleteCount</span><span class=\"p\">,</span> <span class=\"nx\">item1</span><span class=\"p\">,</span> <span class=\"nx\">item2</span><span class=\"p\">,</span> <span class=\"p\">...)</span>\n</code></pre></div>\n<p>After the first two, every additional argument passed to <code>.splice()</code> will be\ninserted into the <code>Array</code> at the position indicated by the first argument. We\ncan replace a single element in an <code>Array</code> as follows, discarding a card and\ndrawing a new one:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">cards</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Ace of Spades</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Jack of Clubs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Nine of Clubs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Nine of Diamonds</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Three of Hearts</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n\n<span class=\"nx\">cards</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Ace of Clubs</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Nine of Clubs\"]</span>\n\n<span class=\"nx\">cards</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"]</span>\n</code></pre></div>\n<p>We have deleted \"Nine of Clubs\" and inserted \"Ace of Clubs\" in place,\neffectively <em>replacing</em> the original card.</p>\n\n<p>Or we can remove two elements and insert three new ones as our restaurant\nexpands its vegetarian options:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">menu</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Jalapeno Poppers</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Cheeseburger</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Fish and Chips</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">French Fries</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Onion Rings</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n\n<span class=\"nx\">menu</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Veggie Burger</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">House Salad</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Teriyaki Tofu</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; [\"Cheeseburger\", \"Fish and Chips\"]</span>\n\n<span class=\"nx\">menu</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"]</span>\n</code></pre></div>\n<p>We aren't required to remove anything with <code>.splice()</code> — we can use it to insert\nany number of elements anywhere within an <code>Array</code> by passing 0 as the second\nargument. Here we're adding new books to our library in alphabetical order:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">books</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Beloved</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Giovanni’s Room</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">The Color Purple</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">The Grass Dancer</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"nx\">books</span><span class=\"p\">.</span><span class=\"nx\">splice</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"dl\">\"</span><span class=\"s2\">Kindred</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Love Medicine</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; []</span>\n\n<span class=\"nx\">books</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; ['Beloved', 'Giovanni’s Room', 'Kindred', 'Love Medicine', 'The Color Purple', 'The Grass Dancer']</span>\n</code></pre></div>\n<p>Notice that <code>.splice()</code> returns an empty <code>Array</code> when we provide a second\nargument of <code>0</code>. This makes sense because the return value is the set of\nelements that were removed, and we're telling it to remove <code>0</code> elements.</p>\n\n<p>Keep playing around with <code>.splice()</code> in the REPL to get comfortable with it.</p>\n\n<h3>Using Bracket Notation to Replace Elements</h3>\n\n<p>Recall from the previous lesson that we can also use bracket notation to replace\na single element in an <code>Array</code>. If we only need to replace one element, this is\na simpler approach:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">cards</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Ace of Spades</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Jack of Clubs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Nine of Clubs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Nine of Diamonds</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Three of Hearts</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n\n<span class=\"nx\">cards</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Ace of Clubs</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; \"Ace of Clubs\"</span>\n\n<span class=\"nx\">cards</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"]</span>\n</code></pre></div>\n<p>Both this approach and <code>splice()</code> are destructive — they modify the original\n<code>Array</code>. There's a <em>nondestructive</em> way to replace or add items at arbitrary\npoints within an <code>Array</code>; to do it we need to combine the <code>slice()</code> method and\nthe spread operator.</p>\n\n<h3>Slicing and Spreading</h3>\n\n<p>Combining <code>.slice()</code> and the spread operator allows us to replace elements\n<em>nondestructively</em>, leaving the original <code>Array</code> unharmed:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">menu</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Jalapeno Poppers</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Cheeseburger</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Fish and Chips</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">French Fries</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Onion Rings</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">newMenu</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">...</span><span class=\"nx\">menu</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Veggie Burger</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">House Salad</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Teriyaki Tofu</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span><span class=\"nx\">menu</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n<span class=\"p\">];</span>\n\n<span class=\"nx\">menu</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Jalapeno Poppers\", \"Cheeseburger\", \"Fish and Chips\", \"French Fries\", \"Onion Rings\"]</span>\n\n<span class=\"nx\">newMenu</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"]</span>\n</code></pre></div>\n<p>Let's unpack this a little bit. We're assigning an array to <code>newMenu</code> using\nliteral notation. Inside the brackets, we are spreading the result of calling\nslice on <code>menu</code> with the arguments <code>0</code> and <code>1</code>, then typing in three new\nelements, then spreading the result of calling slice on <code>menu</code> with the argument\n<code>3</code>. Here, we are taking advantage of the fact that the <code>slice()</code> method\n<strong>returns a new array</strong>. We can spread the elements in <strong>that</strong> array just as we\ncan with any other array.</p>\n\n<p>Play around with this in the REPL until it makes sense; break it down into its\ncomponent parts and try each piece on its own. It's the trickiest thing that\nwe've encountered in this lesson, so don't sweat it if it takes a little while\nto sink in!</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we've learned a variety of methods we can use to remove, add,\nand replace the elements in <code>Array</code>s. We've learned that some methods are\n<em>destructive</em> and some are <em>nondestructive</em>. With this knowledge, you have the\ntools you need to manipulate <code>Array</code>s in very complex ways.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/array-methods/javascript-array-methods.jpg\" alt=\"JavaScript Array Methods\"></p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>.slice()</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>.splice()</code></a></li>\n</ul></li>\n</ul>",
			"exportId": "array-methods"
		},
		{
			"id": 432849,
			"title": "Arrays Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Practice writing arrays</li>\n<li>Practice using <em>destructive</em> methods to manipulate arrays</li>\n<li>Practice using <em>nondestructive</em> methods to manipulate arrays</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We've learned about how arrays work and about the array methods built in to\nJavaScript that we can use to manipulate them. Now it's time to practice what\nwe've learned.</p>\n\n<p>If you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code.</p>\n\n<h2>Instructions</h2>\n\n<p>Open up the <code>test</code> folder and take a look at <code>indexTest.js</code>. Note that some of\nthe names of the functions you will be writing begin with <code>destructively</code> and\nsome don't. This is a clue as to which <code>Array</code> method you will need to use for\neach function.</p>\n\n<p>Note also that the first test asks for an array called <code>cats</code>, set to an\ninitial value of <code>[\"Milo\", \"Otis\", \"Garfield\"]</code>. In your functions, you will be\naccessing and manipulating this array.</p>\n\n<p>Near the top of <code>indexTest.js</code> you will see the following:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">cats</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">cats</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Milo</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Otis</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Garfield</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>What this code does is <em>reset</em> the array to its original contents before each\ntest is run. The reason we need to do this is because some of your functions\nwill be <em>destructive</em> — they will change the original <code>cats</code> array. This\nis a problem because it means the input to the remaining functions will be\ndependent on the outcome of other functions. It also means that the expected\nreturn value of a function might change if the tests are run in a different\norder. This makes it more difficult both to write tests in the first place and\nto figure out how to get the tests to pass. Resetting the array returns us to a\nblank slate between tests.</p>\n\n<p>This is also a good illustration of why it's generally good practice to avoid\nmutating a program's state whenever possible. If we use only <em>nondestructive</em>\nmethods, we have complete control over what's going into and coming out of the\nfunction. This makes our programs more robust, easier to maintain, and less\nprone to bugs.</p>\n\n<p>Remember the workflow:</p>\n\n<ol>\n<li>Run the tests using <code>learn test</code>.</li>\n<li>Read the errors; vocalize what they're asking you to do.</li>\n<li>Write code; repeat steps 1 and 2 often until a test passes.</li>\n<li>Repeat as needed for the remaining tests.</li>\n</ol>",
			"exportId": "g0e7d4167781e74380fa6fa207dbc8238"
		},
		{
			"id": 432851,
			"title": "Objects",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-readme\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify JavaScript <code>Object</code>s</li>\n<li>Access a value stored in an <code>Object</code></li>\n<li>Learn about JavaScript's Object methods</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>While <code>Array</code>s are great for representing simple, ordered data sets, they're\ngenerally not so great at modeling a more complex structure. For that, we need\n<code>Object</code>s. In this lesson, we'll begin to learn about <code>Object</code>s, specifically,\nwhat they are, how to create them, and how to access values stored in them. In\nthe next lesson, we'll learn how to modify <code>Object</code>s, both destructively and\nnondestructively.</p>\n\n<p>Be sure to follow along with the examples in this lesson in <a href=\"https://replit.com/languages/javascript\">replit</a>.</p>\n\n<blockquote>\n<p><strong>ASIDE</strong>: You may have heard about or be familiar with the concept of\n<em>object-oriented programming</em>. Un-helpfully JavaScript called this thing with\ncurly braces (<code>{}</code>) an <code>Object</code>, but it is not related to object orientation.\nThere was initially no thought that JavaScript would ever need to accommodate\nobject-oriented programming but as it grew in popularity, the ability to use\nobject orientation was added to the language. A JavaScript <code>Object</code>, however,\nis a <em>data structure</em> consisting of <code>key</code>s and <code>value</code>s, similar to Ruby's\n<code>Hash</code>, Python's <code>Dictionary</code> or C-like languages' <code>struct</code>(ure). It is\nimportant not to confuse the two.</p>\n</blockquote>\n\n<h2>Identify JavaScript Objects</h2>\n\n<p>Let's think about how we could represent a company's address in JavaScript.\nAddresses are made up of words and numbers, so at first it might make sense to\nstore the address as a string:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">11 Broadway, 2nd Floor, New York, NY 10004</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>That looks decent enough, but what happens if the company moves to a different\nfloor in the same building? We just need to modify one piece of the address, but\nwith a string we'd have to involve some pretty complicated find-and-replace\npattern matching or replace the entire thing. Instead, let's throw the different\npieces of the address into an <code>Array</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">11 Broadway</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">2nd Floor</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">NY</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">10004</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>Now, we can just grab the small piece that we want to update and leave the rest\nas is:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">address</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">3rd Floor</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">address</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [\"11 Broadway\", \"3rd Floor\", \"New York\", \"NY\", \"10004\"]</span>\n</code></pre></div>\n<p>This seems like a better solution, but it still has its drawbacks. Namely,\n<code>address[1]</code> is a <strong>terrible</strong> way to refer to the second line of an address.\nWhat if there is no second line, e.g.,\n<code>['11 Broadway', 'New York', 'NY', '10004']</code>? Then <code>address[1]</code> will contain the\ncity name instead of the floor number.</p>\n\n<p>We could standardize it, putting an empty string in <code>address[1]</code> if there's no\nsecond line in the address, but it's still poorly named. <code>address[1]</code> offers\nvery little insight into what data we should expect to find in there. It's a\npart of an address, sure, but which part?</p>\n\n<p>To get around this, we could store the individual pieces of the address in\nseparate, appropriately-named variables:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">street1</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">11 Broadway</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">street2</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">2nd Floor</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">city</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">NY</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">zipCode</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">10004</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>That's solved one issue but reintroduced the same problem we tackled in the\nlesson on <code>Array</code>s: storing pieces of related data in a bunch of unrelated\nvariables is not a great idea! If only there were a best-of-both-worlds solution\n—&nbsp;a way to store all of our address information in a single data structure\nwhile also maintaining a descriptive naming scheme. The data structure we're\nafter here is the <strong><em><code>Object</code></em></strong>.</p>\n\n<h3>What Is an Object?</h3>\n\n<p>Like <code>Array</code>s, JavaScript <code>Object</code>s are collections of data. They consist of a\nlist of <em>properties</em> (<em>key-value pairs</em>) bounded by curly braces (<code>{ }</code>). The\nproperties can point to values of any data type —&nbsp;even other <code>Object</code>s.</p>\n\n<p>We can have empty <code>Object</code>s:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n</code></pre></div>\n<p>Or <code>Object</code>s with a single property:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">key</span><span class=\"p\">:</span> <span class=\"nx\">value</span> <span class=\"p\">};</span>\n</code></pre></div>\n<p>When we have to represent multiple properties in the same <code>Object</code> (which is\nmost of the time), we use commas to separate them:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">key1</span><span class=\"p\">:</span> <span class=\"nx\">value1</span><span class=\"p\">,</span>\n  <span class=\"na\">key2</span><span class=\"p\">:</span> <span class=\"nx\">value2</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>We can also have nested <code>Object</code>s, in which the values associated with one or\nmore of the keys is another <code>Object</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">key1</span><span class=\"p\">:</span> <span class=\"nx\">value1</span><span class=\"p\">,</span>\n  <span class=\"na\">key2</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">innerKey1</span><span class=\"p\">:</span> <span class=\"nx\">innerValue1</span><span class=\"p\">,</span>\n    <span class=\"na\">innerKey2</span><span class=\"p\">:</span> <span class=\"nx\">innerValue2</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>There is no limit to how deeply nested our <code>Object</code>s can be.</p>\n\n<p>For a real example, let's define our address as an <code>Object</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">street</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">line1</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">11 Broadway</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">line2</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">2nd Floor</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">city</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">state</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">NY</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">zipCode</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">10004</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>Here we're defining <code>address</code> using <code>Object</code> literal syntax: literally typing\nout the <code>Object</code> inside the <code>{}</code>. Our address <code>Object</code> has four keys: street,\ncity, state, and zipCode. The first key points to another <code>Object</code> which itself\nhas two keys: line1 and line2. Note that there's a comma between each key-value\npair in both the top-level <code>Object</code> and the nested <code>Object</code>. Practice creating an\nobject in the REPL; then try leaving out a comma to see what happens.</p>\n\n<p>Multiple properties can have the same value:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">meals</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">breakfast</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Avocado toast</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">lunch</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Avocado toast</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">dinner</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Avocado toast</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">meals</span><span class=\"p\">.</span><span class=\"nx\">breakfast</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; \"Avocado toast\"</span>\n\n<span class=\"nx\">meals</span><span class=\"p\">.</span><span class=\"nx\">dinner</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; \"Avocado toast\"</span>\n</code></pre></div>\n<p>But keys must be unique. If the same key is used for multiple properties, only\nthe final value will be retained.&nbsp;The rest will be overwritten:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">meals</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">breakfast</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Avocado toast</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">breakfast</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Oatmeal</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">breakfast</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Scrambled eggs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">meals</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; { breakfast: \"Scrambled eggs\" }</span>\n</code></pre></div>\n<p>The real data in an <code>Object</code> is stored in the <em>value</em> half of the key-value\npairings. The <em>key</em> is what lets us access that value. In the same way we use\n<em>identifiers</em> to name variables and functions, inside an <code>Object</code> we assign each\nvalue a key. We can then refer to that key and the JavaScript engine knows\nexactly which value we're trying to access.</p>\n\n<h2>Access a Value Stored in an Object</h2>\n\n<p>We access an <code>Object</code> stored in a variable in the same way we access any\nvariable's value: by typing the variable name. Then, to access one of the values\n<em>inside</em> our <code>Object</code>, we add a reference to the key associated with the value we\nwant; we can do that using either <em>dot notation</em> or <em>bracket notation</em>.</p>\n\n<h3>Dot Notation</h3>\n\n<p>With <em>dot notation</em>, we use the <em>member access operator</em> (a single period) to\naccess values in an <code>Object</code>. For example, we can grab the individual pieces of\nour address, above, as follows:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">street</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }</span>\n\n<span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">city</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"New York\"</span>\n\n<span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"NY\"</span>\n\n<span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">zipCode</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"10004\"</span>\n</code></pre></div>\n<p>Then to access a value inside <code>address.street</code>, we simply append the inner key,\nagain using dot notation:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">street</span><span class=\"p\">.</span><span class=\"nx\">line1</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"11 Broadway\"</span>\n\n<span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">street</span><span class=\"p\">.</span><span class=\"nx\">line2</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"2nd Floor\"</span>\n</code></pre></div>\n<blockquote>\n<p><strong>Note</strong>: You might initially think we should use <code>address.line1</code> to access\nthe value associated with the <code>line1</code> key, but <code>address</code> and <code>address.street</code>\nare <em>separate</em> <code>Object</code>s. <code>address.street</code> is the <em>identifier</em> for the nested\n<code>Object</code> — the one that contains the <code>line1</code> key — and we can use dot notation\non that just the same as on the top-level <code>Object</code>, <code>address</code>. Experiment in\nthe REPL to make sure you understand how it works.</p>\n</blockquote>\n\n<p>Dot notation is fantastic for readability, as we can just reference the bare key\nname (e.g., <code>street</code> or <code>zipCode</code>). Because of this simple syntax, it should be\nyour go-to strategy for accessing the properties of an <code>Object</code>.</p>\n\n<blockquote>\n<p><strong>NOTE</strong>: Most people just call it <em>dot notation</em> or the <em>dot operator</em>, so\ndon't worry too much about remembering the term <em>member access operator</em>.</p>\n</blockquote>\n\n<h4>Accessing Nonexistent Properties</h4>\n\n<p>If we try to access the <code>country</code> property of our <code>address</code> <code>Object</code>, what will\nhappen?</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">country</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n</code></pre></div>\n<p>It returns <code>undefined</code> because there is no matching key on the <code>Object</code>.\nJavaScript is too nice to throw an error, so it lets us down gently. Keep one\nthing in mind, though: if you're seeing <code>undefined</code> when trying to access an\n<code>Object</code>'s properties, you should recheck which properties exist on the <code>Object</code>\n(along with your spelling and capitalization)!</p>\n\n<h3>Bracket Notation</h3>\n\n<p>With <em>bracket notation</em>, we use the <em>computed member access operator</em>, which,\nrecall from the lesson on <code>Array</code>s, is a pair of square brackets (<code>[]</code>). To access\nthe same properties as above, we need to represent them as strings inside the\noperator:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">address</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">street</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }</span>\n\n<span class=\"nx\">address</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">street</span><span class=\"dl\">\"</span><span class=\"p\">][</span><span class=\"dl\">\"</span><span class=\"s2\">line1</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"11 Broadway\"</span>\n\n<span class=\"nx\">address</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">street</span><span class=\"dl\">\"</span><span class=\"p\">][</span><span class=\"dl\">\"</span><span class=\"s2\">line2</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"2nd Floor\"</span>\n\n<span class=\"nx\">address</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">city</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"New York\"</span>\n\n<span class=\"nx\">address</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">state</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"NY\"</span>\n\n<span class=\"nx\">address</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">zipCode</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"10004\"</span>\n</code></pre></div>\n<p>Bracket notation is a bit harder to read than dot notation, so we always default\nto the latter. However, there are two main situations in which we need to use\nbracket notation.</p>\n\n<h4>Nonstandard Keys</h4>\n\n<p>If (for whatever reason) you need to use a nonstandard string as the key in an\n<code>Object</code>, you'll only be able to access the properties with bracket notation. For\nexample, this is a valid <code>Object</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">wildKeys</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Cash rules everything around me.</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Wu</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">C.R.E.A.M.</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Tang</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Get the money.</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">For</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">$ $ bill, y'all!</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Ever</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>It's impossible to access those properties with dot notation:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">wildKeys</span><span class=\"p\">.</span><span class=\"dl\">'</span><span class=\"s1\">Cash rules everything around me.</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"c1\">// ERROR: Uncaught SyntaxError: Unexpected string</span>\n</code></pre></div>\n<p>But bracket notation works just fine:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">wildKeys</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">$ $ bill, y'all!</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"Ever\"</span>\n</code></pre></div>\n<p>In order to access a property via dot notation, <strong>the key must follow the same\nnaming rules applied to variables and functions</strong>. It's also important to note\nthat under the hood <strong>all keys are strings</strong>. Don't waste too much time\nworrying whether a key is accessible via dot notation. If you follow these rules\nwhen naming your keys, everything will work out:</p>\n\n<ul>\n<li>camelCaseEverything</li>\n<li>Start the key with a lowercase letter</li>\n<li>No spaces or punctuation</li>\n</ul>\n\n<p>If you follow those three rules, you'll be able to access all of an <code>Object</code>'s\nproperties via bracket notation <strong>or</strong> dot notation.</p>\n\n<blockquote>\n<p><strong>Top Tip</strong>: Always name your <code>Object</code>'s keys according to the above three\nrules. Keeping everything standardized is good, and being able to access\nproperties via dot notation makes the code much more readable.</p>\n</blockquote>\n\n<h4>Accessing Properties Dynamically</h4>\n\n<p>The other situation in which bracket notation is required is if we want to\ndynamically access properties (i.e., using variables rather than literal\nidentifiers). The reason we need to enclose the key inside quotes when we use\nthe literal key is because, when we <strong>don't</strong> use the quotes, JavaScript will\ninterpret what's inside the brackets as a variable.</p>\n\n<p>From the lesson on <code>Array</code>s, remember why we call it the <em>computed member access\noperator</em>: we can place any expression inside the brackets and JavaScript will\n<em>compute</em> its value to figure out which property to access. For example, we can\naccess the <code>zipCode</code> property from our <code>address</code> <code>Object</code> like so:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">address</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">zip</span><span class=\"dl\">\"</span> <span class=\"o\">+</span> <span class=\"dl\">\"</span><span class=\"s2\">Code</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"10004\"</span>\n</code></pre></div>\n<p>Pretty neat, but the real strength of bracket notation is its ability to compute\nthe value of variables on the fly. For example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">meals</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">breakfast</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Oatmeal</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">lunch</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Caesar salad</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">dinner</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Chimichangas</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">mealName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">lunch</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">meals</span><span class=\"p\">[</span><span class=\"nx\">mealName</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"Caesar salad\"</span>\n</code></pre></div>\n<p>By placing <code>mealName</code> in the square brackets, we're telling the JavaScript\nengine it needs to <em>interpret</em> the value inside those brackets. It evaluates\n<code>mealName</code>, resolves it to <code>'lunch'</code>, and returns \"Caesar salad\". Note that we\ndidn't enclose the key in quotes: the keys themselves are strings, but\n<code>mealName</code> is a variable <em>containing</em> a string. If we try to use the <code>mealName</code>\nvariable with dot notation instead, it doesn't work:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">mealName</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">dinner</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"dinner\"</span>\n\n<span class=\"nx\">meals</span><span class=\"p\">.</span><span class=\"nx\">mealName</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; undefined</span>\n</code></pre></div>\n<p>With dot notation, JavaScript doesn't treat <code>mealName</code> as a variable\n—&nbsp;instead it checks whether a property exists with the literal key\n<code>mealName</code>, only finds properties named <code>breakfast</code>, <code>lunch</code>, and <code>dinner</code>, and\nso returns <code>undefined</code>. Essentially, dot notation is for when you know the exact\nname of the property in advance, and bracket notation is for when you need to\ncompute it when the program runs.</p>\n\n<p>The need for bracket notation doesn't stop at dynamically accessing properties\non an already-created <code>Object</code>. We can also use bracket notation to dynamically\nset properties <em>during the creation of a new <code>Object</code></em>. For example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">morningMeal</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">breakfast</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">middayMeal</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">lunch</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">eveningMeal</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">dinner</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">meals</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"nx\">morningMeal</span><span class=\"p\">]:</span> <span class=\"dl\">\"</span><span class=\"s2\">French toast</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"nx\">middayMeal</span><span class=\"p\">]:</span> <span class=\"dl\">\"</span><span class=\"s2\">Personal pizza</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"nx\">eveningMeal</span><span class=\"p\">]:</span> <span class=\"dl\">\"</span><span class=\"s2\">Fish and chips</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">meals</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; { breakfast: \"French toast\", lunch: \"Personal pizza\", dinner: \"Fish and chips\" }</span>\n</code></pre></div>\n<p>Once again, by wrapping the variable names in square brackets, we're letting\nJavaScript know that it needs to interpret the contents. Let's try doing the\nsame thing without the square brackets:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">morningMeal</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">breakfast</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">middayMeal</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">lunch</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">eveningMeal</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">dinner</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">meals</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">morningMeal</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">French toast</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">middayMeal</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Personal pizza</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">eveningMeal</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Fish and chips</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">meals</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; { morningMeal: \"French toast\", middayMeal: \"Personal pizza\", eveningMeal: \"Fish and chips\" }</span>\n</code></pre></div>\n<p>Without the square brackets, JavaScript treated each key as a literal identifier\ninstead of a variable. Bracket notation — the <em>computed member access\noperator</em> — once again shows its powers of computation!</p>\n\n<p>Bracket notation will really come in handy when we start iterating over <code>Object</code>s\nand programmatically accessing and assigning properties.</p>\n\n<h2>JavaScript's Object Methods</h2>\n\n<p>JavaScript includes a number of built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\">static <code>Object</code>\nmethods</a> (<em>static</em> means that these methods are called on the\n<code>Object</code> class itself, rather than on an instance of an <code>Object</code>). We will talk\nbriefly about a couple of them here and go into detail about one more in the\nnext lesson.</p>\n\n<h3><code>Object.keys()</code></h3>\n\n<p>We can get a list of the top-level keys in an <code>Object</code> by using the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys()</code></a> static method. We do that by calling <code>Object.keys()</code> and\npassing the <code>Object</code> instance as an argument. The return value is an <code>Array</code>\ncontaining all of the keys at the <em>top level</em> of the <code>Object</code> instance.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">wednesdayMenu</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cheesePlate</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">soft</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Brie</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">semiSoft</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Fontina</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">hard</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Provolone</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">fries</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Sweet potato</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">salad</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Southwestern</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">wednesdayMenu</span><span class=\"p\">);</span>\n<span class=\"c1\">//=&gt; [\"cheesePlate\", \"fries\", \"salad\"]</span>\n</code></pre></div>\n<p>Notice that it didn't pick up the keys in the nested <code>cheesePlate</code> <code>Object</code>\n—&nbsp;just the keys from the properties declared at the top level within\n<code>wednesdayMenu</code>. How do you think we could use <code>Object.keys()</code> to get a list of\nthe keys inside the nested <code>Object</code>? Try it out in the REPL.</p>\n\n<blockquote>\n<p><strong>NOTE</strong>: The sequence in which keys are ordered in the returned <code>Array</code> is\nnot consistent across browsers and should not be relied upon. All of the\n<code>Object</code>'s keys will be in the <code>Array</code>, but you can't count on <code>keyA</code> always\nbeing at index <code>0</code> of the <code>Array</code> and <code>keyB</code> always being at index <code>1</code>.</p>\n</blockquote>\n\n<h3><code>Object.values()</code></h3>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"><code>Object.values()</code></a> static method behaves similarly to\n<code>Object.keys()</code> but, as you might expect, returns an array containing values\nrather than keys. Try this out in the REPL as well.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we identified what an <code>Object</code> is and how it gives us a better\nway to keep track of more complicated sets of related data. We also learned how\nto access values stored in an <code>Object</code> using dot notation and bracket notation,\nas well as when to use each. In the next lesson, we'll learn how to modify\n<code>Object</code>s. We'll also explore the relationship between <code>Object</code>s and <code>Array</code>s.</p>\n\n<p>Creating and interacting with <code>Object</code>s is an important skill in JavaScript\nprogramming. Before moving on, be sure to use <a href=\"https://replit.com/languages/javascript\">replit</a> to practice creating\n<code>Object</code>s (including nested <code>Object</code>s) and accessing properties.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\">Object basics</a></li>\n</ul></li>\n</ul>",
			"exportId": "objects"
		},
		{
			"id": 432853,
			"title": "Modifying Objects",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-modifying-objects\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Add an <code>Object</code> property using dot or bracket notation</li>\n<li>Modify a property using dot or bracket notation</li>\n<li>Update an <code>Object</code> nondestructively using the spread operator</li>\n<li>Remove a property from an <code>Object</code></li>\n<li>Identify the relationship between <code>Array</code>s and <code>Object</code>s</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In the previous lesson, we learned the basics of creating <code>Object</code>s and\naccessing their properties. In this lesson we'll learn how to modify and remove\nproperties, both destructively and nondestructively. Finally, we'll explore the\nrelationship between <code>Array</code>s and <code>Object</code>s.</p>\n\n<p>As always, don't forget to follow along in <a href=\"https://replit.com/languages/javascript\">replit</a>.</p>\n\n<h2>Add an <code>Object</code> Property Using Dot or Bracket Notation</h2>\n\n<p>We know how to initialize a variable by declaring it and assigning it a value\nusing the assignment operator:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">city</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">New York</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The process of creating a property inside an existing object is similar; we\nspecify the key and assign it a value:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">circle</span> <span class=\"o\">=</span> <span class=\"p\">{};</span> <span class=\"c1\">// Create `circle` and set it to an empty Object</span>\n\n<span class=\"nx\">circle</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; {}</span>\n\n<span class=\"nx\">circle</span><span class=\"p\">.</span><span class=\"nx\">radius</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"c1\">// Create the key inside `circle` and set its value to 5</span>\n\n<span class=\"nx\">circle</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; { radius: 5 }</span>\n</code></pre></div>\n<p>We can do this using either dot or bracket notation, and we can use any\nexpression as the value:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">circle</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n<span class=\"nx\">circle</span><span class=\"p\">.</span><span class=\"nx\">radius</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n\n<span class=\"nx\">circle</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">diameter</span><span class=\"dl\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n<span class=\"nx\">circle</span><span class=\"p\">.</span><span class=\"nx\">circumference</span> <span class=\"o\">=</span> <span class=\"nx\">circle</span><span class=\"p\">.</span><span class=\"nx\">diameter</span> <span class=\"o\">*</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">PI</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 31.41592653589793</span>\n\n<span class=\"nx\">circle</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">area</span><span class=\"dl\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">PI</span> <span class=\"o\">*</span> <span class=\"nx\">circle</span><span class=\"p\">.</span><span class=\"nx\">radius</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 78.53981633974483</span>\n\n<span class=\"nx\">circle</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; { radius: 5, diameter: 10, circumference: 31.41592653589793, area: 78.53981633974483 }</span>\n</code></pre></div>\n<blockquote>\n<p><strong>A Side Note</strong>: Recall from the lesson on <code>Array</code>s that we can add, modify or\ndelete elements even if we use <code>const</code> to initialize the <code>Array</code>. The same\nthing applies here: we can add, modify or delete properties, but we can't\nreassign the variable itself.</p>\n\n<p><strong>Top Tip</strong>: Note that the process above gives us an alternative to typing out\nour <code>Object</code> using literal syntax: we can initialize an empty object and then\nuse dot notation or bracket notation to create the properties\nprogrammatically. This approach is less error-prone than using literal syntax\nsince JavaScript creates the correct <code>Object</code> syntax for us. Try it out in the\nREPL.</p>\n</blockquote>\n\n<h3>Modify a Property Using Dot or Bracket Notation</h3>\n\n<p>We can update or overwrite existing properties simply by assigning a new value\nto an existing key:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">mondayMenu</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cheesePlate</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">soft</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Chèvre</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">semiSoft</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Gruyère</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">hard</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Manchego</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">fries</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Curly</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">salad</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Cobb</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">mondayMenu</span><span class=\"p\">.</span><span class=\"nx\">fries</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Sweet potato</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">mondayMenu</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Cobb\" }</span>\n</code></pre></div>\n<p>Note that modifying an <code>Object</code>'s properties in the way we did above is\n<em>destructive</em>. This means that we're making changes directly to the original\n<code>Object</code>.</p>\n\n<p>Let's take a look at an example. We'll start by creating a function to\nencapsulate this modification process:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">destructivelyUpdateObject</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">obj</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span> <span class=\"c1\">//Why are we using bracket notation here?</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">obj</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Our function takes three arguments: the original menu <code>Object</code>, the <code>key</code>\nidentifying the property we want to update, and the <code>value</code> we want to change\nits value to.</p>\n\n<p>At our restaurant, we've finished serving for the day. It's time to update our\n<code>mondayMenu</code> to the <code>tuesdayMenu</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">mondayMenu</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cheesePlate</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">soft</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Chèvre</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">semiSoft</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Gruyère</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">hard</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Manchego</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">fries</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Sweet potato</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">salad</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Cobb</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">tuesdayMenu</span> <span class=\"o\">=</span> <span class=\"nx\">destructivelyUpdateObject</span><span class=\"p\">(</span><span class=\"nx\">mondayMenu</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">salad</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Caesar</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nx\">tuesdayMenu</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" }</span>\n\n<span class=\"nx\">tuesdayMenu</span><span class=\"p\">.</span><span class=\"nx\">salad</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Caesar\"</span>\n</code></pre></div>\n<p>Looks like our <code>tuesdayMenu</code> came out perfectly. But what about <code>mondayMenu</code>?</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">mondayMenu</span><span class=\"p\">.</span><span class=\"nx\">salad</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Caesar\"</span>\n</code></pre></div>\n<p>Dang! We don't serve Caesar salad on Mondays. Instead of destructively updating\nthe original menu, is there a way to nondestructively merge the change(s) into a\nnew <code>Object</code>, leaving the original intact?</p>\n\n<h2>Update an Object Nondestructively Using the Spread Operator</h2>\n\n<p>Let's create a new method; it will take the same three arguments as the previous\nmethod:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">nondestructivelyUpdateObject</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Code to return new, updated menu object</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Recall from the lessons on <code>Array</code>s that we can use the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals\"><strong>spread operator</strong></a> to copy all the elements of an existing array into\na new array. We can do the same thing with <code>Object</code>s. Let's use the spread\noperator to copy all of the old menu <code>Object</code>'s properties into a new <code>Object</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">nondestructivelyUpdateObject</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">newObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">obj</span> <span class=\"p\">};</span>\n\n  <span class=\"c1\">// Code to return new, updated menu object goes here</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This will create a clone of the original object and save it into a new variable.\nWe can then update the newly-created <code>newObj</code> with the desired change and return\nthat updated menu, leaving the original menu <code>Object</code> unchanged:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">nondestructivelyUpdateObject</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">newObj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">obj</span> <span class=\"p\">};</span>\n\n  <span class=\"nx\">newObj</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">value</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">newObj</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">sundayMenu</span> <span class=\"o\">=</span> <span class=\"nx\">nondestructivelyUpdateObject</span><span class=\"p\">(</span>\n  <span class=\"nx\">tuesdayMenu</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">fries</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Shoestring</span><span class=\"dl\">\"</span>\n<span class=\"p\">);</span>\n\n<span class=\"nx\">tuesdayMenu</span><span class=\"p\">.</span><span class=\"nx\">fries</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Sweet potato\"</span>\n\n<span class=\"nx\">sundayMenu</span><span class=\"p\">.</span><span class=\"nx\">fries</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Shoestring\"</span>\n</code></pre></div>\n<p>To review, we are calling our <code>nondestructivelyUpdateObject()</code> function, passing\nas our arguments the original menu (<code>tuesdayMenu</code>) and the key and value\nrepresenting the desired change. The function first makes a copy of\n<code>tuesdayMenu</code>, then changes the value associated with the <code>fries</code> key to\n<code>\"Shoestring\"</code>. Finally, it returns the updated menu, which is stored into the\nvariable <code>sundayMenu</code>.</p>\n\n<p>We can refactor the function to be a bit more concise and still achieve the\nsame outcome:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">nondestructivelyUpdateObject</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"p\">...</span><span class=\"nx\">obj</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]:</span> <span class=\"nx\">value</span><span class=\"p\">,</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">sundayMenu</span> <span class=\"o\">=</span> <span class=\"nx\">nondestructivelyUpdateObject</span><span class=\"p\">(</span>\n  <span class=\"nx\">tuesdayMenu</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">fries</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Shoestring</span><span class=\"dl\">\"</span>\n<span class=\"p\">);</span>\n\n<span class=\"nx\">tuesdayMenu</span><span class=\"p\">.</span><span class=\"nx\">fries</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Sweet potato\"</span>\n\n<span class=\"nx\">sundayMenu</span><span class=\"p\">.</span><span class=\"nx\">fries</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Shoestring\"</span>\n</code></pre></div>\n<p>Here, we're still returning a new object that has all the key-value pairs from\nthe original object copied into it. We're also using bracket notation (<code>[]</code>) to\ndynamically assign a key on the object being returned with the value passed as\nan argument.</p>\n\n<blockquote>\n<p><strong>Note</strong>: The spread operator has been around for a while, but there's still a\nchance you'll encounter similar code written using another method,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a>. Like the spread operator, <code>Object.assign</code> allows\nus to combine properties from multiple <code>Object</code>s into a single <code>Object</code>.</p>\n\n<p>In other languages (like Ruby), this behavior is called \"merging.\" You take an\noriginal base <code>Object</code> (maybe with some typical \"standard\" attribute / value\npairs already set), and then you \"merge\" in additional <code>Object</code>(s).</p>\n</blockquote>\n\n<p><strong>NOTE:</strong> Doing nondestructive updates (i.e. \"creating new things and merging\non top\") is a really important pattern. It turns out that, in many places,\nnondestructive updates are more performant. The main reason for this is when\nyou add something to an existing <code>Object</code>, the computer has to make sure that\nthe <code>Object</code> has enough room to add what you're saying to add. If it doesn't,\nthe computer needs to do cleanup work, find some more space, copy the old\nthing over, add the new thing, and then resume work. That \"accounting\" process\nis actually quite slow.</p>\n\n<h2>Remove a Property from an Object</h2>\n\n<p>Uh oh, we ran out of Southwestern dressing, so we have to take the salad off the\nmenu. In JavaScript, that's as easy as:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">wednesdayMenu</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">cheesePlate</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">soft</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Brie</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">semiSoft</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Fontina</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">hard</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Provolone</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">fries</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Sweet potato</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">salad</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Southwestern</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">delete</span> <span class=\"nx\">wednesdayMenu</span><span class=\"p\">.</span><span class=\"nx\">salad</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; true</span>\n\n<span class=\"nx\">wednesdayMenu</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\" }</span>\n</code></pre></div>\n<p>We pass the property that we'd like to remove to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a>\noperator, and JavaScript takes care of the rest. Poof! No more <code>salad</code> property\non the <code>wednesdayMenu</code> <code>Object</code>.</p>\n\n<h2>Identify the Relationship Between Arrays and Objects</h2>\n\n<p>Think back to the early lesson on data types in JavaScript. We listed off seven\ntypes into which all data falls: numbers, strings, booleans, symbols, <code>Object</code>s,\n<code>null</code>, and <code>undefined</code>. Notice anything missing? Arrays!</p>\n\n<p>Why isn't an <code>Array</code> a fundamental data type in JavaScript? The answer is that\n<strong>it's actually a special type of <code>Object</code></strong>. Yes, that's right: <strong><em><code>Array</code>s are\n<code>Object</code>s</em></strong>. To underscore this point, check out what the <code>typeof</code> operator\nreturns when we use it on an <code>Array</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">typeof</span> <span class=\"p\">[];</span>\n<span class=\"c1\">//=&gt; \"object\"</span>\n</code></pre></div>\n<p>We can set properties on an <code>Array</code> just like a regular <code>Object</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">myArray</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">summary</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Empty array!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [summary: \"Empty array!\"]</span>\n</code></pre></div>\n<p>And we can modify and access those properties, too:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">summary</span><span class=\"dl\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">This array is totally empty.</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [summary: \"This array is totally empty.\"]</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">summary</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"This array is totally empty.\"</span>\n</code></pre></div>\n<p>In fact, <em>everything</em> we just learned how to do to <code>Object</code>s can also be done to\n<code>Array</code>s because <code>Array</code>s <strong>are</strong> <code>Object</code>s. Just special ones. To see the special\nstuff, let's <code>.push()</code> some values into our <code>Array</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">);</span>\n<span class=\"c1\">//=&gt; 4</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [2, 3, 5, 7, summary: \"This array is totally empty.\"]</span>\n</code></pre></div>\n<p>Cool, looks like everything's still in there. What's your guess about the\n<code>Array</code>'s <code>.length</code>?</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 4</span>\n</code></pre></div>\n<p>Huh, that's interesting. Surely our <code>summary</code> must be the first element in the\n<code>Array</code>, no? After all, we did add it before we <code>.push()</code>ed all those values in.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; 2</span>\n</code></pre></div>\n<p>Hm, then maybe it's the last element?</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; 7</span>\n</code></pre></div>\n<p>What the heck? Where is it?</p>\n\n<p>You see, one of the 'special' features of an <code>Array</code> is that <strong>its <code>Array</code>-style\nelements are stored separately from its <code>Object</code>-style properties</strong>. The\n<code>.length</code> property of an <code>Array</code> describes how many items exist in its special\nlist of elements. Its <code>Object</code>-style properties are not included in that\ncalculation.</p>\n\n<p>This brings up an interesting question: if we add a new property to an <code>Array</code>\nthat has a key of <code>0</code>, how does the JavaScript engine know whether it should be\nan <code>Object</code>-style property or an <code>Array</code>-style element?</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">myArray</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Will this be an `Object` property or an `Array` element?</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Will this be an `Object` property or an `Array` element?\"</span>\n\n<span class=\"c1\">// Moment of truth...</span>\n<span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 1</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [\"Will this be an `Object` property or an `Array` element?\"]</span>\n</code></pre></div>\n<p>So JavaScript used that assignment operation to add a new <code>Array</code>-style element.\nWhat happens if we enclose the integer in quotation marks, turning it into a\nstring?</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">0</span><span class=\"dl\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">What about this one?</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"What about this one?\"</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 1</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [\"What about this one?\"]</span>\n</code></pre></div>\n<p>This is hitting on a fundamental truth: <strong>all keys in <code>Object</code>s and all indexes\nin <code>Array</code>s are actually strings</strong>. In <code>myArray[0]</code> we're using the integer <code>0</code>,\nbut under the hood the JavaScript engine automatically converts that to the\nstring <code>\"0\"</code>. When we access elements or properties of an <code>Array</code>, the engine\nroutes all integers and integers masquerading as strings (e.g., <code>'14'</code>, <code>\"953\"</code>,\netc.) to the <code>Array</code>'s special list of elements, and it treats everything else\nas a simple <code>Object</code> property. For example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">myArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">];</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">1</span><span class=\"dl\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hi</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Hi\"</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [2, \"Hi\", 5, 7]</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">01</span><span class=\"dl\">\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Ho</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Ho\"</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; [2, \"Hi\", 5, 7, 01: \"Ho\"]</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"mi\">01</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"Hi\"</span>\n\n<span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">01</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"Ho\"</span>\n</code></pre></div>\n<p>After adding our weird <code>'01'</code> property, the <code>.length</code> property still returns\n<code>4</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; 4</span>\n</code></pre></div>\n<p>So it would stand to reason that <code>Object.keys()</code> would only return <code>'01'</code>,\nright?</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">myArray</span><span class=\"p\">);</span>\n<span class=\"c1\">//=&gt; [\"0\", \"1\", \"2\", \"3\", \"01\"]</span>\n</code></pre></div>\n<p>Unfortunately not. The reason why <code>Array</code>s have this behavior would take us deep\ninside the JavaScript source code, and it's frankly not that important. Just\nremember these simple guidelines, and you'll be just fine:</p>\n\n<ul>\n<li><strong>For accessing elements in an <code>Array</code>, always use integers</strong>.</li>\n<li><strong>Be wary of setting <code>Object</code>-style properties on an <code>Array</code></strong>. There's rarely\nany reason to, and it's usually more trouble than it's worth.</li>\n<li><strong>Remember that all <code>Object</code> keys, including <code>Array</code> indexes, are strings</strong>.\nThis will really come into play when we learn how to iterate over <code>Object</code>s,\nso keep it in the back of your mind.</li>\n</ul>\n\n<h2>Conclusion</h2>\n\n<p>In this and the previous lesson, we dug deep into <code>Object</code>s in JavaScript. We\nidentified what an <code>Object</code> is and how to access values stored in it. We also\ncovered how to add and remove properties and how to use some of JavaScript's\nconvenience methods (<code>Object.keys()</code>, <code>Object.values()</code>, and the spread\noperator). We also explored the relationship between <code>Object</code>s and <code>Array</code>s.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\">Object basics</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"><code>Object.assign()</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals\">Spread Syntax in Object Literals</a></li>\n</ul></li>\n</ul>",
			"exportId": "modifying-objects"
		},
		{
			"id": 432855,
			"title": "Objects Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Create an <code>Object</code>\n</li>\n<li>Perform operations on an <code>Object</code>\n</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We covered the concepts of <code>Object</code>s in JavaScript. Now it's time to put the\nconcepts into practice.</p>\n\n<p>If you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code.</p>\n\n<h2>Instructions</h2>\n\n<p>Follow the steps below, running <code>learn test</code> as you go to get additional\ninformation from the tests.</p>\n\n<p>Let's say we are working on a program that will keep track of a company's\nemployees. We want to store each <code>employee</code> as an <code>Object</code>. We're starting\nsmall, so to begin with we'll only keep track of the employee's name and street\naddress.</p>\n\n<p>To start, assign an <code>employee</code> variable to an <code>Object</code> containing\n<code>name</code> and <code>streetAddress</code> keys; you can use whatever values you like. Use\nliteral syntax to create your <code>Object</code>. Various updates will be applied to this\nvariable (destructively and non-destructively) in this lab.</p>\n\n<p>Once you've initialized the <code>employee</code> Object, you'll need to create the\nfollowing four functions:</p>\n\n<ul>\n<li>\n<code>updateEmployeeWithKeyAndValue()</code>: this function should take in three\narguments: an <code>employee</code> <code>Object</code>, a <code>key</code> and a <code>value</code>. This function should\nnot mutate the <code>employee</code>; it should return a <em>new</em> <code>Object</code> that has an\nupdated <code>value</code> for the <code>key</code> passed in. <strong>Hint</strong>: use the spread operator!</li>\n<li>\n<code>destructivelyUpdateEmployeeWithKeyAndValue()</code>: this function should work the\nsame as <code>updateEmployeeWithKeyAndValue()</code> but it <em>should</em> mutate the\n<code>employee</code> <code>Object</code> passed in.</li>\n<li>\n<code>deleteFromEmployeeByKey()</code>: this function should take in a <code>employee</code>\n<code>Object</code> and a <code>key</code>. It should delete the property with that <code>key</code> from the\n<code>employee</code> <code>Object</code>. This should not mutate the original <code>employee</code> <code>Object</code>;\nit should return a <em>new</em> <code>Object</code> that doesn't include the identified\nkey-value pair. <strong>Hint</strong>: use the spread operator!</li>\n<li>\n<code>destructivelyDeleteFromEmployeeByKey()</code>: this function should work the same\nas <code>deleteFromEmployeeByKey()</code> but it <em>should</em> mutate the <code>employee</code> <code>Object</code>.</li>\n</ul>\n\n<p>As you work on your functions, be sure to think about when to use dot notation\nvs. bracket notation.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lab, we practiced creating an <code>Object</code> and performing operations on it.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\">MDN: Object</a></li>\n</ul>",
			"exportId": "g58a311626ddca781a941c94fed8771d6"
		},
		{
			"id": 432857,
			"title": "Debugging in Node",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-debugging-in-node\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-debugging-in-node\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-debugging-in-node/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Use the Node.js debugger</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>While <code>console.log()</code> is a valuable debugging tool, it only gets us so far. When\nwe start running JavaScript code in the browser, we will have access to the\nbrowser's debugger. The debugger allows you to set <a href=\"https://en.wikipedia.org/wiki/Breakpoint\">breakpoints</a> in your code\nthat will stop the execution of the code at that point. You can then inspect the\nvalues of your variables at that point in your code.</p>\n\n<p>We will start running JavaScript in the browser a bit later in the course. In\nthe meantime, Node.js (which is the <em>runtime environment</em> that enables us to run\nour JavaScript outside the browser) includes a similar debugging tool. In this\nlesson, we will walk through how to use the <a href=\"https://nodejs.org/api/debugger.html\">Node.js debugger</a>.</p>\n\n<p>Fork and clone this lesson into your local environment. To do this, click\nthe GitHub \"octocat\" button at the top of the page to open the lesson's\nGitHub repo, then click \"Fork.\" Once you've cloned it down to your machine,\nnavigate into the lesson's directory in the terminal, then run <code>code .</code> to\nopen the files in Visual Studio Code.</p>\n\n<h2>The Node.js Debugger</h2>\n\n<p>Open <code>index.js</code> and take a look. You will see we have created a simple <code>while</code>\nloop that <code>console.log()</code>s a message. Run <code>node index.js</code> to see it in action.</p>\n\n<p>Using the debugger is a simple matter of adding the <code>debugger</code> keyword at the\npoint in our code where we want to place a breakpoint (i.e., where we want to\npause execution). Modify the code in <code>index.js</code> as follows:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">debugger</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`This loop has executed </span><span class=\"p\">${</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"s2\"> time.`</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`This loop has executed </span><span class=\"p\">${</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"s2\"> times.`</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>To start the debugger, run <code>node inspect index.js</code>. You should see this in your\nterminal:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/enter-debugger.png\" alt=\"enter debugger\"></p>\n\n<p>Next, enter <code>cont</code> at the <code>debug</code> prompt to start executing the code. You will\nsee a <code>&gt;</code> pointing to line 3, indicating that the execution of the code has been\nstopped at that point:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/start-execution.png\" alt=\"start execution\"></p>\n\n<p>Now say we want to check the value of our <code>count</code> variable. To do that, we need\nto enter the debugger's REPL by running <code>repl</code>. You will now have a <code>&gt;</code> prompt\nin place of the <code>debug&gt;</code> prompt. Type in <code>count</code> to see the current value of the\nvariable:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/enter-repl.png\" alt=\"enter repl\"></p>\n\n<p>Then to continue executing the code, we first need to exit the REPL by typing\n<code>Ctrl-c</code>, then run <code>cont</code> at the <code>debug</code> prompt:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/second-loop.png\" alt=\"second loop\"></p>\n\n<p>Note that our logged message shows at the top of the screenshot above. When we\nran <code>cont</code>, the execution of the code resumed so the <code>console.log()</code> was run,\nthe <code>count</code> variable was incremented, and the execution continued to the next\nloop. If you enter the REPL and check the value of <code>count</code>, you will see that\nit's now equal to <code>2</code>.</p>\n\n<p>But what if we wanted to check the value  of <code>count</code> both before <em>and</em> after the\nincrementation? We can simply add a second breakpoint:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">debugger</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`This loop has executed </span><span class=\"p\">${</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"s2\"> time.`</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`This loop has executed </span><span class=\"p\">${</span><span class=\"nx\">count</span><span class=\"p\">}</span><span class=\"s2\"> times.`</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">debugger</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In order for the debugger to recognize the change to our code, we'll need to\nexit and restart it. If you're in the REPL, type <code>ctrl-c</code> to exit that, then\ntype <code>.exit</code> at the <code>debug</code> prompt or <code>ctrl-c</code> twice to exit the debugger.\nFinally, run <code>node inspect index.js</code> to relaunch the debugger.</p>\n\n<p>Now if you run <code>cont</code>, the code will begin executing and will pause at the\nfirst breakpoint. To continue executing the code and advance to the second\nbreakpoint, simply enter <code>cont</code> again. At any point, you can enter the\ndebugger's REPL to check the value of <code>count</code>, then exit the REPL and continue\nexecution of the code.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson we've learned about using the debugger built in to Node.js. To\nreview, the process is as follows:</p>\n\n<ul>\n<li>Place one or more breakpoints in your code using the <code>debugger</code> keyword</li>\n<li>Run <code>node inspect &lt;filename&gt;</code> in the terminal to launch the debugger</li>\n<li>Run <code>cont</code> at the <code>debug</code> prompt to start execution of the code and advance to\nthe first breakpoint</li>\n<li>Run <code>repl</code> at the <code>debug</code> prompt to enter the debugger's REPL</li>\n<li>Check the value of any variables by entering the variable name at the <code>&gt;</code> prompt</li>\n<li>Exit the REPL using <code>ctrl-c</code></li>\n<li>Continue stepping through the code using <code>cont</code></li>\n<li>Run <code>.exit</code> or type <code>ctrl-c</code> twice to exit the debugger</li>\n</ul>\n\n<p>Debugging tools will get more and more useful to you as you progress through the\ncurriculum and your programs get more complex. The time you spend now getting\ncomfortable with debugging will pay off in the long run.</p>\n\n<p>We will get more practice using the debugger in an upcoming lesson.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://www.w3schools.com/js/js_debugging.asp\">W3schools - JavaScript Debugging</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/difference-between-node-js-and-javascript/\">Difference between Node.js and Javascript</a></li>\n</ul>",
			"exportId": "debugging-in-node"
		},
		{
			"id": 432858,
			"title": "Errors and Stack Traces",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-errors-and-stack-traces\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-errors-and-stack-traces\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-errors-and-stack-traces/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Recognize common JavaScript errors.</li>\n<li>Read a stack trace to discern where an error originated.</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>No one writes perfect code the first time. Or the second time. Or the third time.</p>\n\n<p>We all make mistakes. One of the biggest advantages an experienced programmer\nhas is knowing how to quickly troubleshoot and fix errors they encounter. You\n<strong>will</strong> reach this point —&nbsp;it's just a matter of practice. To get\nstarted, let's look at some of the common types of error messages you'll\nencounter when writing JavaScript code.</p>\n\n<h2><code>Uncaught ReferenceError: _____ is not defined</code></h2>\n\n<p>This is one of the simplest and most common errors, and it's pretty explicitly\ntelling us what went wrong. We tried to reference a variable or function that\ndoesn't exist in the current scope. For example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">myVar</span><span class=\"p\">;</span>\n<span class=\"c1\">// ERROR: Uncaught ReferenceError: myVar is not defined</span>\n</code></pre></div>\n<p>It can also arise if you forget to put quotation marks around a string:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">Hello</span><span class=\"p\">,</span> <span class=\"nx\">world</span><span class=\"p\">;</span>\n<span class=\"c1\">// ERROR: Uncaught ReferenceError: Hello is not defined</span>\n</code></pre></div>\n<p>If you meant to declare the variable in the current scope and simply forgot,\ndeclaring the variable should solve the issue:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">myVar</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Hello, world!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">myVar</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; \"Hello, world!\"</span>\n</code></pre></div>\n<h2><code>Uncaught TypeError: _____ is not a function</code></h2>\n\n<p>This one usually indicates that you tried to invoke something that isn't\nactually a function. For example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">myVar</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Hello, world!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">myVar</span><span class=\"p\">();</span>\n<span class=\"c1\">// ERROR: Uncaught TypeError: myVar is not a function</span>\n</code></pre></div>\n<p>A common variant of this error that you'll run into later in the course is\n<code>Uncaught TypeError: undefined is not a function</code>. The JavaScript engine is\ntelling us that we tried to invoke <code>undefined</code>, which is obviously not\ninvocable. This happens when we've tried to store a function in a variable but\nthe variable is undefined for some reason.</p>\n\n<blockquote>\n<p><strong>Aside:</strong> Wait? We can store functions in variables? Yes we can! In\nJavaScript, functions are objects, which means we can do anything with them\nthat we can do with any other object: assign it properties, store it in a\nvariable, pass it as an argument, etc.</p>\n</blockquote>\n\n<h2><code>Uncaught SyntaxError: missing ) after argument list</code></h2>\n\n<p>When you see this error, it means you tried to invoke a function but forgot the\nclosing parenthesis:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Hello,</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">world!</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"c1\">// ERROR: Uncaught SyntaxError: missing ) after argument list</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">myAdder</span> <span class=\"p\">(</span><span class=\"nx\">num1</span><span class=\"p\">,</span> <span class=\"nx\">num2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">num1</span> <span class=\"o\">+</span> <span class=\"nx\">num2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">myAdder</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"c1\">// ERROR: Uncaught SyntaxError: missing ) after argument list</span>\n</code></pre></div>\n<h2><code>Uncaught TypeError: Assignment to constant variable.</code></h2>\n\n<p>You're probably familiar with this one by now —&nbsp;it means we accidentally\ntried to assign a new value to a variable declared with the <code>const</code> keyword,\nwhich prevents reassignment. However, sometimes you rightfully feel that you\ndidn't try to reassign anything, and it boils down to a small typo:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">snackSelection</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Pretzels</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">snackSelection</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Pretzels</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">That'll be $1, please!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// ERROR: Uncaught TypeError: Assignment to constant variable.</span>\n</code></pre></div>\n<p>In this case, we accidentally used the <em>assignment operator</em>, a single <code>=</code> sign,\ninstead of a comparison operator, such as the <em>strict equality operator</em>\n(<code>===</code>).</p>\n\n<p>This is just a selection of some of the many types of errors you might encounter\nwhile writing JavaScript code. The main point is to use the information you're\ngiven. The JavaScript engine isn't trying to trick you —&nbsp;on the contrary,\nit's trying to <strong>help</strong> you debug.</p>\n\n<h2>Stack traces</h2>\n\n<p>One of the really neat pieces of information provided with the error messages is\nwhat's called a <em>stack trace</em>. Let's take a look at an example. Fork and clone\nthis lesson into your local environment. Navigate into its directory in the\nterminal, then run <code>code .</code> to open the files in Visual Studio Code. Finally,\nexecute the code in <code>errors.js</code> by running <code>node errors.js</code>. You should see\nsomething like this:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/type-error.png\" alt=\"assignment to constant variable\"></p>\n\n<p>Whoa — there's a lot going on there! Let's break it down a bit.</p>\n\n<p>Near the top, you'll see JavaScript showing us the exact piece of code that's\nthrowing the error. It's even pointing to the exact character it thinks is the\nproblem! (Warning: JavaScript isn't always right.) Below that is the error\nitself: <code>TypeError: Assignment to constant variable.</code>. Hopefully you recognize\nwhat's causing the error and how to fix it.</p>\n\n<p>Under the identification of the error is the stack trace. For this example, most\nof the information we're seeing in the stack trace is related to what's going on\nunder the hood in Node.js and, therefore, isn't especially helpful for debugging\n(we'll look at a more helpful example shortly). But let's look at a couple of\nthings before we move on.</p>\n\n<p>First, you'll see <code>at Object.&lt;anonymous&gt;</code> followed by the file path for the\n<code>errors.js</code> file. The <code>at Object.&lt;anonymous&gt;</code> is under-the-hood info: basically,\nit means that an object is being created by Node when our code runs and that\nobject is not assigned a name. But the file path does contain some helpful\ninformation. Notice that it ends with <code>errors.js:5:20</code>. Those numbers at the end\nare telling us that JavaScript thinks the error is on line 5 of our file, at\ncharacter 20.</p>\n\n<p>Let's go ahead and fix our error and run <code>node errors.js</code> again. Now you should\nsee something like this:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/reference-error.png\" alt=\"third is not defined\"></p>\n\n<p>Looks like we're making some progress! First you'll see the message that was\nlogged by the <code>if</code> statement, so we know it's now working. This is followed by\nthe information about the current error: the code that's throwing the error and\nthe error itself. The next three lines give us the stack trace. Note that it's\nidentifying three lines of code: <code>17</code>, <code>13</code>, and <code>20</code>. Let's take a look at\nthose lines:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">first</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">second</span><span class=\"p\">();</span> <span class=\"c1\">// Line 13</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">second</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">third</span><span class=\"p\">();</span> <span class=\"c1\">// Line 17</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">first</span><span class=\"p\">();</span> <span class=\"c1\">// Line 20</span>\n</code></pre></div>\n<p>Now that we're dealing with a series of function invocations, we can really see\nthe power of the stack trace: it traces the error up through the stack of\nfunction calls that led to it. Let's read it backwards and reconstruct the\nevents that led to the error:</p>\n\n<ol>\n<li>The JavaScript engine reaches line <code>20</code> and invokes <code>first()</code>.</li>\n<li>Inside <code>first()</code>: the engine reaches line <code>13</code> and invokes <code>second()</code>.</li>\n<li>Inside <code>second()</code>: the engine reaches line <code>17</code> and sees the identifier <code>third</code>.</li>\n<li>The engine can't find a declared variable or function with that name so it\nthrows an error inside <code>second()</code>.</li>\n</ol>\n\n<p>To fix the <code>third is not defined</code> error, let's first try declaring <code>third</code> as\nthe simplest thing we know, a variable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">first</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">second</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">second</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">third</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">third</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">Declaring a new variable.</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">first</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>Remember what we learned earlier in the section on common JavaScript errors. If\nour understanding is correct, this should fix the <code>third is not defined</code> error\nand, in its place, throw a new error. Can you guess what the new error will be?</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/type-error-2.png\" alt=\"third is not a function\"></p>\n\n<p>Did you correctly deduce what the new error would be?</p>\n\n<p>The new error is telling us that <code>third is not a function</code>. It may have been\npretty easy to figure out that our initial solution would just result in another\nerror, but intentionally breaking your code and seeing whether it breaks in the\nexact way you predicted is a great technique for improving your debugging and\ngeneral JavaScript skills. The more you understand the errors and their causes,\nthe easier debugging will become.</p>\n\n<p>We'll fix this by declaring <code>third()</code> as a function instead of a simple\nvariable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">first</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">second</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">second</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">third</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">third</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Now I'm a function!</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">first</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>When we save the file and run the code again, all of the errors should be gone\nand we should see our two messages logged to the terminal.</p>\n\n<h2>Conclusion</h2>\n\n<p>Arguably the biggest difference between being a novice and an expert developer\nis how comfortable you feel with reading and debugging error messages.\nJavaScript —&nbsp;and, indeed, every programming language —&nbsp;is designed\n<strong>by</strong> programmers <strong>for</strong> programmers. The language doesn't intentionally make\nthings more difficult for you. On the contrary, every time you write code that\nresults in some sort of error, JavaScript goes out of its way to provide you\nwith the information you need to find and fix the error. When you see one of\nthose error messages pop up, don't freak out! It's the JavaScript engine\nstarting a friendly dialog with you: \"Hey, I tried to do what you asked of me,\nbut I ran into a problem. Here's where the problem occurred, and here's what\nhappened.\"</p>\n\n<p>As you become more comfortable diagnosing and solving error messages, you'll\nbecome a faster, better programmer, and writing JavaScript code will become more\nand more enjoyable!</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors\">MDN —&nbsp;Errors</a>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined\"><code>Uncaught ReferenceError: _____ is not defined</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function\"><code>Uncaught TypeError: _____ is not a function</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\"><code>Uncaught SyntaxError: missing ) after argument list</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\"><code>Uncaught TypeError: Assignment to constant variable.</code></a></li>\n</ul></li>\n</ul>",
			"exportId": "errors-and-stack-traces"
		},
		{
			"id": 432859,
			"title": "Looping Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-looping-code-along\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Build a <code>for</code> loop.</li>\n<li>Build a <code>while</code> loop.</li>\n<li>Explain the purpose of a loop.</li>\n<li>Understand when to use each type of loop.</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In an earlier lesson, we learned about <em>repetition statements</em> —\nstatements that allow us to break out of the default sequence and repeat a\nsection of code multiple times. We also learned about two of JavaScript's\nrepetition constructs: the <em>while</em> loop and the <em>do...while</em> loop. In this lesson\nwe will learn about a third: the <em>for</em> loop.</p>\n\n<p>Let's say we have a bunch of gifts to wrap. They all happen to be the same size\nand shape, so for every gift, we need to cut a similarly sized piece of wrapping\npaper, fold it up over the edges of the gift, tape it together, and add a nice\nlittle card. Then we set the wrapped gift aside and move on to the next gift.</p>\n\n<p>In programming terms, we can think of our <strong>collection</strong> of gifts as an\n<strong><code>Array</code></strong> and the act of wrapping them as a function. For example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">gifts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">teddy bear</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">drone</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">doll</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">wrapGift</span><span class=\"p\">(</span><span class=\"nx\">gift</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Wrapped </span><span class=\"p\">${</span><span class=\"nx\">gift</span><span class=\"p\">}</span><span class=\"s2\"> and added a bow!`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We could then call <code>wrapGift()</code> on each gift individually:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">wrapGift</span><span class=\"p\">(</span><span class=\"nx\">gifts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n<span class=\"nx\">wrapGift</span><span class=\"p\">(</span><span class=\"nx\">gifts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>\n<span class=\"nx\">wrapGift</span><span class=\"p\">(</span><span class=\"nx\">gifts</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span>\n</code></pre></div>\n<p>However, this isn't very efficient or extensible. It's a lot of repetitive code\nto write out, and if we had more gifts we'd have to write a whole new line for\neach.</p>\n\n<p>This is where loops come in handy! With a loop, we can just write the repeated\naction <strong>once</strong> and perform the action on <strong>every item in the collection</strong>.</p>\n\n<p>This is a code-along, so follow along with the instructions in each section.\nThere are tests to make sure you're coding your solutions correctly. If you\nhaven't already, fork and clone this lab into your local environment. Navigate\ninto its directory in the terminal, then run <code>code .</code> to open the files in\nVisual Studio Code.</p>\n\n<h2>The <code>for</code> loop</h2>\n\n<p>Of the loops in JavaScript, the <code>for</code> loop is the most common. The <code>for</code> loop is\nmade up of four statements in the following structure:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">for</span> <span class=\"p\">([</span><span class=\"nx\">initialization</span><span class=\"p\">];</span> <span class=\"p\">[</span><span class=\"nx\">condition</span><span class=\"p\">];</span> <span class=\"p\">[</span><span class=\"nx\">iteration</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"nx\">loop</span> <span class=\"nx\">body</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>Initialization\n\n<ul>\n<li>Typically used to initialize a <strong>counter</strong> variable.</li>\n</ul>\n</li>\n<li>Condition\n\n<ul>\n<li>An expression evaluated before each pass through the loop. If this expression\nevaluates to <code>true</code>, the statements in the loop body are executed. If the\nexpression evaluates to <code>false</code>, the loop exits.</li>\n</ul>\n</li>\n<li>Iteration\n\n<ul>\n<li>An expression executed at the end of each iteration. Typically, this will involve\nincrementing or decrementing a counter, bringing the loop ever closer to\ncompletion.</li>\n</ul>\n</li>\n<li>Loop body\n\n<ul>\n<li>Code that runs on each pass through the loop.</li>\n</ul>\n</li>\n</ul>\n\n<p><strong><em>Usage</em></strong>: Use a <code>for</code> loop when you know how many times you want the loop to\nrun (for example, when you're looping through elements in an array).</p>\n\n<h3>Examples</h3>\n\n<p>Let's take a look at an example and get some practice using the Node debugger.\nEnter the code below into the <code>index.js</code> file.</p>\n\n<blockquote>\n<p><strong>Note:</strong> You can, of course, copy/paste the code rather than typing it in\nyourself, but we recommend typing it in for now. The act of typing code\ndevelops muscle memory and helps your brain understand and internalize the\nsyntax.</p>\n</blockquote>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">;</span> <span class=\"nx\">age</span> <span class=\"o\">&lt;</span> <span class=\"mi\">40</span><span class=\"p\">;</span> <span class=\"nx\">age</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`I'm </span><span class=\"p\">${</span><span class=\"nx\">age</span><span class=\"p\">}</span><span class=\"s2\"> years old. Happy birthday to me!`</span><span class=\"p\">);</span>\n  <span class=\"k\">debugger</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In the above code, <code>let age = 30</code> is the <strong>initialization</strong>: we're creating a\nvariable, <code>age</code>, that we'll use in the next three phases of the loop. Notice\nthat we use <code>let</code> instead of <code>const</code> because we need to increment the value of\n<code>age</code>.</p>\n\n<p>The <strong>condition</strong> for the above loop is <code>age &lt; 40</code>, or, in other words, \"Run the\ncode in the loop body until <code>age</code> is NOT less than <code>40</code>.\" As long as the\ncondition evaluates to <code>true</code>, the code in the loop body is executed, the value\nof <code>age</code> is incremented, and the condition is reevaluated. As soon as the\ncondition evaluates to <code>false</code>, the loop ends.</p>\n\n<p>The <strong>iteration</strong> is <code>age++</code>, which increments the value of <code>age</code> by <code>1</code> after\nevery pass through the loop. We initialized <code>age</code> as <code>30</code>, and it retains that\nvalue during the first pass through the loop. At the end of the first pass, we\nincrement <code>age</code> to <code>31</code>, check whether the condition still holds <code>true</code>, and,\nsince it does, run the loop body again with <code>age</code> as <code>31</code>. After that second\nloop, we increment <code>age</code> to <code>32</code>, and so on.</p>\n\n<p>The <strong>loop body</strong> is the set of statements that we want to run when the\ncondition evaluates to <code>true</code>.</p>\n\n<p>Let's take a look at what's happening in our loop using debugger. Run\n<code>node inspect index.js</code> in the terminal to start the debugger. You should see\nthe following:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_1.png\" alt=\"Debugger Output 1\"></p>\n\n<p>Now run <code>cont</code> at the <code>debug</code> prompt to start executing the loop and advance to\nthe breakpoint. It should look like this:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_2.png\" alt=\"Debugger Output 2\"></p>\n\n<p>Note, in the first line, that the message has been logged and that <code>age</code> is\nequal to 30. To verify that, enter <code>repl</code> at the <code>debug</code> prompt to open the\nREPL, then enter <code>age</code>. You should see <code>30</code> output. Now type <code>Ctrl-C</code> to exit\nthe repl, and enter <code>cont</code> at the <code>debug</code> prompt to advance to the next\niteration of the loop. You should see the following:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_3.png\" alt=\"Debugger Output 3\"></p>\n\n<p>Note that the logged output now shows that age is 31. You can continue to step\nthrough the iterations by running <code>cont</code> at the <code>debug</code> prompt. At any point you\ncan verify the value of <code>age</code> by entering the REPL and typing <code>age</code> at the\nprompt, then exit the REPL to continue stepping through. When you're done, enter\n<code>.exit</code> or <code>Ctrl-C</code> twice to exit the debugger.</p>\n\n<p>Now let's remove <code>debugger;</code> from our code and execute it by running\n<code>node index.js</code>. You should see the following:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/happy-birthday-to-me.png\" alt=\"Happy Birthday logged\"></p>\n\n<h3>Using <code>for</code> with Arrays</h3>\n\n<p>The <code>for</code> loop is often used to iterate over every element in an array. Let's\nrewrite our gift-wrapping action above as a <code>for</code> loop. Enter the following code\ninto <code>index.js</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">gifts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">teddy bear</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">drone</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">doll</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">wrapGifts</span><span class=\"p\">(</span><span class=\"nx\">gifts</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">gifts</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Wrapped </span><span class=\"p\">${</span><span class=\"nx\">gifts</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]}</span><span class=\"s2\"> and added a bow!`</span><span class=\"p\">);</span>\n    <span class=\"k\">debugger</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">gifts</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">wrapGifts</span><span class=\"p\">(</span><span class=\"nx\">gifts</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>We started our counter, <code>i</code>, at <code>0</code> because arrays have zero-based indexes. Our\ncondition states that we should run the code in the loop body while <code>i</code> is less\nthan <code>gifts.length</code> (<code>3</code> in the above example). Our iteration, <code>i++</code>, increments\nour counter by <code>1</code> at the end of each pass through the loop.</p>\n\n<p>Run <code>node inspect index.js</code> in the terminal to enter the debugger, and <code>cont</code> at\nthe <code>debug</code> prompt to advance to the breakpoint. You should see\n<code>Wrapped teddy bear and added a bow!</code> logged. In our loop body, we reference\n<code>gifts[i]</code>. Since <code>i</code> starts out as <code>0</code>, during the first pass through the loop\n<code>gifts[i]</code> is <code>gifts[0]</code>, which is <code>'teddy bear'</code>. Continue stepping through the\nloop by entering <code>cont</code> at the<code>debug</code> prompt and remember you can enter the REPL\nat any point to check the values of our variables, <code>i</code> and <code>gifts[i]</code>.</p>\n\n<p>When you're done, remove the <code>debugger</code> and execute the code by running\n<code>node index.js</code>. You should see the following logged to the terminal:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Wrapped teddy bear and added a bow!\nWrapped drone and added a bow!\nWrapped doll and added a bow!\n</code></pre></div>\n<h3>Assignment</h3>\n\n<p>In the previous section, the <code>wrapGifts()</code> function allowed us to take any array\nof gifts and loop over them, logging our own message. Let's practice that with a\nslightly different idea. To complement our gift wrapping function, your task is\nto create a thank you card creator.</p>\n\n<blockquote>\n<p><strong>Note</strong>: Recall the difference between logging and returning values from a\nfunction. When we log information we are simply outputting text to a terminal\nor console. When we return data from a function we will be able to reference\nand use that information elsewhere because the data is being passed out of the\nfunction.</p>\n</blockquote>\n\n<p>In <code>index.js</code>, build a function named <code>writeCards()</code> that accepts two arguments:\nan array of string names, and an event name. Create a <code>for</code> loop with a counter\nthat starts at <code>0</code> and increments at the end of each loop. The <code>for</code> loop should\nstop once it has iterated over the length of the array.</p>\n\n<p>As with our previous <code>wrapGifts()</code> function, you will create a custom message\nfor each name inside the loop. Unlike that example, however, instead of simply\nlogging the messages to the console, you will collect them in a <em>new</em> array and\n<strong>return</strong> this array at the end of the function. (Refer back to the Array\nMethods lesson if you need a refresher on how we can add an element to an\narray.) The overall process should be:</p>\n\n<ol>\n<li>create a new, empty array to hold the messages;</li>\n<li>iterate through the input array and, inside the loop, build out the 'thank\nyou' message for each name using string interpolation, then add that message\nto the new array you created;</li>\n<li>after the loop finishes and all of the messages have been added to the new\narray, return the new array.</li>\n</ol>\n\n<p>Here is an example of what a call to the <code>writeCards()</code> function might look like:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">writeCards</span><span class=\"p\">([</span><span class=\"dl\">\"</span><span class=\"s2\">Charlie</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Samip</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Ali</span><span class=\"dl\">\"</span><span class=\"p\">],</span> <span class=\"dl\">\"</span><span class=\"s2\">birthday</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>If we were to call the function using this function call, it should produce the\nfollowing array as the return value:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Thank you, Charlie, for the wonderful birthday gift!</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Thank you, Samip, for the wonderful birthday gift!</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Thank you, Ali, for the wonderful birthday gift!</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">];</span>\n</code></pre></div>\n<blockquote>\n<p><strong>Top Tip</strong>: The debugger isn't just for debugging code — you can also use it\nto help you write your function! Try building the structure of the loop,\nputting the <code>debugger</code> inside the loop body. Even before you start writing the\ncode, you can enter the debugger's REPL and try out code until you figure out\nhow to create the message and add it to an array. Once it's working in the\nREPL, transfer the code to <code>index.js</code>, exit the debugger, and run the tests.</p>\n</blockquote>\n\n<h2>The <code>while</code> loop</h2>\n\n<p>Recall from the earlier lesson that the <code>while</code> loop is similar to a <code>for</code> loop,\nrepeating an action in a loop based on a condition. Both will continue to loop\nuntil that condition evaluates to <code>false</code>. Unlike <code>for</code>, <code>while</code> only requires\ncondition and loop statements:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">while</span> <span class=\"p\">([</span><span class=\"nx\">condition</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"nx\">loop</span> <span class=\"nx\">body</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The initialization and iteration statements of the <code>for</code> loop have not\ndisappeared, though. In fact, we could rewrite our original <code>for</code> loop gift\nwrapping example using a <code>while</code> loop and achieve the exact same result:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">gifts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">teddy bear</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">drone</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">doll</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">wrapGifts</span><span class=\"p\">(</span><span class=\"nx\">gifts</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// the initialization moves OUTSIDE the body of the loop!</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">gifts</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`Wrapped </span><span class=\"p\">${</span><span class=\"nx\">gifts</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]}</span><span class=\"s2\"> and added a bow!`</span><span class=\"p\">);</span>\n    <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// the iteration moves INSIDE the body of the loop!</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">gifts</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">wrapGifts</span><span class=\"p\">(</span><span class=\"nx\">gifts</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: Wrapped teddy bear and added a bow!</span>\n<span class=\"c1\">// LOG: Wrapped drone and added a bow!</span>\n<span class=\"c1\">// LOG: Wrapped doll and added a bow!</span>\n<span class=\"c1\">// =&gt; [\"teddy bear\", \"drone\", \"doll\"]</span>\n</code></pre></div>\n<p>Notice that we've just moved the initialization and iteration statements —\ndeclaring the <code>i</code> variable <em>outside</em> the loop, and incrementing it <em>inside</em> the\nloop.</p>\n\n<blockquote>\n<p><strong>CAUTION</strong>: When using <code>while</code> loops, it is easy to forget to involve iteration. Leaving iteration out can result in a condition that <em>always</em> evaluates to <code>true</code>, causing an infinite loop!</p>\n</blockquote>\n\n<p>Using a <code>while</code> loop enables us to check conditions that aren't based on a\ncounter. Take a look at the following <em><a href=\"https://en.wikipedia.org/wiki/Pseudocode\">pseudocode</a></em> for an example of how\nwe could use <code>while</code> in a program for planting a garden:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">plantGarden</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">keepWorking</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">keepWorking</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">chooseSeedLocation</span><span class=\"p\">();</span>\n    <span class=\"nx\">plantSeed</span><span class=\"p\">();</span>\n    <span class=\"nx\">waterSeed</span><span class=\"p\">();</span>\n    <span class=\"nx\">keepWorking</span> <span class=\"o\">=</span> <span class=\"nx\">checkForMoreSeeds</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We can imagine that <em>while</em> we have seeds, we take the same steps over and over:\nchoose a location for a seed; plant it; water it. Then, check if there are more\nseeds. If <em>not</em>, do not keep working.</p>\n\n<h2>When to Use <code>for</code> and <code>while</code>\n</h2>\n\n<p>JavaScript, like many programming languages, provides a variety of looping\noptions. Loops like <code>for</code> and <code>while</code> are actually just slight variations of the\nsame process. By providing a variety, we as programmers have a larger vocabulary\nto work with.</p>\n\n<p>Often, you will see <code>while</code> loops simply being used as an alternative to <code>for</code>\nloops:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">countup</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">countup</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">countup</span><span class=\"o\">++</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This is perfectly fine as an alternative way to describe:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">countup</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">countup</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"nx\">countup</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">countup</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If you're feeling a bit lost about when to use a <code>for</code> vs. a <code>while</code> loop, take\na deep breath. Most of the time, a regular <code>for</code> loop will suffice. It's by far\nthe most common looping construct in JavaScript. A general heuristic for\nchoosing which loop to use is to first try a <code>for</code> loop. If that doesn't serve\nyour purposes, then go ahead and try a <code>while</code> loop. Also, remember that you can\nalways refer to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\">documentation on these loops</a> at any\ntime.</p>\n\n<p>Just don't forget: with <code>while</code>, make sure you are updating the condition\non each loop so that the loop eventually terminates!</p>\n\n<h2>Assignment</h2>\n\n<p>To get more acquainted with <code>while</code>, your task is to write a function,\n<code>countDown</code>, that takes in any positive integer and, starting from that number,\ncounts down to zero using <code>console.log()</code>. Note that this means that running\n<code>countDown(10);</code> would actually log <em>11</em> times:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n</code></pre></div>\n<p>Remember the workflow:</p>\n\n<ol>\n<li>Run the tests using <code>learn test</code>.</li>\n<li>Read the errors; vocalize what they're asking you to do.</li>\n<li>Write code; repeat steps 1 and 2 often until a test passes.</li>\n<li>Repeat as needed for the remaining tests.</li>\n</ol>\n\n<h2>Conclusion</h2>\n\n<p>After some time programming in JavaScript, writing a <code>for</code> loop will come as\nnaturally to you as wrapping one gift after another. Just as you slowly become\ncomfortable using different words and vocabulary to better express yourself,\nyou will become more acquainted with concepts like <code>for</code> and <code>while</code> until you\nare able to discern the nuanced differences in usage between them.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>Codecademy\n\n<ul>\n<li><a href=\"http://www.codecademy.com/glossary/javascript/loops#for-loops\"><code>for</code> loop</a></li>\n<li><a href=\"http://www.codecademy.com/glossary/javascript/loops#while-loops\"><code>while</code> loop</a></li>\n</ul>\n</li>\n<li>MDN\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"><code>for</code> loop</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"><code>while</code> loop</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\">Loops and iteration</a></li>\n</ul>\n</li>\n</ul>",
			"exportId": "g6aa1b1f9d818dcb9f45ac800e2cbbe6d"
		},
		{
			"id": 432861,
			"title": "Object Iteration",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-object-iteration\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Explain the difference between looping and iteration.</li>\n<li>Iterate over arrays with the <code>for...of</code> statement.</li>\n<li>Enumerate an object's properties with the <code>for...in</code> statement.</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>When we create a <code>for</code> loop to loop over an array, we base the loop's condition\noff of the <code>.length</code> of the array. This works, but it's a lot of syntactic cruft\nto remember:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">array</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Loop body</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The problem is that we're using a <em>looping</em> construct to perform <em>iteration</em>.</p>\n\n<h2>Looping vs. Iteration</h2>\n\n<p>There's a pretty fine line separating the concepts of <em>looping</em> and <em>iteration</em>,\nand only the truly pedantic will call you out if you use one in place of the\nother.</p>\n\n<p>Looping is the process of executing a set of statements <strong>repeatedly until a\ncondition is met</strong>. It's great for when we want to do something a specific\nnumber of times (<code>for</code> loop) or unlimited times until the condition is met\n(<code>while</code> or <code>do while</code> loop).</p>\n\n<p>Iteration is the process of executing a set of statements <strong>once for each\nelement in a collection</strong>. We can accomplish this with a <code>for</code> loop:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">myArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">e</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">f</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">g</span><span class=\"dl\">'</span><span class=\"p\">];</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>or with a <code>while</code> loop:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">myArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">e</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">f</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">g</span><span class=\"dl\">'</span><span class=\"p\">];</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">j</span> <span class=\"o\">&lt;</span> <span class=\"nx\">myArray</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">myArray</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"o\">++</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>but neither is very pretty. The <code>for...of</code> statement gives us a better way.</p>\n\n<h2><code>for...of</code></h2>\n\n<p>Using <code>for...of</code>, the code above becomes:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">myArray</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">b</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">c</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">d</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">e</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">f</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">g</span><span class=\"dl\">'</span><span class=\"p\">];</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">element</span> <span class=\"k\">of</span> <span class=\"nx\">myArray</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Using a construct that is specifically meant for iteration results in much\ncleaner code: there's&nbsp;no initialization of a counter, no condition, no\nincrementing the counter, and no bracket notation to access elements in the\narray (<code>myArray[i]</code>).</p>\n\n<h3><code>const</code> vs. <code>let</code></h3>\n\n<p>As you might've noticed, <code>for...of</code> allows us to use <code>const</code> instead of <code>let</code>.\nIn <code>for</code> and <code>while</code> statements, <code>let</code> is required because we are incrementing a\ncounter variable. The incrementing process involves taking the counter's current\nvalue, adding <code>1</code> to it, and then assigning that new value to the variable. That\nreassignment precludes us from using our beloved <code>const</code>, which cannot be\nreassigned.</p>\n\n<p>Delightfully, the <code>for...of</code> statement involves no such reassignment. On each\ntrip into the loop body (which is a <em>block</em> — note the curly braces), we assign\nthe next element in the collection to a <strong>new</strong> <code>element</code> variable. Upon\nreaching the end of the block, the block-scoped variable vanishes, and we return\nto the top. Then we repeat the process, assigning the next element in the\ncollection to a <strong>new</strong> <code>element</code> variable.</p>\n\n<h3>Iterating over... strings?</h3>\n\n<p>A string is effectively an ordered collection (like an array) of characters,\nwhich <code>for...of</code> is more than happy to iterate over:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">char</span> <span class=\"k\">of</span> <span class=\"dl\">'</span><span class=\"s1\">Hello, world!</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">char</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// LOG: H</span>\n<span class=\"c1\">// LOG: e</span>\n<span class=\"c1\">// LOG: l</span>\n<span class=\"c1\">// LOG: l</span>\n<span class=\"c1\">// LOG: o</span>\n<span class=\"c1\">// LOG: ,</span>\n<span class=\"c1\">// LOG:</span>\n<span class=\"c1\">// LOG: w</span>\n<span class=\"c1\">// LOG: o</span>\n<span class=\"c1\">// LOG: r</span>\n<span class=\"c1\">// LOG: l</span>\n<span class=\"c1\">// LOG: d</span>\n<span class=\"c1\">// LOG: !</span>\n</code></pre></div>\n<h3>Usage</h3>\n\n<p>Use a <code>for...of</code> statement anytime you want to iterate over an array.</p>\n\n<h2>Iterating over objects</h2>\n\n<p>The <code>for...in</code> statement is similar to <code>for...of</code>; it's generally used for\niterating over the properties in an object. The statement follows this syntax:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">KEY</span><span class=\"p\">]</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"nx\">OBJECT</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Code in the statement body</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The <code>for...in</code> statement iterates over the properties in an object, but it\ndoesn't pass the entire property into the block. Instead, it only passes in the\n<em>keys</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">street1</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">11 Broadway</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">street2</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">2nd Floor</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">city</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">New York</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">state</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">NY</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">zipCode</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">10004</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">address</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// LOG: street1</span>\n<span class=\"c1\">// LOG: street2</span>\n<span class=\"c1\">// LOG: city</span>\n<span class=\"c1\">// LOG: state</span>\n<span class=\"c1\">// LOG: zipCode</span>\n</code></pre></div>\n<p>Accessing the object's values is as simple as combining the passed-in key with\nthe <em>bracket operator</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">street1</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">11 Broadway</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">street2</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">2nd Floor</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">city</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">New York</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">state</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">NY</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">zipCode</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">10004</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">address</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">address</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// LOG: 11 Broadway</span>\n<span class=\"c1\">// LOG: 2nd Floor</span>\n<span class=\"c1\">// LOG: New York</span>\n<span class=\"c1\">// LOG: NY</span>\n<span class=\"c1\">// LOG: 10004</span>\n</code></pre></div>\n<h3>But... but I want to use the dot operator!</h3>\n\n<p>Can you think of why the bracket operator is required? Let's see what happens\nwhen we use the <em>dot operator</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">address</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">street1</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">11 Broadway</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">street2</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">2nd Floor</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">city</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">New York</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">state</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">NY</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">zipCode</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">10004</span><span class=\"dl\">'</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">address</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// LOG: undefined</span>\n<span class=\"c1\">// LOG: undefined</span>\n<span class=\"c1\">// LOG: undefined</span>\n<span class=\"c1\">// LOG: undefined</span>\n<span class=\"c1\">// LOG: undefined</span>\n</code></pre></div>\n<p>The <code>for...in</code> statement iterates over the five properties in <code>address</code>,\nsuccessively passing in the object's keys. However, inside the statement body\nwe're trying to access <code>address.key</code>. If you recall from the lesson on objects,\nvariables don't work with the dot operator because it treats the variable name\nas a literal key —&nbsp;that is, <code>address.key</code> is trying to access the property\non <code>address</code> with a key of <code>key</code>. Since there is no <code>key</code> property in <code>address</code>,\nit returns <code>undefined</code>. To prove this, let's add a <code>key</code> property to <code>address</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Let's have a 'key' key!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">address</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">address</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// LOG: Let's have a 'key' key!</span>\n<span class=\"c1\">// LOG: Let's have a 'key' key!</span>\n<span class=\"c1\">// LOG: Let's have a 'key' key!</span>\n<span class=\"c1\">// LOG: Let's have a 'key' key!</span>\n<span class=\"c1\">// LOG: Let's have a 'key' key!</span>\n<span class=\"c1\">// LOG: Let's have a 'key' key!</span>\n</code></pre></div>\n<h3>Usage</h3>\n\n<p>Use a <code>for...in</code> statement whenever you want to enumerate the properties of an\nobject.</p>\n\n<h3><code>for...in</code> and order</h3>\n\n<p>Because <strong>arrays are objects</strong>, <code>for...in</code> <em>will work</em> with arrays. In fact,\nbecause <code>for...of</code> was added to JavaScript later than <code>for...in</code>, you might see\nolder code that uses <code>for...in</code> to iterate over arrays. However, as a general\nrule, <strong>don't use <code>for...in</code> with arrays</strong>. When iterating over an array, an\n<strong>ordered</strong> collection, we would expect the elements in the array to be dealt\nwith <strong>in order</strong>. However, because of how <code>for...in</code> works under the hood,\nthere's no guarantee of order. From the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">MDN documentation</a>:</p>\n\n<blockquote>\n<p>A <code>for...in</code> loop iterates over the properties of an object in an <strong>arbitrary\norder</strong> ... one cannot depend on the seeming orderliness of iteration, at\nleast in a cross-browser setting.</p>\n</blockquote>\n\n<p>What this means is that, with <code>for...in</code>, different browsers might iterate over\nthe same object's properties in different orders. That's not cool! Cross-browser\nconsistency is very important. A lot of progress has been made towards\nstandardizing the behavior of <code>for...in</code> across all major browsers, but there's\nstill no reason to use <code>for...in</code> with arrays when we have the wonderfully\nconsistent <code>for...of</code> tailor-made for the job.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">MDN —&nbsp;<code>for...of</code></a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">MDN —&nbsp;<code>for...in</code></a></li>\n</ul>",
			"exportId": "object-iteration"
		},
		{
			"id": 432863,
			"title": "Traversing Nested Objects",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-traversing-nested-objects\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Revisit why nested objects are useful</li>\n<li>Practice accessing inner properties</li>\n<li><strong>Bonus</strong>: Use recursion to iterate over nested objects and arrays</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>You've just been onboarded to the dev team working on Flatbook, the world's\npremier Flatiron School-based social network. Here at Flatbook, we have some\npretty complex data-modeling needs. For instance, think about the breadth of\ninformation we might want to display on each user's profile page:</p>\n\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Employer\n\n<ul>\n<li>Company name</li>\n<li>Job title</li>\n</ul></li>\n<li>Friends\n\n<ul>\n<li>First name</li>\n<li>Last name</li>\n<li>Employer</li>\n<li>Company name</li>\n<li>Job title</li>\n</ul></li>\n<li>Projects\n\n<ul>\n<li>Title</li>\n<li>Description</li>\n</ul></li>\n</ul>\n\n<p>We can already start to see some problems with trying to fit all of this into a\n<em>shallow</em> (non-nested) JavaScript object:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">userInfo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Avi</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flombaum</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">companyName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Developer Apprentice</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend1firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Nancy</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend1lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Burgess</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend1companyName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend1jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Developer Apprentice</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend2firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Corinna</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend2lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Jackson</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend2companyName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend2jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Senior Developer</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">project1title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">project1description</span><span class=\"p\">:</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">The premier Flatiron School-based social network in the world.</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">project2title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Scuber</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">project2description</span><span class=\"p\">:</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>Goodness, that's messy. It would be a nightmare to keep the object updated. If\nAvi un-friends Nancy, do we shift Corinna's info into the <code>friend1...</code> slots and\ndelete the <code>friend2...</code> properties, or do we leave Corinna as <code>friend2...</code> and\ndelete the <code>friend1...</code> properties? There are no good answers. Except...</p>\n\n<h2>Objects in Objects</h2>\n\n<p>Recall from the lesson on objects that the values in an object can be\n<em>anything</em>, including another object. If we reorganize the above object a bit,\nit becomes significantly easier to read and update:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">userInfo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Avi</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flombaum</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">company</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Developer Apprentice</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">friends</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Nancy</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Burgess</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">company</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Developer Apprentice</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Corinna</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Jackson</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">company</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Lead Developer</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">projects</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">description</span><span class=\"p\">:</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">The premier Flatiron School-based social network in the world.</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Scuber</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">description</span><span class=\"p\">:</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>We've pared the sixteen messy properties in our first attempt down to a svelte\nfive: <code>firstName</code>, <code>lastName</code>, <code>company</code>, <code>friends</code>, and <code>projects</code>. <code>company</code>\npoints at another object, and both <code>friends</code> and <code>projects</code> point to arrays of\nobjects. Let's practice accessing some of those beautifully nested data points.\nCopy <code>userInfo</code> into the <a href=\"https://replit.com/languages/javascript\">replit</a> code window and follow along. Once you click\nrun, you can check the values of the variable's properties in the console\nwindow.</p>\n\n<p>To review, for a property at the top level of our object, we can grab a value\nusing dot notation:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">userInfo</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Flombaum\"</span>\n</code></pre></div>\n<p>If the property we're accessing is nested inside another object, we just append\nthe additional key(s):</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">userInfo</span><span class=\"p\">.</span><span class=\"nx\">company</span><span class=\"p\">.</span><span class=\"nx\">jobTitle</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Developer Apprentice\"</span>\n</code></pre></div>\n<p>If the property is nested inside an array, we need to specify the index in the\narray for the object that we want. To get the first name of Avi's first friend\nand the title of his second project:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">userInfo</span><span class=\"p\">.</span><span class=\"nx\">friends</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">firstName</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Nancy\"</span>\n\n<span class=\"nx\">userInfo</span><span class=\"p\">.</span><span class=\"nx\">projects</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">title</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; \"Scuber\"</span>\n</code></pre></div>\n<p>It's worth spending some time getting comfortable with nested data structures —\nyou will see a lot of them as you proceed through the curriculum and in your\ncareer as a developer. Create your own in the REPL and practice accessing\nvarious pieces of data.</p>\n\n<h2>Arrays in arrays</h2>\n\n<p>Working with nested arrays isn't all that different from nested objects. Simply\nreplace the named properties of nested objects with indexes of nested arrays.\nLet's review with an example. Be sure to follow along in the REPL.</p>\n\n<p><strong>Top Tip:</strong> You may have discovered that, when you're working in the embedded \nterminal in VS Code or the terminal application on your computer, you can repeat\nthe last command you ran by pressing the \"up\" arrow key. The same is true in the\nREPL console! Give it a try.</p>\n\n<p>Copy the following code into the REPL's code window:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">letters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">a</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">b</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">c</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">d</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">e</span><span class=\"dl\">\"</span><span class=\"p\">]],</span> <span class=\"dl\">\"</span><span class=\"s2\">f</span><span class=\"dl\">\"</span><span class=\"p\">]]];</span>\n</code></pre></div>\n<p>Given the above nested array, how would we get the letter <code>'e'</code>? First, we'd\nneed the second element in <code>letters</code>, <code>letters[1]</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">letters</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; [\"b\", [\"c\", [\"d\", [\"e\"]], \"f\"]]</span>\n</code></pre></div>\n<p>Then we'd need the second element of that element, so <code>letters[1][1]</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">letters</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; [\"c\", [\"d\", [\"e\"]], \"f\"]</span>\n</code></pre></div>\n<p>Then the second element of <strong>that</strong> element, <code>letters[1][1][1]</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">letters</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; [\"d\", [\"e\"]]</span>\n</code></pre></div>\n<p>And the second element of <strong><em>that</em></strong> element, <code>letters[1][1][1][1]</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">letters</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; [\"e\"]</span>\n</code></pre></div>\n<p>Finally, we want the first element in that final nested array,\n<code>letters[1][1][1][1][0]</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">letters</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"c1\">//=&gt; \"e\"</span>\n</code></pre></div>\n<p>Whew! That's a lot to keep track of. Just remember that each lookup (each set of\nsquare brackets) \"drills down\" into each successive nested array.</p>\n\n<h2>Bonus: Iterating over nested objects and arrays</h2>\n\n<blockquote>\n<p><strong>Note</strong>: From here on out, this lesson gets pretty abstract! If you're\nfeeling confident with arrays and objects and are curious how to write some\nabstract code to iterate over nested objects, continue on; otherwise, feel\nfree to continue to the next lesson.</p>\n</blockquote>\n\n<p>Our initial shallow object had a lot of drawbacks, but one advantage of it is\nthat it was very easy to iterate over all of the information:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">userInfo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Avi</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flombaum</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">companyName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Developer Apprentice</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend1firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Nancy</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend1lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Burgess</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend1companyName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend1jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Developer Apprentice</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend2firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Corinna</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend2lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Jackson</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend2companyName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friend2jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Senior Developer</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">project1title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">project1description</span><span class=\"p\">:</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">The premier Flatiron School-based social network in the world.</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">project2title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Scuber</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">project2description</span><span class=\"p\">:</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">shallowIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">shallowIterator</span><span class=\"p\">(</span><span class=\"nx\">userInfo</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: Avi</span>\n<span class=\"c1\">// LOG: Flombaum</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Developer Apprentice</span>\n<span class=\"c1\">// LOG: Nancy</span>\n<span class=\"c1\">// LOG: Burgess</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Developer Apprentice</span>\n<span class=\"c1\">// LOG: Corinna</span>\n<span class=\"c1\">// LOG: Jackson</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Senior Developer</span>\n<span class=\"c1\">// LOG: Flatbook</span>\n<span class=\"c1\">// LOG: The premier Flatiron School-based social network in the world.</span>\n<span class=\"c1\">// LOG: Scuber</span>\n<span class=\"c1\">// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.</span>\n</code></pre></div>\n<p>We can also use it with arrays:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">];</span>\n\n<span class=\"nx\">shallowIterator</span><span class=\"p\">(</span><span class=\"nx\">primes</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: 2</span>\n<span class=\"c1\">// LOG: 3</span>\n<span class=\"c1\">// LOG: 5</span>\n<span class=\"c1\">// LOG: 7</span>\n<span class=\"c1\">// LOG: 11</span>\n</code></pre></div>\n<blockquote>\n<p><strong>Note</strong>: our <code>shallowIterator()</code> function uses <code>for...in</code> to iterate through\nthe object that's passed to it. We learned in the previous lesson that\n<code>for...in</code> is not the best iterator to use with arrays. Because we're not\ncurrently working in the browser (and therefore cross-browser consistency\nisn't an issue), we can safely ignore that problem for the moment. Since this\nexample is fairly complicated, we'll work through the process using <code>for...in</code>\nfirst then, once we've got that working, build a modification that will handle\narrays appropriately.</p>\n</blockquote>\n\n<p>Unfortunately, as you may be able to guess from its name, our <code>shallowIterator()</code>\nfunction can't handle nested collections:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]],</span> <span class=\"mi\">3</span><span class=\"p\">]]];</span>\n\n<span class=\"nx\">shallowIterator</span><span class=\"p\">(</span><span class=\"nx\">numbers</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: 1</span>\n<span class=\"c1\">// LOG: [2, [4, [5, [6]], 3]]</span>\n</code></pre></div>\n<p>It's trained to iterate over the passed-in array's elements or object's\nproperties, but our function has no concept of <em>depth</em>. When it tries to iterate\nover the above nested <code>numbers</code> array, it sees only two elements at the top\nlevel of the array: the number <code>1</code> and <strong>another</strong> array,\n<code>[2, [4, [5, [6]], 3]]</code>. It <code>console.log()</code>s out both of those elements and\ncalls it a day, never realizing that we also want it to print out the elements\ninside the nested array.</p>\n\n<p>It behaves similarly with objects. If we passed the nested version of <code>userInfo</code>\nto it, the values at the top level of the object (\"Avi\" and \"Flombaum\") would be\nlogged correctly, but for the <code>company</code> key, the object it points to would be\nlogged, and, for <code>friends</code> and <code>projects</code>, arrays of objects would be logged.\nTry it out for yourself in the REPL.</p>\n\n<p>Let's modify our function so that if it encounters a nested object or array, it\nwill additionally print out all of the data contained therein. We can do this\nusing an <code>if</code> condition and the <code>typeof</code> operator:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">shallowIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">object</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">nestedKey</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">][</span><span class=\"nx\">nestedKey</span><span class=\"p\">]);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">shallowIterator</span><span class=\"p\">(</span><span class=\"nx\">numbers</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: 1</span>\n<span class=\"c1\">// LOG: 2</span>\n<span class=\"c1\">// LOG: [4, [5, [6]], 3]</span>\n</code></pre></div>\n<p>Now we've gone two levels deep, which gets us a bit closer to our goal. However,\nthere are two pretty clear drawbacks to this strategy:</p>\n\n<ol>\n<li>We'll have to add a new <code>for...in</code> statement for every level of nesting,\nquickly ballooning our function out to an unmanageable size.</li>\n<li>Since we need to add a separate <code>for...in</code> statement for each additional\nlevel, we'll have to know exactly what the target structure looks like ahead\nof time and update our function accordingly. That's a lot of repetitive,\nerror-prone work, and it results in a function that can only be used for data\nwith that particular structure.</li>\n</ol>\n\n<p>There has to be another way!</p>\n\n<h3>Recursion</h3>\n\n<p>Lucky for us, there <strong>is</strong> another way: recursion. It's one of the more powerful\nconcepts in programming, but it's also pretty hard to grasp at first. <strong>Don't\nsweat it if it doesn't click immediately</strong>. We'll introduce the concept here but\ncome back to it periodically throughout the rest of the JavaScript material.\nEssentially, <strong>a recursive function is a function that calls itself</strong>.</p>\n\n<p>Let's take a look at a better way to write our <code>shallowIterator()</code> to take\nadvantage of recursion:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">object</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When we invoke <code>deepIterator()</code> with an argument, the function first checks if\nthe argument is an object (recall that the <code>typeof</code> operator returns <code>\"object\"</code>\nfor arrays as well). If the argument <strong>isn't</strong> an object, <code>deepIterator()</code>\nsimply <code>console.log()</code>s out the argument and exits. However, if the argument\n<strong>is</strong> an object, we iterate over the properties (or elements) in the object,\npassing each to <code>deepIterator()</code> and <strong>re-invoking the function</strong>. That's\nrecursion!</p>\n\n<p>Let's see it in action:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]],</span> <span class=\"mi\">3</span><span class=\"p\">]]];</span>\n\n<span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">numbers</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: 1</span>\n<span class=\"c1\">// LOG: 2</span>\n<span class=\"c1\">// LOG: 4</span>\n<span class=\"c1\">// LOG: 5</span>\n<span class=\"c1\">// LOG: 6</span>\n<span class=\"c1\">// LOG: 3</span>\n</code></pre></div>\n<p>To help us see what's going on here let's use a REPL. Go ahead and copy the\nfollowing code into <a href=\"https://replit.com/languages/javascript\">replit</a>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Argument: </span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">target</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">object</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Logged value: </span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">target</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]],</span> <span class=\"mi\">3</span><span class=\"p\">]]];</span>\n\n  <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">numbers</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Notice that we've added a <code>console.log()</code> at the top of the function that will\nlog whatever argument was passed to our function. We've also added a label to\nthe second <code>console.log()</code> so you can see the values that are getting logged\nfrom the <code>else</code> statement. If you run the code, you will see an \"Argument\"\nlogged for each time the function is called. You will also see a \"Logged value\"\nfor each time the code in the <code>else</code> executes. Referring to the output of the\n<code>console.log()</code>s, step through the function for each element to trace what's\nhappening.</p>\n\n<p>Our function also works with combinations of nested objects and arrays. Replace\nthe existing code in replit with the following and run it (we've gone back to a\nsingle <code>console.log()</code> inside our function to make the output easier to read):</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"dl\">'</span><span class=\"s1\">object</span><span class=\"dl\">'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">userInfo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Avi</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flombaum</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">company</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"na\">jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Developer Apprentice</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">friends</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Nancy</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Burgess</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">company</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Developer Apprentice</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">firstName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Corinna</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">lastName</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Jackson</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">company</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook Labs</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n        <span class=\"na\">jobTitle</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Lead Developer</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">projects</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Flatbook</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">description</span><span class=\"p\">:</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">The premier Flatiron School-based social network in the world.</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Scuber</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n      <span class=\"na\">description</span><span class=\"p\">:</span>\n        <span class=\"dl\">\"</span><span class=\"s2\">A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">userInfo</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: Avi</span>\n<span class=\"c1\">// LOG: Flombaum</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Developer Apprentice</span>\n<span class=\"c1\">// LOG: Nancy</span>\n<span class=\"c1\">// LOG: Burgess</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Developer Apprentice</span>\n<span class=\"c1\">// LOG: Corinna</span>\n<span class=\"c1\">// LOG: Jackson</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Lead Developer</span>\n<span class=\"c1\">// LOG: Flatbook</span>\n<span class=\"c1\">// LOG: The premier Flatiron School-based social network in the world.</span>\n<span class=\"c1\">// LOG: Scuber</span>\n<span class=\"c1\">// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.</span>\n</code></pre></div>\n<p>To keep track of how many times our function is recursively invoking itself, it\nmight be helpful to use a counter variable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">counter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">counter</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">object</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">userInfo</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: Avi</span>\n<span class=\"c1\">// LOG: Flombaum</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Developer Apprentice</span>\n<span class=\"c1\">// LOG: Nancy</span>\n<span class=\"c1\">// LOG: Burgess</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Developer Apprentice</span>\n<span class=\"c1\">// LOG: Corinna</span>\n<span class=\"c1\">// LOG: Jackson</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Lead Developer</span>\n<span class=\"c1\">// LOG: Flatbook</span>\n<span class=\"c1\">// LOG: The premier Flatiron School-based social network in the world.</span>\n<span class=\"c1\">// LOG: Scuber</span>\n<span class=\"c1\">// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.</span>\n\n</code></pre></div>\n<p>If you check the value of <code>counter</code> after running the code, you should see that\n<code>deepIterator()</code> was called a total of 26 times: we invoked it once, and it\ninvoked itself 25 additional times! If we look closely at our nested <code>userInfo</code>\nobject, we can see that it contains two arrays, seven nested objects, and\nsixteen key-value pairs where the value is a string. Add those all up (2 + 7 +\n16), and you get our 25 recursive invocations!</p>\n\n<p><strong>Reminder</strong>: You can check the value of <code>counter</code> by either wrapping it in a\n<code>console.log()</code> in the code window or checking it in the console window after\nrunning the code.</p>\n\n<h3>Modifying our Program to Better Handle Arrays</h3>\n\n<p>In our <code>deepIterator()</code> function, we're using an <code>if</code> statement to evaluate the\nargument that's passed in. We do one thing if <code>target</code> is an object and\nsomething else if it's not. Now we want to modify our function to handle one\nmore situation: when <code>target</code> is an array. Doing this is a simple matter of\nadding an <code>else if</code> to our <code>if</code> statement; its code block will execute <strong>if</strong>\n<code>target</code> is an array.</p>\n\n<p>We can determine whether a variable is an array using an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#static_methods\">Array Static\nMethod</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"><code>Array.isArray()</code></a>. Let's use that in our new\ncondition. We'll also add a new <code>console.log()</code> to verify that our code is\ncorrectly detecting the arrays (we've commented out the final <code>console.log()</code>\nfor now):</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">object</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">We found an array</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"c1\">// iterate through the array</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// console.log(target);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">userInfo</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Now if we run the code, we see ...nothing. For some reason, our code isn't\ndetecting the arrays. Remember that <strong>arrays are objects</strong>, so our <code>if</code>\ncondition returns true for arrays as well as objects and the <code>else if</code> never\nexecutes. We can fix this by reversing the order of our conditions. Let's also\nput the second <code>console.log()</code> back in, and try running the code again.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// iterate through the array</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">We found an array</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">object</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">userInfo</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: Avi</span>\n<span class=\"c1\">// LOG: Flombaum</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Developer Apprentice</span>\n<span class=\"c1\">// LOG: We found an array</span>\n<span class=\"c1\">// LOG: We found an array</span>\n</code></pre></div>\n<p>Much better! The logs are working for the primitive values and the non-array\nobject, so now we just need to code the body of our new <code>if</code> statement, using\n<code>for...of</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">element</span> <span class=\"k\">of</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">target</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">object</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">deepIterator</span><span class=\"p\">(</span><span class=\"nx\">userInfo</span><span class=\"p\">);</span>\n<span class=\"c1\">// LOG: Avi</span>\n<span class=\"c1\">// LOG: Flombaum</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Developer Apprentice</span>\n<span class=\"c1\">// LOG: Nancy</span>\n<span class=\"c1\">// LOG: Burgess</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Developer Apprentice</span>\n<span class=\"c1\">// LOG: Corinna</span>\n<span class=\"c1\">// LOG: Jackson</span>\n<span class=\"c1\">// LOG: Flatbook Labs</span>\n<span class=\"c1\">// LOG: Lead Developer</span>\n<span class=\"c1\">// LOG: Flatbook</span>\n<span class=\"c1\">// LOG: The premier Flatiron School-based social network in the world.</span>\n<span class=\"c1\">// LOG: Scuber</span>\n<span class=\"c1\">// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.</span>\n</code></pre></div>\n<p>Whew!</p>\n\n<h2>Conclusion</h2>\n\n<p>This is very advanced stuff, and you should absolutely not get discouraged if it\ndoesn't click at first. Create some other nested data structures and traverse\nover them with <code>shallowIterator()</code> and <code>deepIterator()</code>, noting the limitations\nof the former. Use the debugging tools available to you to get a handle on\nwhat's happening at each step of the process.</p>\n\n<p>You got this!</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/scripting/javascript/advanced/recursion-javascript\">MDN: Recursion (JavaScript)</a></li>\n<li><a href=\"https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f\">freeCodeCamp: Recursion in JavaScript</a></li>\n<li><a href=\"https://javascript.info/debugging-chrome\">JavaScript.info: Debugging in Chrome</a></li>\n</ul>",
			"exportId": "traversing-nested-objects"
		},
		{
			"id": 432865,
			"title": "Survey - Working with Data Structures",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the Working with Data Structures module?</p>\n</div>",
			"exportId": "g3140989668d2ba4a85e31f52151c918a"
		}]
	},
	{
		"id": 44866,
		"name": "HTML",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g14a185da351a42862d9227ff4f1e8ab2",
		"items": [
		{
			"id": 432869,
			"title": "A Quick Tour Of The Web",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-quick-tour-of-the-web\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-quick-tour-of-the-web\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-quick-tour-of-the-web/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define \"internet\"</li>\n<li>Define \"server\" role</li>\n<li>Define \"client\" role</li>\n<li>Identify which role possesses the data that browsers display</li>\n<li>Identify what type of content defines what's seen in browsers</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Welcome to the web, the largest canvas in the world. Over half of the world's\npopulation has access to the web. Never before has it been possible to reach so\nmany across such vast distances!</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10A.png\" alt=\"Welcome to the Web!\"></p>\n\n<p>To orient you in these first steps of your study of HTML and web programming we\nwant to give a broad overview of the web and how it works in the broadest terms.\nWhile you might have heard \"web,\" and \"internet\" and \"server\" in many different\ncontexts and places over the years, it's possible that you've never built a\ncohesive model in your mind that connects those concepts.</p>\n\n<p>In this lesson, we'll go over the essential steps in how the web works.</p>\n\n<h2>Define \"internet\"</h2>\n\n<p>When people share information, great things can happen. Politics can change. Our\nplace in the universe can change. Disease can be conquered. The ability to share\nknowledge is <em>power</em>. In the earliest days of computing, engineers looked for\nways to have computers share information. Technical limits meant networked\ncomputers had to be within the same office.</p>\n\n<p>Eventually, improvements allowed small networks to \"inter\"-\"network\" with each\nother. This discipline was called \"internetworking.\" By the technology and\nknowledge of \"internetworking,\" these small local networks (or, \"local area\nnetworks\" or LANs) became \"internetworked\" into \"Wide Area Networks\" or WANs.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_18_VisualInternet.png\" alt=\"Visual Internet\"></p>\n\n<p>The natural next dream was to \"internetwork\" WANs into some sort of \"larger\"\ninter-network, something city-scale, country-scale, or global scale. Technology\nfor \"inter-networking\" WANs was difficult and slow to develop, but eventually\nproduced a backbone internetwork, \"<strong>The Internet</strong>work\" which encompassed all\nof its constituent WANs and their constituent LANs. Eventually, in common usage,\nit became called \"The Internet.\"</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10B.png\" alt=\"The internet\"></p>\n\n<p>It was upon <em>this</em> \"The Internet\" that \"The Web\" was built.</p>\n\n<p><strong>Note:</strong> For many reasons, style guides no longer capitalize \"internet\" or\n\"web.\" The global network linking computers globally is \"the internet.\"</p>\n\n<h2>Define \"server\" Role</h2>\n\n<p>All machines on the internet are computers. For ease of discussion, we're going\nto discuss them in two \"roles:\" client and server. Historically a \"server\" would\nbe a larger, more powerful computer with more memory, bigger hard drives, and\nmore computer chips. But today, \"server\" roles can be handled quite well by\nArduino devices no bigger than a credit card! Nevertheless, in diagrams and on\nwhiteboards they tend to be drawn as large \"tower-style\" computers.</p>\n\n<p>Regardless of its size, a \"server\" has the responsibility of arranging the data\nthat is presented to the \"client.\" It's because of this \"arranging\" being\ncomputationally demanding that servers have tended to have extra resources.</p>\n\n<p>Historically, computers were very expensive and well-appointed servers were\nvery, very expensive. As such, when possible, it was more economical for servers\nto do heavy processing and for the clients to request updates.</p>\n\n<h2>Define \"client\" Role</h2>\n\n<p>A computer fulfilling a client role has the responsibility of presenting the\ndata that is sent from the server. Historically, these machines could be more\nlightly equipped (and thus cheaper). You'll generally see them drawn in diagrams\nor on whiteboards as laptops.</p>\n\n<p>The <em>client</em> displays data that is provided to it by the <em>server</em>. A verb that's\ncommonly used is \"render\" as in, \"The client <em>renders</em> data provided by the\nserver.\" That is, it only displays the server's data and any change to the data\nhas to be done <em>by the server</em>, caused by a <em>request</em> from the <em>client</em>.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_19_BasicClientServer.png\" alt=\"Client/Server Role\"></p>\n\n<h2>Client/Server Example</h2>\n\n<p>Let's take a moment to consider client/server in a common scenario: the\nsupermarket.</p>\n\n<p>If you ask the cashier for the price of a bottle of water, they can look it up\nfor you. But their client computer's \"source of truth\" on the price lives on the\nserver. The <em>client</em> must request this information by \"asking\" or \"sending a\nrequest\" to the <em>server</em>.</p>\n\n<p>Similarly, when you buy that bottle of water, the (lightweight) client says\n\"Sold a bottle of water!\" to a server. The server, in turn, updates its\ninventory record to show <code>-1</code> water bottle.</p>\n\n<p>Now, at the end of the sales day, the management team would like to do some\nanalytics about how profitable they were that day. They <em>could</em> go to each\nclient computer, determine its revenue for the day and which departments\ncontributed to that number, but on a cheap client machine that process would be\ns..l...o.....w — like trying to play a PS5 game on an iPhone!</p>\n\n<p><em>However</em>, if each client computer merely logged its actions to the server by\nsending requests, the management could ask that high-power machine to print out\nanalytics in an economical and efficient fashion. Many businesses still have\ntheir IT architecture on this model, known as \"the client/server\" model.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10C_ClientServerExample.png\" alt=\"Client/Server Illustration\"></p>\n\n<h2>Identify Which Role Possesses the Data That Browsers Display</h2>\n\n<p>The web was developed with a client/server model. Home PCs were relatively\nunderpowered <em>clients</em> and web content sharing programs were installed on\nhigh-power <em>servers</em>. Thus web <em>clients</em> running <em>browser</em> software were created\nthat would send a <em>request</em> for a web page and the server would return the web\npage.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_81_WebAppStack.png\" alt=\"Web Application Stack\"></p>\n\n<p>The specification on how <em>clients</em> and <em>servers</em> interact is called HTTP\n(HyperText Transfer Protocol). This is why URLs start with <code>http://</code>: you're\ntelling the browser: \"Browser, act as a client and use the HTTP standard to talk\nto <code>flatironschool.com</code> and find a file called <code>index.html</code>.\" The browser\nexpresses this wish by transmitting a message that looks like:</p>\n\n<p><code>GET flatironschool.com /index.html</code>\n<img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10D_BrowserClientInteraction.png\" alt=\"Browser as Client Illustration\"></p>\n\n<p>Here it asks <code>flatironschool.com</code> for an HTML file called <code>index</code>. We'll explore\nthis <em>much</em> more in subsequent lessons!</p>\n\n<p>In return, the <em>server</em> returns... HTML that's contained in the <code>index.html</code>\nfile.</p>\n\n<h2>Identify What Type of Content Defines What's Seen in Browsers</h2>\n\n<p>Having been told which file on <em>its</em> hard drive to consult, the web <em>server</em>\ntakes the contents of a file, pushes them across the internet <em>back</em> to the\n<em>client</em>. The client then receives the raw HTML. It looks something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Home | The Metropolitan Museum of Art<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"UTF-8\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1.0\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"title\"</span> <span class=\"na\">content=</span><span class=\"s\">\"Home\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;meta</span>\n      <span class=\"na\">name=</span><span class=\"s\">\"keywords\"</span>\n      <span class=\"na\">content=</span><span class=\"s\">\"Metropolitan Museum, Met, Metropolitan Museum of Art, Met Museum, Metropolitan\"</span>\n    <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"description\"</span> <span class=\"na\">content=</span><span class=\"s\">\"The Metropolitan Museum of Art is a...\"</span> <span class=\"nt\">/&gt;</span>\n    ...\n  <span class=\"nt\">&lt;/head&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n<p>Obviously, this is <em>not</em> what you see when you visit\n<a href=\"http://www.metmuseum.org\">http://www.metmuseum.org</a>. The difference hinges on\nthat special verb <em>render</em>. Your <em>client's</em> browser <em>renders</em> the \"raw\" HTML and\nturns it into something <em>humans</em> find nice to read.</p>\n\n<p>And this is the essence of how the web works!</p>\n\n<h2>Conclusion</h2>\n\n<p>In conclusion, we've talked about the history of the word <em>internet</em> and how it\nconnects computers fulfilling <em>client</em> and <em>server</em> roles. We've identified that\n<em>client</em> machines use web browsers to make <em>requests</em> of the <em>server</em>, according\nto the HTTP standard, and the <em>server</em> returns HTML data, stored on their hard\ndrives in files <em>back</em> to the requesting <em>client</em>. The <em>client</em> machine, running\nbrowser software, then converts that raw HTML data into a <em>rendered</em> format\nwhich is what you experience as a web page.</p>\n\n<p>As a summary, we've provided the following video that gives an introduction to\nthe web. If you are only interested in building web pages, you can stop at 3:48;\nif you are studying a web programming technology e.g. Ruby or JavaScript, we\nrecommend watching the entire video.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7AS96jRnquI?rel=0&amp;modestbranding=1\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=7AS96jRnquI\">The Web in a Nutshell</a></li>\n<li><a href=\"https://docs.google.com/presentation/d/1m6SPR13MdfF7YRhfx7HtvkOmFnrRyVQOEFgWhI8Bc0I/edit?usp=sharing\">Slides</a></li>\n</ul>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/World_Wide_Web\">World Wide Web - Wikipedia</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML basics - Mozilla Developer Network</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\">An overview of HTTP - Mozilla Developer Network</a></li>\n<li><a href=\"https://noahveltman.com/static-dynamic/\">Static vs Dynamic</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Client%E2%80%93server_model\">Client Server Model - Wikipedia</a></li>\n</ul>",
			"exportId": "a-quick-tour-of-the-web"
		},
		{
			"id": 432871,
			"title": "Welcome to HTML",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-welcome-to-html\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-welcome-to-html\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-welcome-to-html/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Preview</h2>\n\n<p>In the next few lessons, we'll be introducing you to HTML (HyperText\nMarkup Language).</p>\n\n<p>HTML is a <em>documentation-based</em> technology. The word <em>documentation</em> probably\ninspires a mental image of someone carrying heaps of papers, folders, files.\nBut what is a <em>document</em> in the digital realm?</p>\n\n<p>We'll start our exploration of HTML by thinking about files and learning the\nvocabulary technologists use to discuss them in the process of creating HTML\ndocuments. This will assist your searches for help and your ability to interact\nwith professionals on the topic.</p>\n\n<p>We'll then proceed to a collaborative lab where you'll be guided in editing a\nsimple HTML document. The point here is not to memorize the full detail of\nHTML's vocabulary, but to experience the joy and excitement of being able to\nadjust and customize HTML.</p>\n\n<p>After that, we'll learn a core set of HTML features that will enable you to create\nsimple HTML documents with less-explicit guidance. Around this time, you'll then\nbegin tying these discoveries together and will start creating your first\nHTML documents.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/welcome-to-html/Image_48_HTMLBannerGraphic.png\" alt=\"Welcome to HTML\"></p>\n\n<h2>Repetition &amp; Getting Stuck</h2>\n\n<p>In the lessons ahead, many of the ideas are deliberately repeated. You might not \nget \"attributes\" the first time you see them, but, after some hands-on experience,\nthey'll make sense the second time you see them.</p>\n\n<h2>Beyond</h2>\n\n<p>At the close of the unit, you'll be ready to learn a series of HTML expressions\nthat will allow you to create a meaningful web page. </p>",
			"exportId": "welcome-to-html"
		},
		{
			"id": 432872,
			"title": "Files and File Types",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-files-extensions-and-filetypes\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-files-extensions-and-filetypes\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-files-extensions-and-filetypes/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define a file</li>\n<li>Contrast <em>text files</em> and <em>binary files</em></li>\n<li>Identify the function of file extensions</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Have you tried to memorize a phone number \"for a second\" as you tried to write\nit down? Maybe you kept repeating it over and over? Have you ever felt a little\noverwhelmed when someone was giving you too much information at once and you\nwere trying to keep up--but felt relief when you finally \"got it\"? As humans, we\ncan only hold a few things in our heads before they start to, well, vanish or\nget mixed up. Our <em>working memory</em> is not too reliable!</p>\n\n<p>Computers also have limited working memory. Just like us, they keep things in\nworking memory that they're, well, working with.</p>\n\n<p>When computers or people run out of space, they write down information stored in\ntheir <em>working memory</em>. Humans sometimes use a napkin, Post-It Notes or the back\nof their hands. Computers use <em>files</em>. The stuff computers write into their\nfiles fits into two main categories:</p>\n\n<ol>\n<li>Information humans can read (\"text files\")</li>\n<li>Information only computers can read (\"binary files\")</li>\n</ol>\n\n<p>Developers create <em>lots</em> of files. This README will help us all get on the same\npage with how to talk about them.</p>\n\n<h2>Define a File</h2>\n\n<p>A file is a thing computers use to store facts (\"data\") or processes\n(\"programs\") for later use.</p>\n\n<h2>Contrast <em>Text Files</em> and <em>Binary Files</em></h2>\n\n<p>Computers think in electricity.</p>\n\n<p>Whoa!</p>\n\n<p>Computers' thoughts are usually shown as 1's and 0's. This is called <em>binary\ncode</em>. When computers write things down, they often write them down in files in\n<em>their</em> language, <em>binary</em>. These files are <em>binary files</em>.</p>\n\n<p>Types of <em>binary</em> files are images, music, and software programs. We can create\nthese files with Adobe Photoshop, the C programming language, or Ableton.</p>\n\n<p>Nobody is exactly sure how humans think. That's a question for science or\nphilosophy. When we write our ideas down, we write them in files in <em>our</em>\nlanguage, <em>text</em>. These files are <em>text files</em>.</p>\n\n<p>Types of <em>text</em> files are HTML, letters to grandma, a list of student grades for\na grade book program, directions to Carnegie Hall, etc. We create these <em>text</em>\nfiles with <em>text editors</em> like Visual Studio Code, Atom, Sublime Text, vim, or\nemacs.</p>\n\n<blockquote>\n<p><strong>ASIDE:</strong> You might hear some developers call text files\n\"<a href=\"https://en.wikipedia.org/wiki/Plain_text\">plaintext</a>\" or \"<a href=\"https://en.wikipedia.org/wiki/Plain_text\">plain text</a> files\" They all mean the\nsame thing.</p>\n</blockquote>\n\n<h3>The Curious Case of Word Processing Files</h3>\n\n<p>What about files made by word processors Microsoft Word or MacOSX's TextEdit?\nWhile you're typing text, those programs store the text <em>as well as information</em>\nabout the text (which font to use, which words are in bold, whether these next\nfive lines are part of a bullet-list, etc.) in the <em>same</em> file.  To make the\nloading and saving fast, these programs save the file in <em>binary</em>.</p>\n\n<h3>Word Processors and HTML, Code</h3>\n\n<p>Since word processing programs store their output in <em>binary</em> files and programs\nthat read HTML (like browsers) or run code (like Ruby, Python, JavaScript, or\nJava) need <em>text</em>, <strong>Word Processors should not be used to create HTML or code.\nDevelopers do their work in <em>text editors</em>, not <em>word processors</em>.</strong></p>\n\n<h2>Identify the Function of File Extensions</h2>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/files-filetypes/Image_49_FileTypeAssets.png\" alt=\"Common Filetypes and File Extensions\"></p>\n\n<p>Many file names have an \"extension\" that comes after a <code>.</code>. It is not a\nrequirement, but it's a best practice. The extension is a \"hint\" to the\noperating system of which program should be used to work with the file.  For\nexample, <code>LetterToGrandma.docx</code> has a <em>docx</em> <em>extension</em> which <em>hints</em> to the OS\nthat it should open the file with the Word word processing program by Microsoft.\nThe file <code>job_offer.pdf</code> <em>hints</em> to the OS that it could open the file with\neither Acrobat or MacOSX's Preview application. When the OS finds many good\noptions, it will ask for the user's help in selecting the right program.</p>\n\n<p>Changing an extension <strong>does not</strong> change the type of file you have. A text file\ncalled <code>groceries.txt</code> could be renamed <code>groceries.mp3</code> <strong>but it would still be\na text file</strong>. A Toyota with a BMW medallion does not suddenly become a BMW. Our\n<code>groceries</code> did not suddenly become music because we changed the extension.</p>\n\n<p>Some operating systems, like MacOSX, <em>hide</em> the file extension by default.  They\nreckon that most users \"no longer care about it.\" Since we're developers,\nthough, we will frequently dig below the \"end-user\" layer. When in a terminal,\nwe will see full file names - including extensions.</p>\n\n<p>Here's a table to help train your instincts in seeing text-files versus\nbinary-files:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html-basics/files-filetypes/Image_49B_FileTypeChart.png\" alt=\"Table of file types\"></p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we have taken some time to get to know files. Files are things\nin which computers store data that needs to last a while or which their users\nmight want to refer to again later. We've noted that files generally come in\nbinary and text formats. And we saw that many files also have an extension that\nprovides hints about which program should be used to work with the file.</p>",
			"exportId": "files-and-file-types"
		},
		{
			"id": 432874,
			"title": "Experiencing HTML Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-experiencing-html-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Create an ordered HTML list</li>\n<li>Create an unordered HTML list</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>How do we go about writing text for the web? How is that different from the text\nthat we write in a text file? We're going to experience for ourselves how these\nthings are different in this lab.</p>\n\n<p>You don't need any prior knowledge of HTML for this lab. We're going to tell you\nwhat to type. Don't focus on specific commands or taking notes. Everything will\nbe covered thoroughly later. Instead, the goal of this exercise is to feel the\njoy of editing a file and seeing the change \"out there.\"</p>\n\n<p><strong>NOTE:</strong> We don't expect you to know <em>markup</em>, <em>content</em>, <em>source text</em>, or\n<em>rendered text</em> yet. We'll be defining them in this lab.</p>\n\n<h2>Getting Started</h2>\n\n<p>If you haven't already, fork and clone this lesson into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code.</p>\n\n<h2>Create an Ordered HTML List</h2>\n\n<p>Think of a collection of things united by theme: Pokémon, Old-school MC's, Prime\nMinisters of New Zealand, Magical Beasts and Where to Find Them, etc. We're\ngoing to walk through how to create a list of things marked up with HTML.</p>\n\n<h3>Create a Text File with Content</h3>\n\n<p>In your terminal, while still inside of this labs directory, create a new file\ncalled <code>my_list.txt</code> by running <code>touch my_list.txt</code>. The file extension suggests\nto humans and operating systems that it contains text. Open the file in VS Code\nby typing <code>code my_list.txt</code>; you will do all editing for this lesson in VS\nCode.</p>\n\n<p>Below is a collection of plant names.\nCopy and paste the plants into your <code>my_list.txt</code> file.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>\"Monstera Deliciosa\"\n\"Fiddle Leaf Fig\"\n\"Pilea\"\n\"Golden Pothos\"\n\"Peace Lily\"\n</code></pre></div>\n<p>The material we typed into the file is called the <em>content</em>. It's the thing\nwe're trying to communicate.</p>\n\n<h3>Content as a List in a Text File</h3>\n\n<p>A problem with our <em>content</em> is that it doesn't explicitly state anywhere that\nit's a list. In the example, we see a list of plants. But a browser doesn't know\nwhat a \"list\" is.</p>\n\n<p>We need to help the browser <strong>know</strong> what a list is. The secret is to add\n\"notes\" or \"breadcrumbs\" to the content that tell the browser that it has list\nitems and that these items \"go together\" in a list. To add these \"notes\" we\nsurround the <em>content</em> with bits of <em>markup</em>, with bits of HTML.</p>\n\n<p>We will take the text content from our text file, paste it into a new HTML file\nand then we will add <em>markup</em> so that a browser \"sees\" a list. Let's write an\nHTML file!</p>\n\n<h3>Text Inside an HTML File</h3>\n\n<p>Now we're going to create an HTML list together.</p>\n\n<ol>\n<li>Create a new file called <code>my_list.html</code>.</li>\n<li>Copy the contents of <code>my_list.txt</code> and paste them into <code>my_list.html</code>.</li>\n<li>Save the <code>my_list.html</code> file.</li>\n<li>Open the <code>my_list.html</code> file in the browser. For Mac users, you can do this\nwith <code>open my_list.html</code>. For Windows users, you can do this in your Ubuntu\napp with <code>explorer.exe my_list.html</code>. Make sure you've\n<a href=\"https://support.google.com/chrome/answer/95417?co=GENIE.Platform%3DDesktop&amp;hl=en\">set Chrome as your default browser</a>.</li>\n<li>Hit enter to run the command.</li>\n</ol>\n\n<p>Once you've opened the file in the browser, you should see:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/non_marked_up_list.png\" alt=\"HTML file with non-marked-up content displays on one line\"></p>\n\n<p>As noted above, the browser doesn't know that items on new lines means \"items in\na list.\" Browsers ignore when HTML is split onto new lines. We cover why a\nlittle later in this README. Since the browser doesn't know we intend this to be\na list <strong>and</strong> since browsers ignore when <em>content</em> is split onto different\nlines, it displays all the <em>content</em> on one line. Not what we wanted.</p>\n\n<h3>A Text Not-Really-A-List Into a Real-HTML-List</h3>\n\n<p><strong>REMEMBER</strong>: This lab will provide you what to type. Subsequent labs will\ndeeply examine details of HTML markup. However, our goal here is to show how\nslight changes to markup can quickly alter the browser's display of content. If\nyou're fuzzy on a detail that's fine.</p>\n\n<h4>Marking-Up List Items</h4>\n\n<p>OK, we've reached the critical moment. We're going to tell the browser that\nthese bits of letters represent <strong>list items</strong>. To do so we \"wrap\" each line\nwith <code>&lt;li&gt;</code> and <code>&lt;/li&gt;</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;li&gt;</span>\"Monstera deliciosa\"<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;li&gt;</span>\"Fiddle Leaf Fig\"<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;li&gt;</span>\"Pilea\"<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;li&gt;</span>\"Golden Pothos\"<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;li&gt;</span>\"Peace Lily\"<span class=\"nt\">&lt;/li&gt;</span>\n</code></pre></div>\n<p>Flip back to the <strong>viewing tab</strong> and refresh the page. You should see something\nlike the following:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/unordered_list.png\" alt=\"HTML file with content displayed as unordered list\"></p>\n\n<p><strong>AWESOME</strong>.</p>\n\n<p>In this step we added some HTML <em>markup</em>:</p>\n\n<ul>\n<li>The <code>&lt;li&gt;</code> is an HTML <strong>list item</strong> <em>opening tag</em>\n</li>\n<li>The <code>&lt;/li&gt;</code> is an HTML <em>closing tag</em>\n</li>\n<li>We would call this pair of opening and closing tags an \"<code>li</code> tag\"</li>\n<li>The whole length of text of <em>opening markup</em> plus \"wrapped\" content plus\n<em>closing markup</em> (<code>&lt;li&gt;...content...&lt;/li&gt;</code>) is called \"an HTML element;\" or,\nmore exactly, an <code>li element</code>\n</li>\n</ul>\n\n<p>Again, you don't need to memorize these terms yet, but we want to help you\ndevelop an intuition for how these words are used. You will be using these terms\nwhen speaking with other developers and HTML authors.</p>\n\n<p>It may not seem like we did much work, but the idea of a method for \"marking up\"\n<em>content</em> and linking it is the foundation of the web. It's what made Tim\nBerners-Lee's reputation. And <strong>you</strong> just experienced Sir Tim's great insight.\n<strong>AWESOME</strong>.</p>\n\n<p>Let's work with additional HTML tags to see how we tweak our HTML a bit more.\nLet's tell the browser \"Hey! These list items, they go together!\"</p>\n\n<h3>Indicating that List Items Are Connected</h3>\n\n<p>Wrap the entire set of <code>&lt;li&gt;</code> items with an <code>&lt;ol&gt;</code> and <code>&lt;/ol&gt;</code> like so:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;ol&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Monstera deliciosa\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Fiddle Leaf Fig\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Pilea\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Golden Pothos\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Peace Lily\"<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ol&gt;</span>\n</code></pre></div>\n<p>Save the file and refresh the <strong>viewing tab</strong>. It should display:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/ol_list.png\" alt=\"List displayed as an ordered list\"></p>\n\n<p>We told the browser that this set of list items that we \"wrapped\" in the\n<strong>ordered list</strong> tag go together <strong>as a list</strong>. Because we told the browser that\nthe list is <strong>ordered</strong> it decided to be helpful and put numbers next to the\nlist items <em>for us</em>.</p>\n\n<h3>Wrapping and Indentation</h3>\n\n<p>With all these angle-brackets of <em>markup</em> and <em>content</em> mixed together, HTML\nauthors like to use indentation to make HTML easier to read. Here's how most\nHTML authors would expect our code from the previous section to be arranged:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;ol&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Monstera deliciosa\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Fiddle Leaf Fig\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Pilea\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Golden Pothos\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Peace Lily\"<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ol&gt;</span>\n</code></pre></div>\n<p>Update your document. Save it and refresh your <strong>viewing tab</strong>.</p>\n\n<p>Remember earlier when the browser ignored that <em>content</em> was on separate lines?\nCleaning up your code requires splitting lines, adding spaces, and adding tabs.\nBrowsers ignore those characters that <em>humans</em> use to make their HTML\nreader-friendly.</p>\n\n<h2>Create an Unordered HTML List</h2>\n\n<p>Let's change our ordered list to be <strong>unordered</strong>. If <code>&lt;ol&gt;</code> means <strong>ordered\nlist</strong>, you might guess that <code>&lt;ul&gt;</code> means <strong>unordered list</strong>. Make the change\nand refresh your <strong>viewing tab</strong>.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/unordered_list.png\" alt=\"List displayed as an unordered list\"></p>\n\n<p>Here we return to a \"bulleted\" unordered list.</p>\n\n<p><strong>ASIDE</strong>: If you've been following along closely, you might be wondering, if we\ndidn't have a <code>&lt;ul&gt;</code> tag around our <code>&lt;li&gt;</code> items earlier, how did the browser\nknow to treat those <code>&lt;li&gt;</code> as if they were in a <code>&lt;ul&gt;</code>? When browsers detect\nproblematic HTML they guess! This can lead to some very strange results when you\nmake an error, but if you write <em>invalid</em> HTML, they try to recover. HTML\nvalidity will be discussed further soon!</p>\n\n<h3>Add a Description Paragraph</h3>\n\n<p>Let's introduce our list by adding some background:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;p&gt;</span>Some of my favorite plants!<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Monstera deliciosa\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Fiddle Leaf Fig\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Pilea\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Golden Pothos\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Peace Lily\"<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</code></pre></div>\n<p>Take a look at your \"rendered page\" and verify the result is to your liking.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/ul_list.png\" alt=\"List displayed as an unordered list with title\"></p>\n\n<h3>Put a Header on It</h3>\n\n<p>Lastly, let's put a \"heading\" on the top of our document. Add an <code>h1</code> element\nwith an appropriate title inside.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;h1&gt;</span>My Plant List<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div>\n<p>Here's the full example code:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;h1&gt;</span>My Plant List<span class=\"nt\">&lt;/h1&gt;</span>\n<span class=\"nt\">&lt;p&gt;</span>Some of my favorite plants!<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Monstera deliciosa\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Fiddle Leaf Fig\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Pilea\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Golden Pothos\"<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\"Peace Lily\"<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</code></pre></div>\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/final_list.png\" alt=\"Final Document - unordered list with Header and title \"></p>\n\n<p>When you're done, it is time to run this assignment's tests. Make sure that you\nhave your HTML content in a file called <code>my_list.html</code> in order to pass the\ncheck. Type <code>learn test</code> and verify that your tests pass.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lab, you have done the job of an HTML author. You receive raw <em>content</em>,\nyou <em>mark it up</em> to create <em>source text</em>. You test, tweak and adjust your\n<em>source text</em> until the <em>rendered text</em> displayed in the browser is to your\nliking.</p>\n\n<p>In upcoming lessons, we will learn additional tags which provide us more ways to\ndescribe our content. We might be starting with lists today, but soon we'll be\nusing HTML in even more exciting ways!</p>\n\n<p>Welcome to the community of web page creators!</p>",
			"exportId": "gae7128c88805dcbc4ac8c3fbdb1a892f"
		},
		{
			"id": 432876,
			"title": "Document Structure Continued",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-document-structure-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Recognize basic HTML document structure</li>\n<li>Recognize HTML comments</li>\n<li>Describe the <code>head</code> section and its contents</li>\n<li>Create an HTML document</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Every HTML document has a specific set of required tags. Because these are\nrequired <em>every</em> time we create a web page, it is valuable to gain a more\nin-depth understanding of what these tags do, why they are useful, and how they\nwork in context to the modern web.</p>\n\n<p>We will be both reviewing setting up well-formed HTML documents and expanding a\nbit on the <code>DOCTYPE</code>, <code>html</code> and <code>head</code> tags, as well as introducing how to add\ncomments within our HTML code.</p>\n\n<h2>Getting Started</h2>\n\n<p>If you haven't already, fork and clone this lesson into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code.</p>\n\n<h2>Recognize Basic HTML Document Structure</h2>\n\n<p>Let's start by adding the bare essentials of an HTML document to the provided\n<code>index.html</code> file:</p>\n\n<ul>\n<li>A <code>DOCTYPE</code> tag, which looks like this: <code>&lt;!DOCTYPE html&gt;</code>\n</li>\n<li>Opening and closing <code>html</code> tags</li>\n<li>Opening and closing <code>head</code> tags nested inside the <code>html</code> tags</li>\n<li>Opening and closing <code>body</code> tags nested inside the <code>html</code> tags</li>\n</ul>\n\n<blockquote>\n<p>Note: Recall that best practice indicates that any HTML elements that are\nnested inside other HTML elements (i.e., between the opening and closing tags\nof another element) should be indented. It is not <em>necessary</em> to use\nindenting, either for the HTML to render properly or to pass the tests, but\nit's a good habit to get into. Go ahead and indent the <code>head</code> and <code>body</code> tags\ninside the <code>html</code> tags, if you haven't already.</p>\n</blockquote>\n\n<p>If written correctly, running <code>learn test</code> now will pass three of the seven\ntests:</p>\n\n<ul>\n<li><code>has a DOCTYPE tag</code></li>\n<li><code>has opening and closing HTML tags</code></li>\n<li><code>has &lt;head&gt; and &lt;body&gt; tags nested in the &lt;html&gt; tag</code></li>\n</ul>\n\n<p>However you will not be done yet! We have to make <strong>all</strong> the tests pass in\norder to make the test code happy! Let's get to it!</p>\n\n<p>Let's take a closer look at these tags.</p>\n\n<h3><code>&lt;!DOCTYPE html&gt;</code></h3>\n\n<p>At the top of every HTML document, you're always going to start off with the\nsame element, <code>DOCTYPE</code>. In the early days of the internet, there were fewer\nstandards, and it was important to declare the specific way we wanted browsers\nto interpret the file at the top of each file. Netscape and Internet Explorer\nwould look for this declaration and handle the content differently depending on\nwhat it found. These days, every current browser is compatible with HTML5, and\n<code>DOCTYPE</code> is mainly used to tell the browser to render the page in standards\ncompliant mode.</p>\n\n<p>The <code>DOCTYPE</code> element, as with all HTML, starts with a <code>&lt;</code> and ends with a <code>&gt;</code>.\nUniquely, the <code>DOCTYPE</code> tag starts with an exclamation point, <code>!</code>, followed by\n<code>DOCTYPE</code>, then specifies which version of HTML we want to use. In HTML5, we\njust write <code>html</code> and the browser interprets the rest of the document as HTML5.</p>\n\n<h3><code>&lt;html&gt;</code></h3>\n\n<p>The next element is also always required: <code>&lt;html&gt;</code>. This tells the browser that\neverything that falls between the opening and closing <code>html</code> tags is to be\ninterpreted as HTML code.</p>\n\n<p>One attribute that is important to include in the <code>&lt;html&gt;</code> tag is <code>lang</code>, which\ndeclares what language the webpage is written in. In our case, writing in\nEnglish, we will use <code>lang=\"en\"</code>. This helps search engines to know what\nlanguage a page is written in. Google, for instance, can use the <code>lang</code>\nattribute to know when to prompt users about translating web content.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;&lt;/html&gt;</span>\n</code></pre></div>\n<p>Go ahead and add the language attribute to the <code>html</code> element. Now, if you run\nthe tests again, there should be four passing.</p>\n\n<h2>Recognize HTML Comments</h2>\n\n<p>Sometimes we want to leave notes either for ourselves or for other developers\ninside of our HTML files. An example might be a brief explanation of what some\npart of the code is doing, or an important message or reminder. We can write\ncomments by wrapping the text we want like so:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"c\">&lt;!-- This is a comment! --&gt;</span>\n</code></pre></div>\n<p>Text included in a comment will not be visible on the webpage, but will be\nvisible in the browser console and <code>.html</code> file.</p>\n\n<h2>Describe the <code>head</code> Section and its Contents</h2>\n\n<p>Inside our <code>html</code> tags, we divide the page into two main sections, <code>head</code>, and\n<code>body</code>, which both play unique roles. The remainder of our HTML lessons will\ncover everything within the <code>body</code> section, but before we get there, there are\nsome additional bits of information we need to understand regarding the <code>head</code>.\nThe <code>head</code> section is not visible to a website visitor, but it contains a lot of\nuseful info about our webpage.</p>\n\n<p>In the <code>head</code> section, we place a number of specific tags, most notably:</p>\n\n<ul>\n<li><code>&lt;link&gt;</code></li>\n<li><code>&lt;title&gt;</code></li>\n</ul>\n\n<p>Let's look at each of them in turn:</p>\n\n<h3><code>link</code></h3>\n\n<p>The <code>&lt;link&gt;</code> tag is for importing files.</p>\n\n<p><strong>CAREFUL</strong>: It's easy to get confused here because web pages are full of links,\nbut also use a <code>&lt;link&gt;</code> tag. \"Links\" that you click on are located within the\n<code>&lt;body&gt;</code> element. The <code>&lt;link&gt;</code> tags are located in the <code>&lt;head&gt;</code> element.</p>\n\n<p>Most commonly, we'll use <code>&lt;link&gt;</code> to import CSS files. Go ahead and add the\nfollowing inside your <code>head</code> element (don't forget to indent!):</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span> <span class=\"na\">href=</span><span class=\"s\">\"style.css\"</span> <span class=\"nt\">&gt;</span>\n</code></pre></div>\n<p>With a simple website, linking a single style sheet might work just fine. Often,\nhowever, on fully developed websites, multiple style sheets are linked in the\n<code>head</code>. For example, when doing the final polishing of a web site you might see\na series of <code>&lt;link&gt;</code> definitions like:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;link</span>\n  <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span>\n  <span class=\"na\">href=</span><span class=\"s\">\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"</span>\n<span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span> <span class=\"na\">href=</span><span class=\"s\">\"company.css\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span> <span class=\"na\">href=</span><span class=\"s\">\"engineering-department.css\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span> <span class=\"na\">href=</span><span class=\"s\">\"project-x-launch.css\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span> <span class=\"na\">href=</span><span class=\"s\">\"typography.css\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>In this example we're getting some CSS information from the\n<a href=\"https://getbootstrap.com/\">Bootstrap</a> project, we're integrating a company\nstyle standard, an engineering style standard, a style motif for the launch of\n\"Project X\" and then we're adding some specific rules about font display. You\ncan bring in a <strong>lot</strong> of information with the <code>&lt;link&gt;</code> tag!</p>\n\n<p>This specific example aside, you'll be learning a lot more about linking files\nto create stylistic effect in later lessons.</p>\n\n<p>Run the test again; you should now have five passing. Only two more to go!</p>\n\n<h3><code>title</code></h3>\n\n<p>One more common tag we find in the <code>head</code> is <code>title</code>. The <code>title</code>, as its name\nimplies, is where the title of the webpage should be entered. Text added inside\nthe <code>title</code> tags will appear up on your browser tab. Add the following title for\nour <code>index.html</code> page:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;title&gt;</span>My Site Title<span class=\"nt\">&lt;/title&gt;</span>\n</code></pre></div>\n<p>Notice that unlike the previous tags we've discussed, <code>title</code> has an opening and\nclosing tag. In most modern browsers, tabs are fairly small, so it is often best\nto keep the title brief, or it will not be fully visible.</p>\n\n<p>Adding the title should get the last two tests passing! Run the tests one last\ntime to verify.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we've reviewed the basics of document structure, as well as what\nis typically contained within the <code>head</code>. Using the <code>head</code> section, we are able\nto add relevant data about our webpage as a whole. As a bonus surprise, by\nlearning how to make our web pages <em>search engine friendly</em>, we've also dabbled\na bit into the basics of Search Engine Optimization! We are now ready to take a\ndeeper dive into the visual content of HTML pages.</p>",
			"exportId": "g0446a41dc5084735d828693bc74d221b"
		},
		{
			"id": 432878,
			"title": "Your First HTML Tag Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-tag-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Code an <code>h1</code> tag</li>\n<li>Set the inner text of the <code>h1</code> to <code>Hello, World!</code>\n</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>So far, we've seen how to markup content with HTML, how to structure an HTML\ndocument and what HTML tags look like. Now let's focus on writing a single HTML\ntag from scratch and examining each of its parts.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode. Run <code>learn test</code> as you go to see your test progress.</p>\n\n<h2>Code an <code>h1</code> Tag</h2>\n\n<p>Open <code>index.html</code> in your text editor. Add the <code>h1</code> opening and closing tags.</p>\n\n<h2>Set the Inner Text</h2>\n\n<p>Inside of the opening and closing <code>h1</code> tags, insert the text: <code>Hello, World!</code>.</p>\n\n<p>Check your progress by running <code>learn test</code>. Failing tests will provide helpful\nerror messages that you can use to debug your code — read them closely for\nhints!</p>\n\n<h3>Viewing Your Work in the Browser</h3>\n\n<p>While working through these assignments, your general workflow should center on\nwriting code in the text editor and periodically running the test suite in the\nterminal to check your work.</p>\n\n<p>Another great way to track your progress is to open up the HTML document in your\nbrowser and watch how each change you make in the text editor affects the visual\nlayout in the browser.</p>\n\n<p>You can open <code>index.html</code> a few ways, depending on the environment you are in:</p>\n\n<p>For Mac users:</p>\n\n<ul>\n<li>Open from the Terminal by running <code>open index.html</code> in the root directory of\nthis lab</li>\n<li>Use Finder to navigate to this lab's local folder and click the <code>index.html</code>\nfile</li>\n</ul>\n\n<p>For WSL users:</p>\n\n<ul>\n<li>Open from Ubuntu by running <code>explorer.exe index.html</code> in the root directory of\nthis lab</li>\n<li>Open a new Explorer window. There is a bar that says \"Quick Access\" along the\ntop of the window (similar to a URL bar in a browser). Click this and type\n<code>\\\\wsl$</code> to access files and folders on Ubuntu. Navigate to\n<code>/home/&lt;your-user-name&gt;/</code> to get to your home directory, then locate this\nlab's local folder and click the <code>index.html</code> file.</li>\n</ul>\n\n<p>Once you have the HTML document open in your browser, you can make changes to it\nin a text editor, save the file, refresh the page in the browser, and see the\nchanges.</p>\n\n<h2>Conclusion</h2>\n\n<p>Congratulations! You wrote your first HTML tag. Now you can use your knowledge\nof this basic building block to learn more HTML tags and see how they work with\neach other to create an entire HTML document structure.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://www.w3schools.com/tags/tag_hn.asp\">h1-h6 Tags</a></li>\n<li>\n<a href=\"https://www.youtube.com/watch?v=Jc0HIoTLxe4\">Solving the First HTML Lab</a> (If\nyou're stuck, here's a video walk-through of the lab to help you out.)</li>\n</ul>",
			"exportId": "g86fcf09aaa6a5027cc10f5ef9f2b9328"
		},
		{
			"id": 432880,
			"title": "Nested HTML Tags And Attributes",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-nested-html-tags-and-attributes\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-nested-html-tags-and-attributes\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-nested-html-tags-and-attributes/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Assess HTML document structure</li>\n<li>Identify HTML tag attributes and their purposes</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>When you take a look at an entire HTML document, it's sometimes challenging to\nkeep track of where tags begin and end. But understanding more about HTML tag\nnesting and attributes can help everything fall into place.</p>\n\n<h2>Assess HTML Document Structure</h2>\n\n<p>Whenever we nest an HTML tag inside of another tag, we indent the inner tag so\nthat the overall tag hierarchy is clear. Take a look at the following example of\na well-structured HTML document.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Web development course<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;header&gt;</span>\n    <span class=\"c\">&lt;!-- header element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header --&gt;</span>\n\n      <span class=\"nt\">&lt;nav</span> <span class=\"na\">id=</span><span class=\"s\">\"main-navigation\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"c\">&lt;!-- nav element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav --&gt;</span>\n\n        <span class=\"nt\">&lt;ul&gt;</span>\n        <span class=\"c\">&lt;!-- ul element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul --&gt;</span>\n\n          <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/web\"</span><span class=\"nt\">&gt;</span>Introduction to the web<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n          <span class=\"c\">&lt;!-- li element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li --&gt;</span>\n\n          <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/html\"</span><span class=\"nt\">&gt;</span>Learn HTML<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n        <span class=\"nt\">&lt;/ul&gt;</span>\n      <span class=\"nt\">&lt;/nav&gt;</span>\n    <span class=\"nt\">&lt;/header&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n<p>Keeping your HTML well indented so that every tag and \"level\" of nesting is\naligned will make your code easier to read and maintain.</p>\n\n<h2>Identify HTML Tag Attributes and Their Purposes</h2>\n\n<p>An HTML attribute is extra information we can add to a tag to identify,\nclassify, style or modify the default behavior of the element the tag contains.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;element</span> <span class=\"na\">attribute_name=</span><span class=\"s\">\"attribute_value\"</span> <span class=\"na\">another_attribute_name=</span><span class=\"s\">\"another_attribute_value\"</span><span class=\"nt\">&gt;&lt;/element&gt;</span>\n</code></pre></div>\n<p>A common use case for HTML attributes is element identification (<code>id</code>\nattribute) and/or classification (<code>class</code> attribute). The <code>id</code> attribute is used\nto uniquely identify an element within the whole document. The <code>class</code> attribute\nis used to group together similar elements.</p>\n\n<p>Both <code>&lt;id&gt;</code> and <code>&lt;class&gt;</code> attributes are often used for styling purposes since\nthey allow us to find a specific element or style similar elements with a\nsingle style declaration.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;p</span> <span class=\"na\">id=</span><span class=\"s\">'main_paragraph'</span><span class=\"nt\">&gt;</span>This element can be uniquely identified  using the 'main_paragraph' id HTML attribute<span class=\"nt\">&lt;/p&gt;</span>\n\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">'other_paragraphs'</span><span class=\"nt\">&gt;</span>This element belongs to a group of elements who share the 'other_paragraphs' HTML class attribute<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">'other_paragraphs'</span><span class=\"nt\">&gt;</span>This element also belongs to a group of elements who share the 'other_paragraphs' HTML class attribute<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div>\n<p>Attributes that identify or classify are not necessary for the HTML\ntag to work as intended, but other attributes <em>are</em> — for example, an <code>a</code> tag,\nwhich links a piece of text to another location on our own web page or another\nweb page.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://flatironschool.com/\"</span><span class=\"nt\">&gt;</span>Flatiron School<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div>\n<p>Here we use the <code>href</code> attribute to tell the HTML tag where the destination of\nthe linked text should be. Without this information, our link won't work and we\nwon't be able to send more people to the Flatiron School website. Certain\nattributes go hand in hand with certain HTML tags, and as you learn the tags,\nyou'll learn their attributes.</p>\n\n<h2>Conclusion</h2>\n\n<p>We use nesting to keep the elements of our HTML document organized, and we use\nattributes to give our elements more power. With these strategies, we can\nconstruct a solid HTML structure that serves as a foundation for anything else\nwe want to build.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://www.thoughtco.com/nesting-html-tags-3466475\">Nested Tags</a></li>\n<li><a href=\"http://www.iraqtimeline.com/maxdesign/basicdesign/principles/prinnest.html\">Best Practices Web Design</a></li>\n<li><a href=\"https://www.w3schools.com/html/html_attributes.asp\">HTML Attributes</a></li>\n<li><a href=\"https://www.tutorialspoint.com/html/html_attributes.htm\">Attributes</a></li>\n</ul>",
			"exportId": "nested-html-tags-and-attributes"
		},
		{
			"id": 432882,
			"title": "Create a Link Using the href Attribute",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-link-tag-with-href\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Write an <code>a</code> tag to create a link</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We've got our HTML tags, and we've got our HTML tag attributes. How do we use\nthem together? We can figure it out by exploring the <code>a</code> tag and creating a\nlink.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode.</p>\n\n<h2>Write an <code>a</code> Tag to Create a Link</h2>\n\n<p>Open <code>index.html</code> in your text editor. Add an <code>a</code> tag with the inner text (the\ntext between the <code>&lt;a&gt;</code> tag and the <code>&lt;/a&gt;</code> tag) of <code>Flatiron School</code> anywhere in\nthe file. Then set the <code>href</code> attribute of your new link element to\n<code>https://flatironschool.com</code>.</p>\n\n<p>Check your progress by running <code>learn test</code>. Failing tests will provide helpful\nerror messages that you can use to debug your code — read them closely for\nhints!</p>\n\n<p>Don't forget to open the <code>index.html</code> file in your browser so you can see the\nchanges as you go.</p>\n\n<h2>Conclusion</h2>\n\n<p>Here we saw how an attribute helps the <code>a</code> tag do its job, which is to link to\nanother location. Now we can go on to explore some additional HTML tags.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\">Mozilla Developer Network: HTML <code>&lt;a&gt;</code> Tag</a></li>\n</ul>",
			"exportId": "g3c3c269d77c1ec2803430d948491bd29"
		},
		{
			"id": 432884,
			"title": "HTML Elements",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-lists-images-and-links\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-images-and-links\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-images-and-links/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify ordered, unordered and definition lists</li>\n<li>Identify images</li>\n<li>Identify links</li>\n<li>Identify HTML validation tools</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>You might be wondering what else is available to use to build out full webpages\nnow that you are more familiar with the basics of HTML. How do you display an\nimage? How do you add a formatted list of topics? How do you link page elements\nbeyond text? Now you're ready to explore these fundamental tools. Here's a\nhigh-level overview before you dive into practicing with the labs.</p>\n\n<h3>Identify Ordered, Unordered and Definition Lists</h3>\n\n<p>When we want to present a list of items in a clear, readable format, we turn to\nthe HTML unordered list, represented by the <code>ul</code> tag.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>One item<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Another item<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</code></pre></div>\n<p>Here is how the HTML above looks when rendered in the browser:</p>\n\n<ul>\n  <li>One item</li>\n  <li>Another item</li>\n</ul>\n\n<p>If it's important to distinguish a particular order of the items (as for a\nrecipe or ranking), we use an ordered list, or the <code>ol</code> tag.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;ol&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>First item<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Second item<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ol&gt;</span>\n</code></pre></div>\n<p>Here is how the HTML above looks when rendered in the browser:</p>\n\n<ol>\n  <li>First item</li>\n  <li>Second item</li>\n</ol>\n\n<p>Notice the nesting of our items within the lists. Each <code>li</code> is a list item\ncontained in the larger <code>ul</code> or <code>ol</code> container.</p>\n\n<p>Another type of list we can use is a definition list, which defines specific\ntypes of items.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;dl&gt;</span>\n  <span class=\"nt\">&lt;dt&gt;</span>First term<span class=\"nt\">&lt;/dt&gt;</span>\n  <span class=\"nt\">&lt;dd&gt;</span>Term definition<span class=\"nt\">&lt;/dd&gt;</span>\n<span class=\"nt\">&lt;/dl&gt;</span>\n</code></pre></div>\n<p>Here is how the HTML above looks when rendered in the browser:</p>\n\n<dl>\n  <dt>First term</dt>\n  <dd>Term definition</dd>\n</dl>\n\n<h3>Identify Images</h3>\n\n<p>To include an image in our page, we use an <code>img</code> tag.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span>\n  <span class=\"na\">src=</span><span class=\"s\">\"https://via.placeholder.com/800x600.png\"</span>\n  <span class=\"na\">alt=</span><span class=\"s\">\"Alternative Text\"</span>\n  <span class=\"na\">title=</span><span class=\"s\">\"Display Title\"</span>\n  <span class=\"na\">width=</span><span class=\"s\">\"800\"</span>\n  <span class=\"na\">height=</span><span class=\"s\">\"600\"</span>\n<span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>There are two notable things about the <code>img</code> tag: The first is that it does not\nhave a closing tag. The image tag closes itself. Secondly, it handles a lot of\n<em>attributes</em>. Attributes are special keywords used on the tag to control the\nelement's behavior, or provide additional information about the HTML element.</p>\n\n<p>The <code>alt</code> attribute provides descriptive text the browser can display if it\ncan't find the image file. The browser can also display the <code>title</code> text to give\nthe user more information about the image. The <code>width</code> and <code>height</code> attributes\ndefine the size of the image that shows up in the browser.</p>\n\n<p>Here is how the image element above looks when rendered in the browser:</p>\n\n<p><img src=\"https://via.placeholder.com/800x600.png\" alt=\"Alternative Text\" title=\"Display Title\" width=\"800\" height=\"600\"></p>\n\n<h3>Identify Links</h3>\n\n<p>You might be familiar with basic link structure already, but here are other ways\nwe can use them.</p>\n\n<p>Beginning with a standard text hyperlink, we can wrap other elements inside of them.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"http://example.com/\"</span><span class=\"nt\">&gt;</span>This is a link<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div>\n<p>Here is how the HTML above looks when rendered in the browser:</p>\n\n<p><a href=\"http://example.com/\">This is a link</a></p>\n\n<p>What if we want to link an image instead of text? We can replace the text within\nthe <code>a</code> tags with our image tag.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"http://example.com/\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"https://via.placeholder.com/800x600.png\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"Alternative Text\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div>\n<p>Here is how the HTML above looks when rendered in the browser:</p>\n\n<p><a href=\"http://example.com/\">\n  <img src=\"https://via.placeholder.com/800x600.png\" alt=\"Alternative Text\">\n</a></p>\n\n<p>What about a link that will direct to an email address?</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"mailto:webmaster@example.com\"</span><span class=\"nt\">&gt;</span>Send an email<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div>\n<p>Here is how the HTML above looks when rendered in the browser:</p>\n\n<p><a href=\"mailto:webmaster@example.com\">Send an email</a></p>\n\n<p>Sometimes we might want to link to a specific location on the same\nwebpage. We can then target an element that we identified or classified earlier.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;p</span> <span class=\"na\">id=</span><span class=\"s\">\"tips\"</span><span class=\"nt\">&gt;</span>Useful Tips Section<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#tips\"</span><span class=\"nt\">&gt;</span>Jump to the Useful Tips Section<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div>\n<p>Here is how the HTML above looks when rendered in the browser:</p>\n\n<p id=\"tips\">Useful Tips Section</p>\n\n<p><a href=\"#tips\">Jump to the Useful Tips Section</a></p>\n\n<p>When considering what location links point to, you will choose between relative\nor absolute links. A relative link directs to content within the same website.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"about.html\"</span><span class=\"nt\">&gt;</span>This is a relative URL link<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div>\n<p>Here is how the HTML above looks when rendered in the browser:</p>\n\n<p><a href=\"about.html\">This is a relative URL link</a></p>\n\n<p>An absolute link, on the other hand, links to external content and requires a\nfully defined URL path. This is likely the type of link you see most often.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"http://example.com/\"</span><span class=\"nt\">&gt;</span>This is an absolute URL link<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div>\n<p>Here is how the HTML above looks when rendered in the browser:</p>\n\n<p><a href=\"http://example.com/\">This is an absolute URL link</a></p>\n\n<h3>Identify HTML validation tools</h3>\n\n<p>An HTML validator is used to check HTML markup elements for syntax errors.\nSyntax errors, such as open tags, extra spaces, or forgotten quotation marks,\ncan cause a web page to look drastically different than the creator intended, or\nrender correctly in one browser, but not in another.</p>\n\n<p>It's easy to forget a closing HTML tag or miss a piece of punctuation when\nwriting HTML. Fortunately, we have a tool that will check our markup for us and\npoint out any errors. To validate our HTML, we can use the\n<a href=\"http://validator.w3.org\">W3 HTML validator</a>.</p>\n\n<h2>Conclusion</h2>\n\n<p>Now that you've taken a first look at these new HTML elements, you'll be better\nprepared to practice them in labs, where you'll learn more about each one and\nhow to use it effectively.</p>",
			"exportId": "html-elements"
		},
		{
			"id": 432886,
			"title": "HTML Lists",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-lists-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Recognize unordered and ordered HTML Lists</li>\n<li>Create unordered lists</li>\n<li>Identify the ordered list tag</li>\n<li>Create ordered lists</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Many HTML tags behave in unique ways. Some apply automatic styling, like <code>p</code>\ntags that create margins around text. Some, like the header tags, increase the\nfont size. Using these tags delineates our content. When reading HTML, using the\ncorrect tags informs us of what the content's purpose is. If we see an <code>h1</code> tag,\nwe know that we're looking at a <em>big</em> page header. In this lesson, we're going\nto be looking at a few new tags that help us organize <em>lists</em> of related\ncontent.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode.</p>\n\n<h2>Recognize Unordered And Ordered HTML Lists</h2>\n\n<p>Let's say, for instance, we were building a personal website and wanted to list\nout our favorite foods. We <em>could</em> write this like so:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>Bahn Mi<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>Grilled Cheese<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>Baba Ghanoush<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>Tomato soup<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>Cheese and crackers<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>Sushi<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n</code></pre></div>\n<p>The above would create a new line on the page for each food, but doesn't really\nindicate that these things are related. Using the built in <code>ul</code>, <code>ol</code> and <code>li</code>\nHTML tags however, we can group related list content together. We call such a\ngrouping a \"list.\"</p>\n\n<p>In HTML, we create lists using the <code>&lt;ul&gt;</code> tag, which stands for <em>unordered\nlist</em>, along with the <code>&lt;li&gt;</code> tag for each <em>list item</em>.</p>\n\n<p>To make a list, we write out the opening and closing <code>&lt;ul&gt;</code> tags, and inside\nthem, we'll add <code>&lt;li&gt;</code> tags, each listing a single item. Going back to our\nfavorite foods example, if we wanted to convert it to a list, it would look like\nthis:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Bahn Mi<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Grilled Cheese<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Baba Ghanoush<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Tomato soup<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Za’atar Bread<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Sushi<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</code></pre></div>\n<p>Now, instead of just having each item show up on a new line, the content will\nalso be slightly indented and a bullet will appear next to each of them.</p>\n\n<p>Lists are very flexible and we can even nest lists <em>inside</em> of lists. Say we\nwanted to break down our favorite foods by category. We may have multiple\ncategories and one or more items in <em>each</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\n    Sandwiches\n    <span class=\"nt\">&lt;ul&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>Bahn Mi<span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>Grilled Cheese<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\n    Snacks\n    <span class=\"nt\">&lt;ul&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>Baba Ghanoush<span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>Za’atar Bread<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\n    Soups\n    <span class=\"nt\">&lt;ul&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>Tomato soup<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>\n    Sushi\n    <span class=\"nt\">&lt;ul&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>Sashimi<span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>Uramaki<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ul&gt;</span>\n</code></pre></div>\n<p>In this example, the nested lists will now be <em>further</em> indented and instead of\na solid bullet, they will appear with hollow bullets, indicating a sub-list.\nAdding a nested list one level deeper will make <em>square</em> bullets appear,\nallowing us to easily display related and nested content in a readable format.</p>\n\n<h2>Create Unordered Lists</h2>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/html_lists_lab.png\" alt=\"recipe list\"></p>\n\n<p>The first part of this challenge is to make the first 2 tests pass by:</p>\n\n<ol>\n<li>Creating an unordered list</li>\n<li>Nesting each grilled cheese ingredient as a list item wrapped in <code>&lt;li&gt;</code> tags</li>\n</ol>\n\n<p>Open <code>index.html</code> in your browser.</p>\n\n<p>Let's say we wanted to list out the ingredients required for making a grilled\ncheese sandwich. The ingredients are: <code>2 slices of bread</code>, <code>4 slices of cheese</code>,\n<code>1 tbsp of butter</code>.</p>\n\n<p>For the first part of this challenge, in <code>index.html</code>, create an unordered list\nthat displays these ingredients. Run <code>learn test</code> to see if you can pass the first\ntest. If you've done things correctly, you'll now be passing the first test, but\nthere are more tests to pass! We now need to turn our attention to the next\ntest.</p>\n\n<p>Okay, now, let's say we wanted to make our grilled cheese a little more exciting\nand add a couple of cheeses, <code>cheddar</code>, <code>mozzarella</code>, and <code>pepper jack</code>.</p>\n\n<p>To pass the second test, <strong>inside</strong> the <code>li</code> with <code>4 slices of cheese</code>, add a\n<strong>nested</strong> unordered list that lists out the three types of cheese.</p>\n\n<p>After editing your <code>index.html</code> file, go back to the browser and refresh the\npage you opened earlier. You should see something like this if you've set up\nyour lists correctly:</p>\n\n<ul>\n<li>2 slices of bread</li>\n<li>4 slices of cheese\n\n<ul>\n<li>cheddar</li>\n<li>mozzarella</li>\n<li>pepper jack</li>\n</ul>\n</li>\n<li>1 tbsp of butter</li>\n</ul>\n\n<p>Run <code>learn test</code> again. If your first two tests are passing, great! It's time to\ntalk about another type of list!</p>\n\n<h2>Identify the Ordered List Tag</h2>\n\n<p>Unordered lists are great for organizing related content where it doesn't matter\nwhat goes first, like in our grilled cheese ingredients. In situations where we\n<em>want</em> items to be displayed in a specific, numbered order, we will want to use\nthe <em>ordered list</em> tag, which is written as <code>&lt;ol&gt;</code> instead of <code>&lt;ul&gt;</code>. Both use\n<code>&lt;li&gt;</code> tags inside, but this time, <code>&lt;ol&gt;</code> will display a numbered list instead\nof bullets. If say, we wanted to write a <em>ranked</em> list of favorite foods, it\nmight look like:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;h3&gt;</span>Top 5 Favorite Foods<span class=\"nt\">&lt;/h3&gt;</span>\n<span class=\"nt\">&lt;ol&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Grilled Cheese<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Sushi<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Bahn Mi<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Tomato soup<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;li&gt;</span>Baba Ghanoush<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;/ol&gt;</span>\n</code></pre></div>\n<p><strong>Top Tip:</strong> Feel free to test this out by adding it to <code>index.html</code>, saving and\nrefreshing the tab where the file is open. Now, <code>Grilled Cheese</code> will be\ndisplayed as <code>1. Grilled Cheese</code> as the #1 food (where it belongs).</p>\n\n<p>Once you've got a feel for how this ordered list looks in HTML and how it's\ndisplayed in the browser, delete the example code from your <code>index.html</code> file so\nyou can create a new one from scratch for the next deliverable.</p>\n\n<p>Nested ordered lists work the same as unordered, but instead of hollow and\nsquare bullets, each nested list will still display numbers.</p>\n\n<p><strong>Note:</strong> To create a nested list, you <em>must</em> provide the <code>ol</code> or <code>ul</code> wrapper.\nOtherwise, an <code>li</code> inside another <code>li</code> will just be displayed as two items at\nthe same level.</p>\n\n<h2>Create Ordered Lists</h2>\n\n<p>To complete the challenge write the necessary HTML to pass the final test:</p>\n\n<ul>\n<li>Create an ordered list with each step for creating grilled cheese as a list\nitem wrapped in <code>&lt;li&gt;</code> tags</li>\n</ul>\n\n<p>Okay, so we've got our grilled cheese ingredients, but what about the steps\nrequired to make a grilled cheese? Steps to a recipe need to be in order,\notherwise we may end up with burnt cheese covered in bread and topped with a\nsquare of butter. The steps to making a basic grilled cheese would be:\n<code>Spread butter on bread and frying pan</code>, <code>Place bread in frying pan and fry</code>,\n<code>Add cheese on top of bread</code>, <code>Cover with second slice of bread</code>,\n<code>Turn over and fry for 2 minutes</code>.</p>\n\n<p>After editing your <code>index.html</code> file, go back to the browser and refresh the\npage you opened earlier. Your newly added list should look like this:</p>\n\n<ol>\n<li>Spread butter on bread and frying pan</li>\n<li>Place bread in frying pan and fry</li>\n<li>Add cheese on top of bread</li>\n<li>Cover with second slice of bread</li>\n<li>Turn over and fry for 2 minutes</li>\n</ol>\n\n<p>Once you've written an ordered list that displays these 5 steps correctly, run\n<code>learn test</code> to see the tests pass.</p>\n\n<h2>Conclusion</h2>\n\n<p>Lists in HTML are very useful for organizing related content, and are really the\nonly way to indicate that content is related with basic HTML. Using unordered\nlists ends up being very useful for more than just listing favorite foods and\ningredients. It's possible, for instance, to use list elements to organize\nnavigation links. With styling, we make the content look however we want —\nremove the bullets, make them line up horizontally — but in our HTML they will\nstill be organized and easy to read.</p>",
			"exportId": "g72e9496391e474d41ed6c0ba60d8939b"
		},
		{
			"id": 432888,
			"title": "HTML Tables",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-tables-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Recognize basic HTML table elements</li>\n<li>Create HTML tables</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In HTML, we can create lists of related content using unordered and ordered\nlists, and they will display line by line in the order we put them in. Sometimes\nas web developers, though, we need to display more complex data. For instance,\nimagine you are working with a financial company and need to display a\ncollection of transactions, each with a title, value, time, and category. Or,\nimagine that you've been hired by a marketing company and need to display a list\nof the <a href=\"https://en.wikipedia.org/wiki/List_of_most-followed_Instagram_accounts\">most popular Instagram accounts</a>, each with their username, the\nowner of the account, and the number of followers. For sets of data like this,\nwith many separate components, the best way to display would be to put the data\ninto a <em>table</em>.</p>\n\n<p>HTML has a built in way to display tables! In this lesson, we will be reviewing\nhow tables work and how to make our own.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode.</p>\n\n<h2>Recognize Basic HTML Table Elements</h2>\n\n<h3>The Table Tag: <code>&lt;table&gt;</code>\n</h3>\n\n<p>The first thing we need in order to create a table is to write opening and\nclosing <code>&lt;table&gt;</code> tags.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;table&gt;&lt;/table&gt;</span>\n</code></pre></div>\n<p>This tells our browser to interpret anything inside as part of the table. What\nmakes up a table, exactly? A table has rows and columns, which together create\nindividual cells, as well as headers to label what each column is for.</p>\n\n<p>In HTML, we define these table components using individual elements that we nest\ninside our <code>table</code> tags.</p>\n\n<h3>The Table Row Tag: <code>&lt;tr&gt;</code>\n</h3>\n\n<p>It's important to note: order really matters when building a table in HTML!\nWe're trying to display a two-dimensional table, but browsers interpret HTML\n<em>line by line</em>. For this reason, HTML tables were designed so that there is no\ntag for <em>columns</em>, only <em>rows</em>. If you were creating a table with 5 rows and 5\ncolumns, in designing the table, we would actually have to create 5 <em>rows</em>, each\nwith 5 individual <em>cells</em> inside. When displayed, the cells in each row will\nline up to <em>look</em> like columns.</p>\n\n<p>Table rows always come first. To make a row inside our table, we use the <em>table\nrow</em> tag, <code>&lt;tr&gt;</code>. So if we wanted to have four rows in our table, including a\nrow of headers, setting up the rows it would look like this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;table&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;&lt;/tr&gt;</span>\n<span class=\"nt\">&lt;/table&gt;</span>\n</code></pre></div>\n<p>Any content we want in a row would go inside that particular <code>&lt;tr&gt;</code>.</p>\n\n<h3>The Table Header Tag: <code>&lt;th&gt;</code>\n</h3>\n\n<p>Tables generally start with a row of headers to label each column, so the first\n<code>tr</code> tag we write will be dedicated to these headers.</p>\n\n<p>To create headers, we use <code>&lt;th&gt;</code>, the <em>table header</em> tag. Let's say we were\ncreating a list of guests to a party. The first column might have a header\ncalled 'Name' for the guest's name, the second, the guest's 'Phone Number', and\nthe third, what the guest is 'Bringing' to the party.</p>\n\n<p>These headers need to go in the first row, so that may look something like:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;table&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;</span>\n    <span class=\"nt\">&lt;th&gt;</span>Name<span class=\"nt\">&lt;/th&gt;</span>\n    <span class=\"nt\">&lt;th&gt;</span>Phone Number<span class=\"nt\">&lt;/th&gt;</span>\n    <span class=\"nt\">&lt;th&gt;</span>Bringing<span class=\"nt\">&lt;/th&gt;</span>\n  <span class=\"nt\">&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;&lt;/tr&gt;</span>\n<span class=\"nt\">&lt;/table&gt;</span>\n</code></pre></div>\n<p>Even though we write the HTML from top down, we would see these headers in bold\nand lined up <em>left to right</em>. We can open up <code>index.html</code> right now to take a\nlook to confirm.</p>\n\n<p>This first row is almost always the only place where we use the <code>th</code> tag.</p>\n\n<h3>The Table Data Tag: <code>&lt;td&gt;</code>\n</h3>\n\n<p>In the second row, we can start putting in our data. Here, we want to use the\n<em>table data</em> tag, <code>&lt;td&gt;</code> instead of using the <em>table header</em> tag. The <code>&lt;td&gt;</code> tag\nrepresents one table cell. So, for our party table, we can add in some names,\nphone numbers and items for guests to bring. An example row would look like the\nfollowing:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;tr&gt;</span>\n  <span class=\"nt\">&lt;td&gt;</span>Daniel<span class=\"nt\">&lt;/td&gt;</span>\n  <span class=\"nt\">&lt;td&gt;</span>845-282-4000<span class=\"nt\">&lt;/td&gt;</span>\n  <span class=\"nt\">&lt;td&gt;</span>Guacamole<span class=\"nt\">&lt;/td&gt;</span>\n<span class=\"nt\">&lt;/tr&gt;</span>\n</code></pre></div>\n<p>As long as each bit of data in a <code>&lt;td&gt;</code> is in the <em>same position</em> as the\ncorresponding <code>&lt;th&gt;</code> in the first row, it will show up in that column.</p>\n\n<p>Repeating this structure, if we wanted to include 3 guests for our party, our\nentire table would look like the following:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;table&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;</span>\n    <span class=\"nt\">&lt;th&gt;</span>Name<span class=\"nt\">&lt;/th&gt;</span>\n    <span class=\"nt\">&lt;th&gt;</span>Phone Number<span class=\"nt\">&lt;/th&gt;</span>\n    <span class=\"nt\">&lt;th&gt;</span>Bringing<span class=\"nt\">&lt;/th&gt;</span>\n  <span class=\"nt\">&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;</span>\n    <span class=\"nt\">&lt;td&gt;</span>Daniel<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;td&gt;</span>718-555-1212<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;td&gt;</span>Guacamole<span class=\"nt\">&lt;/td&gt;</span>\n  <span class=\"nt\">&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;</span>\n    <span class=\"nt\">&lt;td&gt;</span>Rachel<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;td&gt;</span>718-555-1212<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;td&gt;</span>Chips<span class=\"nt\">&lt;/td&gt;</span>\n  <span class=\"nt\">&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;tr&gt;</span>\n    <span class=\"nt\">&lt;td&gt;</span>Terrance<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;td&gt;</span>914-555-1212<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;td&gt;</span>Salsa<span class=\"nt\">&lt;/td&gt;</span>\n  <span class=\"nt\">&lt;/tr&gt;</span>\n<span class=\"nt\">&lt;/table&gt;</span>\n</code></pre></div>\n<p>Paste this into <code>index.html</code> and take a look at how it is displayed in browser.\nYou'll see we've got a table with 4 rows and 3 columns! Each \"column\" of content\nexpands to fit the width of the content. It should look something like this:</p>\n\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Phone Number</th>\n<th>Bringing</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Daniel</td>\n<td>718-555-1212</td>\n<td>Guacamole</td>\n</tr>\n<tr>\n<td>Rachel</td>\n<td>718-555-1212</td>\n<td>Chips</td>\n</tr>\n<tr>\n<td>Terrance</td>\n<td>914-555-1212</td>\n<td>Salsa</td>\n</tr>\n</tbody>\n</table>\n\n<h2>Create HTML Tables</h2>\n\n<p>Okay, now it's time to put what we've learned to the test. For this challenge,\nyour task is to recreate a table using the following data:</p>\n\n<p><img src=\"https://s3.amazonaws.com/ironboard-learn/us_cities_by_population.png\" alt=\"cities by population\"></p>\n\n<p>The above table shows total population of the 4 biggest cities in the US. We can\nsee there are 3 headers, \"City\", \"State\", and \"2017 estimate\", and data for each\nof the four cities.</p>\n\n<p>To complete this task, follow the order of table creation we discussed earlier:</p>\n\n<ol>\n<li>Create a <code>table</code>, and place rows inside,</li>\n<li>Dedicate the first row to just headers</li>\n<li>Add in the data in the appropriate order so that each city name falls under\nthe \"City\" column, each state is under \"State\", etc...</li>\n</ol>\n\n<p>Run <code>learn test</code> to test your work and see your progress. The tests also include\nthe exact population numbers, so feel free to copy them from the errors!</p>\n\n<h2>Conclusion</h2>\n\n<p>With <code>table</code>, <code>tr</code>, <code>th</code> and <code>td</code>, we are able to turn line by line HTML into a\ntable with rows and columns! It may seem counterintuitive at first to list out\nrow content separately, but with this, you can represent all sorts of data!</p>",
			"exportId": "g49c68fcd4731da0705b5a708f0122682"
		},
		{
			"id": 432890,
			"title": "HTML Images",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-images-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Recognize the <code>img</code> tag</li>\n<li>Use <code>img</code> tag attributes</li>\n<li>Create images</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Images are absolutely critical to making appealing and engaging websites. Can\nyou imagine the web without them? No cat memes. No animated dancing bananas! No\n<em>Instagram</em>, at all. The internet would be a pretty boring and sad place!</p>\n\n<p><img src=\"https://s3.amazonaws.com/ironboard-learn/sad_meme.jpg\" alt=\"sad meme\"></p>\n\n<p>In this lesson, we will be discussing how to include images in your HTML, along\nwith some important attributes of the tag. With images, you can make your web\npages much more engaging and visually appealing.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode.</p>\n\n<h2>Recognize the <code>img</code> Tag</h2>\n\n<p>Images are inserted into HTML using the <code>img</code> tag. The tag can display a variety\nof image types, including animated GIFs, bitmaps and vector graphics, though\nmost often, the images we see on the internet are JPEG and PNG files.</p>\n\n<p>The <code>img</code> tag is <em>self closing</em>, meaning it doesn't wrap around content or text.\nInstead, the relevant information is stored in attributes within the tag itself.</p>\n\n<p>There are two main attributes, <code>src</code>, the <em>source</em> of the image, and <code>alt</code>, the\n<em>alternate</em> text.</p>\n\n<h2>Use the <code>img</code> Tag Attributes</h2>\n\n<h3>The Image Source Attribute</h3>\n\n<p>The <code>src</code> attribute provides the relative path or URL to the image file we want\nto display. The image file can be local; for example, if you're publishing a\nwebsite and have your images stored in a folder within your file structure, your\nsource may look like this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"../images/my_company_logo.png\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>However, it's very common, even when publishing your own websites, to have\nimages hosted somewhere else on the internet. In these situations, we need to\nprovide a full URL as the source:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"https://i.imgur.com/H1qsYEl.png\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>The <code>src</code> attribute is always necessary, as without it, the <code>img</code> tag would have\nnothing to display.</p>\n\n<h3>The Image Alt Attribute</h3>\n\n<p>The <code>alt</code> attribute contains text relevant to the image we're displaying, and\nwill appear in its place if the image fails to load.</p>\n\n<p>While it isn't required, it is <strong>highly recommended</strong> that every image includes\nan <code>alt</code> attribute. The <code>alt</code> text is important for screen readers for the\nvisually impaired, as the text will be read out loud to the site visitor. It is\nalso nice to provide some sort of message to a website visitor if the image\nfails to load, especially if the image is relevant to the rest of the content.\nAlt text on a failed image will appear along with a small 'broken image' icon:</p>\n\n<p><img src=\"broken-image.png\" alt=\"Flatiron Logo\"></p>\n\n<p>To include an <code>alt</code> attribute, add it in along with the <code>src</code> attribute:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span>\n  <span class=\"na\">src=</span><span class=\"s\">\"https://i.imgur.com/H1qsYEl.png\"</span>\n  <span class=\"na\">alt=</span><span class=\"s\">\"comedic crow gets wholesome support\"</span>\n<span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<blockquote>\n<p><strong>Note</strong>: When an HTML element gets too long for one line in your text editor,\nit's appropriate to separate out each attribute on its own line as we've done\nabove. This helps make your HTML code more readable.</p>\n</blockquote>\n\n<h3>The Image Title Attribute</h3>\n\n<p>One additional attribute that can be useful is the <code>title</code>. Content added to\nthis attribute will display when we hover over the image with our mouse. If we\nwere creating an <code>img</code> tag with <code>src</code>, <code>alt</code> and <code>title</code> for a company logo, it\nmight look something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span>\n  <span class=\"na\">src=</span><span class=\"s\">\"../images/my_company_logo.png\"</span>\n  <span class=\"na\">alt=</span><span class=\"s\">\"my company name\"</span>\n  <span class=\"na\">title=</span><span class=\"s\">\"We're here to help you!\"</span>\n<span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>When a visitor to your company site hovers over the logo, they'll see a message\nappear saying 'We're here to help you!'</p>\n\n<p>The <code>title</code> attribute isn't necessary and is often left out, but can be a nice\ndetail to include.</p>\n\n<h2>Create Images</h2>\n\n<p>Its time to practice creating some images! For this challenge, feel free to use\nany images you'd like — the tests are looking for the correct tag and\nattributes, not the content. If you're not sure what to use, feel free to use\nthe following URL as your source:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>https://s3.amazonaws.com/ironboard-learn/lion.jpg\n</code></pre></div>\n<p><img src=\"https://s3.amazonaws.com/ironboard-learn/lion.jpg\" alt=\"lion\"></p>\n\n<p>Your challenge is to write <em>three</em> image tags:</p>\n\n<ul>\n<li>The first should have <em>just</em> a <em>source</em> attribute</li>\n<li>The second should include an alt attribute, in addition to a source</li>\n<li>The third should have both an alt and source attribute, as well as a <em>title</em>\nattribute</li>\n</ul>\n\n<p>Run <code>learn test</code> and read the tests as you go.</p>\n\n<h2>Conclusion</h2>\n\n<p>With images, we can fill our web pages with visual content in addition to text.\nBrand logos, animated instructional guides, personal artwork and photography, or\npictures of you and your friends — you now have the ability to create visually\nappealing content of <em>any type!</em></p>",
			"exportId": "g2b87ac8df425112ac2971a57525ce3ed"
		},
		{
			"id": 432892,
			"title": "HTML Validation",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-validation\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-validation\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-validation/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify W3C organization</li>\n<li>Validate sample HTML</li>\n<li>Identify HTML errors</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>You have written a few HTML pages by now. Did you accidentally break nesting and\nput emphasis on a whole page? Or did you type <code>&lt;he&gt;</code> instead of <code>&lt;h3&gt;</code>? How can\nwe guard HTML? Many editors try to catch errors for us, and most browsers are\npretty good at guessing what you meant. But what happens when Windows Edge\nguesses differently than Google Chrome? How can we be certain that our HTML\nmeets standards and is error free? Luckily, the W3C – the people who define the\ntags of HTML – have a validation service we can use. We'll explain the W3C and\ntheir validator in this lesson.</p>\n\n<h2>Identify W3C organization</h2>\n\n<p>The World Wide Web Consortium (W3C) is an international community that develops\nopen standards to ensure the long-term growth of the web. It operates under a\nstrict <a href=\"https://www.w3.org/Consortium/cepc/\">code of ethics and professional\nconduct</a> and provides many <a href=\"https://www.w3.org/developers/tools/\">free\ntools</a> for developers.</p>\n\n<h2>Validate sample HTML</h2>\n\n<p>Take a look at this file: <a href=\"https://curriculum-content.s3.amazonaws.com/web-development/html-validation/example_code.html\"><code>example_code.html</code></a> in a new tab. We'll\ncall this the <strong>viewing tab</strong>. It looks relatively OK, right? There's some\noddness happening with the list at the bottom (we might not have wanted\neverything hyperlinked), and there's an odd bullet point with no content, but\neverything else looks pretty good.</p>\n\n<p>Now let's try validating the code to identify where we went wrong.</p>\n\n<ol>\n<li>In your <strong>viewing tab</strong>, navigate to View → Developer → View Source\n<em>or</em> press Command-Option-U. This will give you the \"Source View\" of the\ndocument</li>\n<li>Select the whole of the HTML contents in the file, and copy them</li>\n<li>In your web browser, open a new tab to <a href=\"https://validator.w3.org/#validate_by_input\">W3C's HTML Validator</a></li>\n<li>If not already selected, select the tab that says \"Validate by Direct Input\"</li>\n<li>Paste all of your copied HTML in the text box labeled \"Enter the Markup to\nvalidate:\"</li>\n<li>Click the button labeled \"Check\"</li>\n</ol>\n\n<p>As you scroll down the page, you should see a list of errors, or invalid HTML.</p>\n\n<h3>What is HTML Validation?</h3>\n\n<p>Like all other programming languages, HTML can contain all kinds of different\nerrors. These can range from missing angle brackets to wrong or missing opening\nor closing tags, unnecessary or missing attributes, and many other issues. Our\nweb browsers are pretty good at filling in the missing pieces but we can't\nalways count on it being the same experience with every one. Tools like W3C's\nHTML Validator can catch these errors and prevent our user from having a poor\nexperience.</p>\n\n<h2>Identifying HTML Errors</h2>\n\n<p>Now that we have a page full of HTML validation errors, how do we start fixing\nthem? There are several parts of the error message that will help us parse the\nerror, and figure out exactly where it is and what we can do to fix it.</p>\n\n<h3>Error Description</h3>\n\n<p>The first line of the error is our error description. This is a narrative that\ngives us a little bit more information about our error.</p>\n\n<p><img src=\"https://s3.amazonaws.com/learn-verified/html-error-description.png\" alt=\"HTMLValidationErrors\"></p>\n\n<p>In this case, it's saying that there was an ending <code>&lt;/h2&gt;</code> tag, but there was a\ndifferent opening tag that came before it.</p>\n\n<h3>Error Location</h3>\n\n<p>The second and third lines of this error give us the exact location of the\nerror, as well as a highlighted snippet of our HTML to help us exactly locate\nwhere the error is.</p>\n\n<p><img src=\"https://s3.amazonaws.com/learn-verified/html-error-location.png\" alt=\"HTMLValidationErrorLocation\"></p>\n\n<p>In this case, it's letting us know that our error is on line 10, from column\n34-38. Line numbers will become very important in troubleshooting errors, in\nJavaScript and CSS as well as HTML. These error messages can serve as a road map\nto us, and help us troubleshoot much more efficiently.</p>\n\n<h3>A Valid HTML Experience</h3>\n\n<p>Now, let's see what a valid HTML file returns.</p>\n\n<ol>\n<li>Open the <a href=\"https://curriculum-content.s3.amazonaws.com/web-development/html-validation/example_code_passing_validation.html\"><code>example_code_passing_validation.html</code></a> file in a new\ntab. This will now be our new <strong>viewing tab</strong></li>\n<li>In your <strong>viewing tab</strong>, navigate View → Developer → View Source\n<em>or</em> press Command-Option-U. This will give you the \"Source View\" of the\ndocument</li>\n<li>Select the whole of the HTML contents in the file, and copy them</li>\n<li>In your web browser, navigate to <a href=\"https://validator.w3.org/#validate_by_input\">W3C's HTML Validator</a> in a new\ntab</li>\n<li>If not already selected, select the tab that says \"Validate by Direct\nInput\"</li>\n<li>Paste all of your copied HTML in the text box labeled \"Enter the Markup to\nvalidate:\"</li>\n<li>Click the button labeled \"Check\"</li>\n</ol>\n\n<p>You should see a green bar denoting that there are no errors or warnings to\nshow.</p>\n\n<p><img src=\"https://s3.amazonaws.com/learn-verified/html-passing-validation.png\" alt=\"HTMLValidationPassed\"></p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://www.w3.org/\">W3C</a></li>\n<li><a href=\"https://validator.w3.org/\">HTML Validation Tool</a></li>\n<li><a href=\"https://validator.w3.org/docs/why.html\">Why Validate?</a></li>\n</ul>",
			"exportId": "html-validation"
		},
		{
			"id": 432894,
			"title": "Expanding Your HTML Vocabulary via MDN",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-expanding-your-html-vocabulary\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-expanding-your-html-vocabulary\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-expanding-your-html-vocabulary/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify the Mozilla Foundation and MDN</li>\n<li>Navigate the MDN Reference Guide</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Because of the pace of change in web technologies, it often feels like as soon\nas you learn something it's already obsolete. How can a developer stay\nup-to-date? Developers need to be able to reference the latest documentation in\na just-in-time fashion.</p>\n\n<p>When you have a question, you should consult the best source, take what you\nneed, and use it. The purpose of this README is to help you get oriented with a\npopular source of HTML documentation, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\">Mozilla Developer Network\n(MDN)</a>.</p>\n\n<h2>Identify the Mozilla Foundation and MDN</h2>\n\n<p>The Mozilla Foundation is an open-source company that has a long history with\nbrowsers and browser technology.</p>\n\n<p>Mozilla is a reliable reference for the latest HTML tags. There are many other\nsites online that exist to discuss these tags, but when you want a thorough\nexplanation of a tag, Mozilla is often a great choice.</p>\n\n<p>There are some drawbacks in using MDN. Because Mozilla is so trusted, their\ninformation tends to be ... <em>exhaustive</em>. Because it's so <em>ahem</em> thorough, it\ncan sometimes be hard to digest. Their information tends to be for <em>reference</em>,\nnot <em>tutorial</em> purposes.</p>\n\n<p>Drawbacks aside, MDN is a good solid starting place for research and it can take\nyou from \"Does something like this exist?\" to \"Now I know that this thing\nexists, maybe I can find a tutorial!\"</p>\n\n<h2>Navigate the MDN Reference Guide</h2>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">MDN HTML Reference Guide</a> is a list of HTML tags\ngrouped together by their functions. These sections are not entirely \"human\nreadable,\" which makes it a bit difficult to understand where to start looking.\nSome of the headings are very technical-sounding.</p>\n\n<p>To help you find what you need in this listing, we've created this helpful table\nto help you convert <strong>between</strong> MDN-ese and the HTML terms you have learned. We've\nalso listed only the MDN content sections that you're most likely to use:</p>\n\n<table><thead>\n<tr>\n<th>MDN Section Title</th>\n<th>Human-Friendly Section Title</th>\n<th>Summary</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>Main Root</td>\n<td>The <code>html</code> tag</td>\n<td><em>The <code>html</code> tag and that's it!</em></td>\n</tr>\n<tr>\n<td>Document metadata</td>\n<td>Website data that goes in the <code>head</code> tag</td>\n<td><em>Metadata contains information about the page. Information about styles, scripts and data to help software (search engines, browsers, etc.) use and render the page.</em></td>\n</tr>\n<tr>\n<td>Sectioning Root</td>\n<td>The <code>body</code> tag</td>\n<td><em>The <code>body</code> tag and that's it!</em></td>\n</tr>\n<tr>\n<td>Content sectioning</td>\n<td>Headings, titles, divs, sections, footers, etc.</td>\n<td><em>Content sectioning elements allow you to organize the document content into logical pieces.</em></td>\n</tr>\n<tr>\n<td>Text content</td>\n<td>Formatting/structure for text: paragraphs, list items, horizontal rules, blockquotes, etc.</td>\n<td><em>Use HTML text content elements to organize blocks or sections of content placed between the opening and closing <code>body</code> tags ... [to] identify the purpose or structure of that content.</em></td>\n</tr>\n<tr>\n<td>Inline text semantics</td>\n<td>Citation, emphasis, underlines, etc.</td>\n<td><em>Use the HTML inline text semantics to define the meaning, structure, or style of a word, line, or any arbitrary piece of text.</em></td>\n</tr>\n<tr>\n<td>Image and multimedia</td>\n<td>Adding pictures and media!</td>\n<td><em>HTML supports various multimedia resources such as images, audio, and video.</em></td>\n</tr>\n<tr>\n<td>Embedded content</td>\n<td>Advanced: Using material hosted elsewhere on other servers, <code>iframe</code> is the biggie here</td>\n<td><em>In addition to regular multimedia content, HTML can include a variety of other content, even if it's not always easy to interact with.</em></td>\n</tr>\n<tr>\n<td>Scripting</td>\n<td>Advanced: JavaScript and Drawing Support (Vector Graphics)</td>\n<td><em>In order to create dynamic content and Web applications, HTML supports the use of scripting languages, most prominently JavaScript. Certain elements support this capability.</em></td>\n</tr>\n<tr>\n<td>Table content</td>\n<td>Tables</td>\n<td><em>Tables</em></td>\n</tr>\n<tr>\n<td>Forms</td>\n<td>Advanced: Tags for building forms for sign-up or login, for example</td>\n<td><em>HTML provides a number of elements that can be used together to create forms which the user can fill out and submit to the Web site or application. There's a great deal of further information about this available in the HTML forms guide.</em></td>\n</tr>\n</tbody></table>\n\n<h2>Conclusion</h2>\n\n<p>As developers, we will often feel uncomfortable with the fact that the\ntechnologies we depend on are always growing and changing. With authoritative\nguides like <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\">MDN</a>, we have found out that we can learn just\nthe little bit we need as we need it.</p>",
			"exportId": "expanding-your-html-vocabulary-via-mdn"
		},
		{
			"id": 432896,
			"title": "Researching HTML Elements",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-researching-html-elements\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-researching-html-elements\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-researching-html-elements/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Use search engines as a resource to find information</li>\n<li>Identify relevant resources</li>\n<li>Compare multiple resources to find the best source</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>When writing HTML you might encounter tags that are new to you. How are we going\nto level-up? When searching for technical help, we have to be careful about\nwhich sources we trust. This is a skill you will build over time, but we'll\nmodel some good practices in this README.</p>\n\n<h2>Use Search Engines as a Resource to Find Information</h2>\n\n<p>Let's say in your research, you come across an unfamiliar HTML element like\n<code>&lt;samp&gt;</code>. We can google <code>samp html element,</code> and we will find an endless list of\nresults to choose from. Sometimes resources can be outdated, biased, or\ninaccurate. It's important to filter through the results to find the best fit.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/web-development/html-element-search.png\" alt=\"html element search\"></p>\n\n<h2>Identify Relevant Resources</h2>\n\n<p>Your instinct might be to open the first result. You should be pickier.\nSometimes the result has \"gamed\" the search engine and unfairly influenced the\nranking. We recommend that you open the top <strong>five</strong> results and review them\ncritically.</p>\n\n<p>We also recommend that you trust sites that are affiliated with building or\ndefining the technologies more than blogs or other resources. In the HTML world,\nthe Mozilla Developer Network (MDN) is an extremely trustworthy site. In fact,\nit's likely the best HTML, JS and CSS documentation source on the internet.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/web-development/samp-mdn-page.png\" alt=\"mdn samp page\"></p>\n\n<h2>Compare Multiple Resources to Find the Best Source</h2>\n\n<p>If we go back to the search results, you'll see that the first result, in this\ncase, is <code>W3schools</code>. A site, like W3schools, for example, can be used as an\nadditional resource for garnering understanding. It even includes interactive\nexamples, creating a sandbox environment for experimentation.</p>\n\n<p>In this case, between MDN and W3schools, you should get a good sense of how to\nuse the <code>&lt;samp&gt;</code> element.</p>\n\n<h2>Conclusion</h2>\n\n<p>The web is a constantly evolving entity. As we build more ambitious products or\nlearn from our collective needs and mistakes, the industry will continually\nupdate the HTML specifications.</p>\n\n<p>Researching referencing documentation can be scary at first, but it's a primary\nskill for developers. Don't be afraid to practice technical searches. It's a\n<em>skill</em> that you will get better at with practice.</p>\n\n<p>Most importantly, don't feel like <em>not knowing everything by heart</em> means you\ncan't be a developer. The greatest developers we know are constantly admitting\nwhat they don't know, finding the latest news, using the answer they found and\nmoving on.</p>",
			"exportId": "researching-html-elements"
		},
		{
			"id": 432898,
			"title": "HTML Issue Bot 9000",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-issue-bot-9000-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Demonstrate writing valid HTML</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Let's practice using the W3C's HTML Validator!</p>\n\n<h2>Demonstrate Writing Valid HTML</h2>\n\n<p>In this lab we'll use the W3C Validator to make our invalid HTML happy! You\nmight need to change how you work this problem depending on your work\nenvironment. Either way you'll learn to fix invalid HTML.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode.</p>\n\n<h3>Steps</h3>\n\n<ol>\n<li>Open index.html in a browser. See how it, well, doesn't look <em>quite</em> right?</li>\n<li>Open index.html in your text editor</li>\n<li>Visit the W3C validator at:\n<a href=\"http://validator.w3.org/#validate_by_input\">http://validator.w3.org/#validate_by_input</a>\n</li>\n<li>Copy the code from index.html and paste it into the text area</li>\n<li>Click the large \"Check\" button</li>\n<li>Use the error messages to correct the code your copy of <code>index.html</code>\n</li>\n<li>Repeat steps 3-6 until the Html Validator reports: \"Document checking\ncompleted. No errors or warnings to show.\"</li>\n<li>Not only is the document now W3C-valid, it no longer looks weird</li>\n</ol>\n\n<h3>Wrapping Up</h3>\n\n<p>When your document is valid, go to the terminal and type <code>learn test</code>. Since the\ngoal of this assignment is to practice verifying the HTML structure via W3C, the\ntest in this lab is only checking that an <code>index.html</code> file exists.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"http://validator.w3.org/#validate_by_input\">W3C HTML Validator - Validate Direct Input</a></li>\n</ul>",
			"exportId": "g47174083b532aca4fd8b7f32b3811f2b"
		},
		{
			"id": 432899,
			"title": "Using Your Browser's Developer Tools",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-using-browser-dev-tools\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Examine the developer tools</li>\n<li>Use the developer tools to locate and inspect elements</li>\n<li>Use the developer tools to edit HTML</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>By now, you're pretty familiar with HTML structural elements, and how they\nrelate to each other on the page. You might even feel pretty comfortable writing\nyour own valid HTML. But much of the time as developers, we'll be jumping in on\nprojects that are already in progress. We'll need a way to view existing HTML\nand CSS, and potentially a way to play around with elements on live pages to see\nhow we might potentially adjust things. Luckily for us, most browsers have those\nkinds of tools already built in, called <code>developer tools</code>, or <code>dev tools</code> for\nshort. In this lesson, we'll look at the <code>dev tools</code> on <a href=\"https://www.google.com/chrome/\">Google\nChrome</a>.</p>\n\n<h2>Examine the Developer Tools</h2>\n\n<p>The Developer tools that browsers provide you are a great way to experiment with\nHTML and CSS, and immediately see how those changes are rendered in the browser.</p>\n\n<p>For this lesson, please open the\n<a href=\"https://en.wikipedia.org/wiki/Alan_Turing\">Wikipedia page for Alan Turing</a> in\nChrome.</p>\n\n<p>Once the page is open, right click on the title of the page — the header\ncontaining his name. You should get a list of options. We want to click on the\none that says <code>Inspect</code>. This is going to bring up a window at the bottom of the\npage that contains all of the HTML that makes up the Wikipedia page.</p>\n\n<h2>Use the Developer Tools to Locate and Inspect Elements</h2>\n\n<p>If you hover over elements, you should see different colored boxes appear over\ndifferent parts of the page. We're going to hover over the HTML until we find\nthe section that contains the title of the page (\"Alan Turing\"). It should look\nsomething like this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;h1</span> <span class=\"na\">id=</span><span class=\"s\">\"firstHeading\"</span> <span class=\"na\">class=</span><span class=\"s\">\"firstHeading\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div>\n<h2>Use the Developer Tools to Edit HTML</h2>\n\n<p>There should be a drop down arrow next to the first <code>&lt;h1 ...&gt;</code> If you don't\nalready see the text nested under that <code>&lt;h1&gt;</code>, click on the arrow to expose it.\nRight click that text and select <code>Edit as HTML</code>.</p>\n\n<p>A new window will pop up in Dev Tools where we can actually go in and type. Try\ndeleting \"Alan Turing\" and replacing it with \"Puppies Puppies Puppies.\" Once\nyou're done, just click outside of the text window, and take a look back at the\nheader in the browser. It should now say \"Puppies Puppies Puppies.\"</p>\n\n<p>If you refresh the page, your text will disappear. We're just editing HTML in\nour own web browser, not on Wikipedia's web server. Feel free to scroll around\non the page and play with all sorts of different HTML elements and see what\nhappens.</p>\n\n<h3>Editing Images</h3>\n\n<p>Now, right click on Alan Turing's picture and choose \"Inspect\". Right click on\nthe image tag in the HTML and again select <code>Edit as HTML</code>. Let's replace the\nentire <code>&lt;img&gt;</code> tag with another image from a website. For example, you might\nchange it to this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span>\n  <span class=\"na\">src=</span><span class=\"s\">\"http://images2.fanpop.com/image/photos/9400000/Aaaaaawwwwwwwwww-Sweet-puppies-9415255-1600-1200.jpg\"</span>\n  <span class=\"na\">alt=</span><span class=\"s\">\"Puppies\"</span>\n<span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>Your puppy image should now be displaying on the page, but it's pretty big.\nLet's add an attribute to our <code>&lt;img&gt;</code> tag to set the image's size. It should\nlook like this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span>\n  <span class=\"na\">src=</span><span class=\"s\">\"http://images2.fanpop.com/image/photos/9400000/Aaaaaawwwwwwwwww-Sweet-puppies-9415255-1600-1200.jpg\"</span>\n  <span class=\"na\">width=</span><span class=\"s\">\"200\"</span>\n  <span class=\"na\">alt=</span><span class=\"s\">\"Puppies\"</span>\n<span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>This attribute sets the width of the image to 200px and adjusts the height\naccordingly. Much better!</p>\n\n<p>Feel free to play with other HTML elements and watch things change on the page.</p>\n\n<h3>Bonus</h3>\n\n<p>If you want to attempt to change any of the styles of the page, take a look at\nthe right-hand column. CSS, which stands for Cascading Style Sheets, manages all\nthe styles of your page (think background color, font size, placement of\ndifferent items on the page, etc).</p>\n\n<p>Feel free to play around, check and uncheck boxes, change colors, change pixels.\nIt's okay if you \"mess things up\". Just refresh the browser and it will all go\nback to how it was!</p>",
			"exportId": "using-your-browsers-developer-tools"
		},
		{
			"id": 432900,
			"title": "HTML Album Cover",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-album-cover-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Use common HTML tags to produce a webpage based on a mock-up</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Learning all the individual pieces that make up a web page is a necessary first\nstep in the process of learning HTML, but one of the best ways to solidify the\nconcepts we've learned is to apply concepts together. In this lab, your task\nwill be to update <code>index.html</code> based on commented notes in the file, using what\nwe've learned about text formatting and displaying images.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode.</p>\n\n<h2>Apply Header, Paragraph, Image and Span Tags</h2>\n\n<p>Pharrell isn't quite happy, he needs some help coding the album cover for his\nhit song \"Happy.\" His dev chops aren't quite as skilled as yours, so he's hired\nyou to take care of business.</p>\n\n<p>Pharrell did provide us with a mock-up of what he would like to see for the\ndesign of the album cover:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-album-cover-lab/album-cover-mockup.png\" alt=\"Happy Album Cover\"></p>\n\n<p>In the industry, front-end developers are typically given specs just like this\nfrom the product team and then asked to write the code to make a website look\njust like the spec. Today, you're the developer and Pharrell is the product\nteam.</p>\n\n<h3>Use SOURCE.md</h3>\n\n<p>Pharrell has provided us with the text for the album and all the legal\nmumbo-jumbo to give credit where credit is due. You can find that text in\n<code>SOURCE.md</code>. Again, this is a typical industry standard workflow, where the\ndevelopers are given a copy for the site from the product team.</p>\n\n<p>Each line of text in this file corresponds to a note in <code>index.html</code> that will\nindicate where you'll need to add this information. It will be up to you to pick\nwhich HTML tags to use.</p>\n\n<h3>Deliverables</h3>\n\n<p>Write your code in <code>index.html</code>. Your job is to make sure the text from\n<code>SOURCE.md</code> makes it into <code>index.html</code> surrounded by the appropriate HTML tags.</p>\n\n<p>The files you need are provided in the 'images' folder, but you'll have to write\nthe correct URL paths (like <code>http://..../image-name</code>) in order for them to\ndisplay correctly.</p>\n\n<p>You may not have encountered the <code>span</code> tag before, so if you are curious, take\na moment to <a href=\"https://www.w3schools.com/tags/tag_span.asp\">read up on some reference material</a> to better understand its use.</p>\n\n<p>Open <code>index.html</code> in a separate browser tab to see your progress on the Album\nCover as you build it.</p>\n\n<p>Run <code>learn test</code> to make sure you've met all the deliverables and passed the\ntests.</p>\n\n<h2>Conclusion</h2>\n\n<p>A lot of the formatting in this lab is done using CSS, or Cascading Style\nSheets, a language that defines styling for HTML. Before we can get to more\nelaborate styling, though, it is important to have a strong understanding of\nHTML fundamentals.</p>\n\n<p>In this lab, we've tested that understanding by having you practice applying\nheaders, image, and paragraphs. Completing this lab means that you have a solid\nfoundation that we can build upon as we continue to learn about web development.</p>\n\n<p><em>Clap along if you feel</em> you're getting the hang of HTML!</p>",
			"exportId": "ga0ce3866e98d9741d783f9ca59f4b9aa"
		},
		{
			"id": 432902,
			"title": "BONUS: Riyadh Blog",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-riyadh-blog-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Create an HTML structure for an existing mockup</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Web developers are often asked to work from a mockup of a potential webpage,\ngenerally referred to as either a <code>mockup</code> or <code>comp</code>. In this lab, you'll be\nasked to use a mockup image, source text and images, and create an HTML\nstructure that mirrors the mockup image.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode.</p>\n\n<h2>Create an HTML Structure for an Existing Mockup</h2>\n\n<h3>Process</h3>\n\n<p>In the <code>index.html</code> file, use the comments in the code to place the content from\n<code>SOURCE.md</code> in the proper locations. The image file\n<a href=\"https://s3.amazonaws.com/learn-verified/RIYADH-MOCKUP.jpg\"><code>MOCKUP.jpg</code></a> can be\nused as a reference to build the <code>index.html</code> page as it appears.</p>\n\n<p>Open <code>index.html</code> in a separate browser tab to see your progress as you work.\nRun <code>learn test</code> as you go to see test results.</p>\n\n<h3>Bonus</h3>\n\n<p>Use CSS in the <code>style.css</code> file in the <code>css</code> folder to change different aspects\nabout your page such as:</p>\n\n<ul>\n<li>font color</li>\n<li>font size</li>\n<li>font family</li>\n<li>change the background image to a color</li>\n<li>change the background color to a gradient</li>\n</ul>\n\n<p>You can also try modifying these styles on-the-fly by modifying them with the\n[developer tools] of your [browser].</p>\n\n<p>You might think: \"BUT I DON'T KNOW CSS\" (<em>very well</em> or <em>at all</em>). Developers\n<em>constantly</em> encounter this feeling. Since developers are constantly learning,\nwe try to keep the commands as simple as possible. You might know more than you\nthink! What happens if you change <code>red</code> to <code>green</code>? What do you expect? How\nwould you validate your guess? Developers usually call this process \"trying\nstuff\" or \"messing around\" or \"playing with stuff.\" While all those phrases\nsound like a joke, what they mean to say is that they're using the Scientific\nMethod to validate their guesses into building a model.</p>\n\n<p>It's possibly the most powerful learning technique possible. Toddlers and\npuppies are amazing at it!</p>",
			"exportId": "g06f42d4401061ddecee3501412dcaaa7"
		},
		{
			"id": 432904,
			"title": "Survey - HTML",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the HTML module?</p>\n</div>",
			"exportId": "g42ba24334f7ddde89ffc57e049dffa81"
		}]
	},
	{
		"id": 44868,
		"name": "CSS",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g6aac711d841931de4a9378012dc7eec4",
		"items": [
		{
			"id": 432908,
			"title": "Intro to CSS",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-css\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-css\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-css/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify the differences between HTML and CSS</li>\n<li>List the basic characteristics of CSS</li>\n<li>Declare CSS properties and values</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Browsers combine the content (HTML) and presentation (CSS) layers to display web\npages. CSS — Cascading Style Sheets — is the language we use for styling web\npages.</p>\n\n<p>CSS instructions live apart from the HTML elements and have a different look and\nfeel (\"syntax\"). CSS directives give web pages their specific appearance. If you\nhave ever been impressed by how a website can be displayed on a desktop browser\nwhile the same content looks great on a mobile device, you have CSS to thank for\nit!</p>\n\n<p>One of the most amazing displays of the power of CSS is\n<a href=\"https://stylestage.dev/styles/\">Style Stage</a> where people take the <em>exact\nsame</em> HTML page and use CSS to create <em>wildly</em> different pages. Take a look!</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-css/style-stage-1.png\" alt=\"Style Stage 1\" title=\"Abandoned Stage by Andrey Kudryavtsev\">\n<img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-css/style-stage-2.png\" alt=\"Style Stage 2\" title=\"A Scottish Landscape by Alistair Shepherd\">\n<img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-css/style-stage-3.png\" alt=\"Style Stage 3\" title=\"Bulletin by Paulo Nunes\"></p>\n\n<p>Like we said: all the difference between these images is created by CSS!\nAstounding, right!?</p>\n\n<p>We know now what CSS is and its purpose, so how does it differ from HTML and\nhow can we use it?</p>\n\n<h2>Identify the Differences Between HTML and CSS</h2>\n\n<p>HTML and CSS play two different roles. When we write HTML, we focus on\nstructure, hierarchy, and meaning — the \"marking-up\" of content.\nQuestions in the mind of an HTML author are:</p>\n\n<ul>\n<li>Is it best to list these members' names with numbers, or bullets?</li>\n<li>Does this menu belong in the navigation in the header?</li>\n<li>Should this additional reference be an aside, or a separate section?</li>\n</ul>\n\n<p>These questions deal with structure, hierarchy, and meaning, which\nare concerns of the content layer (HTML).</p>\n\n<p>When defining the presentation layer (CSS), here are the questions we ask\nourselves:</p>\n\n<ul>\n<li>Do we want the header menu to be stationary, or does it scroll with the\nbrowser window?</li>\n<li>How do we want the content to display inside of a container? For example,\ndoes it fill the whole area, edge-to-edge? Is there white space around\nthe content and/or the container?</li>\n<li>How large should an <code>H1</code> be relative to an <code>H2</code>? What about an <code>H3</code>?</li>\n<li>What properties should links have? Underline or no underline?\nWhich color for the normal state versus the hover state? Should the\nvisited link state be different?</li>\n<li>How should the content appear when on a desktop machine versus a\nmobile device?</li>\n</ul>\n\n<p>As you ask yourself these questions, your focus is on the <em>aesthetic</em> quality of\nthe page. For each bit of <em>content</em> we can define a <em>presentation rule</em> that\nwill change the way the HTML is displayed.</p>\n\n<h2>List the Basic Characteristics of CSS</h2>\n\n<p>For each <em>presentation rule</em>, there are 3 things to keep in mind:</p>\n\n<ol>\n<li>What is the specific HTML we want to style?</li>\n<li>What are the qualities we want to modify (e.g. the properties of text in a\nparagraph)?</li>\n<li><em>How</em> do we want to modify the qualities of the element (e.g. font family,\nfont color, font size, line height, letter spacing etc.)?</li>\n</ol>\n\n<p>Once you've decided what to modify and how, we can start writing CSS rules.</p>\n\n<p>CSS selectors are a way of declaring which HTML elements you wish to style.\nSelectors can appear a few different ways:</p>\n\n<ul>\n<li>The type of HTML element(<code>h1</code>, <code>p</code>, <code>div</code>, etc.)</li>\n<li>The value of an element's <code>id</code> or <code>class</code> (<code>&lt;p id='idvalue'&gt;&lt;/p&gt;</code>,\n<code>&lt;p class='classname'&gt;&lt;/p&gt;</code>)</li>\n<li>The value of an element's attributes (<code>value=\"hello\"</code>)</li>\n<li>The element's relationship with surrounding elements (a <code>p</code> within an element\nwith class of <code>.infobox</code>)</li>\n</ul>\n\n<p>For example if you want the body of the page to have a black background, your\nselector syntax may be <code>html</code> or <code>body</code>. For anchors, your selector would be\n<code>a</code>. A few more examples are listed below:</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"c\">/*\nThe CSS comment syntax is text between \"slash-star\" and \"star-slash\"\n*/</span>\n\n<span class=\"c\">/*\nselects all anchor tag elements in the document (e.g. &lt;a href=\"page-link.html\"&gt;Page Link&lt;/a&gt;)\n*/</span>\n<span class=\"nt\">a</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/*\nselects all headers of type h3 in the document (e.g. &lt;h3&gt;Type selectors&lt;/h3&gt;)\n*/</span>\n<span class=\"nt\">h3</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/*\nselects all paragraph elements in the document (e.g. &lt;p&gt;Type selectors are used\nto...&lt;/p&gt;)\n*/</span>\n<span class=\"nt\">p</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\">Type selectors documentation</a></p>\n\n<p>The element type <code>class</code> is a commonly used selector. Class selectors are used\nto <strong>select all elements that share a given class name</strong>. The class selector\nsyntax is: <code>.classname</code>. Prefix the class name with a <code>.</code> (period).</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"c\">/*\nselect all elements that have the 'important-topic' classname (e.g. &lt;h2 class='important-topic'&gt;\nand &lt;p class='important-topic'&gt;)\n*/</span>\n<span class=\"nc\">.important-topic</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/*\nselect all elements that have the 'helpful-hint' classname (e.g. &lt;h2 class='helpful-hint'&gt;\nand &lt;p class='helpful-hint'&gt;)\n*/</span>\n<span class=\"nc\">.helpful-hint</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>You can also use the <code>id</code> selector to style elements. However, <strong>there should\nbe only one element with a given id</strong> in an HTML document. This can make\nstyling with the ID selector ideal for one-off styles. The <code>id</code> selector syntax\nis: <code>#idvalue</code>. Prefix the id attribute of an element with a <code>#</code> (which is\ncalled \"octothorp,\" \"pound sign\", or \"hashtag\").</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"c\">/*\nselects the HTML element with the id 'main-header' (e.g. &lt;h1 id='main-header'&gt;)\n*/</span>\n<span class=\"nf\">#main-header</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/*\nselects the HTML element with the id 'welcome-message' (e.g. &lt;p id='welcome-message'&gt;)\n*/</span>\n<span class=\"nf\">#welcome-message</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors\">id selectors documentation</a></p>\n\n<h2>Declare CSS Properties and Values</h2>\n\n<p>Each element has a list of qualities that can be styled. CSS \"property\" names\nidentify those qualities. For text styling, examples of property names include\ntext <code>color</code>, <code>text-align</code> and <code>line-height</code>.</p>\n\n<p>CSS Property Values are directly related to property names. If we are working\nwith the <code>color</code> property, the value could be a named color such as <code>red</code>, or\n<code>#660000</code>. Some properties have their values set with words, others with\nnumbers, and some can take both.</p>\n\n<p>A CSS property name with a CSS property value is a <strong>CSS declaration</strong>. To apply\na CSS declaration like <code>color: blue</code> to a specific HTML element, you need to\ncombine your CSS declaration with a CSS selector. The association between one or\nmore CSS declarations and a CSS selector is called a <strong>CSS declaration block</strong>.\nCSS declarations (one or more) that are to be applied to a specific selector are\nwrapped by curly braces (<code>{ }</code>). Each declaration inside a declaration block\n<strong>must</strong> be separated by a semi-colon (<code>;</code>).</p>\n\n<p>Below is a sample CSS declaration block.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">selector</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"c\">/*\nThis is a css declaration for a selector\n'color' is a property name and 'blue' is a css property value\n!!!!! CSS declarations must end with a semi-colon (;) !!!!!\n*/</span>\n</code></pre></div>\n<p>Let's write a more complete example declaration block.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"c\">/*\nThe CSS declaration block below:\n* Will apply to all `h1` elements\n* Will change the text color to blue\n* Will set the font family to Georgia\n*/</span>\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">Georgia</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h2>Conclusion</h2>\n\n<p>With the combination of HTML and CSS, you are able to define content, structure,\nand style to websites. Using a CSS selector like <code>h1</code> or <code>p</code> paired with a\ndeclaration block, you will change the display of that element. Declaration\nblocks are collections of CSS properties and values.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS\">Mozilla Developer Network: Introduction to CSS</a></li>\n</ul>",
			"exportId": "intro-to-css"
		},
		{
			"id": 432910,
			"title": "Introduction to CSS Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-intro-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Import a CSS file in our HTML</li>\n<li>Implement CSS declarations</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>HTML's role in our websites is to provide structure, content, and link resources\n(e.g. CSS files). Its role in describing the style (\"presentation\") of content\nis minimal. HTML's ability to style is pretty much limited to \"pretty good\"\ndefaults.</p>\n\n<p>In order to further customize the style, appearance, and interactive behavior of\nour websites, we turn to Cascading Style Sheets, or CSS. In this lab, we will\nwork on implementing CSS declarations in our HTML.</p>\n\n<h2>Writing HTML vs. Writing CSS</h2>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th>HTML</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Deals with:</td>\n<td>Content layer</td>\n<td>Presentation layer</td>\n</tr>\n<tr>\n<td>Concerns:</td>\n<td>Structure, hierarchy &amp; meaning</td>\n<td>Aesthetic &amp; display</td>\n</tr>\n<tr>\n<td>Questions:</td>\n<td>- Should the order of items within a list matter?</td>\n<td>- Should the layout of the text be in a single or double column?</td>\n</tr>\n<tr>\n<td></td>\n<td>- Should we wrap a list of links inside a navigation tag?</td>\n<td>- Should we use a different font color for the header?</td>\n</tr>\n<tr>\n<td></td>\n<td>- Is this the most important header in the HTML document?</td>\n<td>- How should the content appear on a desktop vs. a mobile device?</td>\n</tr>\n</tbody>\n</table>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode.</p>\n\n<h2>Import a CSS File in Our HTML</h2>\n\n<p>First things first: we need to make sure our HTML is loading our style sheet.</p>\n\n<p>We have two options:</p>\n\n<ol>\n<li>Write CSS rules inside of a <code>&lt;style&gt;</code> tag (\"internal CSS\"), which tells HTML\n\"Hey, I want to define some CSS styling here.\"</li>\n<li>Write CSS rules in an external file that is specified with the <code>&lt;link&gt;</code> tag\n(\"external CSS\").</li>\n</ol>\n\n<p>In our case, we want to provide a link to our style sheet, instead of writing\nall of our CSS code directly in the <code>&lt;style&gt;</code> tag. This allows us to only have\nto write styles for the entire site once, instead of repeating every <code>&lt;style&gt;</code>\nelement on every page. A common workflow is to see developers work on CSS inside\nof the <code>&lt;style&gt;</code> tag until their styling is done. At that point they move it to\ntheir external file and remove the <code>&lt;style&gt;</code> element from the HTML page. Feel\nfree to try it out!</p>\n\n<p>In <code>index.html</code>, provide a <code>&lt;link&gt;</code> tag which correctly sources the CSS file\nlocated in this directory. The <code>&lt;link&gt;</code> tag will link to our file with an <code>href</code>\nattribute, like so:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"relative path to CSS file\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>The <code>href</code> attribute should point to the file <code>style.css</code> which is located in\nthis directory using a <em>relative path</em>. The <code>rel</code> attribute is used to note that\nthe file which is being linked has a <strong>rel</strong>ation of being a \"stylesheet.\"</p>\n\n<p>Now, what is a relative path? You could write <code>href=\"style.css\"</code> and the content\nof <code>style.css</code> would change your <code>index.html</code> file. But we want to teach you to\nrequire external resources (like CSS or JavaScript) by using <em>relative paths</em>.\nRelative paths make it <em>crystal clear</em> which file is being used. Relative paths\nstart with <code>./</code> which means \"from the directory I am currently in.\" So, when we\nuse <code>link</code> to associate with a style sheet and we write <code>href=\"./style.css\"</code>\nwe're saying: \"From the directory in which I, the <code>index.html</code> file live, look\nfor a file called <code>style.css</code> and use it. This pattern will help you and other\ndevelopers remove any possible confusion.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"relative path to CSS file\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>Links to style sheets should go at the end of the <code>&lt;head&gt;</code> section! Make sure\nyou provide a <em>relative</em> path to the style sheet. Hint: Open <code>index.html</code> in the\nbrowser. You can test whether your link is working or not by the color of your\nheadline. If it's red, it's working! If it's black, keep going - you'll get it.</p>\n\n<h2>Implement CSS Declarations</h2>\n\n<p>Now, we are going to create some CSS declarations and add styling to our\ndocument! First, open <code>index.html</code> in the browser to get a good idea of what\n<a href=\"https://curriculum-content.s3.amazonaws.com/web-development/unstyled-codepen.jpeg\">our un-styled page</a> page looks like.</p>\n\n<p>What we would really like is <a href=\"https://curriculum-content.s3.amazonaws.com/web-development/styled-intro-to-css.png\">something a little more jazzed up</a>! Let's\nwork towards that. Set the following <em>properties</em> to specific <em>values</em>. Make\nsure to, after each update, look at <code>index.html</code> in the browser to see how it\nhas changed:</p>\n\n<ul>\n<li>Set the <code>background</code> of the <code>&lt;body&gt;</code> element (whole document) to <code>#00b3e6</code>\n(light blue)</li>\n<li>Set the <code>&lt;div&gt;</code> elements:\n\n<ul>\n<li>\n<code>width</code> to <code>700px</code>\n</li>\n<li>\n<code>margin</code> to <code>auto</code> (centers our element)</li>\n<li>\n<code>font-family</code> to <code>\"Helvetica Neue\"</code>\n</li>\n<li>\n<code>background</code> to <code>white</code>\n</li>\n<li>\n<code>padding</code> to <code>30px</code> (creates an invisible space around the element)</li>\n</ul>\n</li>\n<li>Set the element with the id of <code>#main-header</code> to a <code>font-size</code> of <code>22px</code>\n</li>\n<li>Set the elements with the class of <code>.perspective-questions</code> to a <code>font-style</code>\nof <code>italic</code>\n</li>\n</ul>\n\n<p>Run <code>learn test</code> to test your work.</p>\n\n<h2>Conclusion</h2>\n\n<p>CSS allows us to easily separate our 'styling' logic into separate files that\nfollow the 'cascading' rule set. This enables us to keep our HTML clean and\nsimple to read, without sacrificing the customization that we have come to\nexpect on websites.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://www.w3schools.com/Css/css_intro.asp\">W3 Introduction to CSS</a></li>\n</ul>",
			"exportId": "ga057468a3f51ed6be60fc2db98240193"
		},
		{
			"id": 432912,
			"title": "CSS Fundamentals",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-fundamentals\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify CSS syntax</li>\n<li>Identify CSS use formats</li>\n<li>Implement various types of CSS selectors</li>\n<li>Implement various types of color values in CSS</li>\n<li>Identify and implement CSS comments</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In this lesson, we'll build on the basics we've learned. We'll learn to select\nelements based on HTML attributes, we'll learn to apply colors, and we'll learn\nhow to comment our CSS.</p>\n\n<h2>Identify CSS Syntax</h2>\n\n<p>Before we turn to the various ways we can extend CSS rules, let's go over the\nfoundational syntax CSS uses.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/css-essentials/css-fundamentals/Image_43_ReCreateGraphic.png\" alt=\"image showing selector, property, and values in CSS code\"></p>\n\n<p>We create a CSS rule by defining the selector, which matches the HTML element we\nwant to style. Inside the curly braces we declare the properties we want to\nchange and, after the colon, we set the value we want to change that property\nto. Each property is written in the following form: property name, colon, the\nvalue for that property and a semicolon.</p>\n\n<p>In the example above, we are selecting the <code>p</code> element and displaying its color\nas blue.</p>\n\n<h2>Identify CSS Use Formats</h2>\n\n<p>How do we \"apply\" CSS to an HTML page? By using one of three CSS use formats:\ninline, internal (or embedded) and external.</p>\n\n<p>Inline includes the styles directly into the HTML element with the <code>style</code>\nattribute.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;p</span> <span class=\"na\">style=</span><span class=\"s\">\"color: blue;\"</span><span class=\"nt\">&gt;&lt;/p&gt;</span>\n</code></pre></div>\n<p>While you might see this sort of styling in something like the code for an HTML\nemail, this is generally not the best practice for two reasons. The primary reason\nis because it only affects that single element. If we want all paragraph\nelements on our page to appear blue, we would have to add that attribute to\nevery element individually, which is inefficient and difficult to maintain into\nthe future. That brings us to the second reason to avoid inline CSS: it breaks\nour principle of separation of content and presentation.</p>\n\n<p>Internal CSS is inside of <code>style</code> tags in the HTML document's <code>head</code> section.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;style&gt;</span>\n      <span class=\"nt\">p</span> <span class=\"p\">{</span>\n        <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"nt\">&lt;/style&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>This is a paragraph.<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n<p>This rule will display all paragraphs in this document as blue, which is a step\nup in scope from the inline styles that only apply to single elements. But this\nCSS will only apply to the single document. Other paragraph elements on other\npages in the same website will be unaffected.</p>\n\n<p>If we want our CSS to carry across various pages, we can use an external\nstyle sheet. This is a separate CSS file that we link in the <code>head</code> of HTML\ndocuments.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"./styles.css\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>This is a paragraph.<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n<p>With the <code>link</code> tag, we can use the relation attribute to define the target as a\nstyle sheet, and the link source to be our CSS file that contains all the CSS we\nwant to use on our site. This is by far the easiest way to link CSS to HTML and\napply styles across all of our pages.</p>\n\n<h2>Implement Various Types of CSS Selectors</h2>\n\n<p>CSS gives us a wide range of ways that we can select elements on the page. Some\nof these you will use more than others, but it's a good idea to know them all so\nyou can choose the right one when you need it.</p>\n\n<h3>ID and Class Selectors</h3>\n\n<p>ID selectors target all elements with a specific ID attribute value. The way we\nspecify an ID selector in a CSS rule is to follow the element name with a hash\nsymbol and then the ID attribute value we want to match. In this case, the\nbrowser will look for a <code>p</code> element with the ID attribute \"introduction\" and\napply the CSS to that element.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">p</span><span class=\"nf\">#introduction</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;p</span> <span class=\"na\">id=</span><span class=\"s\">\"introduction\"</span><span class=\"nt\">&gt;</span>I'm blue<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div>\n<p>ID selectors are useful when you want to give a single element on the page a\nunique identity and set it apart from everything else.</p>\n\n<p>Class selectors target all elements with a class attribute value matching the\nselector name. We specify a class selector using the period symbol followed by\nthe name value.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">p</span><span class=\"nc\">.alert</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"alert\"</span><span class=\"nt\">&gt;</span>I'm red<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div>\n<p>The difference between IDs and classes is that IDs are meant for one element on\nthe page that has a unique identity where class selectors are meant to be spread\nthroughout the page across multiple elements.</p>\n\n<h3>Compound Selectors</h3>\n\n<p>Compound selectors let us apply the same CSS rules to multiple elements at once.\nIf we want to make both <code>h2</code> and <code>h3</code> elements display green, we use both as\nselectors, separated with a comma.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">h2</span><span class=\"o\">,</span>\n<span class=\"nt\">h3</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">green</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;h2&gt;</span>I'm green<span class=\"nt\">&lt;/h2&gt;</span>\n<span class=\"nt\">&lt;h3&gt;</span>I'm green too<span class=\"nt\">&lt;/h3&gt;</span>\n<span class=\"nt\">&lt;h4&gt;</span>I'm not green<span class=\"nt\">&lt;/h4&gt;</span>\n</code></pre></div>\n<p>This eliminates the need to rewrite a new CSS rule containing the same styles\nfor different elements.</p>\n\n<h3>Descendant Selectors</h3>\n\n<p>Descendant selectors target elements that are descendants of the matching\nselector name. A descendant selector is indicated by a space in between one\nselector and another selector.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">article</span> <span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In this case, <em>only</em> <code>p</code> elements within the <code>article</code> element will receive the\nstyling.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;article&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>I'm blue<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/article&gt;</span>\n\n<span class=\"nt\">&lt;p&gt;</span>I'm not blue<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div>\n<p>ID, class, compound and descendant selectors are the kind of selectors you will\nprobably use in your CSS on a regular basis. From this point on, we get into\nmore advanced selectors. They are often not as necessary as the previous ones,\nbut they can accomplish some powerful operations.</p>\n\n<h3>Child Selectors</h3>\n\n<p>The child selector targets all elements that are the immediate children of a\nspecified element.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">article</span> <span class=\"o\">&gt;</span> <span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Only <code>p</code> tags exactly one level down from <code>article</code> will display as blue. If\nthere are <code>p</code> tags within an <code>aside</code> element within the <code>article</code> element, they\nwill not receive the same instructions.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;article&gt;</span>\n  <span class=\"nt\">&lt;p&gt;</span>I'm blue<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/article&gt;</span>\n\n<span class=\"nt\">&lt;article&gt;</span>\n  <span class=\"nt\">&lt;aside&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>I'm not blue<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;/aside&gt;</span>\n<span class=\"nt\">&lt;/article&gt;</span>\n</code></pre></div>\n<h3>Adjacent Sibling Selector</h3>\n\n<p>The adjacent sibling selector targets elements that appear directly after the matching\nselector name. We indicate it using a plus symbol.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">h3</span> <span class=\"o\">+</span> <span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here the adjacent sibling selector will style the paragraph directly following\nan <code>h3</code> element but not paragraphs that come after the first.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;h3&gt;</span>Header<span class=\"nt\">&lt;/h3&gt;</span>\n<span class=\"nt\">&lt;p&gt;</span>I'm blue<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p&gt;</span>I'm not blue<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div>\n<h3>General Sibling Selector</h3>\n\n<p>The general sibling selector (sometimes called the preceded selector) will style\nall matched elements after the preceding selector name.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">h3</span> <span class=\"o\">~</span> <span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>With this general sibling selector, all paragraph elements that come after the\n<code>h3</code> will receive the styling.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;h3&gt;</span>Header<span class=\"nt\">&lt;/h3&gt;</span>\n<span class=\"nt\">&lt;p&gt;</span>I'm red<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;p&gt;</span>I'm red<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div>\n<h3>Universal</h3>\n\n<p>The universal selector matches any elements and will apply to elements that are\nnot targeted by other rules. It's indicated by the star symbol.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"o\">*</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">yellow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In this case, this is going to set the color of the text yellow for any element\nthat hasn't had its color property specified elsewhere.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;h2&gt;</span>I'm yellow<span class=\"nt\">&lt;/h2&gt;</span>\n\n<span class=\"nt\">&lt;p&gt;</span>I'm yellow<span class=\"nt\">&lt;/p&gt;</span>\n\n<span class=\"nt\">&lt;div&gt;</span>I'm yellow<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n<h3>Attribute Selectors</h3>\n\n<p>The <code>attribute</code> selector can target elements with a particular attribute. We can\nalso define exactly which attribute we want to match.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">input</span><span class=\"o\">[</span><span class=\"nt\">type</span><span class=\"o\">=</span><span class=\"s1\">\"text\"</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">200px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here we want to find <code>input</code> elements, but only those with a <code>type</code> value that\nmatches \"text.\" For those elements that fit the requirements, the browser will\nthen apply the width we want. There are many different ways to use this type of\nselector with various combinations of operations and attribute values so you\ncan refer to the resources to explore them all.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">value=</span><span class=\"s\">\"I'm 200px\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">value=</span><span class=\"s\">\"I'm not 200px\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<h3>Pseudo-class Selectors</h3>\n\n<p>Pseudo-class selectors target elements based on a particular state of an element\nor relationship to other elements. The way we signify a pseudo class selector is\nwith the colon symbol.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">a</span><span class=\"nd\">:link</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">a</span><span class=\"nd\">:visited</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">purple</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>These two link examples reflect the difference in the way visited vs. unvisited\nlinks will be displayed. If the link is unvisited, it will show as blue. If it\nhas been visited, it will show up purple. Pseudo-class selectors, like attribute\nselectors, have a lot of aspects so you can explore them more in other resources.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\"</span><span class=\"nt\">&gt;</span>\n  I'm blue before you click, and purple after\n<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div>\n<h2>Implement Various Types of Color Values in CSS</h2>\n\n<p>We've been using color names in our examples to keep it simple, but only a\nhandful of color names are recognized by all browsers. When writing CSS, we'll\nbe better off to use different ways of defining our colors.</p>\n\n<h3>Hexadecimal Color Values</h3>\n\n<p>Most often developers use a set of numbers called hexadecimal, which represents\na wide range of colors. Hex colors begin with <code>#</code> and are followed by,\ngenerally, 6 numbers, but some of these numbers are actually letters. The lowest\nsingle digit number in hex is 0 and the highest single digit number is f. This\ntable might help to visualize what we mean by this.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Decimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\nHexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10\n</code></pre></div>\n<p>Hex colors work by creating Red, Green, Blue (RGB) values. Traditional RGB\ncolors are on a scale of 0 to 255 for each of the three colors in the spectrum.\n<code>#000000</code> translates to black since 0 reds, 0 green, 0 blues represents the\nabsence of all colors and <code>#ffffff</code> makes white since 255 reds, 255 greens, and\n255 blues equal the maximum of each of the colors.</p>\n\n<p>Hex colors can be shortened to just three numbers when each RGB value is the\nsame for each digit. So <code>#111111</code> can be written as <code>#111</code>.</p>\n\n<h3>RGB Color Values</h3>\n\n<p>We can also work directly with RGB values.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"m\">255</span><span class=\"p\">,</span> <span class=\"m\">255</span><span class=\"p\">,</span> <span class=\"m\">255</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here we've set our <code>p</code> elements to the color white, the maximum of all RGB\nvalues (255).</p>\n\n<p>You can also add an extra channel to your RGB color by setting an \"a\" value,\nwhich represents opacity.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">255</span><span class=\"p\">,</span> <span class=\"m\">0.5</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This example will show up as blue, with 50% opacity so the element will have a\nsomewhat transparent color.</p>\n\n<h2>Identify and Implement CSS Comments</h2>\n\n<p>Sometimes developers want to put into their code information that helps other\nhumans understand what the code is doing but without bothering the browser. We\ndo this with comments, and CSS has its own way to mark up comments.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">p</span><span class=\"nc\">.alert</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ff0000</span><span class=\"p\">;</span> <span class=\"c\">/* Alert text displays red */</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Everything in between the <code>/* */</code> is a CSS comment. The browser will not pay\nattention to these comments, but they can be useful for us to add explanations\nor reminders alongside our CSS code.</p>\n\n<h2>Conclusion</h2>\n\n<p>We reviewed the specifics of CSS syntax and covered the different ways we can\nconnect CSS to HTML. We ran through the various types of CSS selectors,\nincluding IDs, classes, compound, child, adjacent sibling, general sibling,\nuniversal, attribute and pseudo-classes. We also took a look at the various ways\nto express colors, from standard color names to hexadecimal and RGB values.\nLastly, we identified how to read and write CSS comments.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started\">MDN: CSS Tutorials for Beginners</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\">MDN: CSS Property Reference</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance\">MDN: CSS Inheritance</a></li>\n<li><a href=\"https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048\">Tuts Plus: 30 CSS selectors to Memorize</a></li>\n<li><a href=\"http://css-tricks.com/pseudo-class-selectors/\">CSS Tricks: Learn More Pseudo Selectors</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts\">MDN: Using Web Fonts</a></li>\n<li><a href=\"http://learn.shayhowe.com/advanced-html-css/performance-organization/\">Shay Howe: CSS Performance &amp; Organization, Best Practices</a></li>\n<li><a href=\"https://color.adobe.com/create/color-wheel/\">Adobe Color Tool</a></li>\n<li><a href=\"http://jigsaw.w3.org/css-validator/\">CSS Validator</a></li>\n<li><a href=\"http://flukeout.github.io/\">CSS Diner Game</a></li>\n<li><a href=\"https://css-tricks.com/yay-for-hsla/\">CSS Tricks: Hue, Saturation and Lightness</a></li>\n</ul>",
			"exportId": "css-fundamentals"
		},
		{
			"id": 432914,
			"title": "CSS Fundamentals Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-fundamentals-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Link an external CSS file</li>\n<li>Write CSS rules to style HTML</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In this lab, we will be adding style to our <code>index.html</code> page by linking an\nexternal CSS file. If you open <code>index.html</code> in the browser, you will see basic\nHTML that has been provided. The website emulates a basic Real Estate website\n(the links on it have been disabled, we will be working with only the basic\n<code>index.html</code> landing page).</p>\n\n<p>As you can see, our basic page is rather lackluster. This is where you come in!\nYou will be adding CSS, using selectors, to jazz the page up. All of our CSS\nshould be written in <code>style.css</code>.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode. Run <code>learn test</code> as you work through this assignment to see your progress.</p>\n\n<h2>Link an External CSS File</h2>\n\n<p>As usual, we need to make sure our HTML is loading our style sheet.</p>\n\n<p>We have two options:</p>\n\n<ol>\n<li>Write CSS rules inside of a <code>&lt;style&gt;</code> tag (\"internal CSS\"), which tells HTML\n\"Hey, I want to define some CSS styling here\"</li>\n<li>Write CSS rules in an external file that is specified with the <code>&lt;link&gt;</code> tag\n(\"external CSS\").</li>\n</ol>\n\n<p>In our case, we want to provide a link to our style sheet, instead of writing\nall of our CSS code directly in the <code>&lt;style&gt;</code> tag. This allows us to only have\nto write styles for the entire site once, instead of repeating every <code>&lt;style&gt;</code>\nelement on every page. A common workflow is to see developers work on CSS inside\nof the <code>&lt;style&gt;</code> tag until their styling is done. At that point, they move it to\ntheir external file and remove the <code>&lt;style&gt;</code> element from the HTML page. Feel\nfree to try it out!</p>\n\n<p>In <code>index.html</code>, provide a <code>&lt;link&gt;</code> tag which correctly sources the CSS file\nlocated in this directory. The <code>&lt;link&gt;</code> tag will link to our file with an <code>href</code>\nattribute, like so:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"relative path to CSS file\"</span> <span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>Links to style sheets should go at the end of the <code>&lt;head&gt;</code> section! Make sure\nyou provide a <em>relative</em> path to the style sheet.</p>\n\n<p>Now, what is a relative path? You could write <code>href=\"style.css\"</code> and the content\nof <code>style.css</code> would change your <code>index.html</code> file. But we want to teach you to\nrequire external resources (like CSS or JavaScript) by using <em>relative paths</em>.\nRelative paths make it <em>crystal clear</em> which file is being used. Relative paths\nstart with <code>./</code> which means \"from the directory I am currently in.\" So, when we\nuse <code>link</code> to associate with a style sheet and we write <code>href=\"./style.css\"</code>\nwe're saying: \"From the directory in which I, the <code>index.html</code> file live, look\nfor a file called <code>style.css</code> and use it.\" This pattern will help you and other\ndevelopers remove any possible confusion.</p>\n\n<p>Hint: Try adding the following temporarily to your <code>style.css</code> file to test if\nyour linked CSS is working:</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">h1</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If you see your <code>&lt;h1&gt;</code> change to red, you've linked your style sheet correctly!\nDon't forget to delete it once you have your link working.</p>\n\n<h2>Write CSS Rules to Style HTML</h2>\n\n<p>For this exercise, we are going to be transforming our base HTML into a more\nexciting version using CSS.</p>\n\n<p>It is important to note that there are <em>many</em> ways to go about transforming the\nHTML with CSS to match the end product. For this lesson, we will provide you\nwith general guidance in <em>one way</em> of getting to the desired view by adding to\nthe <code>style.css</code>. Ultimately, the goal is to have your website look like the\nfinished product whatever way works the best for you.</p>\n\n<p><strong>Note:</strong> If you are having trouble finding the specific CSS property you need\nto get a specific visual outcome, use your Google skills with queries such as:\n\"CSS center text within div\".</p>\n\n<p>In following the guidelines, you should be referencing the <code>index.html</code> to find\nthe appropriate tags/IDs that we will use as selectors in our <code>style.css</code> file.\nDon't forget: you can use the Chrome Inspector Tool (<code>cmd + shift + C</code> on Mac)\nto inspect specific elements of the DOM (and make trial changes to their CSS) in\nthe browser.</p>\n\n<h3>What We Have</h3>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-fundamentals-lab-incomplete.png\" alt=\"incomplete lab\"></p>\n\n<h3>What We Want</h3>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-fundamentals-lab-complete.png\" alt=\"complete lab\"></p>\n\n<h3>Deliverables</h3>\n\n<ul>\n<li><p><strong>Update the header</strong>: the text is a little wonky being aligned on the left\nlike that. Provide a property that aligns it in the center instead.</p></li>\n<li><p><strong>Center our image</strong>: We only have one image on the page and we would like it\ncentered!</p></li>\n<li><p><strong>Jazz up our navigation links</strong>: Let's center all of our nav links as well.\nGive all of the <code>&lt;a&gt;</code> tags within our navbar padding of 10px on their left and\nright sides. In addition, change their background color to something of your\nchoosing. We chose grey!</p></li>\n<li><p><strong>Our image caption needs work</strong>: Let's shrink that font size down and make\nsure it is centered.</p></li>\n<li><p><strong>Update the text block</strong>: Wouldn't it look nicer if our text was centered as\nwell? Our image is about 900px wide, so let's give all our <code>&lt;p&gt;</code>s within\n<code>#featured-property</code> a hard width of 800px and center the text in there. Be\nsure to keep a little vertical space around the <code>&lt;p&gt;</code>s.</p></li>\n<li><p><strong>Make our <code>#details</code> section horizontal</strong>: The details section could go\nnicely as a footer to the page, instead of a vertical list. To do this, make\neach of the <code>&lt;div&gt;</code>s <code>float</code> to the <code>left</code>.</p></li>\n<li><p><strong>As a finishing touch</strong>: Let's clean up the <code>&lt;div&gt;</code>s at the bottom of the\npage. All of them should have the same background color, centered text, and\noccupy 25% of the <code>width</code> of the bottom row (since we have 4 divs).</p></li>\n</ul>\n\n<h2>Conclusion</h2>\n\n<p>CSS allows many avenues to the same goal. The important takeaway is to\nexperiment and become familiar with the commonly used rules. This will enable\nyou to identify what properties will get you to which end result the quickest.</p>\n\n<p>You will find that even years into your career as a front end developer, you\nwill be referencing basic CSS documentation. <em>This is to be expected!</em> To be\ncomfortable quickly finding the property/value you are looking for online is the\nmost important skill set you can develop right now. Memorization is for\nmachines, adaptation is for humans!</p>",
			"exportId": "gcb89cbd53a88f64f8c297211a64b856b"
		},
		{
			"id": 432916,
			"title": "CSS Validation Lab: Issue Bot 9000",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-issue-bot-9000\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-issue-bot-9000/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-issue-bot-9000\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-issue-bot-9000/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Change invalid CSS to valid CSS</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Although today's browsers are becoming more capable of handing errors in CSS,\nsome errors are not always caught gracefully. This variable can make it\nextremely difficult to apply style or layout consistently. What can be done to\nquickly scan our CSS documents for issues? Let's practice using the W3C's CSS\nValidator!</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode. Run <code>learn test</code> as you go to see your test progress.</p>\n\n<h2>Change Invalid CSS to Valid CSS</h2>\n\n<p>In this lesson, we will be taking the invalid CSS in <code>css/style.css</code> and\nchanging it to valid.</p>\n\n<ol>\n<li>Open index.html in your browser. Notice how our styles don't look quite\nright?</li>\n<li>Open css/style.css in your text editor.</li>\n<li>Visit the W3C CSS validator\n<a href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\">http://jigsaw.w3.org/css-validator/#validate_by_input</a>.\nIf not already selected, click on the tab labeled \"By direct input\".</li>\n<li>Copy the code from css/style.css and paste it into the text area. Click the\n\"Check\" button.</li>\n<li>Use the error messages to correct the CSS.</li>\n<li>Repeat steps 3-5 until your readout states \"Congratulations! No Error\nFound.\".</li>\n</ol>\n\n<p>Remember to check your progress in <code>index.html</code> in your browser!</p>\n\n<h2>Conclusion</h2>\n\n<p>With a CSS validator, you can work your way through cleaning up errors in a CSS\ndocument and reduce the likelihood of display errors across platforms. Using the\nW3C CSS validator will help you quickly and efficiently troubleshoot your CSS.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\">W3C CSS Validator - Validate Direct Input</a></li>\n</ul>",
			"exportId": "g6a29ddf6c5f8c041e91de8ff395f79c9"
		},
		{
			"id": 432917,
			"title": "My Little Rainbow",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-rainbow-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Review HTML basics</li>\n<li>Review CSS basics</li>\n<li>Specify hexadecimal color values with CSS</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In this lab, we're going to make a rainbow with HTML <code>&lt;div&gt;</code> elements. And while\nwe do it we're going to learn about HTML elements, CSS styling, CSS selectors,\nhow color works in CSS and importing style sheets.</p>\n\n<p>Before we start, here's some basic info about HTML and CSS. Skip to\n<a href=\"#make-a-rainbow\">Make a CSS Rainbow</a> if you feel comfortable enough with HTML\nand CSS.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode. Run <code>learn test</code> as you work to see your test progress.</p>\n\n<h2>Review HTML Basics</h2>\n\n<p>Hyper Text Markup Language, or HTML, is a way to structure a document with\ndifferent parts. Each section of content is <em>marked</em> by elements (using tags).\nEach element has its own special meaning that the browser uses to <em>render</em> the\nHTML document. Use this <a href=\"https://htmlcheatsheet.com/\">cheat sheet</a> on HTML\nelements for guidance.</p>\n\n<h3>Elements</h3>\n\n<ul>\n<li>All begin with <code>&lt;</code> and end with <code>&gt;</code>, e.g., <code>&lt;div&gt;</code> (this last part is a tag).</li>\n<li>Most have an opening tag such as <code>&lt;div&gt;</code> and a closing tag <code>&lt;/div&gt;</code>.\n\n<ul>\n<li>The <code>/</code> indicates to the browser that that tag is a closing tag.</li>\n<li>The element is everything between the tags and the tags themselves.</li>\n</ul>\n</li>\n<li>Some tags are self-closing like the line break element <code>&lt;br&gt;</code>.</li>\n<li>Elements can have IDs and classes to aid the browser in finding specific tags.\n\n<ul>\n<li>Must begin with a letter A-Z or a-z.</li>\n<li>Can be followed by: letters (<code>A-Za-z</code>), digits (<code>0-9</code>), hyphens (<code>-</code>), and\nunderscores (<code>_</code>).</li>\n<li>IDs <strong>can</strong> only be used once per page. E.g.:\n<code>&lt;div id=\"this-special-div\"&gt;&lt;/div&gt;</code>.</li>\n<li>Classes can be used as many times as you want. E.g.:\n<code>&lt;div class=\"a-less-special-div\"&gt;&lt;/div&gt;</code>.</li>\n</ul>\n</li>\n<li>Elements nested inside other elements are called children.\n\n<ul>\n<li>Children inherit attributes from their parents.</li>\n<li>Don't nest everything.</li>\n</ul>\n</li>\n<li>Elements next to one another are siblings.\n\n<ul>\n<li>Siblings do not inherit from one another but are important for selecting in\nCSS.</li>\n</ul>\n</li>\n</ul>\n\n<p>Here is an example of element relations:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"c\">&lt;!-- the parent element --&gt;</span>\n  <span class=\"nt\">&lt;p&gt;&lt;/p&gt;</span>\n  <span class=\"c\">&lt;!-- the first sibling element/the first child--&gt;</span>\n  <span class=\"nt\">&lt;p&gt;&lt;/p&gt;</span>\n  <span class=\"c\">&lt;!-- the second sibling element/the second child --&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n<h2>Review CSS Basics</h2>\n\n<p>Cascading Style Sheets, or CSS, is a language created to style HTML documents by\ntelling the browser how specific elements should look. CSS does this by\nselecting elements based on their tag, ids, classes, or all of the above. The\nreason for CSS is the separation of concerns. We want HTML to focus on the\nstructure and meaning of our content. We let CSS worry about how to make that\ninformation appear clear and engaging.</p>\n\n<h3>CSS selectors</h3>\n\n<ul>\n<li>They select elements to assign them styles.</li>\n<li>\n<code>*</code> (wildcard) selects every element.</li>\n<li>An element, such as <code>div</code>, will select all elements of that type.</li>\n<li>They select an id like <code>#some-id</code>\n</li>\n<li>Classes are selected like this <code>.some-class</code>\n</li>\n<li>To select all children elements of a parent do something like this <code>div p</code>\n</li>\n<li>To select multiple different elements separate them by commas like this\n<code>div, p, a</code>\n</li>\n</ul>\n\n<p>Here's an example of CSS styling:</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"o\">*</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span> <span class=\"c\">/* color in CSS refers to font color */</span>\n<span class=\"p\">}</span> <span class=\"c\">/* all elements will have red font */</span>\n</code></pre></div>\n<h2>\n<a id=\"make-a-rainbow\"></a> Make a CSS Rainbow</h2>\n\n<p>In the directory, you'll see three files: <code>index.html</code>, <code>main.css</code>, and this\nfile, <code>README.md</code>. Open <code>index.html</code>.</p>\n\n<p>If everything is working correctly, you should see a white page.</p>\n\n<p>Good job!</p>\n\n<h3>Making the Divs Visible</h3>\n\n<p>If you look at the file in your text editor or use the inspector, you'll see\nthat the basic HTML structure is present in <code>index.html</code>. So why can't we see\nanything?</p>\n\n<p>Well, <code>div</code>s are <em>structural</em> elements. They're used to <em>invisibly</em> group other\nvisible elements together. But the style sheet that would tell our <code>div</code>s to do\nsomething a little different hasn't been linked yet!</p>\n\n<p>Let's fix this by adding the style sheet to the <code>head</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;head&gt;</span>\n  <span class=\"nt\">&lt;title&gt;</span>My Little Rainbow<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span> <span class=\"na\">href=</span><span class=\"s\">\"./main.css\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n</code></pre></div>\n<p><code>Link</code> is a self-closing tag that will create a relative path with the <code>href</code>\nattribute. A relative path <code>./main.css</code> means the browser knows that the\n<code>main.css</code> file is in the same place as <code>index.html</code>. The <code>head</code> is a hidden\npart of the page that tells the browser where to find any other files it needs\nto display the page correctly, the <code>title</code> for the tab, and any other possible\nimportant information.</p>\n\n<p>Now if you refresh the <code>index.html</code> page in your browser you should see a\nperfectly solid-black rainbow.</p>\n\n<p>We got the basic outline because in the <code>main.css</code> all the <code>div</code> elements were\nselected and given a <code>border</code> whose color is <code>#000</code>, \"black.\" While we could set\n<code>border-top-color: red;</code>, we will have more colors available if we define colors\nwithout words.</p>\n\n<p>Instead of <code>red</code>, <code>green</code>, or the exotic <code>tomato</code>, professionals prefer a set of\nnumbers with a base pair of 16 rather than a base pair of 10 like we use every\nday. These numbers are called \"hexadecimal\" and we can use them to make a wide\nrange of colors.</p>\n\n<h3>Some Stuff You Should Know About Hex Colors (and Web Colors in General)</h3>\n\n<p>Hex colors begin with <code>#</code> and are followed by, generally, 6 numbers, but some of\nthese numbers are actually letters. The lowest single digit number in hex is <code>0</code>\nand the highest single digit number is <code>f</code>. This table might help to visualize\nwhat we mean by this.</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Decimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\nHexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10\n</code></pre></div>\n<p>Hex colors work by creating Red, Green, Blue (RGB) values. Traditional RGB\ncolors are on a scale of 0 to 255 for each of the three colors in the spectrum.\nHex colors are considered true colors since they can represent ~16 million\ncolors—but your eye can only see 10 million of those. So <code>#000000</code> translates to\nblack since 0 reds, 0 green, 0 blues represents the absence of all colors, and\n<code>#ffffff</code> makes white since 255 reds, 255 greens, and 255 blues is the maximum\nof each of the colors.</p>\n\n<p>Hex colors can be shortened to just three numbers when each RGB value is the\nsame for each digit. So <code>#11dd99</code> can be written as <code>#1d9</code>.</p>\n\n<h3>Coloring the Rainbow</h3>\n\n<p>To get ROYGBIV onto our rainbow we'll need seven hex colors. Red: <code>#f00</code>;\nOrange: <code>#ffa500</code>; Yellow: <code>#ff0</code>; Green: <code>#00bc3f</code>; Blue: <code>#06f</code>; Indigo:\n<code>#8a2be2</code>; Violet: <code>#d300c9</code></p>\n\n<p>All we have to do next is select each div individually and apply each of those\ncolors. That is a perfect use for ids since they're meant to style one specific\nelement only. We need to add an id for each div so a logical name for each div\nwould be the color that they have to be. It could be something random, but good\nnames make for semantic code. So let's give the outermost div the id red.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"red\"</span><span class=\"nt\">&gt;</span>...<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n<p>To give that id some CSS attributes we'll go into <code>main.css</code>, select the id, and\nmark its color as red.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nf\">#red</span> <span class=\"p\">{</span>\n  <span class=\"c\">/* this selects any elements with the red id */</span>\n  <span class=\"nl\">border-top-color</span><span class=\"p\">:</span> <span class=\"m\">#f00</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>To make sure the rainbow isn't so monochromatic you now need to repeat the above\nsteps with the final six colors, and when you do you should have a complete,\ncolorful rainbow.</p>\n\n<h2>Moving On</h2>\n\n<p>When you're done with this lab type <code>learn test</code> to confirm you've passed all the\ntests.</p>\n\n<h2>Conclusion</h2>\n\n<p>After we reviewed HTML and CSS basics, we moved on to create an HTML rainbow. We\nlinked our style sheet to our HTML page and added ids to our HTML elements. We\nthen created CSS rules, using hexadecimal color values, for those elements to\ndisplay all the colors on our completed HTML page.</p>",
			"exportId": "g04141266d21ca0d0eee0abab24edbbd2"
		},
		{
			"id": 432919,
			"title": "BONUS: CSS Kitten Wheelbarrow",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-kitten-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Position elements absolutely</li>\n<li>Practice using CSS selectors</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Oh no! All of our kittens have escaped from the wheelbarrow and we need to get\nthem back in. Help collect all the kittens and put them into the wheelbarrow\nusing CSS selectors and absolute positioning.</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode.</p>\n\n<h2>Position Elements Absolutely</h2>\n\n<p>There are a few different ways we can use CSS to position elements in our web\npages. <em>Absolute</em> positioning means placing the element in its containing\nelement in a certain location that will stay the same no matter where other\nelements are placed. We can use absolute positioning to specify <em>exactly</em> where\nin the document layout we want an element to be placed:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/phase-0-css-kitten-lab/absolute-position.png\" alt=\"absolute positioning diagram\"></p>\n\n<p>Here's an example of what absolute positioning looks like in CSS:</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nc\">.parent-element</span> <span class=\"p\">{</span>\n  <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.child-element</span> <span class=\"p\">{</span>\n  <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span>\n  <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50px</span><span class=\"p\">;</span>\n  <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">50px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<blockquote>\n<p><strong>Note</strong> When using <code>position: absolute</code>, the browser calculates the position\nusing top/left from the closest parent element that has a position specified —\nthat's why in the example, we're specifying <code>position: relative</code> for the\nparent element. Check out the resources on positioning for more info on this\nif you're interested!</p>\n</blockquote>\n\n<p>For this lab, we've done the work of calculating the absolute positions and\ncreating CSS rules for a bunch of different kitten image elements. It's your job\nto use CSS selectors to apply the correct positioning to each of these elements.</p>\n\n<p>To get started with this lab, open the <code>index.html</code> file in the browser. Use the\ncomments in <code>css/place-kitty.css</code> to write the correct selectors to move each\nkitty into the wheelbarrow.</p>\n\n<h2>Conclusion</h2>\n\n<p>Nice work getting practice with more CSS selectors, and learning about absolute\npositioning along the way! Now that you've seen absolute positioning in action,\nyou'll have a better sense of when you might need to use it to build more\ncomplex CSS layouts in the future.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\">Mozilla Developer Network: CSS Selectors</a></li>\n<li><a href=\"https://www.w3schools.com/cssref/css_selectors.asp\">W3 CSS Selector Reference</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning\">Mozilla Developer Network: Positioning</a></li>\n</ul>",
			"exportId": "g4ba8bc4e4c772b74196b10d5fcb8b845"
		},
		{
			"id": 432921,
			"title": "BONUS: CSS Graffiti Override Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-graffiti-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Use the browser developer tools</li>\n<li>Override existing styles</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Imagine that you are walking down the street, and you notice that there's a\nmural that has been painted over with various graffiti tags. In reality,\ncleaning this up could be a challenging feat; however, in CSS, you have the\npower to manipulate the DOM with just a line or two of code and to restore the\nmural to its original look! In this lab, we've created a virtual wall. Using\nonly CSS, how can you remove the tags?</p>\n\n<h2>Getting Started</h2>\n\n<p>Fork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run <code>code .</code> to open the files in Visual Studio\nCode. Run <code>learn test</code> as you go to see your test progress.</p>\n\n<h2>Use the Browser Developer Tools</h2>\n\n<p>Assuming you have opened the index file in Chrome, open the <a href=\"http://discover-devtools.codeschool.com/\">dev tools</a>.\nYou can quickly access Chrome dev tools with the keyboard shortcut\n<code>Cmd+Option+i</code> on a Mac, or by right/control-clicking anywhere in the window and\nselecting <code>inspect</code>.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-graffiti-override/inspect1.png\" alt=\"Chrome Dev Tools\" title=\"Open the Chrome dev tools\"></p>\n\n<p>Inspect the elements of the graffiti wall in the dev tools by hovering over and\nclicking on nested elements. Take a close look at what's made available to you\nin the dev tools pane. You can see which style sheets specific style\ndeclarations live in, as well as create new styles on the fly. Now, make note of\nthe CSS styles used to add graffiti tags (as background images) to the wall.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-graffiti-override/inspect2.png\" alt=\"Chrome Dev Tools\" title=\"Inspect the styles on each element\"></p>\n\n<h2>Override Existing Styles</h2>\n\n<p>In the file <code>css/cleanup.css</code>, write selectors that have more specificity\n(authority) than those that are showing the graffiti tags. You can test out\nwriting classes in dev tools by clicking the <code>+</code> in the top right-hand corner of\nthe pane. You can also click the <code>sources</code> tab and select <code>css/cleanup.css</code> in\nthe dev tools pane. This allows you to edit the CSS file directly. It <em>won't</em>\nsave your edits, but it will give a live update of changes so that it's easier\nto manipulate the DOM without refreshing the page. From there, you can copy and\npaste your working changes into the file.</p>\n\n<p>To remove the tags, use the CSS declaration <code>display:none;</code>. It will change the\nelements' previous display property value from <code>display: block</code> to\n<code>display: none</code>, which will hide that graffiti.</p>\n\n<p>For example, for \"tag-1\" the developer tools reveal that the style applying the\ngraffiti here is:</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nc\">.tag-1</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"sx\">url(../images/tag-1.png)</span> <span class=\"nb\">no-repeat</span><span class=\"p\">;</span>\n  <span class=\"nl\">z-index</span><span class=\"p\">:</span> <span class=\"m\">7</span><span class=\"p\">;</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>You'll need to override this by setting its display to <code>display: none;</code> instead.\nWe can do this by writing a selector statement that is more specific such as:</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nf\">#wall</span> <span class=\"nc\">.tag-1</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This selects elements with a class of \"tag-1\" that happen to also be inside an\nelement with an id of \"wall\". This is more specific, and therefore will override\nthe previous statement and hide the graffiti. For more info on how specificity\nin CSS works take a look at: <a href=\"http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\">Smashing Magazines What You Need to Know About CSS\nSpecificity</a>. You can also take advantage of a <a href=\"https://specificity.keegan.st/\">Specificity\nCalculator</a> to assist with finding and understanding options for\noverriding styles.</p>\n\n<p><strong>Do not use the CSS <code>!important</code> value</strong>! It is considered a bad practice and\nshould be used sparingly, in very specific edge-cases. For this lab, avoid\nadding inline or embedded CSS to the index.html file, or any additional class or\nid attributes to the index.html file either. This will make it more challenging\nas you will have to write CSS that is more specific based on the existing\nmarkup.</p>\n\n<h2>Moving On</h2>\n\n<p>When you're done, run <code>learn test</code> from the command line to confirm you've\npassed all tests.</p>\n\n<h2>Conclusion</h2>\n\n<p>With the dev tools and resources on CSS specificity rules, work your way through\nall seven graffiti pictures until the wall is fully clean. In your\nexperimentation, you will find that there are many ways to manipulate and\noverride the DOM. This will become a common practice as you build out more\ncomplex websites or work with cloud-hosted third-party resources where you may\nnot have direct access to the style sheet.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\">Smashing Magazine - CSS Specificity</a></li>\n<li><a href=\"http://css-tricks.com/specifics-on-css-specificity/\">CSS Tricks - CSS Specificity</a></li>\n<li><a href=\"https://specificity.keegan.st/\">Specificity Calculator</a></li>\n</ul>",
			"exportId": "g533bd33fb5cbac3ee762bd7ddc8dc634"
		},
		{
			"id": 432923,
			"title": "Survey - CSS",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the CSS module?</p>\n</div>",
			"exportId": "gf1a05cf22952cc3dd055f523a407b1c1"
		}]
	},
	{
		"id": 44870,
		"name": "Manipulating the DOM",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "ga7418a2d6676f3ce3a0c35cde217bceb",
		"items": [
		{
			"id": 432927,
			"title": "Introduction to the DOM",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-introduction\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify the Document Object Model (DOM)</li>\n<li>Explain how the DOM is created</li>\n<li>Identify the DOM as accessed by JavaScript objects</li>\n<li>Introduce the Console and Chrome DevTools</li>\n<li>Learn how to open HTML files in the browser</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We have learned how to write HTML and style it with CSS. We have also built our\nJavaScript programming skills. With this knowledge, we're now ready to learn\n<strong>Document Object Model (DOM) programming</strong>.</p>\n\n<p>DOM programming consists of using JavaScript to:</p>\n\n<ol>\n<li>Ask the DOM to find or select an HTML element or elements in the rendered\npage</li>\n<li>Remove and/or insert one or more elements</li>\n<li>Adjust a property of selected element(s)</li>\n</ol>\n\n<p>In other words, we can use DOM programming to create and modify content that\nusers see in their browsers and add interactivity to our web pages.</p>\n\n<h2>Identify the Document Object Model</h2>\n\n<p>Let's start with a biology metaphor. Your DNA represents a code-based version of\n<em>you</em>. The DOM represents a code-based version of <em>a web page</em>. If something\nedits your DNA, changes will be made in your body (perhaps giving you mutant\npowers). Similarly, when you change something in the DOM, you change what's\ndisplayed in the browser.</p>\n\n<p>But what exactly <strong><em>is</em></strong> the DOM? You can think of it as a \"middle layer\"\nbetween the user and the underlying HTML, CSS, and JavaScript that makes up the\npage. What the user is actually seeing on the page is the DOM. When the page\ninitially loads, the DOM represents the underlying HTML, CSS and JavaScript.\nWhen we use JavaScript and DOM programming to modify the DOM and change what the\nuser sees, the underlying code is not modified: if we refresh the page, it goes\nback to its original state.</p>\n\n<h3>Explain How the DOM Is Created</h3>\n\n<p>The DOM is created when the page loads from the HTML/CSS/JavaScript that the web\nserver provides to the browser. Let's examine this process step-by-step:</p>\n\n<blockquote>\n<p><strong>NOTE</strong>: To ensure that instructions and screenshots match up with your\nexperience, be sure to use the <a href=\"https://www.google.com/chrome/browser/desktop/index.html\">Google Chrome</a> browser.</p>\n</blockquote>\n\n<ol>\n<li>In Google Chrome, open a tab and navigate to the <a href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\">Wikipedia page for Ada Lovelace</a>.</li>\n<li>To see the HTML of this page, add <code>view-source:</code> to the front of the URL in\nthe URL bar. Using the <code>view-source</code> URL prefix will display all the page's\nsource HTML. It will look something like this:\n<img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-the-dom/html-source.png\" alt=\"html-source\"></li>\n<li>The browser reads this HTML, along with CSS and JavaScript defined in\n<code>&lt;script&gt;</code> or <code>&lt;link&gt;</code> tags, to create the DOM inside the browser. At this\npoint, nothing is displayed on the screen. This time when nothing is\ndisplayed is very brief so our human eyes never really catch it.</li>\n<li>The browser then uses the DOM object to create the rendered page. While we\noften learn that browsers \"display HTML,\" that's not exactly accurate.\nBrowsers use the HTML to create a \"middleman\" that they, in turn, use to\ndisplay the structured and styled content.</li>\n</ol>\n\n<h3>Identify the DOM as Accessed by JavaScript Objects</h3>\n\n<p>We can access the DOM, using JavaScript and DOM programming, through two\n<em>variables</em>: <code>window</code> and <code>document</code>.</p>\n\n<p>The <code>window</code> variable points to an <em>object</em> that represents Chrome's information\nabout the browser, well, \"window.\" It has many functions, but the main one is\n\"it's a place where everything is.\" Not to be Zen here, but a browser without a\n<code>window</code> is like the universe before the Big Bang; there's just... <em>nothing</em>.</p>\n\n<p>Like all objects, the <code>window</code> has properties and methods. For example, we can\naccess operating system browser information like:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span><span class=\"p\">;</span>\n<span class=\"c1\">// returns the inner height of the browser window.</span>\n</code></pre></div>\n<p>For the most part, we won't interact with <code>window</code>: we don't want to mess with\nthe container of everything or with operating system stuff. We want, rather, to\nchange content. To do that, we'll focus on an object called <code>document</code>.</p>\n\n<p>As an <em>object</em>, <code>document</code> has <em>properties</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">URL</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; https://en.wikipedia.org/wiki/Ada_Lovelace</span>\n</code></pre></div>\n<p>As an <em>object</em>, <code>document</code> also has <em>methods</em>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">h1</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"c1\">//=&gt; Returns the element on the page with an id attribute equal to \"firstHeading\"</span>\n</code></pre></div>\n<p>The <em>methods</em> and <em>properties</em> that the DOM provides via its objects is called\nthe DOM's \"Application Programming Interface,\" or \"API.\" It's just a programming\nword that you're likely to see online. But it just means \"the things that these\nobjects know how to do.\"</p>\n\n<h2>The Browser Console and Chrome Developer Tools</h2>\n\n<p>Every major browser comes with a built-in set of developer tools that you can\nuse to inspect, modify, and debug the content of a web page. To <a href=\"https://developers.google.com/web/tools/chrome-devtools/console/#open_as_panel\">open the dev\ntools in Chrome</a>, press <code>Ctrl+Shift+J</code> (Windows / Linux) or\n<code>Cmd+Opt+J</code> (Mac). Chrome ships with a whole suite of useful developer tools,\nbut the only one we care about for now is the JavaScript console.</p>\n\n<p>The console is an environment in the browser where we can type and run\nJavaScript code in the context of the current browser window. The console is\n<em>sandboxed</em>, meaning the only resources it has access to are those loaded on the\ncurrent page. Once we start declaring variables and functions in separate\nJavaScript files, we'll be able to access and play around with them in the\nconsole. The console is the single best tool for debugging JavaScript in the\nbrowser, so start familiarizing yourself with it now.</p>\n\n<p>The <code>Ctrl+Shift+J</code> / <code>Cmd+Opt+J</code> command should open up straight into the\nconsole. If for whatever reason, it doesn't, you can always click on <code>Console</code>\nin the dropdown (when the DevTools are collapsed) or in the list of tabs:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/opening_the_console.gif\" alt=\"Opening the console\"></p>\n\n<p>If at any point the console becomes cluttered with errors, warnings, or anything\nelse, click the <code>Clear console</code> button:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/clearing_the_console.gif\" alt=\"Clearing the console\"></p>\n\n<p>Okay, okay, enough background and setup. Let's write some code!</p>\n\n<h3>Coding in the Console</h3>\n\n<p>You can write and test out JavaScript code in the console. We'll start off with\nsome simple math. In the console, type <code>1 + 1</code> and press enter. You should see\nthe number <code>2</code> appear.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/math_in_console.gif\" alt=\"Math in the console\"></p>\n\n<p>Try out some other mathematical expressions and see what they return.</p>\n\n<p>Next up, let's write some text. To make sure the JavaScript engine knows that\nwe're trying to write some literal text, we need to wrap it in quotation marks,\nlike so:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"dl\">\"</span><span class=\"s2\">This is some literal text in JavaScript!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Go ahead and type that classic phrase, <code>\"Hello, world!\"</code>, into the console and\npress enter. It returned <code>\"Hello, world!\"</code> right back to us. Try typing some\nmore literal text into the console, such as your name. Don't forget the\nquotation marks!</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/text_in_console_300.gif\" alt=\"Text in the console\"></p>\n\n<p>We can go far beyond simple literal expressions: we can create variables, loops,\nor if statements in the console. We can even define and run functions!</p>\n\n<blockquote>\n<p><strong>Note:</strong> It's impossible to overstate how important practice is when you're\nlearning a new programming language. As you continue moving through the\nJavaScript curriculum, you should almost always have a browser console open.\nCode along with every example. Get used to the syntax and familiarize yourself\nwith the errors that arise when you mistype something. Clear the console or\nsimply refresh the page whenever you need a clean slate. Code, code, code,\n<strong>code</strong>, <strong><em>code</em></strong>.</p>\n</blockquote>\n\n<h2>Opening Files in the Browser</h2>\n\n<p>In this section, you will begin working with HTML files (most often,\n<code>index.html</code>). In order to view the results of the coding you'll be doing,\nyou'll need to open the file in the browser. Instructions for each programming\nenvironment are as follows:</p>\n\n<ul>\n<li><strong>Local environment on Mac</strong>: Run <code>open index.html</code> in the terminal.</li>\n<li><strong>Local environment using WSL/Ubuntu</strong>: Run <code>explorer.exe index.html</code> in the\nterminal.</li>\n</ul>\n\n<p>Keep these instructions handy — you will be doing this often.</p>\n\n<blockquote>\n<p><strong>Note:</strong> In order for these instructions to work, you will need to have\nGoogle Chrome set as your default browser. You can find\n<a href=\"https://support.google.com/chrome/answer/95417?hl=en&amp;co=GENIE.Platform=Desktop\">instructions for Mac and Windows here</a>.</p>\n</blockquote>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson we learned about the DOM, which is a \"middle layer\" that presents\nthe HTML, CSS and JavaScript loaded by the browser when we visit a page. We\nnormally interact with it through the <code>document</code> object. Because it is the\n\"source of truth\" for what browsers display, changes to the DOM create changes\nin the browser screen. We also learned how to access the Chrome Developer Tools\nand use the Console to try out code as we're building our programs.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://css-tricks.com/dom/\">CSS Tricks - What is the DOM?</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">MDN - The DOM</a></li>\n</ul>",
			"exportId": "introduction-to-the-dom"
		},
		{
			"id": 432929,
			"title": "DOM Editing Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-editing-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Identify that DOM nodes are written as HTML</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We've started looking at the DOM and how it's created. Now it's time to see its\nstructure.</p>\n\n<p>If you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code.</p>\n\n<h2>Identify That DOM Nodes Are Written As HTML</h2>\n\n<p>In the previous lesson, we learned that, when we load a web page in a browser,\nthe content we see in the DOM is a representation of the underlying HTML, CSS\nand JavaScript. If we were to view the DOM in Chrome Dev Tools (we'll learn how\nto do that shortly), we would see HTML that is a clone of the HTML found in the\nsource HTML file. As we learned earlier in the course, that HTML consists of\n<em>elements</em> that in turn consist of HTML <em>tags</em> and their content.</p>\n\n<p>When we're working in the DOM, the structure is the same. We can access objects\nin the DOM (called <em>nodes</em>) that consist of tags, just like the HTML elements\nthat make up the base HTML. Nodes and elements are not the same thing —\nall elements in the DOM are nodes but not all nodes are HTML elements. However,\nwhen we're working in the DOM, the nodes we access and modify are virtually\nalways HTML elements.</p>\n\n<h3>The Structure of DOM Content</h3>\n\n<p>We'll start by going over how content in the DOM is structured using nodes. The\ninformation below should be familiar from what you've learned about HTML\nelements.</p>\n\n<p>DOM nodes most often have a starting tag and an ending tag. Examples include a\nparagraph:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;p&gt;</span>I am a paragraph.<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div>\n<p>or a <code>main</code> section:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;main&gt;&lt;/main&gt;</span>\n</code></pre></div>\n<p>Because they have both starting and ending tags, we can nest other nodes inside\nthem. The inner node is called a child node, and the outer node is called a\nparent node. To nest items, we simply add the child node and its content between\nits parent's starting and ending tags:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;main&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>I am a nested paragraph, inside the main element, inside the body!<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;/main&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n</code></pre></div>\n<p>Some nodes only have a starting tag. Those are called <em>self-closing elements</em> or\n<em>void elements</em>. Void elements do not have any content nested inside of them and\ncannot be parent nodes.</p>\n\n<p>An example of a self-closing tag is an image:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span>\n  <span class=\"na\">src=</span><span class=\"s\">\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\"</span>\n  <span class=\"na\">alt=</span><span class=\"s\">\"A cartoon gif\"</span>\n<span class=\"nt\">/&gt;</span>\n</code></pre></div>\n<p>In self-closing tags, the trailing <code>/</code> is optional. This is valid too:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span>\n  <span class=\"na\">src=</span><span class=\"s\">\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\"</span>\n  <span class=\"na\">alt=</span><span class=\"s\">\"A cartoon gif\"</span>\n<span class=\"nt\">&gt;</span>\n</code></pre></div>\n<p>Enough review, let's write some HTML!</p>\n\n<h2>Instructions</h2>\n\n<p>Start by running the tests and taking a look through the errors. You'll see that\nthe tests are looking for certain content to be present in the HTML file.</p>\n\n<p>Next, open the <code>index.html</code> file in the browser using the instructions in the\nprevious lesson for your development environment.</p>\n\n<p>Just to speed things up a bit, paste the following code into <code>index.html</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"UTF-8\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1.0\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">\"X-UA-Compatible\"</span> <span class=\"na\">content=</span><span class=\"s\">\"ie=edge\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Introduction to the DOM Lab<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"c\">&lt;!--All our work for this lesson will go here--&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n<p>Refresh the browser page to see the changes.</p>\n\n<p>Open the Google Developer Tools by clicking on the \"View\" menu and selecting\nDeveloper -&gt; Developer Tools. The Elements tab should be selected but, if it\nisn't, click on it. Here we have the DOM representation of the HTML source\nloaded by the browser. You should see the <code>head</code> and <code>body</code> elements nested\ninside the <code>html</code> element. If the <code>body</code> element is collapsed, use the\ndisclosure triangle to expand it. You should see that the <code>body</code> element is,\ntemporarily, child-less. Let's go ahead and start adding some content in\n<code>index.html</code>.</p>\n\n<p><strong>Note</strong>: the\n<a href=\"https://en.wikipedia.org/wiki/Disclosure_widget\">disclosure triangle</a> is the\ntriangle to the left of the <code>&lt;body&gt;</code> tag. When you first open the Elements tab,\nthe nodes are generally collapsed, hiding their contents. You can click the\ntriangle to expand the node and see its contents. Disclosure triangles are\nstandard for hiding information throughout Chrome DevTools. If you want to see\nmore, feel free to click on the triangle! You're not going to break anything.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-1/dom-editing-lab/disclosure-triangle.png\" alt=\"Disclosure Triangle\"></p>\n\n<p>First, let's add a title to our page:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;h1&gt;</span>My HTML adventure<span class=\"nt\">&lt;/h1&gt;</span>\n</code></pre></div>\n<p>Refresh the page to see the changes displayed in the browser. If you view the\nElements tab again, you should see that a new child node is nested inside the\n<code>body</code>. Finally, run the tests again; the first test should now be passing.</p>\n\n<p>Next, we'll add a paragraph below the title. We'll also add some highlighted\nbits of text to the paragraph to make it stand out a little.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;p&gt;</span>\n  We're writing HTML markup to display in our <span class=\"nt\">&lt;strong&gt;</span>browser<span class=\"nt\">&lt;/strong&gt;</span>. We're\n  basically telling computers what to do. <span class=\"nt\">&lt;em&gt;</span>Neat!<span class=\"nt\">&lt;/em&gt;</span>\n<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre></div>\n<p>Save the file and check out the page in the 'Elements' tab. What's happening\nabove is that we added some inline elements, <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code> to our\nparagraph to style things a little. The <code>&lt;strong&gt;</code> tag makes any text within\nlook <strong>important</strong>. It's usually bold in browsers by default. The <code>&lt;em&gt;</code> tag\nallows us to <em>emphasize</em> certain text. This text is typically rendered as italic\nin browsers.</p>\n\n<p>Run the tests again; you should now have all but two of the tests passing.</p>\n\n<p>In our paragraph, let's make \"HTML\" a hyperlink and link to the MDN definition.\nWe'll use the<code>&lt;a&gt;</code> tag for this. Add this to our existing <code>&lt;p&gt;</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code>We're writing\n<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://developer.mozilla.org/en-US/docs/Web/HTML\"</span><span class=\"nt\">&gt;</span>HTML<span class=\"nt\">&lt;/a&gt;</span> markup to\ndisplay in our <span class=\"nt\">&lt;strong&gt;</span>browser<span class=\"nt\">&lt;/strong&gt;</span>.\n</code></pre></div>\n<p>Notice that HTML attributes (in this case, the <code>href</code> attribute) are shown\nalongside their opening tag.</p>\n\n<p>Lastly, we'll add a table below the paragraph to recap some of the stuff in\nthis lesson:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;table&gt;</span>\n  <span class=\"nt\">&lt;thead&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;th&gt;</span>Element name<span class=\"nt\">&lt;/th&gt;</span>\n      <span class=\"nt\">&lt;th&gt;</span>Display value<span class=\"nt\">&lt;/th&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;/thead&gt;</span>\n  <span class=\"nt\">&lt;tbody&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>h1<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>block<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>p<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>block<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>strong<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>inline<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>em<span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td&gt;</span>inline<span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;/tbody&gt;</span>\n<span class=\"nt\">&lt;/table&gt;</span>\n</code></pre></div>\n<p>Woah. That's a <strong>lot</strong> of markup! If you take a look at the result, though,\nyou'll see that it's a fairly complex visual — it's a table! Our table\nconsists of a header and a body. The header allows us to give the columns a\nname, and the table body contains the rows of content. Both <code>&lt;thead&gt;</code> and\n<code>&lt;tbody&gt;</code> tags contains rows, which are represented as <code>&lt;tr&gt;</code> (table row). These\nrows then contain cells which form the table's columns. In the <code>&lt;thead&gt;</code> row,\ncells are represented as <code>&lt;th&gt;</code>, while cells in <code>&lt;tbody&gt;</code> have their content in\n<code>&lt;td&gt;</code> tags.</p>\n\n<p>That's a <em>lot</em> of nesting.</p>\n\n<p>Look again at the Elements tab. Expand out all the children of the <code>table</code>.\nThis is the DOM tree!</p>\n\n<p>When you're done, go ahead and run the tests. They should now all be passing.</p>",
			"exportId": "g9353e302b64c1b533c82aa8fd5242d3a"
		},
		{
			"id": 432930,
			"title": "Changing The DOM with DevTools and JavaScript",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-dev-tools\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Demonstrate viewing the DOM through Chrome DevTools</li>\n<li>Select an element with Chrome DevTools</li>\n<li>Delete an element with Chrome DevTools</li>\n<li>Demonstrate that the source is not changed when the DOM is</li>\n<li>Demonstrate opening the DevTools' JavaScript console</li>\n<li>Select an element with JavaScript</li>\n<li>Delete an element with JavaScript</li>\n<li>Storing node references in variables</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We've read that updating the DOM will update the browser's rendered page. Let's\ntry this out. We're going to change the DOM in two ways. First, we'll use\nChrome's Developer Tools (\"DevTools\") and our mouse to remove an element from\nthe DOM. Then we'll use the DevTools' JavaScript console to run JavaScript that\ndoes the same thing.</p>\n\n<h2>Demonstrate Viewing the DOM Through Chrome DevTools</h2>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/ada-wiki.png\" alt=\"ada-wiki\"></p>\n\n<p>Let's head back to the <a href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\">Wikipedia page for Ada Lovelace</a>. From this\nweb page, look at the Chrome menu bar at the top of the page. Click on \"View\",\nthen select \"Developer\", then \"Developer Tools.\" This will open the Google\nDeveloper Tools. Click on the \"Elements\" tab. Here we see the DOM representation\nof the HTML source that was loaded into the browser.</p>\n\n<h3>Select an Element With Chrome DevTools</h3>\n\n<p>Scroll through the Elements panel. You will see some HTML: <code>head</code> tags, <code>body</code>\ntags, <code>div</code>s, etc. If the <code>body</code> element is collapsed, use the disclosure\ntriangle to expand it. Notice that you can mouse over different elements in the\nElements panel and see them highlighted in the browser window. Locate the <code>div</code>\nnested inside <code>body</code> that has an <code>id</code> attribute of \"content\" and expand that as\nwell.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/content-element.png\" alt=\"content-element\"></p>\n\n<p>Next, locate the <code>h1</code> element nested inside the \"content\" div. It should look\nsomething like this:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/h1-element.png\" alt=\"h1-element\"></p>\n\n<p>Click on the <code>h1</code> element; you'll see that it's highlighted in the Elements\npanel. You've now selected an element with the DevTools.</p>\n\n<h3>Delete an Element With Chrome DevTools</h3>\n\n<p>Press the delete button on your keyboard. The element will vanish from the\nbrowser's rendered page.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/deleted-header.png\" alt=\"deleted-header\"></p>\n\n<h3>Demonstrate That the Source is Not Changed When the DOM Is</h3>\n\n<p>View the page source. In the Chrome menu bar, click on \"View\", then select\n\"Developer\", then \"View Source.\" You will see that the HTML is just as it\nalways was, with the deleted element still present.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/html-source.png\" alt=\"html-source\"></p>\n\n<p>The changes in the DOM do not affect the HTML file on the server. When you think\nabout it, that makes sense. If that were true then anyone could be changing\ncarefully-written HTML. (Of course, in the case of Wikipedia, people <em>can</em> edit\nthe content using Wikipedia's editor, but they aren't directly accessing the\nunderlying HTML.)</p>\n\n<p>The HTML, which lives on the server, <strong>is unchanged</strong>.</p>\n\n<p>Refresh the page by going to \"View\" and choosing \"Reload this Page.\" You will be\nreloading the DOM <em>from the source</em>. The page content will come back.</p>\n\n<h3>Demonstrate Opening the DevTools' JavaScript Console</h3>\n\n<p>Above, we deleted an element by selecting it in the DevTools and pressing the\ndelete key. We can accomplish the same thing using JavaScript.</p>\n\n<p>In DevTools, click the <strong>Console</strong> tab. At the prompt, type the word <code>document</code>\nand press \"Enter.\" You'll get a <code>#document</code> returned. If you hover your mouse\nover the element, you'll see the entire page highlighted in the browser window.\nIf you expand it, you'll see that it's the exact HTML that you saw in the\n<strong>Elements</strong> tab.</p>\n\n<p>Recall that <code>document</code> is an <code>object</code>; as such, it has properties and <code>methods</code>,\nincluding a number of different methods that can be used to return elements.\nLet's find or <code>select</code> an element by speaking JavaScript with the DOM.</p>\n\n<h3>Select an Element With JavaScript</h3>\n\n<p>In the <strong>Console</strong> type:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code>  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">h1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>This will return something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"o\">&lt;</span><span class=\"nx\">h1</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">firstHeading</span><span class=\"dl\">\"</span> <span class=\"kd\">class</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">firstHeading</span><span class=\"dl\">\"</span> <span class=\"nx\">lang</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">en</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span><span class=\"p\">...</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;\n</span></code></pre></div>\n<p>Go ahead and click on that disclosure triangle to see more.</p>\n\n<p>When we run <code>document.querySelector('h1');</code>, it returns the DOM node, which is\nalso a JavaScript <code>object</code>. This means that it, in turn, can have methods called\non it! This is called <em>method chaining</em>. Let's use <em>method chaining</em> to remove\nour node from the DOM.</p>\n\n<h3>Delete an Element with JavaScript</h3>\n\n<p>Now type:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code>  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">h1</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">remove</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>The heading is gone! We called <code>document.querySelector('h1')</code> to get the node;\nwe then used <em>method chaining</em> to call the <code>remove()</code> method on the node object.\nWe use dot notation to <em>chain</em> the calls.</p>\n\n<p>Follow the same process we used earlier to verify that the source has not\nchanged. To restore it, simply refresh the page (i.e. reload the DOM).</p>\n\n<h3>Storing Node References in Variables</h3>\n\n<p>Query methods like <code>querySelector()</code> and the other methods we'll be learning\nabout are expressions: they return a value (specifically, a DOM node). As such,\nwe can save the results of the query into a variable. For example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">header</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">h1</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>We now have a reference to that node with a meaningful name; we can simply use\n<code>header</code> any time we need to refer to our node, rather than always having to\nlook it up with <code>document.querySelector()</code>.</p>\n\n<p>You can perhaps imagine how, if we have a program that selects, creates,\nmodifies, or removes a large number of nodes, using this approach will result in\ncode that's easier to read, debug and maintain.</p>\n\n<h2>Conclusion</h2>\n\n<p>DOM programming is using JavaScript to:</p>\n\n<ol>\n<li>Ask the DOM to find or <code>select</code> an HTML element or elements in the rendered page</li>\n<li>Remove the selected element(s) and/or insert new element(s)</li>\n<li>Adjust a property of the selected element(s)</li>\n</ol>\n\n<p>In this lesson you just did all that stuff! Learning to duplicate what you can\ndo in DevTools with JavaScript <strong><em>is</em></strong> DOM programming. The next lessons are\ngoing to give you more methods for selecting elements and changing them, but you\njust changed the DOM. High fives are in order.</p>",
			"exportId": "changing-the-dom-with-devtools-and-javascript"
		},
		{
			"id": 432931,
			"title": "The DOM Is a Tree",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-is-a-tree\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Describe how the DOM works as a tree</li>\n<li>Define the computer science version of \"Tree\"</li>\n<li>Ask the DOM to find or \"select\" an HTML element or elements in the rendered\npage</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>DOM programming is using JavaScript to:</p>\n\n<ol>\n<li>Ask the DOM to find an HTML element or elements in the rendered page</li>\n<li>Remove the selected element(s) or add a new element next to the selected\nelement</li>\n<li>Adjust a property of the selected element(s)</li>\n</ol>\n\n<p>In previous lessons we were given the command to find the HTML element we\nwanted:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"nx\">selector</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The <em>selector</em> is like a query string that lets us find things within an HTML\npage. What is the syntax of this <em>selector</em>? How does the <em>selector</em> navigate\nthrough our document to find the DOM nodes that we want to work with (update,\nmove, even delete!)?</p>\n\n<p>To understand those queries or <em>selectors</em>, we first need to talk about how the\nDOM tree (i.e. what we see in the 'Elements' panel of our DevTools) is used to\nhelp the DOM's <code>methods</code> find the right nodes.</p>\n\n<h3>Define the Computer Science Version of \"Tree\"</h3>\n\n<p>What do we mean when we say that the DOM is a tree? Trees make a good metaphor\nfor the DOM because almost everyone has seen a tree. Starting at the bottom, you\ncan climb up the tree and out to the farthest — and smallest —\nbranches. The thicker a branch is, the stronger its connections are and the more\nit holds within it. Likewise, the thinner a branch is, the less it holds inside.</p>\n\n<p>The DOM works basically the same way, except we usually talk about the root as\nbeing at the top of the DOM and the leaves being the most deeply nested HTML\nelements. So basically, we can imagine a tree upside down.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-the-dom-tree/Image_6_DomTree.png\" alt=\"DOM Tree Graphic\"></p>\n\n<p>The HTML for this \"tree\" would be:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>My Title<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>A heading<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"http://example.com\"</span><span class=\"nt\">&gt;</span>Link text<span class=\"nt\">&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n<h3>Describe How the DOM Works as a Tree</h3>\n\n<p>Every tree can contain subtrees, which we can treat independently of their\nparent trees. They repeat the pattern and appearance of the full tree, despite\nbeing a smaller part of a tree, like branches. Every child has experienced this\nsense of wonder when they take a fallen branch and stick it in the ground and\nthink that they've planted their own tree.</p>\n\n<p>Practically speaking, the DOM begins at <code>&lt;html&gt;</code>, but for now we should avoid\nchanging what's between the <code>&lt;head&gt;&lt;/head&gt;</code> tags. Most of the time, we will look\nat the DOM subtree with its root at <code>&lt;body&gt;</code> and only change things that will be\nvisible on the page. We might also deal with subtrees. For example, if we have</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>Hi!<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>Bye!<span class=\"nt\">&lt;/p&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n</code></pre></div>\n<p>Our tree looks like this:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>        body\n        /  \\\n      div   div\n      /      \\\n     p        p\n    /          \\\n \"Hi!\"        \"Bye!\"\n</code></pre></div>\n<p>Similarly, if we had a DOM subtree that looked like</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>Hello!<span class=\"nt\">&lt;/h1&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h5&gt;</span>Sup?<span class=\"nt\">&lt;/h5&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n<p>The tree would look like:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>         div\n        /  \\\n      div   div\n      /      \\\n    h1        h5\n    /          \\\n \"Hello!\"     \"Sup?\"\n</code></pre></div>\n<h3>Finding HTML Elements</h3>\n\n<p>In creating the HTML for a page, including <em>metadata</em> for a node (e.g., a <code>class</code>\nor <code>id</code> attribute) will not only provide useful information about that node, but\nwill also make it and its children easier to find. The more specific the\nmetadata is, the more helpful it is for finding the desired element.</p>\n\n<p>For the following exercises, you can experiment with any web page you like. It's\nfun to change <em>The New York Times</em> or Facebook.</p>\n\n<h4>Finding a Node</h4>\n\n<p>JavaScript exposes a few ways of finding DOM nodes, either directly or in\nstages, courtesy of the <code>document</code> object. We will introduce three here, in\norder from most to least specific: <code>getElementByID()</code>,\n<code>getElementsByClassName()</code>, and <code>getElementsByTagName()</code>.</p>\n\n<h5><code>document.getElementById()</code></h5>\n\n<p>This method provides the quickest access to a node, but it requires that we know\na very specific piece of information — its <code>id</code>. This method can only\nreturn one element, since CSS <code>id</code>s are expected to be unique.</p>\n\n<p>Given the following DOM tree:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;h5</span> <span class=\"na\">id=</span><span class=\"s\">\"greeting\"</span><span class=\"nt\">&gt;</span>Hello!<span class=\"nt\">&lt;/h5&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n<p>We could find the <code>h5</code> element with <code>document.getElementById('greeting')</code>.</p>\n\n<p>Notice how the <code>id</code> that we pass to <code>getElementById</code> is identical to the <code>id</code> in\n<code>&lt;h5 id=\"greeting\"&gt;</code>.</p>\n\n<p><strong>Note:</strong> You can use either single(<code>''</code>) or double(<code>\"\"</code>) quotes around the <code>id</code>\nwithin the parentheses in <code>document.getElementById('yourIDGoesHere')</code>, as long\nas you use the same kind to open and close them!</p>\n\n<p><strong>Try it out!</strong></p>\n\n<p>Open up your DevTools and find an element on the page that has an <code>id</code>\nattribute. Then open up your console, type\n<code>document.getElementById('theIdOfTheElement')</code>, and check out your handy-dandy\nDOM node.</p>\n\n<h4><code>document.getElementsByClassName()</code></h4>\n\n<p>This one is also very commonly used in DOM programming.</p>\n\n<p>This method finds elements by their <code>className</code>. Unlike the previous method,\nclass names do not need to be unique, so this method returns an <code>HTMLCollection</code>\nof all the elements with the given class. An <code>HTMLCollection</code> is an array-like\nstructure containing a list of elements. You can iterate over an\n<code>HTMLCollection</code> with a simple <code>for</code> loop.</p>\n\n<p>Given the following DOM tree:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"c\">&lt;!-- the `className` attribute is called `class` in HTML  --&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"banner\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>Hello!<span class=\"nt\">&lt;/h1&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"banner\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>Sup?<span class=\"nt\">&lt;/h1&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"banner\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h5&gt;</span>Tinier heading<span class=\"nt\">&lt;/h5&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n<p>We could find all of the elements with the class name \"banner\" by calling\n<code>document.getElementsByClassName('banner')</code>.</p>\n\n<p><strong>Try it out!</strong></p>\n\n<p>Inspect your web page again, this time making note of a <code>class</code>. Get all\nelements with that <code>class</code> and give 'em a look. On the returned object you can\nuse the <code>.length</code> property to find out how many came back.</p>\n\n<p>If you recall the <code>for</code> loop syntax you might try to write a loop which prints\nout the <code>innerHTML</code> property of every element in the collection. You might find\ndoing so much easier if you save the results of\n<code>document.getElementsByClassName()</code> to a variable:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">elements</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByClassName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">yourClassNameHere</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<h4><code>document.getElementsByTagName()</code></h4>\n\n<p>You can use this method if you <em>don't</em> know an element's <code>id</code> or <code>class</code>, but\nyou <em>do</em> know its tag name (the tag name is the thing between the <code>&lt;&gt;</code>, e.g.,\n<code>div</code>, <code>h1</code>, <code>header</code>, <code>article</code> etc.). Since tag names aren't unique, this\nmethod also returns an <code>HTMLCollection</code>.</p>\n\n<p><strong>Try it out!</strong></p>\n\n<p>Explore the DOM in the console by typing <code>document.getElementsByTagName('div')</code>.\nYou can iterate through these elements using a simple <code>for</code> loop as well.</p>\n\n<h4>Finding a Node Without Knowing Anything About It</h4>\n\n<p>What if we don't have an <code>id</code> or <code>className</code> to help us find a particular\nelement? This is where our knowledge of trees comes in handy!</p>\n\n<p>Given the following DOM tree:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;main&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;div&gt;</span>\n      <span class=\"nt\">&lt;p&gt;</span>Hello!<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;div&gt;</span>\n      <span class=\"nt\">&lt;p&gt;</span>Hello!<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;div&gt;</span>\n      <span class=\"nt\">&lt;p&gt;</span>Hello!<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/main&gt;</span>\n</code></pre></div>\n<p>How would we go about changing only the second \"Hello!\" to \"Goodbye!\"?</p>\n\n<p>Here we're going to use a mix of different <code>methods</code> to accomplish the goal.</p>\n\n<p>Let's start by getting the <code>&lt;main&gt;</code> element</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">main</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">main</span><span class=\"dl\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>We can get the children of <code>main</code> using <code>main.children</code>. This returns an\n<code>HTMLCollection</code>, so we can get the second child with <code>main.children[1]</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">secondChild</span> <span class=\"o\">=</span> <span class=\"nx\">main</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>Next, we can get our <code>&lt;p&gt;</code> element. To constrain the search to just the children\nof the second child, we can call <code>getElementsByTagName()</code> <strong>directly on\n<code>secondChild</code></strong>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nx\">secondChild</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">p</span><span class=\"dl\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n</code></pre></div>\n<p>And lastly we can change an attribute on the <code>p</code> node:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Goodbye!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Obviously, this way of accessing that text isn't very efficient and won't work\non all pages but it does a good job of demonstrating the basic tools available\nto us for finding and manipulating HTML elements.</p>\n\n<h2>Conclusion</h2>\n\n<p>Understanding the tree structure of the DOM helps us navigate all kinds of\ntrees. In subtrees and branches we can find the nodes we need by IDs, class\nnames or tag names, or by using element attributes like <code>children</code>. Once we've\nselected our elements, we can use JavaScript to manipulate them. By using these\ntechniques, we can start to build a richer user experience.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\">MDN - Document Object Model</a></li>\n</ul>",
			"exportId": "the-dom-is-a-tree"
		},
		{
			"id": 432933,
			"title": "JavaScript Query Selector Methods",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-query-selector-methods\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Use <code>querySelector()</code> and <code>querySelectorAll()</code> to find nested nodes</li>\n<li>Modify attributes of DOM nodes</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>One of the most essential skills in our web development toolbox is finding\nelements in the DOM.</p>\n\n<p>While <code>document.getElementById()</code> and <code>document.getElementsByClassName()</code> are\ngood, we can improve our search when we use document structure (tag, <code>id</code>,\n<code>class</code>) <strong>along with</strong> the tree structure of the DOM. It turns out CSS is a\n<em>great</em> language for expressing those relationships! With the <code>querySelector()</code>\nand <code>querySelectorAll()</code> methods, we provide one or more CSS selectors as an\nargument and we get back the matching element or elements. Because they can take\na string containing multiple selectors, they allow us to create very specific,\ncomplex queries.</p>\n\n<h2>Finding Nested Nodes</h2>\n\n<p>If you would like to follow along in the console, fork and clone this lesson,\nopen the files in your text editor, and open <code>index.html</code> in Google Chrome. As\nyou go, copy each HTML example into <code>index.html</code>.</p>\n\n<h3><code>querySelector()</code></h3>\n\n<p>The <code>querySelector()</code> method takes one argument, a string of one or more\nCSS-compatible <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\">selectors</a>, and returns the <em>first</em> element that matches.</p>\n\n<p>Given a document like:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>Hello!<span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>Goodbye!<span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n</code></pre></div>\n<p>If we called <code>document.querySelector('div')</code>, the method would return the first\n<code>div</code>. If we check its <code>innerHTML</code>, we should see <code>Hello!</code>.</p>\n\n<p>Selectors aren't limited to one tag name, though. Otherwise, why not just use\n<code>document.getElementsByTagName('div')[0]</code>? We can get very specific.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"ranked-list\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>1<span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>\n        <span class=\"nt\">&lt;div&gt;</span>\n          <span class=\"nt\">&lt;ul&gt;</span>\n            <span class=\"nt\">&lt;li&gt;</span>2<span class=\"nt\">&lt;/li&gt;</span>\n          <span class=\"nt\">&lt;/ul&gt;</span>\n        <span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>3<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"unranked-list\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>6<span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>2<span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>\n        <span class=\"nt\">&lt;div&gt;</span>4<span class=\"nt\">&lt;/div&gt;</span>\n      <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n</code></pre></div><div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">li2</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">ul.ranked-list li ul li</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">li2</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; &lt;li&gt;2&lt;/li&gt;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">div4</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">ul.unranked-list li div</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">div4</span><span class=\"p\">;</span>\n<span class=\"c1\">//=&gt; &lt;div&gt;4&lt;/div&gt;</span>\n</code></pre></div>\n<p>In the above example, the first query says, \"Starting from <code>document</code> (the\nobject we've called <code>querySelector()</code> on), find a <code>ul</code> with a <code>className</code> of\n<code>ranked-list</code> (recall from CSS that the <code>.</code> indicates that <code>ranked-list</code> is a\n<code>className</code>). Then find an <code>li</code> that is a descendant of that <code>ul</code>. Next find a\n<code>ul</code> that is a descendant (but not necessarily a direct child) of that <code>li</code>.\nFinally, find an <code>li</code> that is a descendant of that (second) <code>ul</code>.\"</p>\n\n<blockquote>\n<p><strong>Note</strong>: The HTML property <code>class</code> is referred to as <code>className</code> in\nJavaScript.</p>\n</blockquote>\n\n<p>What does the second call to <code>querySelector()</code> say? Think about it for a\nminute, and then read on.</p>\n\n<p>Wait for it...</p>\n\n<p>The second call says, \"Starting from <code>document</code>, find a <code>ul</code> with a\n<code>className</code> of <code>unranked-list</code>. Then find an <code>li</code> descended from\n<code>ul.unranked-list</code> and a <code>div</code> descended from that <code>li</code>.\"</p>\n\n<h4>CSS Selectors</h4>\n\n<p>If using CSS to target elements isn't feeling natural, now might be a good time\nto brush up on <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\">selectors</a>. Play around on the MDN page, then come\nback when you're ready.</p>\n\n<h3><code>querySelectorAll()</code></h3>\n\n<p><code>querySelectorAll()</code> works a lot like <code>querySelector()</code> — it accepts a string\ncontaining one or more selectors as its argument, and it searches starting from\nthe object that it's called on (either <code>document</code> or an element). However,\ninstead of returning the first match, it returns a <code>NodeList</code> collection of all\nmatching elements. A <code>NodeList</code> is similar to an <code>HTMLCollection</code>: it is an\narray-like structure containing, in this case, a list of DOM nodes.</p>\n\n<p>Given a document like</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;main</span> <span class=\"na\">id=</span><span class=\"s\">\"app\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"ranked-list\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>1<span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>2<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">class=</span><span class=\"s\">\"ranked-list\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>10<span class=\"nt\">&lt;/li&gt;</span>\n      <span class=\"nt\">&lt;li&gt;</span>11<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/main&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n</code></pre></div>\n<p>If we called:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">app</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">ul.ranked-list li</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>We'd get back a list of nodes corresponding to:</p>\n<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>&lt;li&gt;1&lt;/li&gt;, &lt;li&gt;2&lt;/li&gt;, &lt;li&gt;10&lt;/li&gt;, &lt;li&gt;11&lt;/li&gt;\n</code></pre></div>\n<h2>Conclusion</h2>\n\n<p>The DOM selection methods <code>document.querySelector()</code> and\n<code>document.querySelectorAll()</code> are powerful tools for finding the elements we\nneed to update and change. They use the familiar CSS selector syntax and allow\nus to create very specific queries that give us access to elements in complex\nDOM trees.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\">document.querySelector()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\">document.querySelectorAll()</a></li>\n</ul>",
			"exportId": "javascript-query-selector-methods"
		},
		{
			"id": 432935,
			"title": "Creating and Inserting DOM Nodes Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-modifying-elements-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Create DOM elements programmatically</li>\n<li>Add elements to the DOM</li>\n<li>Update elements using <code>innerHTML</code>\n</li>\n<li>Change properties on DOM nodes</li>\n<li>Remove elements from the DOM</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Now that you have an understanding of the DOM and powerful tools for selecting\nthe right elements, it's time to learn how to:</p>\n\n<ol>\n<li>Create new nodes</li>\n<li>Delete nodes</li>\n<li>Update node properties</li>\n</ol>\n\n<p>If you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code.</p>\n\n<h2>Create DOM Elements Programmatically</h2>\n\n<h3><code>document.createElement()</code></h3>\n\n<p>Creating an element in JavaScript is an easy process. You simply call\n<code>document.createElement('tagName')</code>, where <code>tagName</code> is the name of any valid\nHTML tag (<code>'p'</code>, <code>'div'</code>, <code>'span'</code>, etc.).</p>\n\n<p>Open the <code>index.html</code> file in your browser and open up the browser's console. In\nthe console, enter:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">div</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Then take a look at the Elements tab. The element doesn't show up on the page.\nWhy not?</p>\n\n<h2>Add Elements to the DOM</h2>\n\n<p>To get an element to appear in the DOM, we have to <code>append()</code> it to an existing\nDOM node. To go back to our tree metaphor, we have to glue our new leaf onto a\nbranch that's already there. We can start as high up on the tree as\n<code>document.body</code>, or we can find a more specific element using any of the methods\nwe've learned for traversing the DOM.</p>\n\n<h3><code>append()</code></h3>\n\n<p>Let's append <code>element</code> to <code>body</code> to start:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>(Recall that <code>element</code> is a variable containing the <code>div</code> we created above.)</p>\n\n<p>Now if you look at the Elements tab, you'll see our new (empty) <code>&lt;div&gt;</code> nested\ninside the <code>body</code> element.</p>\n\n<p>Next, let's create an unordered list:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">ul</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">ul</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>To populate our unordered list, we'll use a <code>for</code> loop to create three <code>li</code>'s,\ngive them some content, and append them to the <code>ul</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">li</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">li</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">toString</span><span class=\"p\">();</span>\n  <span class=\"nx\">ul</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">li</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In each iteration of our loop, we calculate the value <code>i + 1</code> (an integer), turn\nit into a string using JavaScript's <code>toString()</code> method, and assign the result\nas the value of the <code>li</code>'s <code>textContent</code> attribute.</p>\n\n<blockquote>\n<p>Note: although the <code>textContent</code> attribute must be a string, the code would\nstill work even if we didn't use the <code>toString()</code> method — JavaScript will\nturn the value into a string for us. However, for clarity and completeness, it\nis best to set it to a string value explicitly.</p>\n</blockquote>\n\n<p>Finally, we'll append the <code>ul</code> to the <code>div</code> we created:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">ul</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>You should now see the unordered list rendered on the page, and see the new\nelements in the \"Elements\" tab, like this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;ul&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>1<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>2<span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;</span>3<span class=\"nt\">&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre></div>\n<p>Note that, each time we create a new element, we create a variable and save a\nreference to it. That makes it quite easy to make additional updates and to add\nit to the DOM using <code>append()</code>.</p>\n\n<h2>Add Elements to the DOM via <code>innerHTML</code>\n</h2>\n\n<p>Creating elements and then appending them into the DOM is a multi-step process.\nIt's also the <strong><em>safest and most reliable way</em></strong> to add content to the DOM. Most\nrepeated code can be removed by using variables, functions and loops. It's The\nRight Way.</p>\n\n<p>That said, however, there's another process that will also work, using\n<code>Element.innerHTML</code>. Inside our loop above, we create an <code>li</code> element and set\nits <code>textContent</code> property to a simple number (expressed as a string) that\nrepresents the current iteration through the loop. Once we append the <code>li</code> to\nthe <code>ul</code> and the <code>ul</code> to the document <code>body</code>, we see our unordered list in the\nbrowser window. This is a perfectly valid way to use <code>textContent</code> to add\ncontent to the DOM — essentially, <code>textContent</code> changes only what text shows up\ninside a DOM element:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Hi there!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// =&gt; &lt;li&gt;Hi there!&lt;/li&gt;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">li</span><span class=\"p\">.</span><span class=\"nx\">textContent</span><span class=\"p\">);</span>\n<span class=\"c1\">// =&gt; \"Hi there!\"</span>\n</code></pre></div>\n<p>Imagine, however, that we want to add content that's more complicated.</p>\n\n<p>Assume our HTML includes a <code>main</code> element with an <code>id</code> of \"main.\" We can grab\nthat element and set its <code>innerHTML</code> attribute to any HTML we like:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">main</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">main</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">main</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">&lt;h1&gt;Poodles!&lt;/h1&gt;&lt;h3&gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective&lt;/h3&gt;&lt;p&gt;&lt;em&gt;By: Byron Q. Poodle, Esq., BA.&lt;/em&gt;&lt;/p&gt;</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Here we are using one big, long string, complete with multiple HTML tags, to\ncreate the following HTML in the DOM:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;main</span> <span class=\"na\">id=</span><span class=\"s\">\"main\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;h1&gt;</span>Poodles!<span class=\"nt\">&lt;/h1&gt;</span>\n  <span class=\"nt\">&lt;h3&gt;</span>\n    An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a\n    post-Frankfurt School Appropriationist Perspective\n  <span class=\"nt\">&lt;/h3&gt;</span>\n  <span class=\"nt\">&lt;p&gt;&lt;em&gt;</span>By: Byron Q. Poodle, Esq., BA.<span class=\"nt\">&lt;/em&gt;&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/main&gt;</span>\n</code></pre></div>\n<p>This process works but it is <strong>not</strong> recommended for several reasons. First,\nit's more error-prone, and the errors can be difficult to find. Second, it can\nnegatively impact site performance. Finally, if you're inserting user-derived\ndata (e.g., comments) into the DOM using <code>innerHTML</code>, you can expose your site\nto the risk of users <a href=\"https://www.reddit.com/r/learnjavascript/comments/9502x5/is_innerhtml_still_considered_bad/e3p31go/?utm_source=share&amp;utm_medium=web2x&amp;context=3\">injecting malicious code</a>.</p>\n\n<p>Programmatically creating and appending elements is safer and more efficient,\nand it results in code that's easier to read, easier to debug, and easier to\nmaintain.</p>\n\n<h2>Change Properties on DOM Nodes</h2>\n\n<p>We can change the appearance of a DOM node using its <code>style</code> attribute. Try this\nout in the console:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">main</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">300px</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">#27647B</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>You've changed what's on the screen!</p>\n\n<p>Feel free to set as many properties as you'd like — this is a good chance to\nlook around and explore different properties of DOM elements.</p>\n\n<p>Let's adjust the display. Add some text:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">You've changed what's on the screen!</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Then change the style to see the effect:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontSize</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">24px</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">marginLeft</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">30px</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">lineHeight</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Perhaps the most common way to change how things appear in the DOM is by\nchanging an element's <code>class</code> attribute. As you know from CSS, we often change\nthe way a bit of rendered HTML appears by adding or removing a class.</p>\n\n<p>For example, we could create an <code>alert</code> class that turns the text red (using the\nCSS <code>color</code> attribute) and makes it big (using the CSS <code>font-size</code> attribute).\nWe can then use JavaScript to first grab the element and then add the class by\nupdating the element's <code>className</code> property. This has the same effect as setting\nthe <code>class</code> property in the HTML. The <code>className</code> property expects a <code>String</code>\nwith one or more class names, separated by spaces:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">pet-listing dog</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Check out the Elements tab to see the effect of this change:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;main</span> <span class=\"na\">id=</span><span class=\"s\">\"main\"</span> <span class=\"na\">class=</span><span class=\"s\">\"pet-listing dog\"</span><span class=\"nt\">&gt;&lt;/main&gt;</span>\n</code></pre></div>\n<p>Another way to accomplish the same thing is by using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"><code>Element.classList</code>\nproperty</a>. This property has <code>.add()</code> and <code>.remove()</code> methods that\ncan be used as follows:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">dog</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">cat</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">sale</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>This approach allows you to easily add and remove classes programmatically,\nwithout having to create a long string of class names.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;main</span> <span class=\"na\">id=</span><span class=\"s\">\"main\"</span> <span class=\"na\">class=</span><span class=\"s\">\"pet-listing cat sale\"</span><span class=\"nt\">&gt;&lt;/main&gt;</span>\n</code></pre></div>\n<h3>Separation of Concerns</h3>\n\n<p>An important thing to bear in mind is that we only want to use JavaScript to\nchange the appearance of an element when we need to make a change dynamically,\ni.e., in response to user actions. This goes back to a fundamental programming\nconcept about separating concerns between technologies:</p>\n\n<ul>\n<li>HTML defines the structure of the website (not appearance or functionality)</li>\n<li>JavaScript defines functionality of the website (not structure or styling)</li>\n<li>CSS defines the visualization and style of the website (not structure or\nfunctionality)</li>\n</ul>\n\n<p>Defining the base CSS should still happen in the CSS files that are loaded into\nthe DOM when the page is opened.</p>\n\n<h2>Remove Elements from the DOM</h2>\n\n<p>We know how to add elements and change their attributes. What if we want to\nremove an element from a page?</p>\n\n<h3><code>removeChild()</code></h3>\n\n<p>We use <code>removeChild()</code>, as you might guess, to remove a particular child of an\nelement:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">someElement</span><span class=\"p\">.</span><span class=\"nx\">removeChild</span><span class=\"p\">(</span><span class=\"nx\">someChildElement</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Let's take a look at a more complex example:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">ul</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">ul</span><span class=\"dl\">\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"kd\">const</span> <span class=\"nx\">secondChild</span> <span class=\"o\">=</span> <span class=\"nx\">ul</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">li:nth-child(2)</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">ul</span><span class=\"p\">.</span><span class=\"nx\">removeChild</span><span class=\"p\">(</span><span class=\"nx\">secondChild</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Here you can see the power of <code>querySelector()</code>: we can use it to find the\nsecond <code>li</code> element of <code>ul</code>. We then pass that element as the argument to our\n<code>removeChild</code> method, which removes the element from our <code>ul</code>.</p>\n\n<p>What if we want to remove the whole unordered list (<code>ul</code>)?</p>\n\n<h3><code>element.remove()</code></h3>\n\n<p>We can just call <code>remove()</code> on the element itself:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">ul</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>And it's gone!</p>\n\n<h2>Instructions</h2>\n\n<p>From this point forward, many of the labs will work a little differently from\nones you've done before. Specifically, the tests will mock the process of 1)\nrunning JavaScript code in the browser and 2) seeing the results of that code\nrepresented in the DOM. Take a look at <code>test/indexTest.js</code> to see the tests'\ndescriptions of the changes your code should be making to the DOM elements.</p>\n\n<p>Note that you do not need to create functions for this lab. Just create the line\nor lines of JavaScript necessary to pass each test. As usual, you will write\nyour code in the <code>index.js</code> file.</p>\n\n<p>One final note: the last test in the <code>test/indexTest.js</code> file is looking for the\ntext \"YOUR-NAME is the champion\" (with your name — or whatever text you choose —\nin place of YOUR-NAME) inside your newly created DOM node. While there are a\nnumber of ways you could accomplish this, you should use either the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\"><code>textContent</code></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\"><code>innerHTML</code></a> property to set\nthe text inside your DOM node. The <code>innerText</code> property would technically work\nas well; however, the tests won't pass if you use this approach, and generally\nit's not a good practice to use <code>innerText</code> when setting the contents of an\nelement. <a href=\"https://stackoverflow.com/a/35213639\">This StackOverflow answer</a> does a good job explaining some\ndifferences between these properties.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\">document.createElement()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/append\">append()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild\">removeChild()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\">element.remove()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\">classList Property</a></li>\n</ul>",
			"exportId": "gb7d8eafcb6fd23da5af7ec40a0b9aeaf"
		},
		{
			"id": 432937,
			"title": "Survey - Manipulating the DOM",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the Manipulating the DOM module?</p>\n</div>",
			"exportId": "gf402da10bb367f1f0db91e78f3dbfe12"
		}]
	},
	{
		"id": 44872,
		"name": "JavaScript Events",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "ge768fcd87081a17bbf5ab87ccb9578a7",
		"items": [
		{
			"id": 432939,
			"title": "JavaScript Events",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define a JavaScript event</li>\n<li>Identify different types of user events</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>We've experimented with selecting and manipulating nodes in the DOM using\nJavaScript: deleting nodes, editing nodes, etc. But most web applications are\n<em>not</em> used by people opening up the console and editing the DOM using Chrome's\nDevTools. Instead, people <em>do something</em> and then <em>work happens</em>.</p>\n\n<p>\"Doing work\" in response to \"something happening\" is known as <em>event handling</em>.\n<em>Events</em> are the \"something the user does\" and the \"<em>callback function</em>\" is the\nwork that will happen in response to the event being triggered.</p>\n\n<p>In this lesson we'll go over some of the most commonly-used JavaScript events.\nIn the following lessons, we'll learn how to use <em>event listeners</em> to tell\nJavaScript which event or events we want it to listen for. We'll also learn how\nto implement <em>callback functions</em> to handle the <em>work happens</em> part of event\nhandling.</p>\n\n<h2>Define a JavaScript Event</h2>\n\n<p>JavaScript has the ability to \"listen\" for things that happen inside the\nbrowser. It can listen for events like whether the browser is resized, or\nwhether someone clicked on a specific image on the screen. The event you're\nprobably most familiar with is \"click.\"</p>\n\n<p>We'll go over a few of the more common types of events in this lesson.</p>\n\n<h2>Identify Different Types of User Events</h2>\n\n<h3>Mouse Click</h3>\n\n<p>Mouse or trackpad events are some of the most common ones you'll be handling\nusing JavaScript eventing. For example, JavaScript can recognize a single click\non an element in the page and change the styling of the element to highlight it.\nOr it can recognize a double-click on an element and open a zoomed-in view of\nthat element.</p>\n\n<p>There are many other mouse events you can use; take a look at the list of\nJavaScript's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element#mouse_events\">mouse events here</a>.</p>\n\n<h3>Key Press</h3>\n\n<p>While click events will likely make up the majority of events you'll use, the\nkeyboard is another important source of events. JavaScript currently includes\ntwo <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element#keyboard_events\">keyboard events</a>: <code>keydown</code> and <code>keyup</code>. (A third, <code>keypress</code>,\nhas been deprecated.) When a key is pressed, these events provide a code to\nindicate which key it was. For example, a game program might listen for\n<code>keydown</code> events and, if the space bar was pressed, make the character jump over\nthe hole.</p>\n\n<h3>Form Submission</h3>\n\n<p>HTML pages often use a submit button to submit a form to a server. When a user\nsubmits a form, the <code>submit</code> event is fired. An event handler here might pop up\na thank you overlay or log in the user and take them to their home page.</p>\n\n<h3>Other Events</h3>\n\n<p>As you seek to build more complicated applications, you'll need to handle and\ntrigger work on many more events than the few we've discussed in this lesson.\nSome other common events you are likely to encounter are <code>scroll</code>, <code>mouseenter</code>\nand <code>mouseleave</code>, <code>focus</code>, <code>blur</code>,  and <code>onchange</code>.</p>\n\n<p>One important thing to keep in mind is that not all JavaScript events are\nsupported by all browsers. This <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\">list of browser events</a> includes the ones\nthat can be used in most browsers.</p>\n\n<h2>Conclusion</h2>\n\n<p>JavaScript allows us to trigger work when it detects events. You set up an event\nhandler and, when JavaScript recognizes that event, it will execute the event\nhandler's work, which is stored in a <em>callback function</em>.</p>\n\n<p>Take a few minutes to look through the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\">list of common events</a> to\nfamiliarize yourself with the many many ways you can use event handling to\nenhance your users' experience.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">MDN - Web Events</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element#mouse_events\">MDN - Mouse Events</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element#keyboard_events\">MDN - Keyboard Events</a></li>\n</ul>",
			"exportId": "javascript-events"
		},
		{
			"id": 432941,
			"title": "JavaScript Event Listeners Lab",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-event-listening-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Create event listeners on DOM nodes using <code>addEventListener()</code>\n</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In this lab we will learn how to teach nodes to \"listen\" for an event using\n<code>addEventListener()</code>.</p>\n\n<p>If you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code.</p>\n\n<h2>Create Event Listeners on DOM Nodes with <code>addEventListener()</code>\n</h2>\n\n<p>In order for JavaScript to handle an event, we first need to tell it to listen\nfor that event. We do this by calling the <code>addEventListener()</code> method on the\nelement we want to add the listener to, and passing it two arguments:</p>\n\n<ol>\n<li>the name of the event to listen for, and</li>\n<li>a <em>callback function</em> to \"handle\" the event</li>\n</ol>\n\n<p>Open up <code>index.html</code> in the browser. When you click in the <code>&lt;input&gt;</code> area,\nnothing happens. Let's set up some <em>event handling</em>. Specifically, let's add an\nevent listener for the <code>click</code> event on the <code>input#button</code> element in\n<code>index.html</code>.</p>\n\n<p>Try out the following in the Chrome DevTools console:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">button</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">I was clicked!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Now when you click inside of <code>input#button</code>, you will get an alert box.</p>\n\n<p>Let's review what's happening in this code.</p>\n\n<p>First, we grab the element that we want to add the event listener to and save a\nreference to it in the <code>input</code> variable.</p>\n\n<p>Next, we call <code>addEventListener()</code> on that element to tell JavaScript to listen\nfor the event. We pass two arguments to <code>addEventListener()</code>: the name of the\nevent to listen for (in this case, <code>click</code>) and a <em>callback function</em> that will\nbe executed when the event is \"heard.\"</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\">According to MDN</a>:</p>\n\n<blockquote>\n<p>A callback function is a function passed into another function as an argument,\nwhich is then invoked inside the outer function to complete some kind of\nroutine or action.</p>\n</blockquote>\n\n<p>That's exactly what's happening here: we're passing a callback function as the\nsecond argument to the <code>addEventListener()</code> function; the callback will be\ninvoked as soon as the event occurs.</p>\n\n<p>Let's pull out that second argument and take a look at it:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">I was clicked!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This function has all the components of functions we've seen before (the\n<code>function</code> keyword, a pair of parentheses, and the body of the function enclosed\nin curly braces) <em>except one</em>: it doesn't have a name assigned to it. This is\nwhat's called an <em>anonymous</em> function. Because it doesn't have a name, it can't\nbe invoked directly. But the event listener knows to execute whatever function\nis passed as the second argument when it detects the event, so it doesn't need\nto be named.</p>\n\n<p>If we are only calling our callback function in that one place, using an\nanonymous function makes sense. However, what if we wanted to use that same\nalert message on a bunch of elements? In that case, it would make more sense to\ncreate a separate, named function that could be called by all of our event\nlisteners. With this approach, we would pass the <em>function name</em> as the second\nargument to <code>addEventListener()</code> rather than the function itself:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">input</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">button</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">clickAlert</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">I was clicked!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">input</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">click</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">clickAlert</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>We could then attach our <code>clickAlert</code> to as many elements as we'd like. Just as\nwe did for the <code>input</code> element, we would first use our CSS selector skills to\ngrab the desired element and save it to a variable, then add the <code>click</code> event\nlistener to that element. Give it a try!</p>\n\n<p>With this approach, even if we're using our <code>clickAlert</code> with a whole bunch of\nelements, if we decide later that we want to change the text of the alert to\n\"Hee hee, that tickles!\" instead, we would only need to make that change in one\nplace: inside our <code>clickAlert()</code> function.</p>\n\n<p><strong>Note</strong>: we pass <code>clickAlert</code> as the argument, not <code>clickAlert()</code>. This is\nbecause we don't want to <em>invoke</em> the function in this line of code. Instead, we\nwant to pass a <em>reference</em> to the function to <code>addEventListener()</code> so <em>it</em> can\ncall the function when the time comes.</p>\n\n<p>Refresh your browser and try out the latest version of the code in the console\nto verify that it works. Also try passing <code>clickAlert()</code> as the second argument\nrather than <code>clickAlert</code> and see what happens.</p>\n\n<h2>Passing the Tests</h2>\n\n<p>Now let's set up <code>index.js</code> to do the same thing so we can get our test passing.\nTo do that, simply copy the code into the <code>index.js</code> file's\n<code>addingEventListener()</code> function and run the test. Either version should pass\nthe test — just make sure that the code creating the event listener is <strong>inside</strong>\nthe <code>addingEventListener()</code> function.</p>\n\n<h3>Checking the Code in the Browser</h3>\n\n<p>We know that the code works in the console and passes the test, but we should\nalso check our changes to <code>index.js</code> in the browser. Because you've added the\n<code>addEventListener()</code> function <em>inside</em> the <code>addingEventListener()</code> function,\nrecall that you will need to call the outer function in <code>index.js</code> to execute\n<code>addEventListener()</code> and activate the event listener. Be sure to refresh the\npage to load the new code in <code>index.js</code>.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">MDN - Web Events</a></li>\n</ul>",
			"exportId": "gf684f31e2c11bb34687d9a1ce764fc2e"
		},
		{
			"id": 432943,
			"title": "Moving Things with JavaScript by Acting on Events",
			"type": "Assignment",
			"indent": 1,
			"locked": false,
			"submissionTypes": "a website url",
			"graded": true,
			"pointsPossible": 1.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_submit",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-acting-on-events-lab\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab/fork\" target=\"_blank\"><img id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Practice moving elements on the page</li>\n<li>Demonstrate how to move an element in response to a browser event</li>\n<li>Demonstrate how to update an element's position on the page conditionally</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Think back to the first video game you played.</p>\n\n<p>Think about the mechanics of that game. When you <em>tilted</em> a joystick or\n<em>pressed</em> a button it responded to your whims. It pulled you into its story by\ngiving you a window into its world and a way of interacting with — shaping, even\n— that world. When you performed an <strong><em>event</em></strong>, the computer made the world\nrespond: the little plumber from Brooklyn jumped (<em>Super Mario Franchise</em>), the\nundead warrior slashed at an evil foe (<em>Dark Souls</em>), or the banana-yellow guy\nate the power pellet (<em>Pac-Man</em>).</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-acting-on-events/Image_36_VideoGame.png\" alt=\"Controlling classic video game characters Mario and Pacman\"></p>\n\n<p><em>Programming means that you can create such a world for other people.</em> Sure,\nit'll be a while before you're ready to build something like one of the classic\ngames above, but we can start with the essential steps. In this lab we'll learn\nhow to move an element on a page in response to an <em>event</em>.</p>\n\n<p>If you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run <code>code .</code> to open the files\nin Visual Studio Code.</p>\n\n<p>Go ahead and run the tests. You'll see that you need to create two functions to\nget the tests passing: <code>moveDodgerLeft()</code> and <code>moveDodgerRight()</code>. We'll write\n<code>moveDodgerLeft()</code> together, then you'll create <code>moveDodgerRight()</code> on your own.</p>\n\n<h2>Practice Moving Elements on the Page</h2>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/rock-dodger.png\" alt=\"Rock Dodger!\"></p>\n\n<p>Open <code>index.html</code> in the browser. You'll see a black square which represents the\ngame field and a white rectangle at the bottom of that field which is our game\npiece, the dodger. Now open DevTools and click on the Elements tab. You'll see\nthat the game field is a <code>&lt;div&gt;</code> with an <code>id</code> of \"game.\" Expand that <code>div</code> and\nyou'll see that the game piece is a second, nested <code>&lt;div&gt;</code> with an <code>id</code> of\n\"dodger.\"</p>\n\n<p>Click on the game <code>div</code> and take a look at its CSS in the styles tab. You'll see\nthat the game field has a height and width of 400px. Now click on the dodger and\nnote that it has a height of 20px and a width of 40px. Finally, take a look at\nthe inline style on the dodger <code>&lt;div&gt;</code>: the <code>bottom</code> and <code>left</code> properties\ndefine the dodger's starting position <em>relative to its parent element, the game\nfield</em>. In other words, the lower left corner of the game field corresponds\nto<code>left</code> and <code>bottom</code> positions of 0px. The starting values of the dodger's\n<code>bottom</code> and <code>left</code> properties are what places it at the bottom center of the\ngame field when our game launches.</p>\n\n<p>Before we can use JavaScript to move the dodger, we first need to grab it and\nsave a reference to it in a variable. Enter the following in the console:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">dodger</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">dodger</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Awesome. Now let's change its color:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">dodger</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">#000000</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Whoa, where'd it go? Well, we changed the color to <code>#000000</code>, another way of\nexpressing \"black.\" So it just blends in with the background.</p>\n\n<p>Let's change it to something more visible.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">dodger</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">#FF69B4</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Much better!</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger.png\" alt=\"pink dodger\"></p>\n\n<p>Accessing the <code>style</code> property of the <code>dodger</code> element allows us to change\nthings like the <code>backgroundColor</code>, <code>height</code>, <code>width</code>, etc. We can also use it to\nchange an element's position on the page.</p>\n\n<p>Let's start by moving the element up:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">dodger</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">bottom</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">100px</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger_bottom_100.png\" alt=\"up 100px\"></p>\n\n<p><strong>Note:</strong> Even though we're talking about <em>numeric</em> coordinates, note that we\nneed to move the dodger by assigning a new <em>string value</em>.</p>\n\n<p>We can verify our dodger's current position by simply typing <code>dodger.style.left</code>\nor <code>dodger.style.bottom</code> into the console.</p>\n\n<p>Let's return it to where it started by resetting the <code>bottom</code> attribute:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">dodger</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">bottom</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">0px</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Now let's visually verify that the dodger's position is determined relative to\nthe game field by changing its <code>left</code> attribute:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nx\">dodger</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">0px</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>You should see the dodger nestled up against the bottom left corner of the game\nfield.</p>\n\n<h2>Demonstrate How to Move an Element in Response to a Browser Event</h2>\n\n<p>Now that we know how to write the code to move the dodger, let's figure out how\nto tie that action to an event.</p>\n\n<p>Let's say we want the user to be able to move the dodger to the left using the\nleft arrow key. We learned in an earlier lesson that, when a key is pressed, the\n<code>keydown</code> event provides a code to indicate which key it was. So the first thing\nwe have to do is figure out what code is used to identify the left arrow key. We\ncould look it up, but we're programmers — let's explore!</p>\n\n<p>So what do we mean when we say that an event provides a code? Any time an event\nlistener is in place and the event it's listening for is triggered, a JavaScript\nobject containing a bunch of information about the event is <strong>automatically</strong>\npassed as an argument to the callback function. We can access that object and\nthe information it contains by defining a parameter for the callback. It looks\nlike this:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">keydown</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>By defining the <code>event</code> parameter in the parentheses, we've given the body of\nthe callback access to that event object, which is what allows us to log it to\nthe console. Note that, as with any JavaScript parameter (and, in fact, any\nJavaScript variable), we can give it any valid JavaScript variable name we like.\nBy convention, and in keeping with programming best practice of using meaningful\nvariable names, the name JavaScript programmers use for this parameter is\nusually either <code>event</code> or <code>e</code>. You will see these in a lot of JavaScript code,\nand we recommend you use them as well.</p>\n\n<p>This pattern, when you first encounter it, is tricky to wrap your head around.\nDon't worry if it doesn't make total sense yet — it will become clearer as\nyou continue through the curriculum. You might also want to read the excellent\naccepted answer in <a href=\"https://stackoverflow.com/questions/35936365/what-exactly-is-the-parameter-e-event-and-why-pass-it-to-javascript-functions\">this Stack Overflow thread</a>.</p>\n\n<p>Let's take a look at what that event object looks like. Enter the code above\ninto the console then click in the browser window (where the game field and\ndodger are rendered). Now, if you press the left arrow key, you should see a\n<code>KeyboardEvent</code> logged in the console. Expand the event and you'll see its\nproperties listed; the one we're interested in is the <code>key</code> property. Try\npressing some other keys as well and check out their <code>key</code> properties.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/keyboard-event.png\" alt=\"Keyboard Event\"></p>\n\n<p><strong>Top Tip:</strong> You can explore other event types as well: just change the name of\nthe event in the code above.</p>\n\n<p>Now that we know the code the event uses to identify the left arrow key, we can\nwrite the JavaScript code to move the dodger left when the key is pressed:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">keydown</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">key</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">ArrowLeft</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">leftNumbers</span> <span class=\"o\">=</span> <span class=\"nx\">dodger</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">left</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">px</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">leftNumbers</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">dodger</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">left</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"s2\">px`</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>So what are we doing here? Well, when our event listener detects a <code>keydown</code>\nevent, we first check to see whether the <code>key</code> property of the event object has\nthe value \"ArrowLeft.\" If it does, we get the current value of the dodger's\n<code>style.left</code> property and use the <a href=\"https://www.w3schools.com/jsref/jsref_replace.asp\">String <code>replace()</code> method</a> to strip\nout the \"px\", then store the result in <code>leftNumbers</code>. Next, we parse\n<code>leftNumbers</code> as an integer and store that result in <code>left</code>. Finally, we update\nthe dodger's <code>style.left</code> property using string interpolation, injecting the\ncurrent value minus 1. If the key that's pressed is <em>not</em> the left arrow key, we\ndo zilch. Try it out in the browser yourself!! (Be sure to refresh the page\nfirst.)</p>\n\n<p>We do still have a problem, though. Even though we're only going one pixel at a\ntime, eventually our dodger will zoom (well, relatively speaking) right out of\nview.</p>\n\n<p>How can we prevent this? We need to check where the left edge of the dodger is\nand only move it if it hasn't yet reached the left edge of the game field.</p>\n\n<h2>Update an Element's Position on the Page Conditionally</h2>\n\n<p>Our callback function is starting to get pretty complex. This is probably a good\ntime to break the dodger's movement out into a separate function. We want to\nmove the dodger left if our <code>if</code> statement returns true, so let's pull out the body\nof that <code>if</code> statement into a function called <code>moveDodgerLeft()</code>.</p>\n\n<p>Refresh the page so we're starting with a blank slate, then grab the dodger again:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">dodger</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">dodger</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Now we'll build our <code>moveDodgerLeft()</code> function, adding a check on the current\nposition of the dodger:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">moveDodgerLeft</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">leftNumbers</span> <span class=\"o\">=</span> <span class=\"nx\">dodger</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">left</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">px</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"\"</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">leftNumbers</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">left</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">dodger</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">left</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"s2\">px`</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We're doing essentially the same thing, but we first ensure that the dodger's\nleft edge has not reached the left edge of its container.</p>\n\n<p>Now let's wire this up to our event listener:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">keydown</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">key</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">ArrowLeft</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">moveDodgerLeft</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>Now try moving the dodger past the left edge. No can do!</p>\n\n<p>Copy the final code into <code>index.js</code> and run the tests. You should now have the\nfirst one passing.</p>\n\n<h2>Lab</h2>\n\n<p>Now it's your turn. With the code implemented from the code-along, think about\nwhat needs to change to make a <code>moveDodgerRight()</code> function. You'll need to add\nanother condition to your event listener's callback function to call\n<code>moveDodgerRight()</code>. Then, inside the function, instead of moving the dodger\n<code>${left - 1}px</code>, you'll be moving it <code>${left + 1}px</code>.</p>\n\n<p><strong>Note:</strong> It may seem logical that you would use the dodger's <code>style.right</code>\nproperty to move the dodger right, but that won't work. The reason is that\nchanging the <code>style.right</code> property <em>doesn't change</em> the <code>style.left</code> property,\nwhich means we'd have conflicting information about where the dodger should be\non the screen. JavaScript solves this problem by giving precedence to\n<code>style.left</code>. In other words, once the user presses the left arrow key for the\nfirst time and the value of <code>style.left</code> is changed, any subsequent changes to\n<code>style.right</code> will be ignored.</p>\n\n<p>Finally, implement the code needed to prevent the dodger from escaping off the\nright-hand side. How can we check whether the <em>right</em> edge of the dodger has\nreached the <em>right</em> edge of the game field? (Keep in mind that the dodger is\n40px wide.)</p>\n\n<p>Once you've completed the work to get the tests to pass, the last step is to\n\"try out\" your application. Make sure it works the way you expect in the\nbrowser. In professional applications, tests can't cover 100% of the use of the\napplication. It's important to realize that \"passing all the tests\" <em>is not the\nsame</em> as \"building a working application.\"</p>\n\n<p>Be sure to do a human-level manual \"play through\" with your dodger to make sure\nyour working code <em>really works</em>!</p>\n\n<p><img src=\"https://media.giphy.com/media/vvLWidwZNYH5e/200w_d.gif\" alt=\"Passing the Tests is only part of the job\"></p>\n\n<h2>Conclusion</h2>\n\n<p>Events and event handling are vital to web programming. JavaScript allows for\ndynamic page rendering, so users can interact with the contents of the page in\nreal time. Knowledge of the basic techniques we've learned so far sets you on\nthe road toward being able to create complex interactions like those in video\ngames you may have played before!</p>",
			"exportId": "g29c67405977430aee163f85ded65078a"
		},
		{
			"id": 432945,
			"title": "Survey - JavaScript Events",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the JavaScript Events module?</p>\n</div>",
			"exportId": "gf1b2010585c28413ea796721f2a42401"
		}]
	},
	{
		"id": 44874,
		"name": "Git",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g79c681f4c9688e9075fb803e2404321d",
		"items": [
		{
			"id": 432948,
			"title": "Intro to Version Control",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-git-version-control-introduction\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-version-control-introduction\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-version-control-introduction/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Define the purpose of a version control system</li>\n<li>Identify benefits of version control systems</li>\n<li>Recognize useful Git vocabulary terms</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Imagine you are part of a team of developers working on a popular web\napplication with many features. Your app may have a large, complex code\nbase which means that, at any given time, there are likely to be multiple\nprojects going on and multiple developers working on different parts of the\nsoftware.</p>\n\n<p>This type of scenario is quite common, and can easily lead to problems:</p>\n\n<ul>\n<li><p>Imagine someone is working on a new feature, or incorporating a new technique,\nor refactoring the code to make it more efficient and something they change\nbreaks the app. How can we \"back up\" to the most recent working version of the\ncode?</p></li>\n<li><p>There could be some part of the application that overlaps with the work\nbeing done by more than one developer. How can we ensure that no\ninconsistencies or conflicts work their way into the code?</p></li>\n<li><p>How can we maintain a record of the changes that are being made and why? Over\ntime, memories about how things have been done can fade, or new people may\njoin the team who don't have that background knowledge. This can lead to\ninconsistencies in the code or to wasted time revisiting issues that have been\naddressed in the past.</p></li>\n</ul>\n\n<p>The great news is that <em>all</em> of these situations can be managed by a type of\nsoftware called a <strong>version control system (VCS)</strong>.</p>\n\n<h2>Define the Purpose of a Version Control System</h2>\n\n<p><strong>Version Control System (VCS)</strong> describes a type of software that is designed\nspecifically to help manage the complexities described above - and so much more!\nThe key benefit of version control is that it keeps a complete history of the\nchanges to the code, which makes it easy to \"back up\" to a working state if\nthings go wrong. This gives you the freedom to experiment, throw away bad ideas,\nand instantly get back to your last-known \"good\" state if something breaks.</p>\n\n<blockquote>\n<p><strong>ASIDE</strong> The programmer, entrepreneur, and venture capitalist Paul Graham\nnotes that oil paints unlocked a revolution in experimentation in visual arts\nbecause they were undo-able. Oils provided the <strong>freedom</strong> to err and recover\nthat other paint media did not provide (e.g. watercolor). Because of this\n<strong>freedom</strong> these painters were free to explore perspective, light, and\ncomposition in completely new ways. Because of their <em>tools</em> they had more\n<em>freedom</em> and were able to make their burst of exploration a <em>movement</em>: The\nRenaissance.</p>\n\n<p>Read more in his essay <a href=\"http://www.paulgraham.com/hp.html\">\"Hackers and Painters.\"</a></p>\n</blockquote>\n\n<p>There are several VCS's available, but the most popular — and the one you'll\nlearn to use in this program — is called <strong>Git</strong>.</p>\n\n<h2>Identify Benefits of Version Control Systems</h2>\n\n<p>There are a number of benefits we get when we use a VCS such as Git to manage our\nwork:</p>\n\n<ul>\n<li>Automatically create a backup of your work</li>\n<li>Provide an easy way to undo mistakes and restore a previous version of your\nwork</li>\n<li>Document changes with a log that describes what's been changed and why</li>\n<li>Keep file names and hierarchies consistent and organized</li>\n<li>Branch work off into multiple \"sandboxes\" (called <strong>branches</strong> in Git) that\nallow developers to experiment without impacting other branches</li>\n<li>Collaborate with others without disturbing each other's or our own work</li>\n</ul>\n\n<p>And beyond these are even more advanced features that will help you optimize\nyour workflow once you've learned the basics. If that feels daunting, it's OK:\nyou will build up your toolbox of techniques over time. In the meantime, though,\nyou can get the best benefits of Git using a relatively small subset of all the\ntechniques and commands it includes.</p>\n\n<h2>Recognize Useful Git Vocabulary Terms</h2>\n\n<p>We're about to get busy learning Git, but we first need to establish some common\nvocabulary. Git, perhaps more than any other software, has some special words\nthat you'll hear a lot. Don't worry if you're not sure how some of these terms\nwork in practice — that part will come later.</p>\n\n<ul>\n<li><strong>repository</strong> (or <strong>repo</strong>, for short): A directory of files that are\n<strong>tracked</strong> by Git.</li>\n<li><strong>track</strong>: When a file is <strong>tracked</strong> by Git, it means that Git will notice\nany changes to that file. We call these changes <strong>differences</strong> or <strong>diffs</strong>.\nGit allows you to choose whether to <strong>commit</strong> a diff in order to keep it.</li>\n<li><strong>diff</strong>: The <strong>diff</strong> of a <em>file</em> is all the changes that have been made to\nit since the last <strong>commit</strong>. The <strong>diff</strong> of a <em>repo</em> is all the diffs in all\nthe <em>tracked</em> files in the repo that have not yet been committed (sometimes\nprogrammers call this the <strong>diffset</strong>).</li>\n<li><strong>commit</strong>: Once we decide we want to save a diff, we <strong>commit</strong> the diff to\nthe repo's history using the <code>commit</code> command. When we make a commit, we write\na <strong>log</strong> message that describes what happened in the diff. The set of commits\nprovides a history of all of the changes that have been made to a repo and\nwhen.</li>\n<li><strong>log</strong>: The record of what happened in each commit.</li>\n<li><strong>local/remote</strong>: When we start working with an existing Git repo, we\n<strong>clone</strong> it from a <strong>remote</strong> source (on GitHub) and copy it to our machine.\nWe call the repo on our personal system the <strong>local</strong> repo.</li>\n<li><strong>branch/default branch</strong>: A Git repo can support multiple <strong>branches</strong> that\nmake it possible for multiple developers to be working on the code at the same\ntime. When you initialize a new Git repo, a <strong>default branch</strong> is created\nwhere your work will be tracked by default. If you configured Git using the\ninstructions given earlier in Software Engineering Prep, the name of the branch\nwill be <code>main</code>, but you will also see older repos that use <code>master</code> as the\ndefault branch.</li>\n</ul>\n\n<h2>Conclusion</h2>\n\n<p>Git is one of the most valuable tools you will use as a developer. You will\nlearn the basics of using Git in this section, and then will apply what you've\nlearned when you create your project in the next section.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"http://git-scm.com/book/en/Getting-Started-About-Version-Control\">Getting Started - About Version Control</a></li>\n<li><a href=\"http://git-scm.com/video/what-is-git\">Git Basics - What is Git?</a></li>\n</ul>",
			"exportId": "intro-to-version-control"
		},
		{
			"id": 432949,
			"title": "Git Basics",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-git-version-control-basics\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-version-control-basics\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-version-control-basics/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Initialize a Git repository with <code>git init</code></li>\n<li>Check the status of a repository with <code>git status</code></li>\n<li>Track file changes with <code>git add</code></li>\n<li>Create a commit and apply a commit message with <code>git commit</code></li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In the previous lesson we learned what a VCS is and how it helps us in our work.\nIn this lesson, we'll learn how to use Git to track the changes we make to a\nproject.</p>\n\n<p>The basic process consists of the following three steps:</p>\n\n<ol>\n<li>Initialize the project directory as a Git repository,</li>\n<li>Tell Git to track the changes we make to individual files, and</li>\n<li>When we're ready, tell Git to save the changes.</li>\n</ol>\n\n<p>That's it! This basic workflow gives you all the main benefits of using Git to\ntrack a project.</p>\n\n<h2>Initialize a Git Repository with <code>git init</code></h2>\n\n<p>Git operates on a directory level. When we have a new directory that we want to\ntrack our files in, we need to <em>initialize</em> the directory as a Git repository.</p>\n\n<p>To get started, we'll create a new directory. In your terminal, type the\nfollowing:</p>\n\n<blockquote>\n<p><strong>REMEMBER</strong>: Don't type the <code>$</code>. That's the universal symbol for a command\nprompt. It's how technical documentation says \"Here's a thing for the shell to\nprocess.\"</p>\n</blockquote>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mkdir </span>my-git-project\n</code></pre></div>\n<p>This command creates new a directory. Then:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd </span>my-git-project\n</code></pre></div>\n<p>This command moves into the newly created directory.</p>\n\n<p>Now that we're <strong>in the directory</strong> where we want Git to watch for changes\n(adding, removing, and editing files), we next need to <em>initialize</em> this\ndirectory as a Git repo. We only need to do this step once for each project we\nwant to track.</p>\n\n<p>In the terminal type <code>git init</code>. It should look something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git init\n<span class=\"go\">Initialized empty Git repository in /Users/avi/my-git-project/.git/\n</span></code></pre></div>\n<p>The message above lets us know that our new directory is now being tracked by\nGit. It also shows that a new subfolder <code>.git</code> has been created. This hidden\ndirectory is where Git keeps important stuff, like the commit history. Don't go\nin there and start randomly deleting things! That said, if ever you do <code>git\ninit</code> in the wrong directory, you can <code>rm -rf .git</code> to delete the <code>.git</code> folder\nand all its contents and return the directory to a plain-old, unprotected\ndirectory.</p>\n\n<p>Be careful about making a containing directory, like our home directory or our\ndesktop, into a Git repository accidentally. Make sure you only type <code>git init</code>\n<em>within</em> the directory you want <code>git</code> to track.</p>\n\n<h2>Check the Status of a Repository with <code>git status</code></h2>\n\n<p>Now that we have Git watching this directory, let's see what it can tell us\nabout the directory. The command we use for this is <code>git status</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git status\n</code></pre></div>\n<p>Since we have not added any files yet, we'll see:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">On branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n</span></code></pre></div>\n<blockquote>\n<p><strong>Note:</strong> Older repositories may state <code>On branch master</code>. Branching is beyond\nthe scope of this lesson, but to briefly explain - <code>main</code> and <code>master</code> both\nrefer to the same thing - the core (<em><strong>main</strong>, get it?</em>) branch of a\nrepository. A single repository can have many branches, but always has only\n<em>one</em> core branch. In the past, this branch defaulted to the name <code>master</code>.\nGoing forward, the branch will be named <code>main</code>. You'll likely see both as you\nwork with repositories new and old.</p>\n</blockquote>\n\n<p>Let's create a <code>README.md</code> that describes the project. Make our new file by\ntyping <code>touch README.md</code> from within the <code>my-git-project</code> directory. We won't\nsee any output after we run the <code>touch</code> command so to see that our new file has\nbeen created, we'll also run the <code>ls</code> command.</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>README.md\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">ls</span>\n<span class=\"go\">README.md\n</span></code></pre></div>\n<p>With at least one new project file we can enable Git to start tracking changes.\nType <code>git status</code>. Git will show us what our current repository looks like and\nwhat changes it sees.</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git status\n<span class=\"go\">On branch main\n\nNo commits yet\n\nUntracked files:\n</span><span class=\"gp\">  (use \"git add &lt;file&gt;</span>...<span class=\"s2\">\" to include in what will be committed)\n</span><span class=\"go\">\n  README.md\n\nnothing added to commit but untracked files present (use `git add` to track)\n</span></code></pre></div>\n<p>Git confirms that it's aware of the file <code>README.md</code>, but it's not <strong>tracking</strong>\nit. Git's not doing anything with the file and the file is not doing anything\nwith Git...<em>yet</em>. Let's change that!</p>\n\n<blockquote>\n<p><strong>IMPORTANT</strong>: Whenever you want to check the status of your Git repository —\nwhich you will often — type <code>git status</code>.</p>\n</blockquote>\n\n<h2>Keep Track of File Changes with <code>git add</code></h2>\n\n<p>Currently, the file in our repository is not being tracked by Git. We have to\ntell Git about all the files we want it to keep track of and consider as part of\nour project. We can do this by <em>adding</em> the files to our <code>git</code> repository with\n<code>git add &lt;filename or path&gt;</code>. To add our new <code>README.md</code> to the repository and\ncheck the status, we type:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git add README.md\n<span class=\"gp\">$</span><span class=\"w\"> </span>git status\n<span class=\"go\">On branch main\n\nNo commits yet\n\nChanges to be committed:\n</span><span class=\"gp\">  (use \"git rm --cached &lt;file&gt;</span>...<span class=\"s2\">\" to unstage)\n</span><span class=\"go\">\n  new file:   README.md\n</span></code></pre></div>\n<p>We can now see that Git is ready to keep track of <code>README.md</code>. All the changes\nin the file at the time we <code>added</code> it are <strong>staged</strong>. If we were to change\n<code>README.md</code>, we'd need to re-add the file. As it happens here, this staged\nchange is \"create the file, nothing inside of it\" because <code>touch</code> created an\nempty file.</p>\n\n<p>To have Git save a new version of our repo that includes this new file (or,\nlater, to \"capture\" changes to a file) we need to <em>commit</em> the set of changes or\n<strong>diff</strong>. We \"save\" the changes in our repository by making <strong>commits</strong>.</p>\n\n<h2>Create a Commit and Apply a Commit Message with <code>git commit</code></h2>\n\n<p>Remember: <code>git add</code> got our changes to the repository ready in the previous\nstep. Those changes are the ones that will be \"captured\" in the commit.</p>\n\n<p>To make our first commit, type:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"Initial commit\"</span>\n</code></pre></div>\n<p>The <code>-m</code> flag tells Git that we are including a commit message, in this case\n<code>\"Initial commit\"</code>. <em>Any time you make a commit, you should include a message\nusing this flag.</em></p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"Initial commit\"</span>\n<span class=\"go\">[main (root-commit) e55477d] Initial commit\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 README.md\n</span></code></pre></div>\n<p>We can see that Git has created a new version of our repo, represented by the\n<em>SHA</em> (Secure Hash Algorithm) <code>e55477d</code>. SHAs are the identification system that\n<code>git</code> uses to keep track of versions; they're long complex numbers and letters\nthat are unlikely to be duplicated (the value shown above is actually a\nshortened version of the full SHA). If you're following along, the SHA you'll\nsee in your terminal will be different.</p>\n\n<p>The <code>commit</code> command committed 1 file.</p>\n\n<p>Now, if we type <code>git status</code>, we'll see that it is at a \"clean state\": there are\nno new changes which means there's nothing to commit.</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git status\n<span class=\"go\">On branch main\nnothing to commit, working tree clean\n</span></code></pre></div>\n<p>We won't do this just yet, but if we were to open the README.md file in our text\neditor and add some text to it, we could then add our file and commit this new\nset of changes with the following:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git add README.md\n<span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"Updates README.md\"</span>\n</code></pre></div>\n<p>There are also a couple of shortcuts we can use:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git add <span class=\"nb\">.</span>\n</code></pre></div>\n<p>This command adds <em>all</em> the files that have been changed since the last commit\n(in this case, just <code>README.md</code>).</p>\n\n<p>Or we can combine the two steps of adding and committing our file into a single\ncommand:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-am</span> <span class=\"s2\">\"Updates README.md\"</span>\n</code></pre></div>\n<p>Here we're combining the <code>a</code> and <code>m</code> flags. As with the <code>add .</code> shortcut, the\n<code>a</code> flag tells git to add 'all changes', i.e., all files that have been changed\nsince the last commit. The <code>-m</code> flag, like before, tells git that we want to\nspecify a commit message, in this case, <code>\"Updates README.md\"</code>. This command\ncould also be written as:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-a</span> <span class=\"nt\">-m</span> <span class=\"s2\">\"Updates README.md\"</span>\n</code></pre></div>\n<p>Remember, we haven't actually made any changes to <code>README.md</code> so there's nothing\nto add or commit. However, if we had, the commit would look something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-am</span> <span class=\"s2\">\"Updates README.md\"</span>\n<span class=\"go\">[main (root-commit) e55477d] Updates README.md\n 1 file changed, 4 insertions(+), 0 deletions(2)\n</span></code></pre></div>\n<p>Good work! Commits are amazingly powerful in Git. They are the heart of many of\nGit's advanced features. Understanding the basic workflow of Git initialization\nand setup is the foundation for success.</p>\n\n<h2>Conclusion</h2>\n\n<p>In this lesson, we've learned the basics of using Git to track a directory.\nSpecifically, we learned how to:</p>\n\n<ul>\n<li>make a new Git repository out of a directory using <code>git init</code></li>\n<li>check the status of our repo using <code>git status</code></li>\n<li>track files that have been changed using the <code>git add &lt;filename or path&gt;</code> command</li>\n<li>save (commit) the changes with an explanatory message using <code>git commit -m \"A\nmessage\"</code></li>\n</ul>\n\n<p>So far, however, we've only been using Git with our local repo. In the next two\nlessons, we'll learn how we can use Git in combination with GitHub to <em>share</em>\ncode with other developers.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://git-scm.com/book/en/v1/Git-Basics\">Git Basics at git-scm.com</a></li>\n</ul>",
			"exportId": "git-basics"
		},
		{
			"id": 432951,
			"title": "Getting Code with Git",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-getting-code-with\"></div>\n<header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-getting-code-with-git\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-getting-code-with-git/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n<h2>Learning Goals</h2>\n<ul>\n    <li>Copy a repository to your local machine with <code>git clone</code></li>\n    <li>List remotes with <code>git remote</code></li>\n    <li>Duplicate other organizations' repositories into your own via GitHub with the \"Fork\" button</li>\n</ul>\n<h2>Introduction</h2>\n<p>In the previous lesson, we learned how Git allows us to create logged histories of all the versions of the files we \"track.\" Another great benefit of using Git is that it makes it easy for developers to \"share\" code by \"pushing\" a copy of their repo to the internet (specifically, to GitHub). From there, other developers can <strong>clone</strong> down the code onto their own machine and use it.</p>\n<p>Of course, you've been taking advantage of this feature of Git for a while with the labs you've been working on in this course! For this reason, a lot of the content in this lesson will be review.</p>\n<p>The important thing to understand is that the forking and cloning workflow that you've been using with labs can be used with <em>any</em> repo available on GitHub. But of course the learn-co gem is currently handling some of the steps for you, so in this lesson, you'll learn how to accomplish those steps \"by hand.\"</p>\n<h2>Copy a Repository to Your Local Machine with <code>git clone</code></h2>\n<p>Let's review the cloning process using a repo that <em>isn't</em> part of the curriculum. We can get the code for the popular ReactJS framework:</p>\n<p>1) Navigate to the <a href=\"https://github.com/facebook/react\">React repository</a>.</p>\n<p>2) Click the green \"Code\" button on the right.</p>\n<p>3) Make sure <code>SSH</code> is selected.</p>\n<p>4) Click the copy button.</p>\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/completing-assignments/clone-repo.gif\" alt=\"clone-repo\"></p>\n<p>5) In the terminal, navigate to where you want to put the repo. Type <code>git clone</code> and a space, then paste in the copied SSH link from GitHub. It should look like this:</p>\n<div class=\"highlight\">\n    <pre class=\"highlight console\"><code><span class=\"gp\">$</span> git clone git@github.com:facebook/react.git\n</code></pre>\n</div>\n<p>This will create a <em>local</em> copy of the GitHub repository on your machine.</p>\n<h2>List Remote Repos with <code>git remote</code></h2>\n<p>If you use the <code>ls</code> command, you'll see Git created a directory called <code>react</code>. Use <code>cd</code> to enter that directory.</p>\n<div class=\"highlight\">\n    <pre class=\"highlight console\"><code><span class=\"gp\">$</span> <span class=\"nb\">cd </span>react\n</code></pre>\n</div>\n<p>The <code>git remote</code> command will return the names of each remote repository (or, \"remote\") available. Go ahead and run the command; you should see a remote named <code>origin</code> returned. This is the \"nickname\" that Git assigns by default to whatever remote you cloned from:</p>\n<div class=\"highlight\">\n    <pre class=\"highlight console\"><code><span class=\"gp\">$</span> git remote\n<span class=\"go\">origin\n</span></code></pre>\n</div>\n<p>To prove that the <code>origin</code> name points to the repo we cloned from GitHub, we can run <code>git remote -v</code> (the <code>v</code> flag stands for \"verbose\"). You should see something like this:</p>\n<div class=\"highlight\">\n    <pre class=\"highlight console\"><code><span class=\"gp\">$</span>  git remote <span class=\"nt\">-v</span>\n<span class=\"go\">origin  git@github.com:facebook/react.git (fetch)\norigin  git@github.com:facebook/react.git (push)\n</span></code></pre>\n</div>\n<p>Here you can see that the \"remote address\" (<code>git@github.com:facebook/react.git</code>) assigned to the \"remote name\" (<code>origin</code>) is the same thing you copied from the GitHub web interface. This confirms that the <em>remote repository</em> you <em>cloned</em> automatically set up a <em>remote name</em> called <code>origin</code>.</p>\n<p>In the next lesson we'll learn how to <strong>push</strong> code up to GitHub. The <code>git\n        remote</code> command is what will enable you to ensure that the code is being pushed to the right place.</p>\n<h2>Duplicate Other Organizations' Repositories into Your Own via GitHub with the \"Fork\" Button</h2>\n<p>This is also part of the workflow you've been using for labs: you create your own personal copy of the lab by clicking the \"Fork\" button on Canvas. But you can also fork a repo directly from its page on GitHub.</p>\n<p>Let's go back to the <a href=\"https://github.com/facebook/react\">React repository</a> on GitHub. In the upper right corner of the page, you'll see three buttons, including a Fork button:</p>\n<p><img src=\"http://readme-pics.s3.amazonaws.com/fork_button.jpg\" alt=\"Fork Button\"></p>\n<p>Clicking the Fork button on the page for this repo (or any other repo available on GitHub) will make a copy of the repo and store it in <em>your</em> GitHub account, just the same as when you click the Fork button on a lab's Canvas page. Having your own copy gives you the ability to update its <code>main</code> (or <code>master</code>) branch without affecting the original repo.</p>\n<blockquote>\n    <p><strong>Note</strong>: You <em>could</em> use this workflow for labs. Instead of clicking the Fork button on Canvas, you could click the <strong>Octocat</strong> icon next to it. That would open up the lab's repo <em>without</em> forking it, and you could then fork the lab using the Fork button on the repo page.</p>\n    <p><strong>However</strong>, doing so would bypass the <code>learn-co</code> gem which means you will need to submit the lab by hand in Canvas and it will not be graded automatically. So be sure to continue using the Fork button on the Canvas page for labs!</p>\n</blockquote>\n<h2>Conclusion</h2>\n<p>GitHub gives developers many ways to collaborate. Using GitHub's \"Fork\" button and <code>git clone</code> together allows you to make copies of others' code.</p>\n<p>Often, the original authors will include license information regarding how you can use their repository, so make sure to check before you publish, sell or distribute any material you've forked, cloned and modified.</p>",
			"exportId": "getting-code-with-git"
		},
		{
			"id": 432953,
			"title": "Pushing Code with Git",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-git-pushing-code\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-pushing-code\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-pushing-code/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Create a local repository</li>\n<li>Create a remote repository</li>\n<li>Connect the local repository and the remote repository with <code>git remote</code></li>\n<li>Push code up to the remote repo with <code>git push</code></li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>You've seen how valuable <em>remotes</em> are for <em>getting</em> software. Now we can take a\nlook at the other side of the transaction: how we synchronize our <em>local</em>\nrepository to a <em>remote</em> repository using <code>git remote</code> and <code>git push</code>.</p>\n\n<p>Once your code is on a <em>remote</em>, it's backed up — which is always a good\nthing. Also, once you push to a remote, you can choose whether to let others\n<code>fork</code> or <code>clone</code> and benefit from it. Let's learn how to <code>push</code> our code!</p>\n\n<blockquote>\n<p><strong>Note</strong>: the workflow you've been using for labs also pushes code for you! When\nyou run <code>learn test</code>, the <code>learn-co</code> gem automatically creates an <code>fis-wip</code>\n<strong>branch</strong>, saves the changes you've made to that branch, and pushes it up to\nyour copy of the repo on GitHub. Once you have all the tests passing, the lab\nis registered as complete on Canvas <em>and</em> you have a backup of your code saved\non GitHub.</p>\n</blockquote>\n\n<p>In this lesson, we'll learn how we can set up remote repositories on GitHub for\nany projects we work on. Specifically, we'll learn how to get a new repo set up\non our local drive, create a remote repo for it on GitHub, connect the local and\nremote repositories, and push our code up to the remote repo on GitHub.</p>\n\n<h2>Create a Local Repo</h2>\n\n<p>Let's review the process for creating a local repository:</p>\n\n<ol>\n<li><p>First, we want to create a folder for our repository, which we'll call\n<code>my_new_directory</code>. In the terminal, navigate to the <code>~/Development/code</code>\ndirectory (or wherever you are storing your code for the course) and type\n<code>mkdir my_new_directory</code>.</p></li>\n<li><p>To navigate into this new folder, type <code>cd my_new_directory</code>. Your terminal\nshould display <code>my_new_directory</code>, indicating that you are now inside of the\nnew folder. Open the directory in VS Code by typing <code>code .</code>.</p></li>\n<li><p>Next, we need to create a new file named <code>README.md</code>. You can do this in the\nterminal, by typing <code>touch README.md</code>, or in VS Code, by choosing\n<code>File -&gt; New File</code>.</p></li>\n<li><p>We can directly type in content for our README file in VS Code, but we can\nalso use our terminal skills to add content. So, in the terminal, type\n<code>echo \"This is my readme file\" &gt;&gt; README.md</code>. If you've got the README file\nopen in VS Code, the new text will appear!</p></li>\n<li><p>Now that we've got some basic content, we can initialize our local\nrepository. In your terminal, type <code>git init</code>. Your terminal should show that\nan 'empty Git repository' has been initialized.</p></li>\n<li><p>Type <code>git add README.md</code> (or <code>git add .</code>) to stage the new <code>README.md</code> file\nso it will be tracked by <code>git</code>.</p></li>\n<li><p>Now, type <code>git commit -m \"Initialize git\"</code>. This will create the first commit\nfor this local repository.</p></li>\n</ol>\n\n<h2>Create a Remote Repository on GitHub</h2>\n\n<p>There are a few steps to follow to create a <em>remote</em> repository on GitHub.</p>\n\n<ol>\n<li><p>Go to: <a href=\"https://github.com/new\">github.com/new</a>, while logged in to GitHub.</p></li>\n<li><p>Enter a name for your repository in the \"Repository name\" field. You can name\nit whatever you'd like; be creative! You can leave the remaining options as\nthey are — the default options are fine. Click the green 'Create repository'\nbutton.</p></li>\n<li><p>After you create the <em>remote</em> repository, you should see a \"Quick setup\" box\nat the top of the page. Make sure the 'SSH' option is selected, then click\nthe copy button next to the repo URL to copy the URL. (We'll use this in the\nnext section.)</p></li>\n</ol>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pushing-code-with-git/quick-setup.png\" alt=\"github repo quick setup\"></p>\n\n<p>Behind the scenes, GitHub has essentially <code>git init</code>'d a blank directory.</p>\n\n<h2>Connect the Local Repository to the Remote Repository</h2>\n\n<p>We learned in the previous lesson that the <code>git remote</code> command will list the\n<strong>remotes</strong> available to our Git repo. If you run that command now, ...nothing\nhappens. This is because we haven't set our remote repo as the <strong>remote</strong> for\nour local repo yet. Doing so is a simple matter of assigning the URL we copied\nabove to a <strong>remote name</strong>.</p>\n\n<p>We also learned that Git uses the remote name <code>origin</code> by default when we clone\nan existing repo from GitHub. We verified that by running <code>git remote -v</code>, which\nshowed that the remote name <code>origin</code> was pointing to the repo on GitHub that we\ncloned. We'll stick to that convention here.</p>\n\n<p>You should still have your remote Git info copied from GitHub. To set the\nremote, type <code>git remote add origin</code> followed by a space, then paste in the URL.\nIt will look something like this:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git remote add origin git@github.com:your-github-username/my-new-repo.git\n</code></pre></div>\n<p>The command above creates a remote called <code>origin</code> and points it to your remote\nrepo on GitHub.</p>\n\n<p>Let's use <code>git remote -v</code> (recall that the <code>-v</code> is for \"verbose\") to verify that\nwe successfully set our remote:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git remote <span class=\"nt\">-v</span>\n<span class=\"go\">View existing remotes\norigin  git@github.com:your-github-username/my-new-repo.git (fetch)\norigin  git@github.com:your-github-username/my-new-repo.git (push)\n</span></code></pre></div>\n<p>We did it! We're now set up to <strong><em>push</em></strong> our code.</p>\n\n<h2>Send Code to the Remote Repo with <code>git push</code></h2>\n\n<p>Now that we have added a remote repo, we need to send our latest work to it\nusing <code>git push</code>. This command will push all the local, committed work to the\nremote repository.</p>\n\n<p>The <code>git push</code> command takes two arguments. The first is the name of the remote\nrepo. Remember, <code>origin</code> is just an alias or \"short name\" that refers to the\nrepository name. You don't actually have to enter the repository name. Instead,\nyou can just use <code>origin</code>. The second argument is the name of the remote\n<strong>branch</strong> you want to send code to. We're going to push to our remote\nrepository's <strong>default branch</strong>.</p>\n\n<p>If you configured Git using the instructions given earlier in Software\nEngineering Prep, your default branch's name will be <code>main</code>. You can verify this\nby running:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git branch <span class=\"nt\">--show-current</span>\n</code></pre></div>\n<p>Then, to push your code up to GitHub, run this command:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git push <span class=\"nt\">-u</span> origin main\n</code></pre></div>\n<p>The first time you push code up to a newly-added remote repository, using the\n<code>-u</code> flag will tell Git to \"save\" the remote repository as the default push\ndestination for your current branch. What this means is that, for every\nsubsequent push from the <code>main</code> branch, you will only need to run <code>git push</code>.</p>\n\n<h2>An Aside and a Small Shortcut</h2>\n\n<p>In this lesson, we've gone through the steps of both connecting a local\nrepository, and pushing code up to GitHub. During this course, you'll be\ncreating a few local repositories from scratch, but more often, you'll be\ncloning existing repositories to your local machine. In these situations, you\nwon't need to use commands like <code>git init</code>, since the repo is already set up\nwith Git and will already have a remote configured.</p>\n\n<p>However, you <em>will</em> often need to add, commit and push work you've done locally\nto the remote repository. The <code>learn test</code> command will do this for you for\nlabs, but for anything else you're working on — for example, the projects you'll\ndo at the end of each phase — you'll need to do the process by hand:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git add <span class=\"nb\">.</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"commit message\"</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>git push\n</code></pre></div>\n<p>Recall from earlier in this section that you can combine adding all <strong>tracked</strong>\nfiles and committing by using an additional option flag, <code>-a</code>, with the commit\ncommand:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-am</span> <span class=\"s2\">\"commit message\"</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>git push\n</code></pre></div>\n<p>Note that the <code>-am</code> flags will work for adding and committing changes to files\nthat are <strong>already being tracked</strong>, but if you need to create a new file as part\nof any lesson, you'll need to use <code>git add</code> to track that file before you can\ncommit it.</p>\n\n<h2>Conclusion</h2>\n\n<p>Being able to add Git remotes allows you to back up your local repository to a\nremote server. To review, the process is:</p>\n\n<ul>\n<li>create a local repo and run <code>git init</code> to start tracking it</li>\n<li>create a remote repo on GitHub</li>\n<li>run <code>git remote add origin your-remote-repository-URL</code> to tie your local repo\nto the remote repo on GitHub</li>\n<li>use <code>git add</code> and <code>git commit</code> to save your changes</li>\n<li>use <code>git push</code> to push the changes up to the remote repo</li>\n</ul>\n\n<p>With these few steps, you'll be able to get your project up to GitHub in\nminutes!</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://help.github.com/articles/pushing-to-a-remote/\">GitHub guide on pushing</a></li>\n</ul>",
			"exportId": "pushing-code-with-git"
		},
		{
			"id": 432955,
			"title": "Survey - Git",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the Git module?</p>\n</div>",
			"exportId": "g812aaceb5dd4aa8d04b3de457a38295a"
		}]
	},
	{
		"id": 44877,
		"name": "Project Mode",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g83bc35f938ff93202c69b1bcc3b4261f",
		"items": [
		{
			"id": 432958,
			"title": "Software Engineering Prep Final Project Setup Part I: Setting Up Your Repo",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-project-prep-part-1\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-project-prep-part-1\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-project-prep-part-1/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Set up your local and remote repositories for your final Software Engineering\nPrep project</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>Now that you've learned about Git version control, it's time to put your new\nskills to use!</p>\n\n<p>In the next section, as the final requirement for Software Engineering Prep,\nyou'll be creating a personal website! In this lesson, you'll get some practice\nwith Git and get set up for your final project at the same time.</p>\n\n<p>Specifically, we'll go through the following steps:</p>\n\n<ul>\n<li>creating a local Git repository,</li>\n<li>creating a remote repository on GitHub,</li>\n<li>connecting the local and remote repos</li>\n<li>creating an initial commit, and</li>\n<li>pushing that work to the remote repo.</li>\n</ul>\n\n<h2>Create Your Local Repo</h2>\n\n<p>Let's review the process for setting up your local repo. Follow along with the\nsteps below:</p>\n\n<p><strong>1.</strong> Choose a name for your project. You can call it anything you like - be\ncreative! For our example here, we'll use <code>my-personal-website</code>.</p>\n\n<p><strong>2.</strong> Make sure you're in the <code>Development/code</code> directory (or wherever you're\nstoring your code), then create your project directory and <code>cd</code> into it:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">mkdir </span>my-personal-website\n<span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">cd </span>my-personal-website\n</code></pre></div>\n<p><strong>3.</strong> Initialize the directory as a Git repo (make sure you've <code>cd</code>d into the\ndirectory first):</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git init\n</code></pre></div>\n<p><strong>Check your work</strong>: If you see the message \"Initialized empty Git repository in\n/Users/your-username/Development/code/your-directory-name/.git/\", you have\nsuccessfully set up your directory as a Git repo.</p>\n\n<p>The next step is to add some content.</p>\n\n<h2>Create Some Content</h2>\n\n<p>Go ahead and open your new project in VS Code. From inside the\n<code>my-personal-website</code> directory (or whatever you've named yours), type <code>code .</code>.\nNext, create a README file:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>README.md\n</code></pre></div>\n<p>And add some content to it:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">echo</span> <span class=\"s2\">\"# My Personal Website\"</span> <span class=\"o\">&gt;&gt;</span> README.md\n</code></pre></div>\n<p>Of course, if you prefer, you can add the new file and content in VS Code\ninstead.</p>\n\n<p><strong>A Note about README files</strong>: The <a href=\"https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes\">README.md file</a> is an\nimportant piece of the documentation of your project. It is the first thing\npeople will see when they visit your repo on GitHub. Generally, as you build\nyour own projects, you'll want to get in the habit of <a href=\"https://www.makeareadme.com/\">creating a good\nREADME</a>, including things like what your project does, how to\ninstall and run the code, etc. While filling out the content in your README is\noptional for the Software Engineering Prep project, you <em>will</em> need to create\nthem for later projects. Check out the resources listed at the bottom of this\nlesson to learn more.</p>\n\n<p><strong>Check your work</strong>: In VS Code, make sure the README.md file is present and\ncontains the header you just created before continuing with the instructions.</p>\n\n<h2>Make Your Initial Commit</h2>\n\n<p>Now that we've created our project repo and added some content, it's time to\nmake our first commit. First, though, let's check the status of our repo:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git status\n</code></pre></div>\n<p>You should see the following:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">On branch main\n\nNo commits yet\n\nUntracked files:\n</span><span class=\"gp\">  (use \"git add &lt;file&gt;</span>...<span class=\"s2\">\" to include in what will be committed)\n</span><span class=\"go\">  README.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</span></code></pre></div>\n<p>This tells us that Git sees our new file but is not currently tracking it. So to\n<strong>add</strong> it to the list of tracked files, then create our first commit, we'll\nrun:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git add README.md\n<span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-m</span> <span class=\"s1\">'Initial commit'</span>\n</code></pre></div>\n<p>You should see something similar to this:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">[main (root-commit) d7c3189] Initial commit\n 1 file changed, 1 insertion(+)\n create mode 100644 README.md\n</span></code></pre></div>\n<blockquote>\n<p><strong>Reminder</strong>: We are not able to combine the <code>add</code> and <code>commit</code> commands in\nthis case because the <code>README.md</code> file is not being tracked yet. We could,\nhowever, use <code>git add .</code> instead of spelling out the name of the file.</p>\n</blockquote>\n\n<p><strong>Check your work</strong>: If you saw the message shown above, you have successfully\nmade your first commit. You can also run <code>git status</code> to verify that there is\nnothing to commit and the working tree is clean.</p>\n\n<p>That's it! You now have your local repository created and set up to track your\nchanges. Now let's create a remote and connect our local repo to it.</p>\n\n<h2>Create Your Remote Repo</h2>\n\n<p>To create a new GitHub repository, go to\n<a href=\"https://github.com/\">https://github.com/</a> and sign in (if you aren't already\nsigned in). Then, click the <strong>+</strong> icon in the upper-right corner of the screen,\nand choose 'New repository' in the drop-down menu.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/new-repo.png\" alt=\"new repo drop down\"></p>\n\n<p>This will bring you to a page where you can give the new repository a name.\nThere will be some other settings as well, which we'll leave as they are:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/set-new-repo-name.png\" alt=\"set new repo name\"></p>\n\n<p>Enter the same name you used for your local repo. (Note: you aren't required to\nuse the same name, but we recommend doing so to keep things simple.) Once the\nrepository is given a name, go ahead and click the \"Create repository\" button.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/github-pages-create-repository.png\" alt=\"create repo\"></p>\n\n<p>An empty repository will be created.</p>\n\n<h2>Add The New Remote To Your Local Repository</h2>\n\n<p>When you click \"Create repository\", you should be taken to a new page that\npresents a set of different options for getting things started. It's worth\ngetting familiar with those options; each of them is helpful in different\ncircumstances.</p>\n\n<p>Note that some of the commands shown here have information unique to the\nrepository and GitHub user. Your commands will differ slightly from the examples\nbecause of this.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/setup-page.png\" alt=\"setup page\"></p>\n\n<p>Which one of the options you choose will depend on your particular situation.\nThe first option is the one we used in the previous lesson:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/quick-setup.png\" alt=\"quick setup\"></p>\n\n<p>We copied the URL and then used the <code>git remote add origin</code> command to connect\nour local repo to the remote repo.</p>\n\n<p>Let's take a look at the other options that are provided. The second option\nlisted should look like this:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/add-from-command-line.png\" alt=\"create repo on command line\"></p>\n\n<p>This option contains a series of commands that you can copy and run in the\nterminal, either one at a time or all together. However if you take a look at\nthe commands, you'll see that we've already done the first four:</p>\n\n<ol>\n<li><code>echo \"# example-repository\" &gt;&gt; README.md</code> creates a <code>README.md</code> file and\nadds some markdown</li>\n<li><code>git init</code> initializes a local repository in the folder you're currently in\non the command line</li>\n<li><code>git add README.md</code> stages the newly created <code>README.md</code> file, getting it\nready to be committed</li>\n<li><code>git commit -m \"first commit\"</code> creates the repository's first commit,\npreserving the newly created <code>README.md</code> file in the history of the\nrepository</li>\n</ol>\n\n<p>We don't want to repeat these commands, so let's move on to the next one:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/push-existing-repo.png\" alt=\"push existing repo\"></p>\n\n<p>This option basically consists of the last three steps from the option above,\nwhich is exactly what we want! In fact, if you take a closer look, you'll see\nthat two of the three commands are exactly what we ran in the last lesson! The\nfirst three setup options listed are three different ways of doing the exact\nsame thing; GitHub is just providing the commands for us as a shortcut, so we\ndon't need to type them all out by hand.</p>\n\n<p>Let's take a moment to review what each command does. As we mentioned above, two\nof the three should look familiar:</p>\n\n<ol>\n<li><code>git remote add origin git@github...</code> adds a new remote — called <code>origin</code> —\nto the local repository and associates it with the remote repository.</li>\n<li><code>git branch -M main</code> is the only command you haven't learned about yet — it\nrenames the current branch of your repository to <code>main</code>. (You should already\nbe configured to use <code>main</code> as the default branch; if so, running this\ncommand is unnecessary. You can verify the name of your branch by running\n<code>git branch --show-current</code>.)</li>\n<li><code>git push -u origin main</code> pushes the initial commit we did earlier to the\nremote repository; the <code>u</code> flag sets <code>origin</code> as the default remote for the\n<code>main</code> branch.</li>\n</ol>\n\n<p>Go ahead and run these commands — you can run them one at a time or all\ntogether, as you prefer.</p>\n\n<p><strong>Check your work</strong>: When you run the commands above, the last thing you should\nsee is the line:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">\"Branch 'main' set up to track remote branch 'main' from 'origin'.\"\n</span></code></pre></div>\n<p>You can also check in GitHub by going to the repo and refreshing the page; you\nshould see that the <code>README.md</code> file now appears on GitHub.</p>\n\n<h2>Conclusion</h2>\n\n<p>That's it! Now that you've created both your remote and local repos and\nconfigured Git to push to the <code>main</code> branch of your remote repo, you can start\nworking on your project. As you work, you should regularly commit your changes\nand push them to GitHub with the following commands:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"go\">git add .\ngit commit -m \"Some meaningful commit message\"\ngit push\n</span></code></pre></div>\n<p>Recall that you only need to run <code>git push -u origin main</code> the first time; the\n<code>u</code> flag tells Git that you always want to push to <code>origin main</code>, so you only\nneed to run <code>git push</code> moving forward.</p>\n\n<p>In the next lesson, we'll get you set up with the other files you'll need for\nyour project. You'll also learn how to deploy your new site to the Web using\nGitHub Pages.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes\">GitHub: About READMEs</a></li>\n<li><a href=\"https://www.makeareadme.com/\">makeareadme.com</a></li>\n</ul>",
			"exportId": "software-engineering-prep-final-project-setup-part-i-setting-up-your-repo"
		},
		{
			"id": 432959,
			"title": "Software Engineering Prep Final Project Setup Part II: Hosting a Website on GitHub Pages",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-hosting-on-github-pages\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-hosting-on-github-pages\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-hosting-on-github-pages/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Understand what it means to host a website</li>\n<li>Use GitHub to host a website from a Git repository</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>In the earlier days of the internet, if you wanted to publish a custom website,\nyour options were limited, and the process was often complicated. Hosting a site\nrequired registering a domain, paying a hosting service, then going through a\ntrial and error process of uploading your website's files to that service.</p>\n\n<p>Now, things are a bit different. Hosting services are still around and you can\nstill register custom domains, but there are many ways to publish websites\nonline now, including a few ways that are totally free for basic websites.</p>\n\n<p>In this lesson, we're going to walk through one free option for hosting HTML and\nJavaScript based websites. As it happens, we'll be using a service we're already\nfamiliar with — GitHub!</p>\n\n<h2>Hosting on GitHub</h2>\n\n<p>Any repository on GitHub can be published as a website — even if the repo\ndoesn't contain any HTML files. By default, GitHub will take a repository's\n<code>README.md</code> file and convert it to an HTML page. This lesson's repo, for\ninstance, <a href=\"https://learn-co-curriculum.github.io/phase-0-hosting-on-github-pages/\">is also published as a GitHub Page</a>.</p>\n\n<p>In addition to this behavior, if we include an <code>index.html</code> in the repository\nbeside the <code>README.md</code> file, GitHub will automatically display the HTML file\ninstead! This is how we'll be publishing our site.</p>\n\n<p>The full process for creating and publishing your own personal website is shown\nbelow. Note that we've already completed the first three steps:</p>\n\n<ul>\n<li>Create a local repository folder ✔</li>\n<li>Create a remote GitHub repository ✔</li>\n<li>Add the new remote to the local repository ✔</li>\n<li>Create an <code>index.html</code> file with some basic content</li>\n<li>Add, commit and push the new content to the remote</li>\n<li>Enable GitHub Pages in the remote repository's settings</li>\n<li>Check out the published site</li>\n<li>Continue building out the HTML and add CSS and JavaScript files</li>\n</ul>\n\n<p>By the time you've finished this lesson, you'll be at that last step; from\nthere, you can focus on building the content, styling and behavior you'd like\nyour site to have.</p>\n\n<h2>Build an HTML file</h2>\n\n<p>In the terminal, create an <code>index.html</code> file:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>index.html\n</code></pre></div>\n<p>Open this file in VS Code so we can add some basic HTML content. In the file,\nwe'll start with the minimum — a <code>DOCTYPE</code> tag indicating HTML and an <code>html</code> tag\ncontaining <code>head</code> and <code>body</code> tags:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n<p>Next, let's give this HTML a <code>title</code> tag and place it inside <code>head</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;head&gt;</span>\n  <span class=\"nt\">&lt;title&gt;</span>My Personal Website<span class=\"nt\">&lt;/title&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n</code></pre></div>\n<p>Finally, we'll add a bit of starter content in the <code>body</code>:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;body&gt;</span>\n  <span class=\"nt\">&lt;h1&gt;</span>Hello World!<span class=\"nt\">&lt;/h1&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n</code></pre></div>\n<p>Including some example text to start is important — when we publish the\nsite, we'll be looking for this message to confirm everything worked. The\ncompleted file should look like this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>My Personal Website<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>Hello World!<span class=\"nt\">&lt;/h1&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n<p>Save the file. We now need to commit this file and push it to GitHub:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git add index.html\n<span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"create basic HTML file\"</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>git push\n</code></pre></div>\n<p><strong>Check your work</strong>: Head back to your project's GitHub page and refresh the\npage. You should see the html file with the content we created alongside the\nREADME.md file we created earlier.</p>\n\n<h2>Publish HTML as a GitHub Page</h2>\n\n<p>In your GitHub repository, click the <strong>Settings</strong> tab:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/github-pages-settings-tab.png\" alt=\"settings tab\"></p>\n\n<p>In the list on the left, near the bottom, click the <strong>Pages</strong> tab. This will\ndisplay the following:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/github-pages-settings.png\" alt=\"settings\"></p>\n\n<p>To enable GitHub Pages, first we need to set the <strong>Source</strong> to the default\nbranch. Click the drop-down that says \"None\" and choose <code>main</code>, then click\n<strong>Save</strong>.</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/github-pages-select-branch.png\" alt=\"select branch\"></p>\n\n<p>The page will refresh. Along the top, a banner should appear that states the\nGitHub Page source was saved:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/github-pages-source-saved.png\" alt=\"source saved\"></p>\n\n<p>There will also be a message that says your site is ready to be published and a\nlink to the page:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/site-is-ready-to-be-published.png\" alt=\"site is ready to be published\"></p>\n\n<p>Notice the URL isn't <code>github.com/&lt;your-username&gt;</code>, but instead,\n<code>&lt;your-username&gt;.github.io</code>.</p>\n\n<p>Clicking on this link immediately may bring you to an error page. It can take up\nto ten minutes for the page to be published, so wait a little bit and refresh.\nYou can also refresh the GitHub Pages Settings page; the message should update\nto \"Your site is published...\" once it is ready.</p>\n\n<p><strong>Check your work</strong>: Once the page has been published, you should see your HTML\npage rendered:</p>\n\n<p><img src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/site-published-on-github.png\" alt=\"site published on GitHub\"></p>\n\n<p>Woo-hoo!</p>\n\n<h2>Troubleshooting</h2>\n\n<p>In the event that it isn't a woo-hoo for you, here are a few troubleshooting\noptions to try:</p>\n\n<ul>\n<li>Double check the GitHub Page settings and make sure <code>main</code> is set as the\nsource.</li>\n<li>If settings are correct, review the <code>index.html</code> file to make sure there are\nno typos or syntax errors.</li>\n<li>Create a new repository again, but hold off on creating an HTML file. Instead,\nonly create a <code>README.md</code> file with some example text and use GitHub Pages to\npublish the repo. Once the Readme file is displaying as a GitHub Page, start\ngoing through the HTML file creation process again.</li>\n</ul>\n\n<h2>Continuing To Build</h2>\n\n<p>With an <code>index.html</code> file created, we can now add additional files to the site\nto incorporate CSS and JavaScript. One of the great things about GitHub Pages is\nthat your published website will automatically update as you make changes to the\nrepository files and push them to your remote. The process for updating becomes:</p>\n\n<ul>\n<li>Create or modify a file</li>\n<li>Add, commit, and push it to your remote</li>\n<li>Wait a few minutes for GitHub to update your page</li>\n<li>Visit your GitHub Page to see the newest changes</li>\n</ul>\n\n<p>From here, you can choose to do whatever you like and customize your site as you\nplease. However, we recommend adding and connecting two files now: a CSS file to\nstyle your HTML, and a JavaScript file to run code and manipulate the DOM.</p>\n\n<h3>Add and Connect a CSS File</h3>\n\n<p>In the terminal, create a CSS file alongside your <code>index.html</code> file</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>style.css\n</code></pre></div>\n<p>Before we connect this file to our HTML, let's add a basic style rule to the\nfile and save it so we'll know when the styling is working.</p>\n<div class=\"highlight\"><pre class=\"highlight css\"><code><span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"no\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now, to connect this CSS file to our <code>index.html</code>, we need to modify the HTML\n<code>head</code> to include a <code>link</code> tag:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;head&gt;</span>\n  <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"style.css\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;title&gt;</span>My Personal Website<span class=\"nt\">&lt;/title&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n</code></pre></div>\n<p>The <code>link</code> tag is used to connect files to the HTML page. Note the tag has two\nattributes. The first is <code>rel</code>, which specifies how the connected file relates\nto the HTML. In this case, we're indicating that we're relating a <em>stylesheet</em>.</p>\n\n<p>The second attribute is <code>href</code>, which specifies the location of the file we're\nlinking. Since we've put <code>style.css</code> right beside <code>index.html</code> in our\nrepository, we can just provide the file name here.</p>\n\n<p>Save the HTML file and open it locally. Your page should now be very blue.</p>\n\n<p>Go ahead and add some better styling, then add, commit, and push the changes\nyou've made. Remember, since you've added a <code>style.css</code> file and modified the\n<code>index.html</code> file, we'll need to add both files before committing:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git add style.css\n<span class=\"gp\">$</span><span class=\"w\"> </span>git add index.html\n<span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"add style.css, connect to index.html\"</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>git push\n</code></pre></div>\n<p>Or you can add both files in a single command: <code>git add .</code>.</p>\n\n<p><strong>Check your work</strong>: Wait a few minutes for your page to be updated, then visit\nthe GitHub page to verify that the new styles are showing up.</p>\n\n<h3>Add and Connect a JavaScript File</h3>\n\n<p>In the terminal, create a JS file alongside <code>index.html</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span><span class=\"nb\">touch </span>script.js\n</code></pre></div>\n<p>Let's add some basic code so we can see something once we've connected the JS\nfile to our HTML file.</p>\n\n<p>In <code>script.js</code>, let's create an <code>h2</code> element and add some text content to it:</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">h2</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">h2</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"nx\">h2</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">This content added by JavaScript</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Now, we'll include code to add this <code>h2</code> element to the <code>body</code> element in the\nDOM.</p>\n<div class=\"highlight\"><pre class=\"highlight javascript\"><code><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">body</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">h2</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Save this and switch over to <code>index.html</code>. To connect <code>script.js</code> to our HTML,\nwe add a <code>script</code> tag inside <code>body</code>.</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"script.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre></div>\n<p>This tag includes a <code>src</code> attribute. Like <code>href</code> from the <code>link</code> tag, <code>src</code>\nspecifies the location of the script we want to run. Since <code>script.js</code> is side\nby side with <code>index.html</code>, we just write the file name.</p>\n\n<p>After adding the <code>script</code> tag for JavaScript and the <code>link</code> tag for CSS, our\nHTML will look like this:</p>\n<div class=\"highlight\"><pre class=\"highlight html\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"style.css\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>My Personal Website<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>Hello World!<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"script.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div>\n<p>Open the file locally. In addition to \"Hello World!\" being displayed, you should\nalso see \"This content added by JavaScript,\" confirming the code successfully\nran.</p>\n\n<p>Go ahead and add other JavaScript if you'd like, then add, commit, and push the\nchanges you've made. Since you've added a <code>script.js</code> file and modified the\n<code>index.html</code> file, we'll need to add both files before committing:</p>\n<div class=\"highlight\"><pre class=\"highlight console\"><code><span class=\"gp\">$</span><span class=\"w\"> </span>git add script.js\n<span class=\"gp\">$</span><span class=\"w\"> </span>git add index.html\n<span class=\"gp\">$</span><span class=\"w\"> </span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"add script.js, connect to index.html\"</span>\n<span class=\"gp\">$</span><span class=\"w\"> </span>git push\n</code></pre></div>\n<p>Remember when you push changes to GitHub, they will take a few moments to appear\nin GitHub Pages.</p>\n\n<p><strong>Check your work</strong>: Once the page has updated, you should see your styling and\ncontent, including the <code>h2</code> element we added using JavaScript.</p>\n\n<h2>Conclusion</h2>\n\n<p>As it turns out, the technology we were already using to store our code is also\nuseful for publishing websites. If you have any existing repositories that\ninclude HTML — or even if they don't! — you can now quickly turn your work there\ninto shareable websites.</p>\n\n<p>It makes sense if you consider GitHub is <em>already</em> storing your code. The work\nrequired to display the contents of an HTML file in your browser versus <em>render</em>\nthat HTML file is similar.</p>\n\n<p>As you continue your programming journey, you'll eventually start building parts\nof websites that can't be published using GitHub. Sites that require a server to\nstore data, for instance, can't be published on GitHub Pages. GitHub is just\nrendering files it already has; it won't do more work than that. It turns out,\nthough, that is actually quite a lot.</p>\n\n<p>Many websites are made up of two pieces, a frontend and a backend. The frontend\nis what the client experiences, what renders in the browser, while the backend\nhandles data storage and other work we don't want to burden the frontend with.\nGitHub Pages will work well as a host for most frontends, even those using\nmodern frameworks like React. You'll soon see that frontends alone can actually\nbe quite interesting and useful, even without a backend.</p>\n\n<p>For simpler websites — personal sites, projects, etc... — GitHub\npages is a great, free option for publishing content online.</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"https://pages.github.com/\">GitHub Pages</a></li>\n</ul>",
			"exportId": "software-engineering-prep-final-project-setup-part-ii-hosting-a-website-on-github-pages"
		},
		{
			"id": 432960,
			"title": "Project: Build a Personal Website",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-final-project\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<h2>Learning Goals</h2>\n\n<ul>\n<li>Build a website using HTML, CSS and JavaScript</li>\n<li>Publish a website</li>\n</ul>\n\n<h2>Introduction</h2>\n\n<p>You've been learning HTML, CSS, and JavaScript over the previous lessons. You've\nbeen receiving specific guidance (\"Use a <code>&lt;link&gt;</code> tag!\") and have been steered\nby our documentation or tests. In an effort to help you build your confidence,\nwe're going to give you <em>nothing</em> except some specifications and leave the\ndocument structure and styling <em>to you</em>. It's time to tie all your learning\ntogether into one project. You must create...</p>\n\n<p>...<em>a personal website</em>!</p>\n\n<p>Professional software engineers and web developers often have a personal\nwebsite. In some ways, it is the industry's alternative to a business card. A\npersonal website can showcase your abilities while also giving visitors a sense\nof your personality.</p>\n\n<h2>Requirements</h2>\n\n<p>This project is an opportunity to showcase what you've learned so far, so it is\nimportant that HTML, CSS, and JavaScript are incorporated into the project in\nsome way. For example, you could use a <code>mouseover</code> event to change the\nappearance of an element when the user mouses over it. Or use a <code>click</code> event to\ntoggle some content between being visible and hidden. There are a variety of\nways to do this using the CSS and JavaScript you've learned so far, but don't\nforget you can always use Google if you get stuck. Google is an invaluable tool\nfor developers! Try to use this project as an opportunity to stretch your coding\nskills!</p>\n\n<p>The content, styling, and functionality of your site are up to you. Keep in mind\nthat you may show this project to your peers and future instructors, so be\nconsiderate of content/subject matter and your potential audience.</p>\n\n<h2>Getting Started and a Recommended Workflow</h2>\n\n<p>In the previous two lessons, you:</p>\n\n<ul>\n<li>Created local and remote repos for your project and connected them together</li>\n<li>Created the base files for your project: <code>README.md</code>, <code>index.html</code>,\n<code>style.css</code>, and <code>index.js</code></li>\n<li>Published your new site on GitHub Pages.</li>\n</ul>\n\n<p>With all of this in place, you are ready to start working on the <em>content</em>,\n<em>styles</em>, and <em>behavior</em> you want your site to have. Because your site is\npublished on GitHub Pages, you'll be able to continuously push updates to your\nsite <em>as you build it</em>.</p>\n\n<p>In general, when it comes to building code-related projects, it is often best to\nestablish a routine of making small improvements, checking to make sure those\nimprovements work and don't break things. This routine might look something like\nthe following:</p>\n\n<p>1) Write some HTML, CSS or JavaScript\n2) Go to your browser and refresh the page to see the changes\n3) Adjust your code and repeat until you're satisfied\n4) Move on to the next task and repeat the process</p>\n\n<p>It is very common to get lost in coding and to keep going from one task to the\nnext without checking your work. The problem here is that if you make a mistake\nit becomes more and more difficult to spot and debug the error.</p>\n\n<p>By frequently checking your work, you'll set your own project milestones — at\neach one, you can verify everything is working so when you <em>do</em> make a mistake,\nyou'll know it was made recently.</p>\n\n<h2>Professional Git Development Workflow</h2>\n\n<p>When it comes to Git, there is ultimately no rule that says you <em>must</em> do things\na certain way. However, if there was anything we could impart to you regarding\ngood version control habits, it would be this — commit code frequently.</p>\n\n<p>As mentioned, it is a common habit to dive into the code of a project and write\nas much as you can, for as long as you can. However, not only does this increase\nthe chance for bugs, it will result in very large Git commits or just <em>one</em> big\ncommit for everything.</p>\n\n<p>Repositories with a good commit history can relay a story about their\ndevelopment from just the commit messages alone. For example, instead of the\ncommit history looking like this:</p>\n\n<ul>\n<li>Commit 1: \"Initialize Repository\"</li>\n<li>Commit 2: \"Finish website\"</li>\n</ul>\n\n<p>A good history might look closer to this:</p>\n\n<ul>\n<li>Commit 1: \"Initialize Repository\"</li>\n<li>Commit 2: \"Add basic HTML, CSS and JavaScript files\"</li>\n<li>Commit 3: \"Create initial HTML content\"</li>\n<li>Commit 4: \"Add CSS rules\"</li>\n<li>Commit 5: \"Fix syntax issue in HTML\"</li>\n<li>Commit 6: \"Finish bio/about section\"</li>\n<li>Commit 7: \"Add JS event listeners\"</li>\n<li>etc...</li>\n<li>Commit 22: \"Adjust styling for new HTML layout\"</li>\n<li>Commit 23: \"Finish website\"</li>\n</ul>\n\n<p>The commit messages here suggest that each commit above addressed a small, often\n<em>singular</em> task.</p>\n\n<p>Good commit practices are critical for large companies and organizations where\nmany developers are working on large code-bases — in these cases, limiting\nthe size of commits makes it easier for others to understand what changes the\ncommit brings. If a commit introduces a bug into the code base, it is fairly\neasy to revert a <em>small</em> commit. A big commit, on the other hand, may require\nlots of extra work to untangle and fix.</p>\n\n<p>For personal development, though, the same concerns apply. In addition, when you\nstart building more complex projects, you may find yourself in situations where\nyou'd like to go back to an earlier version of a project. Taking the time now to\nbuild good habits will help you many times over in the future. Think of good\nversion control habits as a favor to your future self!</p>\n\n<h2>Conclusion</h2>\n\n<p>Once you've finished building your website, make sure to push it all up to\nGitHub. If you followed our advice and set up GitHub Pages first, you've now\nsuccessfully built <em>and</em> published a website! Fantastic work!</p>",
			"exportId": "project-build-a-personal-website"
		},
		{
			"id": 432962,
			"title": "Survey - Project Mode",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
			"questionCount": 1,
			"timeLimit": null,
			"attempts": 1,
			"graded": false,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": null,
			"completed": false,
			"content": "<div class=\"description user_content teacher-version enhanced\">\n<p>How many hours did you spend working on the Project Mode module?</p>\n</div>",
			"exportId": "g1e74b3c79156d947efc154e27079d82c"
		}]
	},
	{
		"id": 44879,
		"name": "End of Phase Assessment",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "gb98ba4be25cdb16ed47d99831cc853cb",
		"items": [
		{
			"id": 432963,
			"title": "Software Engineering Prep Post Test",
			"type": "Quizzes::Quiz",
			"indent": 0,
			"locked": false,
			"assignmentExportId": "ga4bcdff886e45200c5e393a8ff1b6bc6",
			"questionCount": 36,
			"timeLimit": null,
			"attempts": 3,
			"graded": true,
			"pointsPossible": 36.0,
			"dueAt": null,
			"lockAt": null,
			"unlockAt": null,
			"requirement": "must_view",
			"completed": true,
			"content": "<div class=\"gmail_default\"><span><strong>Introduction</strong></span></div>\n<div>\n<div class=\"gmail_signature\" dir=\"ltr\" data-smartmail=\"gmail_signature\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<div dir=\"ltr\">\n<p>Congratulations on making it through Software Engineering Prep! You should be proud of the effort you put in to get to this point. Your final step is passing our post test - a 36 question multiple choice quiz designed to assess what you've learned from the Software Engineering Prep curriculum.</p>\nThe post test is only required for enrolled students. You'll have 3 attempts to pass the assessment with a score of 70% or higher (25 points or more) by the enrollment deadline.<br><br><strong>Timing</strong><br>This is not a timed test, but it is intended to be taken in one sitting. We don't guarantee that Canvas will keep track of your progress if, for example, you leave the quiz open overnight. If you find that you don't pass the first time - do not be discouraged! - you'll be able to see your score and review the topics you missed before attempting again.<br><br><strong>Academic Honesty</strong><br>This multiple-choice assessment is open book but should be completed individually, without assistance. The goal is ensuring that we have an accurate assessment of your ability to use the concepts and techniques covered in the pre-work.\n<p><br>Good luck! Take your time + reach out with any questions.</p>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>",
			"exportId": "g988487b305183121848418654dc15ff9"
		}]
	},
	{
		"id": 44880,
		"name": "Moving Forward: Additional Practice",
		"status": "completed",
		"unlockDate": null,
		"prereqs": [],
		"requirement": "all",
		"sequential": false,
		"exportId": "g079cef490955c01ae5409338789d3b05",
		"items": [
		{
			"id": 432964,
			"title": "Additional Practice",
			"type": "WikiPage",
			"indent": 0,
			"locked": false,
			"requirement": "must_view",
			"completed": true,
			"content": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-additional-practice\"></div><header class=\"fis-header\" style=\"visibility: hidden;\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-additional-practice\" target=\"_blank\"><img id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"></a><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-additional-practice/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n\n<p>Take a moment to celebrate the fact that you've made it through Software\nEngineering Prep — congratulations! You should now be in great shape to start\nthe program!</p>\n\n<p>Shown below are some suggestions for additional practice if you have extra time\n— or at any time while you're completing the program. They are based on feedback\nfrom past students about the topics and skills they felt they could have used\nmore practice with beyond what is covered in the curriculum.</p>\n\n<p>Any time you can devote to the resources and suggestions below will pay off not\nonly as you continue through the curriculum, but also as you prepare to\ninterview for jobs and, ultimately, begin your career as a developer.</p>\n\n<p><strong>Top Tip</strong>: We've provided a lot of information here, but you shouldn't stress\ntoo much about it! Don't feel you need to get through everything — some of the\nresources will work well for you and some won't. Anything you're able to\naccomplish — even if it's a small amount — will help!</p>\n\n<h2>Code Code Code!</h2>\n\n<p>The best way to learn to code is by doing it — a lot! Repetition and practice\nwill help your brain process the concepts you're learning, and will build muscle\nmemory for things you will do again and again as a coder. Repetition and\npractice actually create <a href=\"https://medium.com/peak-wellbeing/the-reason-for-repetition-how-repetition-helps-us-learn-10d7eea43e95\">physical changes in the brain</a> that\nwill make you a faster and more efficient coder.</p>\n\n<p>Some specific suggestions:</p>\n\n<ol>\n<li><p>Go back and review some of the JavaScript lessons and labs in Software\nEngineering Prep. Topics of particular importance include: functions,\narguments and parameters, control flow (conditional statements),\nloops/iteration, and data structures.</p></li>\n<li><p>As you're practicing a concept (or learning it for the first time!), come up\nwith your own examples and code them out. Although reading through the\nprovided examples and following along are important, using a technique in a\ndifferent way will help you understand it better and internalize the\nconcepts.</p></li>\n<li><p>Get started with code challenges. This will both give you practice coding\n<em>and</em> begin to prepare you for job interviews. There are <a href=\"https://programmingoverloaded.com/best-coding-challenge-websites-for-beginners/\">lots of online\nresources</a>, and most have a free membership level.</p></li>\n</ol>\n\n<p><strong>Top Tip</strong>: Note that, while practice is very important, <em>taking breaks is just\nas important</em>! Research on learning shows that your brain needs downtime to\neffectively process and absorb what you've learned.</p>\n\n<h2>Get Comfortable with the Command Line Interface (CLI)</h2>\n\n<p>The CLI will be one of the most valuable tools you use as a developer, but it\ntakes time and practice to get comfortable with it. Here are some good resources\nto help you up your skills:</p>\n\n<ul>\n<li><a href=\"https://www.freecodecamp.org/news/learn-the-50-most-used-linux-terminal-commands/\">The 50 Most Popular Linux &amp; Terminal Commands - Full Course for\nBeginners</a>. This free 5-hour course, offered by <a href=\"https://www.freecodecamp.org/\">Free\nCode Camp</a>, provides an excellent beginner-friendly\nintroduction to the commands you will use most often as a developer.</li>\n<li><a href=\"https://flaviocopes.com/page/linux-commands-handbook/\">Linux Commands Handbook</a> is the handbook that the\ncourse above is based on. You can download a PDF if you sign up for the\nauthor's newsletter.</li>\n<li>Cheatsheets:\n\n<ul>\n<li>Beginner friendly:\n<a href=\"https://linuxconfig.org/linux-commands-cheat-sheet\">https://linuxconfig.org/linux-commands-cheat-sheet</a></li>\n<li>More comprehensive:\n<a href=\"https://learncodethehardway.org/unix/bash_cheat_sheet.pdf\">https://learncodethehardway.org/unix/bash_cheat_sheet.pdf</a></li>\n<li>Downloadable:\n<a href=\"https://garywoodfine.com/linux-terminal-command-cheat-sheets/\">https://garywoodfine.com/linux-terminal-command-cheat-sheets</a>\n(includes an Ubuntu-specific version)</li>\n</ul></li>\n<li><a href=\"https://github.com/veltman/clmystery\">Command Line Mystery</a> is a fun way to practice CLI\ncommands — and solve a mystery while you're at it!</li>\n</ul>\n\n<p><strong>Top Tip</strong>: Remember, the idea here is <strong>not</strong> to memorize scores of CLI\ncommands! Instead, the goals are to:</p>\n\n<ol>\n<li>Build your comfort level with using the command line,</li>\n<li>Develop a feel for the range of tasks you can perform, and</li>\n<li>Learn how to use the resources available to you to find the command you need\nand how to use it.</li>\n</ol>\n\n<h2>Build your Skills with Git and GitHub</h2>\n\n<p>Git and GitHub are two other invaluable tools for developers. As with using the\nCLI, you will build your Git and GitHub skills and comfort level over time, but\nif you can start the process early, it will pay off in the long run.</p>\n\n<p>The following resources will help solidify your understanding of what Git and\nGitHub are and the needs they meet, and give you more practice with the basic\nGit/GitHub workflow you've already learned. They will also introduce you to some\nof the more advanced Git workflows that you will use all the time — perhaps\ndaily! — when you're working as a developer.</p>\n\n<ul>\n<li><a href=\"https://gitimmersion.com/\">Git Immersion</a>: hands-on exercises that will give you practice\nwith the basic Git commands and workflow</li>\n<li><a href=\"http://tom.preston-werner.com/2009/05/19/the-git-parable.html\">Git Parable</a> provides a story-based explanation of the reasoning\nbehind Git features</li>\n<li><a href=\"https://medium.com/swlh/a-beginners-guide-to-github-e4747a93765c\">Beginner's Guide to GitHub</a> provides a beginner-friendly\noverview of how to use GitHub</li>\n<li><a href=\"https://www.ndpsoftware.com/git-cheatsheet.html\">Interactive Git Cheatsheet</a></li>\n</ul>\n\n<p><strong>Top Tip</strong>: Again, you shouldn't worry about memorizing commands here, or\nstress if you don't fully understand all of Git's capabilities. The important\nthing is to develop a high-level understanding of Git and GitHub, and to\npractice the basic workflow. You'll get more comfortable the more you use it,\nand you'll learn its more advanced capabilities over time.</p>\n\n<h2>Conclusion</h2>\n\n<p>There is no wrong way to approach the material in this lesson. Work through some\nof it now if you can, but you can also come back to it whenever you have some\nextra time, or if you just need a break from lessons and labs. Getting some\nadditional practice using these resources (or others you find on your own) will\ngive you a boost towards your goal of becoming a developer.</p>",
			"exportId": "additional-practice"
		}]
	}]
}