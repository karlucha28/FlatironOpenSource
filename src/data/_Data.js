const data = [
  {
    "language": "en",
    "title": "Software Engineering Prep",
    "modules": [
      {
        "id": 44846,
        "name": "Welcome to the Course",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g0622f953ef6ce9b00420a92bf0e02be8",
        "items": [
          {
            "id": 432722,
            "title": "Welcome",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-flatiron-school-philosophy\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-flatiron-school-philosophy\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-flatiron-school-philosophy/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWelcome to Flatiron School! We're thrilled that you've joined our community of\nlearners!\u003c/p\u003e\n\n\u003cp\u003eThe following content is designed for people who are passionate, curious,\nself-driven, and serious about learning. We are comrades in a never-ending quest\nfor knowledge. While there are no shortcuts, we believe that by providing\nknowledge in an optimized order, reinforcing knowledge with hands-on, feedback\ndriven practice, and providing space for discussion, you will learn quickly. Our\ngoal is to provide the right materials, support and structure \u003cem\u003eyou\u003c/em\u003e need to\ndiscover your own love for code.\u003c/p\u003e\n\n\u003cp\u003eNote: Completing the Software Engineering Prep curriculum is required for\nenrolled students to start at Flatiron School, but students can also access this\nmaterial prior to applying. Please note that some of the resources mentioned are\nonly available to enrolled students, such as community and technical coach\nsupport.\u003c/p\u003e\n\n\u003cp\u003eIf you’re researching the program and not yet enrolled, keep in mind that this\nis the same prep course enrolled students are working through so the material is\ndetailed and extensive. We recommend that you just work through as much as you\ncan and know that you will have time to revisit content should you go through\nour admissions process.\u003c/p\u003e\n\n\u003ch2\u003eLearning to Write Code\u003c/h2\u003e\n\n\u003cp\u003eThis is the beginning of our Software Engineering course, where you will go\nthrough everything from the basics of coding to building full-stack React\nweb applications.\u003c/p\u003e\n\n\u003cp\u003eSo, where do we start? How do we know what is necessary to understand \u003cem\u003efirst?\u003c/em\u003e\nIn this course, we're going to start with a simple idea - programming is like\nhaving a conversation, and just like learning to talk, we need to start by\nlearning a few words and practicing them.\u003c/p\u003e\n\n\u003cp\u003eMany people on joining Flatiron School have already spent some time dabbling\nwith coding by using the amazing and plentiful resources all around the\ninternet. In developing the content here, though, we make no assumptions. This\ncontent is designed for absolute beginners. Lessons build off each other,\nproviding the tools and concepts necessary to complete future lessons.\u003c/p\u003e\n\n\u003cp\u003eWhat we don't do, however, is oversimplify, or water anything down. We believe\nin your infinite capacity to learn. We do our best to offer a curriculum that is\nclear, digestible, engaging, challenging, and deep. The curriculum you'll\nencounter on here is rigorous and will demand that you be patient and\nresourceful.\u003c/p\u003e\n\n\u003ch2\u003eThe Flatiron Community\u003c/h2\u003e\n\n\u003cp\u003eWe don't believe in learning alone. As you make progress, expect to bump into\nother learners just like you, ready and willing to help each other succeed.\nTogether, we can go further than we could ever go alone. We expect everyone here\nto be friendly, respectful, helpful, and nice.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe first part of this course will focus on getting your computer set up\nwith the tools and software necessary for the rest of the curriculum. Then,\nwe will introduce some fundamental programming concepts. As you progress, you'll\nstart to use the tools on your personal computer to build projects and test your\nknowledge. You're just getting started, and we're glad you're here.\u003c/p\u003e\n\n\u003cp\u003eHappy Learning!\u003c/p\u003e",
            "exportId": "welcome"
          },
          {
            "id": 432723,
            "title": "About This Course",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-about-this-course\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-about-this-course\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-about-this-course/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eWelcome\u003c/h2\u003e\n\n\u003cp\u003eThis is the beginning of Flatiron School's Software Engineering and Web\nDevelopment Courses. Before we dive into the core topics of these courses, we\nneed to cover some fundamental topics and make sure you are fully equipped for\nsuccess.\u003c/p\u003e\n\n\u003cp\u003eFirst, we need to get your computer (your \u003cem\u003elocal environment\u003c/em\u003e) set up for\nwriting and running code in JavaScript and Ruby. You'll be running code via a\nterminal on your computer, so we'll also go through the basics of the\ncommand-line interface.\u003c/p\u003e\n\n\u003cp\u003eAfter this, we will dive into the technologies behind every modern website:\nHTML, CSS and JavaScript. You'll start by learning JavaScript programming\nfundamentals, followed by the basics of HTML and CSS. With these topics covered,\nyou'll begin learning how to use the three technologies together to build\nwebsites entirely from scratch.\u003c/p\u003e\n\n\u003cp\u003eFinally, we'll introduce Git, GitHub, and the concept of version control,\nessential for storing your programming work in this course and beyond.\u003c/p\u003e\n\n\u003cp\u003eAt the end of the Software Engineering Prep, your final task will be to use all\nof your new skills and knowledge to build and publish your own website!\u003c/p\u003e",
            "exportId": "about-this-course"
          },
          {
            "id": 432725,
            "title": "How to Get Help",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-how-to-get-help\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-how-to-get-help\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-how-to-get-help/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eKnow how to get help\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe don't believe in learning alone. As you make progress, expect to bump into\nother learners just like you, ready and willing to help each other succeed.\nTogether, we can go further than we could ever go alone. Remember, you are going\nto get stuck sometimes! As with any new skill you learn, coding can be difficult\nand frustrating. After a certain point, being stuck on a problem becomes\ncounterproductive - you’re stuck and you need help getting unstuck!\u003c/p\u003e\n\n\u003cp\u003eIf you get stuck following the instructions or grasping a coding concept, there\nare a few things you can do. In this lesson, we'll look at some of the options\navailable.\u003c/p\u003e\n\n\u003ch2\u003eTry Troubleshooting First\u003c/h2\u003e\n\n\u003cp\u003eTroubleshooting is a critical skill for all programmers and spending time now to\nget better at it is time well spent. Improving your ability to troubleshoot will\nprovide a great return on your investment as you'll be able to get yourself\nunstuck and learn how to better approach issues. Whenever possible, try to\ntroubleshoot your issue independently first before seeking help.\u003c/p\u003e\n\n\u003cp\u003eMost issues you'll encounter are error messages in your terminal. A few things\nto keep in mind about error messages:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eNot all error messages are equal. Some messages are just warnings. For\nexample, if you install a tool and it works, but produces an error when run -\nsomething is wrong, but it shouldn't be a \u003cem\u003eblocker\u003c/em\u003e for you completing work.\u003c/li\u003e\n\u003cli\u003eError messages often provide clues into what may be going wrong. Often, our\nfirst inclination when faced with an error message is to \u003cem\u003eflee\u003c/em\u003e. We see some\nincomprehensible output and immediately want to do something else. \u003cstrong\u003eDon't do\nthis. Read the error!\u003c/strong\u003e We'll come back to this with specific examples later\non in the course.\u003c/li\u003e\n\u003cli\u003eCarefully check your spelling and syntax if you receive errors running\ncommands or code.\u003c/li\u003e\n\u003cli\u003eGetting a different error message after trying something is often \u003cem\u003egood\u003c/em\u003e. A\nnew message can give some indication as to what is working and what isn't.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eUse the Resources Available to You\u003c/h3\u003e\n\n\u003cp\u003eSometimes, common issues are noted in lesson materials. Other times, errors\noccur when an essential step is missed. For these reasons, we recommend\nreviewing the resources available to you through Flatiron School:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRe-read the lesson you're on thoroughly to make sure you’re not missing\nrelevant details\u003c/li\u003e\n\u003cli\u003eReview previous lessons that may apply to the error or issue you’re\nexperiencing, retracing your steps\u003c/li\u003e\n\u003cli\u003eCheck out \u003ca href=\"https://flatironschoolsupport.zendesk.com/hc/en-us\"\u003eFlatiron's help articles\u003c/a\u003e\n— these articles include advice and answers to frequently asked questions from\nthe Flatiron School Team.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3\u003eUse External Resources\u003c/h3\u003e\n\n\u003cp\u003eIf you can't find a solution in the internal resources, the best next step is\noften to turn to Google. Some things to note regarding searching:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow you search yields different results, so it's worth attempting a few\nslightly different searches.\u003c/li\u003e\n\u003cli\u003eCopying and pasting an error message is a great thing to search first. Try\nto identify the main part of an error message, often around the beginning or end.\u003c/li\u003e\n\u003cli\u003eRefine your search based on the results you're getting. Sometimes, you may\nneed to be more specific (i.e. you're using a Mac and need to specify because\nall search results are referring to Windows). Sometimes, being too specific\nwill yield too few results. Avoid copying anything that may be specific to\nyour system, such as a username.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen looking through solutions on the internet, always be very careful of\ncommands that alter system files. If you see a command you're not familiar\nwith, you can always google \u003cem\u003ethat\u003c/em\u003e command to better understand what it does\nbefore running it.\u003c/p\u003e\n\n\u003cp\u003eEven if you aren't able to find an answer on your own, taking the time to try\nthe options above can help you clarify the question you're asking and eliminate\nunsuccessful solutions to the problem. Troubleshooting on your own means that\nwhen you \u003cem\u003edo\u003c/em\u003e reach out, you'll be able to ask better, more specific questions.\u003c/p\u003e\n\n\u003ch2\u003eReach Out via Slack\u003c/h2\u003e\n\n\u003cp\u003eThere is a good chance that fellow students have encountered similar challenges\nto yours. Use the Slack channels available to you to get help:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou can post in any public channel (e.g., #general)\u003c/li\u003e\n\u003cli\u003eShortly before you start with a cohort you will be given access to a\ncohort-specific Slack channel\u003c/li\u003e\n\u003cli\u003eWhile you're completing Software Engineering Prep, you can post questions in\nthe #js-prework-support channel. There will be other students there who may be\nable to help, and this channel is also staffed by Flatiron School instructors\nfrom 11am to 7pm eastern time, Monday through Friday.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEqually, if you find someone else asking a question on Slack that you can\nprovide insight on, please do! One of the best ways to confirm your own\nunderstanding of a concept is to try and help someone else understand it.\u003c/p\u003e\n\n\u003ch2\u003eSet Yourself Up for Success\u003c/h2\u003e\n\n\u003cp\u003eFlatiron's Academic Success Team runs an information session every week to\npass along tips for success and introduce students to the help resources available\nto them. These tools will help you as you complete Software Engineering Prep and\nthroughout your time in the program.\u003c/p\u003e\n\n\u003cp\u003eSign up for a session here: \u003ca href=\"https://www.eventbrite.com/e/flatiron-school-prep-how-to-succeed-info-session-tickets-273022015197\"\u003eFlatiron School Prep: How to Succeed\u003c/a\u003e\u003c/p\u003e",
            "exportId": "how-to-get-help"
          }
        ]
      },
      {
        "id": 44848,
        "name": "Intro to Canvas",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g438edc3f67237e080a5db39a59400631",
        "items": [
          {
            "id": 432729,
            "title": "Introduction To Canvas",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-welcome-intro-to-canvas\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-welcome-intro-to-canvas\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-welcome-intro-to-canvas/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eCanvas is a learning platform used by universities and educational institutions\nacross the country and the world. Flatiron School uses Canvas to deliver all\ncurriculum content for your program.\u003c/p\u003e\n\n\u003cp\u003eCanvas is where all official Flatiron School communication, assignment\nsubmission, grading, attendance, etc. will take place for the entirety of your\ncourse. You should check Canvas multiple times a day for updates, announcements,\nassignments, and the day's schedule. Canvas hosts many features which you will\nbecome familiar with over the course of your time with Flatiron School. The\nfollowing lessons will introduce you to and explain some of the most important\nfunctions.\u003c/p\u003e",
            "exportId": "introduction-to-canvas"
          },
          {
            "id": 432730,
            "title": "Navigating Canvas",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-navigating-canvas\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-navigating-canvas\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-navigating-canvas/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e  \u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/PVfkFD45hL0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e  \u003cp\u003e\u003cstrong\u003eDashboard\u003c/strong\u003e - the first thing you see when you log into Canvas, the Dashboard gives a high level view of the courses in which you're enrolled. Your instructor will release new courses as you go through the program.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eGlobal Navigation\u003c/strong\u003e - static menu on the left side of the page and accessible from any page on Canvas, the Global Navigation gives you direct access to your courses and other information in Canvas.\u003c/p\u003e  \u003cp\u003e\u003cstrong\u003eSidebar\u003c/strong\u003e - found within each course, the Sidebar houses various features that allow access to the course materials.\u003c/p\u003e  \u003cp\u003eView the video tutorial for more information on how to use Canvas assignment.\u003c/p\u003e",
            "exportId": "navigating-canvas"
          },
          {
            "id": 432731,
            "title": "Lesson Types",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-canvas-lesson-types\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-canvas-lesson-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-canvas-lesson-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eCOURSES\u003c/h2\u003e\n\n\u003cp\u003eYour Flatiron School program is broken up into courses. Each course represents a\nsection of our core curriculum.\u003c/p\u003e\n\n\u003ch2\u003eMODULES\u003c/h2\u003e\n\n\u003cp\u003eFlatiron School organizes content within courses by breaking them up into\nmodules.  The modules will control the entire flow of the course and within them\nyou'll find all your lessons, labs, assignments, and quizzes for the course.\nModules can be filled with different types of content:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePage:\u003c/strong\u003e a page of content to read\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiscussion:\u003c/strong\u003e a course discussion in which teachers and students can\nactively participate\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eQuiz:\u003c/strong\u003e a course quiz\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAssignment:\u003c/strong\u003e a course assignment\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLink or External Tool:\u003c/strong\u003e an external link or tool to view information\noutside of the course\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile:\u003c/strong\u003e a file to download or view\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou may be required to perform certain actions to complete a module.\nRequirements may include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eView:\u003c/strong\u003e You must view the item.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMark as done:\u003c/strong\u003e You must mark the module item as done before you can\nprogress to the next item.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eContribute:\u003c/strong\u003e You must post a reply to the discussion topic or contribute\ncontent to a page.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSubmit:\u003c/strong\u003e You must submit the assignment, graded discussion, or quiz.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eScore at least X points:\u003c/strong\u003e You must submit the assignment with a minimum\nof the shown score.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can find the 'Modules' button on the Sidebar on the left hand side within\neach course.\u003c/p\u003e\n\n\u003ch2\u003eASSIGNMENTS\u003c/h2\u003e\n\n\u003cp\u003eWhile the module controls the flow of the entire course, you can also access a\nrunning list of your course assignments via the 'Assignments' button on your\nSidebar in the left hand side within the course.  \u003c/p\u003e\n\n\u003cp\u003eBy default, assignments are grouped by overdue assignments, upcoming\nassignments, undated assignments, and past assignments.\u003c/p\u003e\n\n\u003cp\u003eEach assignment includes an icon designating whether it's an assignment,\ndiscussion, or quiz and will also display availability dates, due dates, and the\nnumber of points the assignment is worth.\u003c/p\u003e\n\n\u003cp\u003eYou can find the 'Assignments' button on the Sidebar on the left hand side\nwithin each course.\u003c/p\u003e",
            "exportId": "lesson-types"
          },
          {
            "id": 432733,
            "title": "Introduction to the Local Environment Setup Instructions",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-environment-intro\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-environment-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWe believe that it's important for each student to have confidence in creating\ncode on their own computers. Many of our lessons also include feedback in the\nform of code tests - these will only run in an environment set up for JavaScript\nand Ruby. For these reasons, we ask students to set up their local environments\nas early as possible. The next set of lessons will walk through the installing\nand configuring the tools you'll need. Separate instructions are provided for\nMac and Windows users.\u003c/p\u003e\n\n\u003cp\u003eLocal environment setup may take anywhere from 1 to 4 hours total depending on\nhow fast your computer is and your internet speeds. As you have time throughout\nthe week, try to install each of the tools and technologies listed in the setup\ninstructions and write down any issues that you run into. It is okay to install\nthe programs over the course of a few days.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: If you are using a Mac then you will work through the steps in the\n\u003cstrong\u003eMacOS Environment Setup\u003c/strong\u003e module and ignore the Windows set up. If you will\nbe using a Windows-based PC then you can skip past the Mac set up and work\nthrough the steps in the \u003cstrong\u003eWindows Environment Setup\u003c/strong\u003e module.\u003c/p\u003e\n\u003c/blockquote\u003e",
            "exportId": "introduction-to-the-local-environment-setup-instructions"
          }
        ]
      },
      {
        "id": 44850,
        "name": "MacOS Environment Setup",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g136d63b5125e070802d0260d438f6cee",
        "items": [
          {
            "id": 432737,
            "title": "Introduction to MacOS Environment Setup",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-introduction\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this module, we will walk through the process of setting up your macOS local\ndevelopment environment.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are not using a Mac computer for this course, skip the\nlessons in this module.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eBrief History\u003c/h2\u003e\n\n\u003ch3\u003eUnderstanding Environments\u003c/h3\u003e\n\n\u003cp\u003eA \u003cstrong\u003esoftware environment\u003c/strong\u003e describes the set of tools that work together to\nenable you to develop and execute the code that you write. Environments\ntypically include the operating system, databases, programming languages, and\nrelated tools like text editors or browsers.\u003c/p\u003e\n\n\u003ch3\u003eComparing Environments with Machines\u003c/h3\u003e\n\n\u003cp\u003eYou may hear us use the term \"software environment\" and \"machine\" to mean\nsimilar things. A \u003cstrong\u003emachine\u003c/strong\u003e describes the physical hardware that your software\nenvironment runs on. You'll hear the term machine and computer used\ninterchangeably. Different machines (like PCs and Macs) use different hardware\nto run the programs that they use. Differences in those machines mean that\nsetting up your development environment on one type of machine could look much\ndifferent than setting it up on another.\u003c/p\u003e\n\n\u003ch3\u003emacOS Operating System\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003emacOS\u003c/strong\u003e is a UNIX-based operating system. UNIX-based operating systems are\nvery commonly used in professional software engineering settings. Learning how\nto use a UNIX-based operating system will be valuable for your future software\nengineering career. You may have heard of other UNIX-based operating systems\nlike Ubuntu, Debian, or Fedora, which include the Linux kernel (core software).\nThese types of operating systems work similarly.\u003c/p\u003e\n\n\u003ch3\u003eTerminals and Shells\u003c/h3\u003e\n\n\u003cp\u003eYou may be familiar with opening files and applications on your computer by\nclicking icons, or viewing a website by typing an address into the address bar\nand seeing what pops up. These \u003cstrong\u003egraphical user interfaces (GUIs)\u003c/strong\u003e created a\nrevolution in computing and are still extremely helpful in getting work done for\nmany non-technical computer users.\u003c/p\u003e\n\n\u003cp\u003eBefore graphical user interfaces (GUIs), the way to tell the computer to do\nsomething was through a \u003cstrong\u003eterminal\u003c/strong\u003e. The terminal included a screen, which\nwould display only text, and a keyboard. The screen and keyboard were connected\nto a computer and you typed into the keyboard what you wanted the computer to do.\nThen, you would press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e and wait for the computer to finish.\u003c/p\u003e\n\n\u003cp\u003eTerminals are still used frequently today, especially in software development.\nWe can connect to another computer on the internet, give it instructions by\ntyping in commands, and view the result on our screen. The way that modern\ncomputers emulate the terminals of yesterday is through a program called a\n\u003cstrong\u003ecommand-line interface\u003c/strong\u003e, or a \u003cstrong\u003eshell\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eSimilar to operating systems, there are many different types of shells. The\nshell that Flatiron School supports on the macOS operating system is called\n\u003cstrong\u003ezsh\u003c/strong\u003e, short for Z Shell.\u003c/p\u003e\n\n\u003ch3\u003emacOS Terminal\u003c/h3\u003e\n\n\u003cp\u003eThe \"Terminal\" application is a text-based way to browse and work with files on\nyour computer. We will be using the \"Terminal\" application during the\nenvironment setup and the duration of the program. For now, let's start to see\nwhat \"Terminal\" and more generally, \u003cstrong\u003eshell\u003c/strong\u003es can do.\u003c/p\u003e\n\n\u003ch2\u003eView Your Desktop in \"Finder\" and \"Terminal\" Applications\u003c/h2\u003e\n\n\u003cp\u003eTo complete the environment setup, you will need to be able to open\napplications. You can open new applications by using the \"Spotlight Search\"\nmagnifying glass icon in the top-right corner of your window.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: View Your Desktop in the \"Finder\"\u003c/h3\u003e\n\n\u003cp\u003eThe \"Finder\" application is a visual way to browse the files on your computer.\nYou may already be familiar with the \"Finder\" application. This application\nallows you to quickly see the files on your desktop, downloads, documents,\npictures, music, videos, and much more.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eClick on the \"Spotlight Search\" magnifying glass icon in the top-right corner\nof your window\u003c/li\u003e\n\u003cli\u003eType \"Finder\" and open the application\u003c/li\u003e\n\u003cli\u003eFind and open the \"Desktop\" folder in your \"Finder\" application\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eAction Item: View Your Desktop in the \"Command Prompt\" Shell\u003c/h3\u003e\n\n\u003cp\u003eThe \"Terminal\" application is the terminal that will allow us to interface with\nour computer through a shell. This action item is to primarily get you\ncomfortable running commands in \u003cem\u003eany\u003c/em\u003e shell so that you can work through the\nenvironment setup on your own.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using the \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd /Users\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003els\u003c/code\u003e (lowercase \u003ccode\u003eL\u003c/code\u003e and lowercase \u003ccode\u003eS\u003c/code\u003e together) into the terminal and\npress \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLook for your username in the list\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd\u003c/code\u003e into the terminal, add a space, and type your name as it appears in\nthe list and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003els\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLook for the \"Desktop\" folder in the list\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd Desktop\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003els\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: if prompted, allow\n\"Terminal\" to access files in your Desktop folder.)\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xoHO4qeo3AA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you were able to open your desktop in the \"Finder\" application and you were\nable to open the \"Terminal\" application and \u003ccode\u003ecd\u003c/code\u003e to your desktop in that\napplication, you should see that you can see the same list of files in both the\n\u003cstrong\u003egraphical user interface (GUI)\u003c/strong\u003e and in the \u003cstrong\u003ecommand-line interface (CLI)\u003c/strong\u003e\nor shell.\u003c/p\u003e\n\n\u003cp\u003eThis may be your first time using the \"Terminal\" application or any terminal or\nshell. Now you know how to see the items on your desktop through the \"Finder\"\napplication \u003cem\u003eand\u003c/em\u003e through the \"Terminal\" application.\u003c/p\u003e\n\n\u003ch2\u003ePreparing for Your Environment Setup\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDuring the environment setup, you will be spending a lot of time in your\n\"Terminal\" application.\u003c/li\u003e\n\u003cli\u003eAs much as possible, copy and paste commands that we ask you to run there\ninstead of typing by hand to prevent environment setup issues.\u003c/li\u003e\n\u003cli\u003eSpecific keys that you need to press will be surrounded by \u003ccode\u003e\u0026lt;\u003c/code\u003e \u003ccode\u003e\u0026gt;\u003c/code\u003e (for\nexample, \u003ccode\u003e\u0026lt;Shift\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eYou will need to be comfortable switching between windows; we will primarily\nbe using the browser and the \"Terminal\" application.\u003c/li\u003e\n\u003cli\u003eYou should be able to start and stop the environment setup.\u003c/li\u003e\n\u003cli\u003eIf you get stuck, reach out to your classmates or an instructor.\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "introduction-to-macos-environment-setup"
          },
          {
            "id": 432739,
            "title": "MacOS System Setup",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-system\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-system\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-system/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eThe following instructions are for macOS Catalina, BigSur, and Monterey. If you\nare not on one of these operating systems but have the option to update, we\nrecommend doing so before following the instructions below. If you are using a\nmachine with the M1 chip, we recommend updating to Monterey before you begin.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Throughout the environment setup, you will see commands that look like\nthis:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ewhoami\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAny time you see a command like this with a \u003ccode\u003e$\u003c/code\u003e at the beginning, those commands\nshould be entered in your terminal \u003cstrong\u003ewithout\u003c/strong\u003e the \u003ccode\u003e$\u003c/code\u003e. So for the example\nabove, you would type \u003ccode\u003ewhoami\u003c/code\u003e in the terminal (without a \u003ccode\u003e$\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch2\u003eCheck That Your macOS System is Compatible with Flatiron School's Requirements\u003c/h2\u003e\n\n\u003cp\u003eWhen working on software, it is important that your computer and the software\nyou're using are compatible. In this step, we'll ensure that you can install all\nthe tools you will need to complete the program.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eClick on the Apple menu in the top left of the window\u003c/li\u003e\n\u003cli\u003eChoose \"About This Mac\" from the menu\u003c/li\u003e\n\u003cli\u003eLook for the version name (for example, \"macOS Big Sur\")\u003c/li\u003e\n\u003cli\u003eLook for the version number (for example, \"Version 11.4\")\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CF82Etkyfm8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf your version name is macOS Catalina, Big Sur, or Monterey, and your version\nnumber is greater than \"Version 10.15.0\", your computer meets our requirements\nfor the course and you can continue below.\u003c/p\u003e\n\n\u003cp\u003eIf your computer does not meet the requirements listed above, but you can\nupgrade, we recommend that you do so before completing the environment setup.\u003c/p\u003e\n\n\u003cp\u003eIf your computer does not meet the requirements and you can't upgrade, some\nprograms may not work for you. Please reach out to an instructor for more\ninformation.\u003c/p\u003e\n\n\u003ch2\u003eCheck that Your macOS System Has Enough Space for Flatiron School's Requirements\u003c/h2\u003e\n\n\u003cp\u003eThe programs that we'll be installing during environment setup and all of the\nwork you'll do with Flatiron School will need at least 4 GB of free disk\nspace. Follow the steps below to ensure that you have enough disk space to\ninstall all the programs needed during environment setup.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eClick on the Apple menu in the top left of the window\u003c/li\u003e\n\u003cli\u003eChoose \"About This Mac\" from the menu\u003c/li\u003e\n\u003cli\u003eClick the \"Storage\" tab header\u003c/li\u003e\n\u003cli\u003eLook for your macOS partition (for example, \"Macintosh HD\")\u003c/li\u003e\n\u003cli\u003eLook for the storage (for example, \"119.59 GB available of 186 GB\")\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0Z0BzmiTqsk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf your free space for your macOS partition is greater than 4 GB, continue\nbelow. Otherwise, click \"Manage...\" to open the System Information window and\nfree up some storage space.\u003c/p\u003e\n\n\u003ch2\u003eInstall Homebrew\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://brew.sh\"\u003eHomebrew\u003c/a\u003e is a package manager for macOS. It allows us to quickly install\na number of programs we will need.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003e/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFollow the prompts on the screen during the installation (Note: this could\ntake a while.)\u003c/li\u003e\n\u003cli\u003eAfter the installation has completed, you may be prompted to run two\nadditional commands to add Homebrew to your PATH. If so, run those two\ncommands in your terminal.\u003c/li\u003e\n\u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/igtyCPu3JNk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eYou can verify that Homebrew is successfully installed by running \u003ccode\u003ebrew help\u003c/code\u003e.\nIf your terminal outputs a list of \u003ccode\u003ebrew\u003c/code\u003e commands, you're all set.\u003c/p\u003e\n\n\u003ch3\u003eTroubleshooting\u003c/h3\u003e\n\n\u003cp\u003eIf your machine has an M1 chip and you were unable to install Homebrew, try\nrunning the following command, then continue from step 2 above:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003earch\u003c/span\u003e \u003cspan class=\"nt\"\u003e-x86_64\u003c/span\u003e zsh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eCheck Whether You Need to Install Zsh\u003c/h2\u003e\n\n\u003cp\u003eZsh is the new standard shell for the macOS and comes pre-installed with the\nlatest version of macOS, but it may need to be installed on older Macs.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003eecho $SHELL\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIf you see \u003ccode\u003e/bin/zsh\u003c/code\u003e or \u003ccode\u003e/usr/local/bin/zsh\u003c/code\u003e DO NOT continue with the next\nsteps. Move on to \"Check Your Work\".\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOtherwise, to install Zsh:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eType \u003ccode\u003ebrew install zsh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003eecho /usr/local/bin/zsh | sudo tee -a /etc/shells\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n(Note: you will need to enter your password.)\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003echsh -s /usr/local/bin/zsh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eIf you receive a message starting with \"This is the Z Shell configuration\nfunction for new users, zsh-newuser-install\", press \u003ccode\u003e0\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wiqcFoV2heU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you run \u003ccode\u003eecho $SHELL\u003c/code\u003e, the terminal should output \u003ccode\u003e/bin/zsh\u003c/code\u003e or \u003ccode\u003e/usr/local/bin/zsh\u003c/code\u003e.\nThis indicates that Zsh is in use and you are set to continue below.\u003c/p\u003e\n\n\u003ch2\u003eTroubleshooting\u003c/h2\u003e\n\n\u003cp\u003eIf you see the following message when opening your terminal:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003ezsh compinit: insecure directories, run compaudit for list.\nIgnore insecure directories and continue [y] or abort compinit [n]?\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eType \u003ccode\u003ey\u003c/code\u003e and press enter, then run the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ecompaudit | xargs \u003cspan class=\"nb\"\u003echmod \u003c/span\u003eg-w\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eClose and reopen your terminal to clear the error.\u003c/p\u003e\n\n\u003ch2\u003eInstall Google Chrome\u003c/h2\u003e\n\n\u003cp\u003eGoogle Chrome is the browser that we will use for your Flatiron School Student\nPortal account and also for front-end web development. You are not required to\nuse Google Chrome for personal work, but we highly encourage you to download it\nfor access to your account and for development in the browser.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://www.google.com/chrome\"\u003eGoogle Chrome download webpage\u003c/a\u003e (\u003ca href=\"https://www.google.com/chrome\"\u003ehttps://www.google.com/chrome\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick \"Download Chrome\" and \"Accept and Install\"\u003c/li\u003e\n\u003cli\u003eWait for the \"googlechrome.dmg\" file to download and find it in the \"Finder\"\napplication\u003c/li\u003e\n\u003cli\u003eOpen the \"googlechrome.dmg\" file and install Google Chrome\u003c/li\u003e\n\u003cli\u003eDrag the \"Google Chrome\" application to your \"Applications\" folder\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/YS_qinEgacI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can open the \"Google Chrome\" application using \"Spotlight\nSearch\", continue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall Visual Studio Code (VS Code)\u003c/h2\u003e\n\n\u003cp\u003eVisual Studio Code (VS Code) is the tool that you'll use to edit your Ruby and\nJavaScript files. It is a text editor that provides some beneficial extensions\nfor developers. One such tool is an integrated terminal! This means that you can\nedit your code and use your terminal in the same window. Follow the steps below\nto get both set up.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://code.visualstudio.com/Download\"\u003eVisual Studio Code download webpage\u003c/a\u003e\n(\u003ca href=\"https://code.visualstudio.com/Download\"\u003ehttps://code.visualstudio.com/Download\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick on the Mac download option and start the download\u003c/li\u003e\n\u003cli\u003eWait for the \".zip\" file to download and find it in the \"Finder\" application\u003c/li\u003e\n\u003cli\u003eOpen the \".zip\" file and install Visual Studio Code\u003c/li\u003e\n\u003cli\u003eDrag the \"Visual Studio Code\" application to your \"Applications\" folder\u003c/li\u003e\n\u003cli\u003eOpen the \"Visual Studio Code\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eClick \"View\" in the toolbar, then click \"Command Palette\" in the dropdown\nmenu, or use the shortcut \u003ccode\u003e\u0026lt;Command ⌘\u0026gt; + \u0026lt;Shift\u0026gt; + P\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \"shell command\" in the box and click on \"Shell Command: Install 'code'\ncommand in PATH\"\u003c/li\u003e\n\u003cli\u003eClose the \"Visual Studio Code\" application\u003c/li\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecode\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5E2frsEGepE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf Visual Studio Code (VS Code) opened after typing \u003ccode\u003ecode\u003c/code\u003e in your \"Terminal\"\napplication, continue to the next lesson, \u003cstrong\u003eInstalling Node on macOS\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "macos-system-setup"
          },
          {
            "id": 432741,
            "title": "Mac NodeJS Install",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-nodejs\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-nodejs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstall Node Version Manager (NVM)\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/nvm-sh/nvm\"\u003eNode Version Manager (NVM)\u003c/a\u003e is a tool that will allow you to download and\ninstall multiple versions of Node.js, one of the environments for the JavaScript\nprogramming language that we teach at Flatiron School. Installing NVM is the\nfirst step in installing Node.js on your macOS operating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003etouch ~/.zshrc\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType\n\u003ccode\u003ecurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | zsh\u003c/code\u003e\nand press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/eM4GgBrTD5k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message ending with \"Note: to remove, delete, or uninstall nvm\",\ncontinue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall Node.js\u003c/h2\u003e\n\n\u003cp\u003eFor our JavaScript labs and lessons, we expect that students use \u003ca href=\"https://nodejs.org/en/\"\u003eNode.js\u003c/a\u003e\non their macOS operating system. If Node Version Manager (NVM) has been\nsuccessfully installed, you can quickly install Node.js with a couple of\ncommands.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm install --lts\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NzWGzrBPRVI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message starting with \"-\u0026gt; v14.13.0\" (or any higher number, like \"-\u0026gt;\nv14.13.10\" or \"-\u0026gt; v16.10.0\"), continue to the next lesson, \u003cstrong\u003eInstalling Ruby on\nmacOS\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "mac-nodejs-install"
          },
          {
            "id": 432744,
            "title": "Installing Ruby on MacOS",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-ruby\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstall the GMP and GnuPG Packages\u003c/h2\u003e\n\n\u003cp\u003eBefore installing RVM and Ruby, we will need to add two tools which help us to\nverify that we're installing the software that we're expecting.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ebrew install gmp\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ebrew install gnupg\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5JTWcR7n1xo\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you get an error saying \"command not found: brew\", Homebrew may not be\ninstalled or failed to install correctly. Please go back through the \"MacOS\nSystem Setup\" lesson first before going through the rest of this one.\u003c/p\u003e\n\n\u003cp\u003eIf you get an error saying \"Warning: gnupg-1.4.19 already installed\", GnuPG is\ninstalled, but it may not be linked properly. To fix:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ebrew link gnupg\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eInstall Ruby Environment Manager (RVM) on macOS\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://rvm.io/\"\u003eRuby Environment Manager (RVM)\u003c/a\u003e is a tool that will allow you to download\nand install multiple versions of Ruby, one of the programming languages that we\nteach at Flatiron School. This is the first step in installing Ruby on your\nmacOS operating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType\n\u003ccode\u003egpg --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\u003c/code\u003e\nand press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003e\\curl -sSL https://get.rvm.io | bash -s stable\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClose and reopen the \"Terminal\" application\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ervm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KLPVQDUYu-I\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a long message ending in \"For additional documentation please visit\n\u003ca href=\"https://rvm.io\"\u003ehttps://rvm.io\u003c/a\u003e\", continue below.\u003c/p\u003e\n\n\u003cp\u003eIf \u003ccode\u003ervm\u003c/code\u003e is not found, check out the troubleshooting steps in the \u003cstrong\u003eVerify and\nTroubleshoot your macOS Environment Setup\u003c/strong\u003e lesson later on in this module.\u003c/p\u003e\n\n\u003ch2\u003eInstall Ruby version 2.7.4 on macOS\u003c/h2\u003e\n\n\u003cp\u003eFor our Ruby labs and lessons, we expect that students use Ruby version 2.7.4.\nIf Ruby Environment Manager (RVM) has been successfully installed, you can\nquickly install Ruby with a couple of commands.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ervm install 2.7.4 --default\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ervm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cKU3o2xqqtU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message starting with \"=* ruby-2.7.4\", continue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall Ruby Gems\u003c/h2\u003e\n\n\u003cp\u003eRuby Gems are small programs written in Ruby that help you to code more easily\nin Ruby. The gems you will install today include: Bundler, which allows you to\nkeep track of which gems your projects need to work, and Pry, which allows you\nto pause Ruby code execution when it runs and inspect it.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egem update --system\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egem install bundler\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egem install pry\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egem list | wc -l\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rc5vn4FVvXc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can complete each step without any issues and you see an output of a\nnumber around or above 60 from the last command, continue to the next lesson,\n\u003cstrong\u003eConfiguring Git and GitHub on macOS\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "installing-ruby-on-macos"
          },
          {
            "id": 432745,
            "title": "Mac Git And Github Configuration",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-git-github\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-git-github\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-git-github/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstall \u003ccode\u003egit\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://git-scm.com/\"\u003eGit\u003c/a\u003e generally comes pre-installed with most operating systems, but you\ncan check by running \u003ccode\u003egit version\u003c/code\u003e in the terminal. If this gives you an error\nor does not come back with a version number, you'll need to install Git. You can\ninstall it using Homebrew.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ebrew install git\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClose and reopen the \"Terminal\" application\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egit version\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D9Eudqng2sU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message starting with \"git version...\", continue below.\u003c/p\u003e\n\n\u003ch2\u003eCreate a GitHub Account\u003c/h2\u003e\n\n\u003cp\u003eTo work on and get credit for the labs and lessons that you work on during the\nprogram, you will need to sign up for a GitHub account \u003cem\u003eif you don’t already\nhave one\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://github.com/join\"\u003eGitHub signup webpage\u003c/a\u003e (\u003ca href=\"https://github.com/join\"\u003ehttps://github.com/join\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eFill out the form and create your account\u003c/li\u003e\n\u003cli\u003eVerify the email address connected to your GitHub account\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cVNLBQssm8g\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you were able to verify your email address, continue below.\u003c/p\u003e\n\n\u003ch2\u003eConfigure Git and GitHub\u003c/h2\u003e\n\n\u003cp\u003eGit is the tool that we’ll use to download and upload the work that we do in\nlabs and lessons. To use Git without signing in every time, you can create a\nSecure Shell (SSH) key and associate that to your GitHub account. Lastly, you\nwill want to run a few commands to make sure that when you use Git, you get the\nproper credit for your work. This step will ask you to do work both in your\nbrowser and your terminal.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egit config --global color.ui true\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egit config --global user.name\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + your name and press\n\u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: this should be your full name, not your GitHub username, in\nquotes.)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egit config --global user.email\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + the email address you\nused to sign up to GitHub and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egit config --global init.defaultBranch main\u003c/code\u003e to\n\u003ca href=\"https://github.com/github/renaming\"\u003eupdate the default branch name\u003c/a\u003e to \u003ccode\u003emain\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003essh-keygen\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFor each prompt \u003cstrong\u003edo not type anything\u003c/strong\u003e, just continue to press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e.\nIt's particularly important that you \u003cstrong\u003edo not enter a passphase\u003c/strong\u003e and leave\nthe passphrase empty when prompted; otherwise, you'll have to enter that\npassphrase any time you interact with GitHub (which will happen a lot during\nthe program); and you may run into issues submitting assignments later.\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecat ~/.ssh/id_rsa.pub | pbcopy\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. This will copy\nyour SSH key to your clipboard\u003c/li\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://github.com/settings/ssh/new\"\u003eGitHub New SSH key form\u003c/a\u003e (\u003ca href=\"https://github.com/settings/ssh/new\"\u003ehttps://github.com/settings/ssh/new\u003c/a\u003e)\n\u003cem\u003e(Note: you need to be logged in to GitHub to access that link.)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eType \"My personal Mac\" in the \"Title\" input field\u003c/li\u003e\n\u003cli\u003eLeave the \"Key Type\" as \"Authentication Key\"\u003c/li\u003e\n\u003cli\u003ePaste what’s on your clipboard from step 8 in the \"Key\" input field\u003c/li\u003e\n\u003cli\u003eClick \"Add SSH Key\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/2YF15UlenxM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see your new SSH key beneath the \"SSH keys\" heading, continue to the next\nlesson, \u003cstrong\u003eConfiguring the Flatiron Student Portal\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "mac-git-and-github-configuration"
          },
          {
            "id": 432746,
            "title": "Configuring the Flatiron Student Portal",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-configuring-the-flatiron-student-portal\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e gem is a tool that simplifies the process of completing labs and\nsubmitting your work in Canvas. Under the hood, this process consists of a\nnumber of steps:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eFork\u003c/strong\u003e (create your own copy of) the assignment's repo on GitHub.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eClone\u003c/strong\u003e your copy of the repo down to your local machine.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRun a command (\u003ccode\u003enpm install\u003c/code\u003e for JavaScript labs, \u003ccode\u003ebundle install\u003c/code\u003e for Ruby\nlabs) to install any necessary \u003cstrong\u003edependencies\u003c/strong\u003e for the repository (\u003cem\u003e...tools\nothers have built to make things easier for us\u003c/em\u003e).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRun \u003ccode\u003enpm test\u003c/code\u003e (JavaScript) or \u003ccode\u003erspec\u003c/code\u003e (Ruby) to run tests.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse git commands to \u003cstrong\u003ecommit\u003c/strong\u003e your changes and push them up to your repo on\nGitHub.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSubmit a link to your GitHub repo in Canvas to get credit for completing the\nlab.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e gem will handle several of these steps for you automatically,\nsubstantially simplifying the workflow so you can focus your attention on\nlearning to code. You will learn how to complete and submit assignments using\nthe gem in the next section; for now, let's get it installed and ready to use.\u003c/p\u003e\n\n\u003ch2\u003eInstall the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e\n\n\u003cp\u003eTo install the gem, open the \"Terminal\" application (or \"Ubuntu\" for WSL users)\nand run this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egem \u003cspan class=\"nb\"\u003einstall \u003c/span\u003elearn-co\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBefore we can use the gem, we'll need to do two things:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eConnect your Flatiron School Portal account to GitHub\u003c/li\u003e\n\u003cli\u003eConnect the local gem to your Flatiron School Portal account\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConnect Your GitHub Account to your Flatiron School Portal Account\u003c/h2\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen \u003ca href=\"https://base.flatironschool.com/account/manage\"\u003eFlatiron School's Base Account Management page\u003c/a\u003e\n(\u003ca href=\"https://base.flatironschool.com/account/manage\"\u003ehttps://base.flatironschool.com/account/manage\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eConnect your GitHub account to your Flatiron School Portal account\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYour Account Management page should now look similar to this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-flatiron-student-portal/base-account-manage.png\" alt=\"Github Successfully Connected\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eConfigure the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e\n\n\u003cp\u003eThis step will ask you to do work both in your browser and your terminal.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application (or \"Ubuntu\" for WSL users).\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003etouch ~/.netrc \u0026amp;\u0026amp; chmod 0600 ~/.netrc\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. \u003cem\u003e(Note: you\nmay be asked to enter your password.)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eOpen \u003ca href=\"https://base.flatironschool.com/account/manage\"\u003eFlatiron School's Base Account Management page\u003c/a\u003e\n(\u003ca href=\"https://base.flatironschool.com/account/manage\"\u003ehttps://base.flatironschool.com/account/manage\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick the icon under \"OAuth Token\" to reveal your GitHub OAuth token.\u003c/li\u003e\n\u003cli\u003eCopy the string of characters under the \"OAuth Token\" header.\u003c/li\u003e\n\u003cli\u003eGo back to the terminal, type \u003ccode\u003elearn whoami\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003ePaste the string of characters at the prompt and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003cp\u003eType \u003ccode\u003elearn whoami\u003c/code\u003e in the terminal. If you see a message with your name,\nusername, and email, continue to the next lesson, \u003cstrong\u003eVerify and Troubleshoot Your\nEnvironment Setup\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "configuring-the-flatiron-student-portal"
          },
          {
            "id": 432747,
            "title": "Verify and Troubleshoot your macOS Environment Setup",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-macos-env-verification\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-verification\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-macos-env-verification/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eAction Item\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen your \"Terminal\" application using \"Spotlight Search\"\u003c/li\u003e\n\u003cli\u003eRun the following command:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003ecurl -so- https://raw.githubusercontent.com/learn-co-curriculum/flatiron-manual-setup-validator/master/mac-os-phase-0-validation-script.sh | zsh 2\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e/dev/null\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eCheck Your Work\u003c/h2\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CNuoCmve-xc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf all checks pass, you have completed your environment setup and are ready to\nmove on!\u003c/p\u003e\n\n\u003cp\u003eIf something does not pass, that is okay. Revisit the installation instructions\nfor the item that did not pass. If you are able to run the commands listed in\nthe \u003cstrong\u003eCheck Your Work\u003c/strong\u003e section for that item, this may just be an issue with\nthe validator.\u003c/p\u003e\n\n\u003ch2\u003eTroubleshooting\u003c/h2\u003e\n\n\u003ch3\u003eFixing NVM and RVM Dotfile Issues for MacOS\u003c/h3\u003e\n\n\u003cp\u003eIf you are having trouble getting RVM, Ruby, NVM, or Node to work, you may have an issue with\nyour \u003ccode\u003e.zshrc\u003c/code\u003e file. To fix, we need to run two commands.\u003c/p\u003e\n\n\u003cp\u003eThe first command makes a backup of your current \u003ccode\u003e.zshrc\u003c/code\u003e file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003emv\u003c/span\u003e ~/.zshrc\u003cspan class=\"o\"\u003e{\u003c/span\u003e,.bak\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe second command replaces the contents of your \u003ccode\u003e.zshrc\u003c/code\u003e file with a default\ndot file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-sSL\u003c/span\u003e https://raw.githubusercontent.com/flatiron-school/dotfiles/master/.zshrc \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e ~/.zshrc\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eClose and reopen your terminal. With a new \u003ccode\u003e.zshrc\u003c/code\u003e file, we can now test out\neach tool.\u003c/p\u003e\n\n\u003ch3\u003eVerify RVM is Installed\u003c/h3\u003e\n\n\u003cp\u003eTo confirm that RVM is working, run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ervm\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you see a long message ending in\n\u003ccode\u003e\"For additional documentation please visit https://rvm.io\"\u003c/code\u003e, RVM is installed.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf the command \u003ccode\u003ervm\u003c/code\u003e is not recognized, do the following in your terminal:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eType \u003ccode\u003ebrew install gmp\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ebrew install gnupg\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/mpapis.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecurl -sSL https://rvm.io/pkuczynski.asc | gpg --import -\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003e\\curl -sSL https://get.rvm.io | bash\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClose the \"Terminal\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Terminal\" application\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eVerify Ruby is Installed\u003c/h3\u003e\n\n\u003cp\u003eTo confirm Ruby is installed, run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ervm list\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you see \u003ccode\u003e=* ruby-2.7.4\u003c/code\u003e, Ruby is installed and 2.7.4 set as the default\nversion and you are all set for Ruby.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf you do not see \u003ccode\u003eruby-2.7.4\u003c/code\u003e at all, install it with the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ervm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003eruby-2.7.4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf \u003ccode\u003eruby-2.7.4\u003c/code\u003e is listed, but is not preceded by \u003ccode\u003e=*\u003c/code\u003e, make it the default version by running:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ervm use 2.7.4 \u003cspan class=\"nt\"\u003e--default\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\n\u003ch3\u003eVerify NVM is installed\u003c/h3\u003e\n\n\u003cp\u003eTo confirm NVM is installed, run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003envm\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you see a message ending with \u003ccode\u003e\"Note: to remove, delete, or uninstall nvm…\"\u003c/code\u003e, NVM is installed.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf the \u003ccode\u003envm\u003c/code\u003e command is not recognized or you see an error\n\u003ccode\u003ecomplete:13: command not found: compdef\u003c/code\u003e, run the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-o-\u003c/span\u003e https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\n\u003ch3\u003eVerify Node is Installed\u003c/h3\u003e\n\n\u003cp\u003eTo confirm Node is installed, run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003envm list\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you see a message starting with \"-\u0026gt; v14.13.0\" (or any number higher than\nthis), a version of Node is installed that will work for this course.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf you don't see this number, install the newest version of Node:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003envm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003enode\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e",
            "exportId": "verify-and-troubleshoot-your-macos-environment-setup"
          },
          {
            "id": 432750,
            "title": "Survey - MacOS Environment Setup",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cp\u003eHow many hours did you spend working on the MacOS Environment Setup module?\u003c/p\u003e",
            "exportId": "g0d5d597a731c989e4f2f25dd247fba9d"
          }
        ]
      },
      {
        "id": 44852,
        "name": "Windows Environment Setup",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "gb5ee42bfcc660b5db6a40d75896f8649",
        "items": [
          {
            "id": 432754,
            "title": "Introduction to Windows Subsystem for Linux (WSL2) Environment Setup",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-introduction\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eIn this module, we will walk through the process of setting up your Windows 10\nlocal development environment.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are not using a Windows computer for this course, skip the\nlessons in this module.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eBrief History\u003c/h2\u003e\n\n\u003ch3\u003eUnderstanding Environments\u003c/h3\u003e\n\n\u003cp\u003eA \u003cstrong\u003esoftware environment\u003c/strong\u003e describes the set of tools that work together to\nenable you to develop and execute the code that you write. Environments\ntypically include the operating system, databases, programming languages, and\nrelated tools like text editors or browsers.\u003c/p\u003e\n\n\u003ch3\u003eComparing Environments with Machines\u003c/h3\u003e\n\n\u003cp\u003eYou may hear us use the term \"software environment\" and \"machine\" to mean\nsimilar things. A \u003cstrong\u003emachine\u003c/strong\u003e describes the physical hardware that your software\nenvironment runs on. You'll hear the term machine and computer used\ninterchangeably. Different machines (like PCs and Macs) use different hardware\nto run the programs that they use. Differences in those machines mean that\nsetting up your development environment on one type of machine could look much\ndifferent than setting it up on another.\u003c/p\u003e\n\n\u003ch3\u003eWindows Subsystem for Linux (WSL)\u003c/h3\u003e\n\n\u003cp\u003eTo work around some of the differences between machines, and specifically\nbetween operating systems, we recommend that all students whose computers come\npre-installed with the Windows operating system use a tool called \u003cstrong\u003eWindows\nSubsystem for Linux (WSL)\u003c/strong\u003e. Windows Subsystem for Linux provides a Linux-based\nenvironment for interfacing with and developing on a Windows operating system.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLinux\u003c/strong\u003e is a family of operating systems that share the same core operating\nsystem programs. Operating systems based on Linux are very commonly used in\nprofessional software engineering settings. Learning how to use a Linux-based\noperating system will be a valuable skill for your future software engineering\ncareer.\u003c/p\u003e\n\n\u003cp\u003eThe version, or distribution, of Linux that you will use is called \u003cstrong\u003eUbuntu\u003c/strong\u003e.\nIt is one of the leading Linux distributions and has great support with Windows\nSubsystem for Linux. There are others like Debian and Fedora, and those should\nwork similarly.\u003c/p\u003e\n\n\u003cp\u003eThe advantage of using Windows Subsystem for Linux is that it's highly\nintegrated into Windows 10, works on most machines that support Windows 10, and\nonly needs to be enabled and configured.\u003c/p\u003e\n\n\u003cp\u003eThe first version of Windows Subsystem for Linux (WSL 1) was groundbreaking! It\ntranslates commands that you run with Linux into commands that Windows can\nunderstand. For this course, we'll use the second version of Windows Subsystem\nfor Linux (WSL 2). The first version had some compatibility issues and was\nslower compared to native Windows.\u003c/p\u003e\n\n\u003ch3\u003eTerminals and Shells\u003c/h3\u003e\n\n\u003cp\u003eYou may be familiar with opening files and applications on your computer by\nclicking icons, or viewing a website by typing an address into the address bar\nand seeing what pops up. These \u003cstrong\u003egraphical user interfaces (GUIs)\u003c/strong\u003e created a\nrevolution in computing and are still extremely helpful in getting work done for\nmany non-technical computer users.\u003c/p\u003e\n\n\u003cp\u003eBefore graphical user interfaces (GUIs), the way to tell the computer to do\nsomething was through a \u003cstrong\u003eterminal\u003c/strong\u003e. The terminal included a screen, which\nwould display only text, and a keyboard. The screen and keyboard were connected\nto a computer, and you would type into the keyboard what you wanted the computer\nto do. Then, you would press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e and wait for the computer to finish.\u003c/p\u003e\n\n\u003cp\u003eTerminals are still used frequently today, especially in software development.\nWe can connect to another computer on the internet, give it instructions by\ntyping in commands, and view the result on our screen. The way that modern\ncomputers emulate the terminals of yesterday is through a program called a\n\u003cstrong\u003ecommand-line interface\u003c/strong\u003e, or a \u003cstrong\u003eshell\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eSimilar to operating systems, there are many different types of shells. The\nshell that Flatiron School supports on the Ubuntu operating system is called\n\u003cstrong\u003ebash\u003c/strong\u003e, short for Bourne Again Shell.\u003c/p\u003e\n\n\u003ch3\u003eWindows Command Prompt\u003c/h3\u003e\n\n\u003cp\u003eBefore we get to \u003cstrong\u003ebash\u003c/strong\u003e, however, we need to do some work in the \"Command\nPrompt\", which is the built-in shell on Windows computers.\u003c/p\u003e\n\n\u003cp\u003eThe \"Command Prompt\" application is a text-based way to browse and work with\nyour computer files. We will only be using the \"Command Prompt\" application\nat the beginning of the environment setup. For now, let's start to see what\n\"Command Prompt\" and, more generally, \u003cstrong\u003eshell\u003c/strong\u003es can do.\u003c/p\u003e\n\n\u003ch2\u003eAction Items: View Your Desktop in \"File Explorer\" and \"Command Prompt\" Applications\u003c/h2\u003e\n\n\u003cp\u003eTo complete the environment setup, you will need to be able to open\napplications. You can open new applications by using the search bar at the\nbottom of your screen. The search bar says, \"Type here to search\".\u003c/p\u003e\n\n\u003ch3\u003eView Your Desktop in the \"File Explorer\"\u003c/h3\u003e\n\n\u003cp\u003eThe \"File Explorer\" application is a visual way to browse the files on your\ncomputer. You may already be familiar with the \"File Explorer\" application. This\napplication allows you to quickly see the files on your desktop, downloads,\ndocuments, pictures, music, videos, and much more.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eClick on the \"Start\" menu search bar\u003c/li\u003e\n\u003cli\u003eType \"File Explorer\" and open the application\u003c/li\u003e\n\u003cli\u003eFind and open the \"Desktop\" folder located on the left-hand side in your\n\"File Explorer\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eView Your Desktop in the \"Command Prompt\" Shell\u003c/h3\u003e\n\n\u003cp\u003eThe \"Command Prompt\" application is the terminal that will allow us to interface\nwith our computer through a shell. This action item is primarily to get you\ncomfortable running commands in \u003cem\u003eany\u003c/em\u003e shell so that you can work through the\nenvironment setup on your own.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eClick on the \"Start\" menu search bar\u003c/li\u003e\n\u003cli\u003eType \"Command Prompt\" and open the application\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd /Users\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003edir\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLook for your username in the list\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd\u003c/code\u003e into the terminal, add a space, and type your name as it appears in\nthe list and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003edir\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLook for the \"Desktop\" folder in the list\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecd Desktop\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003edir\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gLtUXeP2T50\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you were able to open your Desktop folder in the \"File Explorer\" application\nand you were able to open the \"Command Prompt\" application and \u003ccode\u003ecd\u003c/code\u003e to the same\nfolder, you should see the same list of files and folders in both the\n\u003cstrong\u003egraphical user interface (GUI)\u003c/strong\u003e and in the \u003cstrong\u003ecommand-line interface (CLI)\u003c/strong\u003e\nor shell.\u003c/p\u003e\n\n\u003cp\u003eThis may be your first time using the \"Command Prompt\" or any terminal or shell.\nNow you know how to see the items in a particular folder through the \"File Explorer\"\n\u003cem\u003eand\u003c/em\u003e through the \"Command Prompt\". This step is to get you familiar with using\na terminal to be able to complete the environment setup.\u003c/p\u003e\n\n\u003ch2\u003ePreparing for Your Environment Setup\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDuring the environment setup, you will be spending a lot of time in the\n\"Ubuntu\" application.\u003c/li\u003e\n\u003cli\u003eAs much as possible, copy and paste commands that we ask you to run there\ninstead of typing by hand to help prevent environment setup issues.\u003c/li\u003e\n\u003cli\u003eSpecific keys that you need to press will be surrounded by \u003ccode\u003e\u0026lt;\u003c/code\u003e \u003ccode\u003e\u0026gt;\u003c/code\u003e (for\nexample, \u003ccode\u003e\u0026lt;Shift\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eYou will need to be comfortable switching between windows; we will primarily\nbe using the browser and the \"Ubuntu\" application.\u003c/li\u003e\n\u003cli\u003eYou should be able to start and stop the environment setup.\u003c/li\u003e\n\u003cli\u003eIf you get stuck, reach out to your classmates or an instructor.\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "introduction-to-windows-subsystem-for-linux-wsl2-environment-setup"
          },
          {
            "id": 432756,
            "title": "Updating Your Windows System and Installing Applications",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-system\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-system/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWSL2 is compatible with the Home, Pro, or Server editions of Windows but not\nWindows 10 S (although you can often upgrade to the Home edition for free).\u003c/p\u003e\n\n\u003ch2\u003eCheck That your Windows system is Compatible with Flatiron School's Requirements\u003c/h2\u003e\n\n\u003cp\u003eWhen working on software, your computer and the software you're using must be\ncompatible. In this step, we'll ensure that you are able to install all the\ntools that you will need to complete the program.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Check your Windows System Specifications\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Settings\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSelect the \"System\" option\u003c/li\u003e\n\u003cli\u003eSelect \"About\" at the bottom of the list\u003c/li\u003e\n\u003cli\u003eScroll down to the \"Windows specifications\" heading\u003c/li\u003e\n\u003cli\u003eCheck that your \"Edition\" is one of the following: Windows 10 Home, Windows\n10 Pro, Windows 10 Server, Windows 11\u003c/li\u003e\n\u003cli\u003eCheck that your \"Version\" is greater than or equal to \"2004\"\u003c/li\u003e\n\u003cli\u003eCheck that your \"OS build\" is greater than \"19041.000\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bbXbsOzLIE0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf your \"Edition\", \"Version\" and \"OS build\" meet the requirements listed above,\nskip the next step and continue below. Otherwise, continue with the next step to\nupdate to the latest version of Windows 10.\u003c/p\u003e\n\n\u003ch2\u003eUpdate to the Latest Version of Windows 10\u003c/h2\u003e\n\n\u003cp\u003eBefore moving on, make sure that you're using the latest version of Windows 10.\nThe Windows May 2021 update is essential. Follow the steps below to update your\noperating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Update to the Latest Version of Windows 10\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://www.microsoft.com/en-us/software-download/windows10\"\u003eWindows 10 Disc Image\u003c/a\u003e webpage\n(\u003ca href=\"https://www.microsoft.com/en-us/software-download/windows10\"\u003ehttps://www.microsoft.com/en-us/software-download/windows10\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick the \"Update now\" button\u003c/li\u003e\n\u003cli\u003eSelect \"Run\" from the pop-up and allow the app to make changes to your device\u003c/li\u003e\n\u003cli\u003eProgress through the computer update\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/O7BGLGRd7H8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can successfully update to the latest version of Windows 10,\ncontinue below. Otherwise, reach out to your instructor for next steps.\u003c/p\u003e\n\n\u003ch2\u003eCheck That Your Windows System has Enough Space for Flatiron School's Requirements\u003c/h2\u003e\n\n\u003cp\u003eThe programs that we'll be installing during environment setup and all of the\nwork you'll do with Flatiron School will need at least 4 GB of free disk space.\nFollow the steps below to ensure that you have enough disk space to install all\nthe programs needed during the environment setup.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Check Your Storage\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Settings\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSelect the \"System\" option\u003c/li\u003e\n\u003cli\u003eOn the left-hand side, select \"Storage\"\u003c/li\u003e\n\u003cli\u003eCheck that the amount of free space listed beneath the \"C:\" drive heading is\ngreater than 4 GB\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nJouTCS7m7A\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf your free space for your \"C:\" drive is greater than 4 GB, continue below.\nOtherwise, use the \u003ca href=\"https://www.lifewire.com/free-drive-space-with-disk-cleanup-3506869\"\u003eDisk Cleanup utility\u003c/a\u003e to free more space on your computer.\u003c/p\u003e\n\n\u003ch2\u003eInstall Google Chrome\u003c/h2\u003e\n\n\u003cp\u003eGoogle Chrome is the browser that we recommend you use for your Flatiron School\nStudent Portal account and also for front-end web development. You are not required\nto use Google Chrome for personal work, but we highly encourage you to download it\nfor access to your account and for development in the browser.\u003c/p\u003e\n\n\u003ch2\u003eAction Item: Download and Install Google Chrome\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://www.google.com/chrome\"\u003eGoogle Chrome webpage\u003c/a\u003e (\u003ca href=\"https://www.google.com/chrome\"\u003ehttps://www.google.com/chrome\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick \"Download Chrome\"\u003c/li\u003e\n\u003cli\u003eSelect \"Run\" from the pop-up and allow the app to make changes to your device\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCheck Your Work\u003c/h2\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/X7B4gIwU2jI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can open the \"Google Chrome\" application using the \"Start\" menu,\ncontinue below.\u003c/p\u003e\n\n\u003ch2\u003eInstall Visual Studio Code (VS Code) on Windows\u003c/h2\u003e\n\n\u003cp\u003eVisual Studio Code (VS Code) is the tool that you'll use to edit your Ruby and\nJavaScript files. It is a text editor that provides some really useful\nextensions for developers. One such tool is an integrated terminal! This means\nthat you can edit your code and use your terminal in the same window. Follow the\nsteps below to get both set up.\u003c/p\u003e\n\n\u003ch3\u003eAction item: download and install Visual Studio Code\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://code.visualstudio.com/Download\"\u003eVisual Studio Code Download webpage\u003c/a\u003e\n\u003ca href=\"https://code.visualstudio.com/Download\"\u003ehttps://code.visualstudio.com/Download\u003c/a\u003e in your browser\u003c/li\u003e\n\u003cli\u003eClick on the Windows download option\u003c/li\u003e\n\u003cli\u003eDownload and run the Visual Studio Code installer\u003c/li\u003e\n\u003cli\u003eComplete the installer\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/o7E2ZWhoJsI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you can open the \"Visual Studio Code\" application using the \"Start\" menu,\ncontinue to the next lesson, \u003cstrong\u003eSetting up WSL2\u003c/strong\u003e. Otherwise, reach out to\nyour teaching team for assistance.\u003c/p\u003e",
            "exportId": "updating-your-windows-system-and-installing-applications"
          },
          {
            "id": 432758,
            "title": "Setting Up WSL2",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-windows-subsystem-linux\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-windows-subsystem-linux\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-windows-subsystem-linux/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eWindows Subsystem Linux (WSL) is \u003cstrong\u003enot\u003c/strong\u003e automatically enabled on windows. So,\nto start, we need to enable it!\u003c/p\u003e\n\n\u003ch2\u003eInstall Windows Subsystem for Linux (WSL) and Ubuntu\u003c/h2\u003e\n\n\u003cp\u003eNow that we know your computer is ready for the rest of the environment setup,\nwe can install Windows Subsystem for Linux (WSL) and the Ubuntu Linux\ndistribution. You'll be doing the majority of your dev work using WSL and\nUbuntu, so this step is critical to complete before moving ahead.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Install WSL Features\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eSearch for the \"Command Prompt\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSelect \"Run as administrator\" from the right side of the search window\u003c/li\u003e\n\u003cli\u003eAllow the program to make changes to your device and wait for the \"Command\nPrompt\" application to open\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ewsl --install -d Ubuntu\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThe terminal should output \"The requested operation is successful.\"\u003c/li\u003e\n\u003cli\u003eRestart your computer to complete the installation.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you encounter an error message that says \"Ubuntu required feature\nnot installed\" then try enabling VSM in your BIOS. Follow\n\u003ca href=\"https://bce.berkeley.edu/enabling-virtualization-in-your-pc-bios.html\"\u003ethis guide\u003c/a\u003e \nto access your BIOS and get to the virtualization settings. Enable VSM and\nvirtualization options from there. Check out\n\u003ca href=\"https://github.com/microsoft/%3EWSL/issues/5689\"\u003ethis issue\u003c/a\u003e for reference.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/w01AU7pl24w\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch3\u003eAction Item: Install the \"Ubuntu\" Application\u003c/h3\u003e\n\n\u003cp\u003eYou are ready to install and set up the Ubuntu operating system! Ubuntu is a\nLinux-based operating system and this is the application we'll use to run the\nremainder of the environment setup.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Microsoft Store\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSearch for \"Ubuntu\" \u003cem\u003e(Note: do not choose \"Ubuntu 16.04 LTS\", \"Ubuntu 18.04\nLTS\", or \"Ubuntu 20.04LTS\". Instead, choose the option that has no number\nnext to it.)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eClick \"Get\" and \"Install\" and wait for the application installation to complete\u003c/li\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eWhen it says \"Enter new UNIX username:\" add a simple username and press\n\u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e (Note: usernames may not start with a number, and may not include\ncapital letters)\u003c/li\u003e\n\u003cli\u003eWhere it says \"New password:\" add a simple password and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note:\nyou will not see any text when you are typing your password.)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eWhere it says \"Retype new password:\" retype the same password from before and\npress \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: store this password somewhere safe. You will need it to\nbe able to run commands in the future)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eThe terminal should output \"Installation successful!\" and then print about 50\nlines that you can ignore\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cmLjpYx1Ys8\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eNow, the last line in your \"Ubuntu\" application should say your username +\n\"@DESKTOP\" + some random numbers and letters. If you see that, continue below.\u003c/p\u003e\n\n\u003ch2\u003eUpdate the Windows Subsystem for Linux (WSL) to WSL 2\u003c/h2\u003e\n\n\u003cp\u003eNow that we have the Windows Subsystem for Linux (WSL) enabled and we have the\n\"Ubuntu\" application installed, we can update WSL to version 2 and update the\n\"Ubuntu\" application to use WSL 2.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eSearch for the \"Command Prompt\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eSelect \"Run as administrator\" from the right side of the search window\u003c/li\u003e\n\u003cli\u003eAllow the program to make changes to your device and wait for the \"Command\nPrompt\" application to open\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ewsl --set-default-version 2\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\n\u003cem\u003e(Note: you should see a message starting with \"For information on key\ndifferences…\")\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ewsl --status\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. You should see a\nmessage including \"Default Version 2\", which verifies that the default\nversion has been set correctly.\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ewsl --set-version Ubuntu 2\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eWait for the \"Conversion complete\" or \"This distribution is already the\nrequested version\" message in the terminal\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ewsl --list --verbose\u003c/code\u003e into the terminal and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. You should\nsee a message including \"NAME Ubuntu VERSION 2\", which verifies that the\ndefault version has been set correctly.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Thy8DJEb7Pk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you saw the \"Conversion complete\" or \"This distribution is already the\nrequested version\" message in the \"Command Prompt\" application, close the\n\"Command Prompt\" application and continue below.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you encounter an error message that you need to enable the\nVirtual Machine Platform, but you've already enabled it, you may not be able\nto use WSL2. However, you may still be able to use WSL1. Run\n\u003ccode\u003ewsl --set-default-version 1\u003c/code\u003e, then run \u003ccode\u003ewsl --set-version Ubuntu 1\u003c/code\u003e. Wait for\nthe \"Conversion complete\" or \"This distribution is already the requested\nversion\" message in the terminal, then continue on with these instructions.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConfigure VS Code to Work with WSL\u003c/h2\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Visual Studio Code\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eClick \"View\" in the toolbar, then click \"Extensions\" in the dropdown menu, or\nuse the shortcut \u003ccode\u003e\u0026lt;Control\u0026gt;\u003c/code\u003e + \u003ccode\u003e\u0026lt;Shift\u0026gt;\u003c/code\u003e + \u003ccode\u003eX\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSearch for \"Remote - WSL\" and click on the item in the list with the same\nname (Note: the description should start with \"Open any folder in the Windows\nSubsystem for Linux (WSL) …\")\u003c/li\u003e\n\u003cli\u003eClick the \"Install\" button near the top of the page\u003c/li\u003e\n\u003cli\u003eClick \"Terminal\" in the toolbar, then click \"New Terminal\" (Note: a new\nterminal should appear at the bottom of your VS Code window)\u003c/li\u003e\n\u003cli\u003eIf the dropdown in your terminal says \"1: wsl\", continue to step 9.\nOtherwise, click on the dropdown in the terminal that says \"1: powershell\"\nand choose \"Select Default Profile\"\u003c/li\u003e\n\u003cli\u003eA dropdown should appear at the top of your VS Code window\u003c/li\u003e\n\u003cli\u003eClick on \"Ubuntu (WSL)\" to enable VS Code to display your Ubuntu terminal\u003c/li\u003e\n\u003cli\u003eClose the \"Visual Studio Code\" application\u003c/li\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecode\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UasRLsxCFRQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf the \"Visual Studio Code\" application opens when you type \u003ccode\u003ecode\u003c/code\u003e in the\n\"Ubuntu\" application, continue to the next lesson, \u003cstrong\u003eInstalling Node on WSL2\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "setting-up-wsl2"
          },
          {
            "id": 432760,
            "title": "Installing Node.js on WSL2",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-nodejs\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-nodejs/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstall Node Version Manager (NVM) on Ubuntu\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/nvm-sh/nvm\"\u003eNode Version Manager (NVM)\u003c/a\u003e is a tool that will allow you to download and install\nmultiple versions of Node.js, one of the environments for the JavaScript\nprogramming language that we teach at Flatiron School. Installing NVM is the\nfirst step in installing Node.js on your Ubuntu operating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType\n\u003ccode\u003ecurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\u003c/code\u003e\nand press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClose the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4X3ELqRnRd0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message ending with \"Note: to remove, delete, or uninstall nvm\",\ncontinue below.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If \u003ccode\u003envm\u003c/code\u003e is not recognized, or you are seeing new errors when\nrestarting the \"Ubuntu\" application, check out the troubleshooting steps\nin the \u003cstrong\u003eVerify and Troubleshoot your WSL2 Environment\nSetup\u003c/strong\u003e lesson later on in this module.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eInstall Node.js on Ubuntu\u003c/h2\u003e\n\n\u003cp\u003eFor our JavaScript labs and lessons, we expect that students use Node.js on\nUbuntu. If Node Version Manager (NVM) has been successfully installed, you can\nquickly install Node.js with a couple of commands.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm install --lts\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003envm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SqSwrdEENfI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message starting with \"-\u0026gt; v16.0.0\" (or any higher number, like \"-\u0026gt;\n16.11.1\"), continue to the next lesson, \u003cstrong\u003eWindows WSL2 Ruby Installation\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "installing-node-dot-js-on-wsl2"
          },
          {
            "id": 432762,
            "title": "Windows WSL2 Ruby Installation",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-ruby\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-ruby\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-ruby/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eInstall Ruby Environment Manager (RVM) on Ubuntu\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://rvm.io\"\u003eRuby Environment Manager (RVM)\u003c/a\u003e is a tool that will allow you to download\nand install multiple versions of Ruby, one of the programming languages that we\nteach at Flatiron School. Installing \u003ca href=\"https://github.com/rvm/ubuntu_rvm\"\u003eRVM for Ubuntu\u003c/a\u003e is the first\nstep in installing Ruby on your Ubuntu operating system.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo apt-get install software-properties-common\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eYou may be asked to enter your Ubuntu terminal password\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo apt-add-repository -y ppa:rael-gc/rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo apt-get update\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo apt-get install rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: if you are asked\n\"Do you want to continue [Y/n]\", type \"Y\" and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo usermod -a -G rvm $USER\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClose the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ervm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tRLexZJS144\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a long message ending in \"For additional documentation, please visit\n\u003ca href=\"https://rvm.io\"\u003ehttps://rvm.io\u003c/a\u003e\", continue below. If \u003ccode\u003ervm\u003c/code\u003e is not found, consult the\ntroubleshooting steps in the \u003cstrong\u003eVerify and Troubleshoot your WSL2 Environment\nSetup\u003c/strong\u003e lesson later on in this module.\u003c/p\u003e\n\n\u003ch2\u003eInstall Ruby Version 2.7.4 on Ubuntu\u003c/h2\u003e\n\n\u003cp\u003eFor our Ruby labs and lessons, we recommend that students use Ruby version 2.7.4\non Ubuntu. If Ruby Environment Manager (RVM) has been successfully installed,\nyou can quickly install Ruby with a couple of commands.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eIf the \"Ubuntu\" application is still open from the last step, close and\nre-open to prevent errors with running the next command.\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ervm install 2.7.4 --default\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eEnter your Ubuntu password if prompted\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ervm list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KYr66fx3nzc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see a message starting with \u003ccode\u003e=* ruby-2.7.4\u003c/code\u003e, continue below.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you see that Ruby 2.7.4 is installed, but does not display\n\u003ccode\u003e=*\u003c/code\u003e before it, close and reopen the \"Ubuntu\" application, then run\n\u003ccode\u003ervm use 2.7.4 --default\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eTroubleshooting Ruby Installs\u003c/h2\u003e\n\n\u003cp\u003eIf you encounter issues installing a version of Ruby via RVM, try the following\nin Ubuntu:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRun \u003ccode\u003ervm group add rvm $USER\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClose Ubuntu and reopen\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003ervm fix-permissions\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAfter running the last command, try installing Ruby again with\n\u003ccode\u003ervm install 2.7.4 --default\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you are continuing to have issues installing RVM, try running the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003eusermod \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e \u003cspan class=\"nt\"\u003e-G\u003c/span\u003e rvm \u003cspan class=\"nv\"\u003e$USER\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter running, try installing Ruby again.\u003c/p\u003e\n\n\u003ch2\u003eInstall Ruby Gems on Ubuntu\u003c/h2\u003e\n\n\u003cp\u003eRuby Gems are small programs written in Ruby that help you to code more easily\nin Ruby. The gems you will install today include: Bundler, which allows you to\nkeep track of which gems your projects need to work, and Pry, which allows you to\npause your Ruby code when it runs and inspect it.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egem update --system\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egem install bundler\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egem install pry\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egem list\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/QeLOsZzz5pk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you are able to complete each step without any issues and see \u003ccode\u003epry\u003c/code\u003e and\n\u003ccode\u003ebundler\u003c/code\u003e listed in the output from running \u003ccode\u003egem list\u003c/code\u003e, continue to the next\nlesson, \u003cstrong\u003eConfiguring Git and GitHub on WSL2\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "windows-wsl2-ruby-installation"
          },
          {
            "id": 432763,
            "title": "Configuring Git and GitHub on WSL2",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-git-github\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-git-github\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-git-github/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eCreate a GitHub Account\u003c/h2\u003e\n\n\u003cp\u003eTo work on and get credit for the labs and lessons that you do during the\nprogram, you will need to sign up for a GitHub account \u003cem\u003eif you don't already\nhave one\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://github.com/join\"\u003eGitHub signup webpage\u003c/a\u003e at \u003ca href=\"https://github.com/join\"\u003ehttps://github.com/join\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFill out the form and create your account\u003c/li\u003e\n\u003cli\u003eVerify the email address connected to your GitHub account\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/f2yf1RJUAp4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you were able to verify your email address, continue below.\u003c/p\u003e\n\n\u003ch2\u003eConfigure Git and GitHub\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://git-scm.com/download/linux\"\u003eGit\u003c/a\u003e is the tool that we'll use to download and upload the work we do in\nlabs and lessons. To use Git without signing in every time, you can create a\nSecure Shell (SSH) key and associate that to your GitHub account. You will also\nneed to run a few commands to make sure that when you use Git, you get the\nproper credit for your work. This step will ask you to do work both in your\nbrowser and your terminal.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Update Git\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo add-apt-repository ppa:git-core/ppa\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e to add a\npackage repository for downloading the latest version of Git. Follow the\nprompts in the terminal.\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo apt update\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e to update your local repository cache\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo apt install git\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e to install the latest version\nof Git\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hgAurDMhKAc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eYou can check your work by typing \u003ccode\u003egit --version\u003c/code\u003e in the terminal. You should\nsee a version greater than 2.33.0.\u003c/p\u003e\n\n\u003ch3\u003eAction Item: Configure Git\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Ubuntu\" application using the \"Start\" menu\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egit config --global color.ui true\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egit config --global user.name\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + your name and press\n\u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e \u003cem\u003e(Note: this should be your full name, not your GitHub username, in\nquotes.)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egit config --global user.email\u003c/code\u003e + \u003ccode\u003e\u0026lt;Space\u0026gt;\u003c/code\u003e + the email address you\nused to sign up to GitHub and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003egit config --global init.defaultBranch main\u003c/code\u003e to\n\u003ca href=\"https://github.com/github/renaming\"\u003eupdate the default branch name\u003c/a\u003e to \u003ccode\u003emain\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003essh-keygen\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. For each prompt \u003cstrong\u003edo not type\nanything\u003c/strong\u003e, just continue to press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. It's particularly important\nthat you \u003cstrong\u003edo not enter a passphase\u003c/strong\u003e; you should leave the passphrase empty\nwhen prompted. If you enter a passphrase here, you'll have to enter it every\ntime you interact with GitHub (which will happen a lot during the program).\nYou may also run into issues submitting assignments later.\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ecat ~/.ssh/id_rsa.pub | clip.exe\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. This will copy\nyour SSH key to your clipboard\u003c/li\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://github.com/settings/ssh/new\"\u003eGitHub New SSH key form\u003c/a\u003e\n(\u003ca href=\"https://github.com/settings/ssh/new\"\u003ehttps://github.com/settings/ssh/new\u003c/a\u003e) \u003cem\u003e(Note: you need to be logged in to\nGitHub to access that link.)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eType \"My personal PC\" in the \"Title\" input field\u003c/li\u003e\n\u003cli\u003ePaste what's on your clipboard from step seven in the \"Key\" input field\u003c/li\u003e\n\u003cli\u003eClick \"Add SSH Key\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/bRCOqNaYnKQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf you see your new SSH key beneath the \"SSH keys\" heading, continue to the next\nlesson, \u003cstrong\u003eConfiguring the Flatiron Student Portal\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "configuring-git-and-github-on-wsl2"
          },
          {
            "id": 432764,
            "title": "Configuring the Flatiron Student Portal",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-configuring-the-flatiron-student-portal\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e gem is a tool that simplifies the process of completing labs and\nsubmitting your work in Canvas. Under the hood, this process consists of a\nnumber of steps:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eFork\u003c/strong\u003e (create your own copy of) the assignment's repo on GitHub.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eClone\u003c/strong\u003e your copy of the repo down to your local machine.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRun a command (\u003ccode\u003enpm install\u003c/code\u003e for JavaScript labs, \u003ccode\u003ebundle install\u003c/code\u003e for Ruby\nlabs) to install any necessary \u003cstrong\u003edependencies\u003c/strong\u003e for the repository (\u003cem\u003e...tools\nothers have built to make things easier for us\u003c/em\u003e).\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRun \u003ccode\u003enpm test\u003c/code\u003e (JavaScript) or \u003ccode\u003erspec\u003c/code\u003e (Ruby) to run tests.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUse git commands to \u003cstrong\u003ecommit\u003c/strong\u003e your changes and push them up to your repo on\nGitHub.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSubmit a link to your GitHub repo in Canvas to get credit for completing the\nlab.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe \u003ccode\u003elearn-co\u003c/code\u003e gem will handle several of these steps for you automatically,\nsubstantially simplifying the workflow so you can focus your attention on\nlearning to code. You will learn how to complete and submit assignments using\nthe gem in the next section; for now, let's get it installed and ready to use.\u003c/p\u003e\n\n\u003ch2\u003eInstall the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e\n\n\u003cp\u003eTo install the gem, open the \"Terminal\" application (or \"Ubuntu\" for WSL users)\nand run this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egem \u003cspan class=\"nb\"\u003einstall \u003c/span\u003elearn-co\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBefore we can use the gem, we'll need to do two things:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eConnect your Flatiron School Portal account to GitHub\u003c/li\u003e\n\u003cli\u003eConnect the local gem to your Flatiron School Portal account\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConnect Your GitHub Account to your Flatiron School Portal Account\u003c/h2\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen \u003ca href=\"https://base.flatironschool.com/account/manage\"\u003eFlatiron School's Base Account Management page\u003c/a\u003e\n(\u003ca href=\"https://base.flatironschool.com/account/manage\"\u003ehttps://base.flatironschool.com/account/manage\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eConnect your GitHub account to your Flatiron School Portal account\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYour Account Management page should now look similar to this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-flatiron-student-portal/base-account-manage.png\" alt=\"Github Successfully Connected\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eConfigure the \u003ccode\u003elearn-co\u003c/code\u003e Gem\u003c/h2\u003e\n\n\u003cp\u003eThis step will ask you to do work both in your browser and your terminal.\u003c/p\u003e\n\n\u003ch3\u003eAction Item\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \"Terminal\" application (or \"Ubuntu\" for WSL users).\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003etouch ~/.netrc \u0026amp;\u0026amp; chmod 0600 ~/.netrc\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e. \u003cem\u003e(Note: you\nmay be asked to enter your password.)\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eOpen \u003ca href=\"https://base.flatironschool.com/account/manage\"\u003eFlatiron School's Base Account Management page\u003c/a\u003e\n(\u003ca href=\"https://base.flatironschool.com/account/manage\"\u003ehttps://base.flatironschool.com/account/manage\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eClick the icon under \"OAuth Token\" to reveal your GitHub OAuth token.\u003c/li\u003e\n\u003cli\u003eCopy the string of characters under the \"OAuth Token\" header.\u003c/li\u003e\n\u003cli\u003eGo back to the terminal, type \u003ccode\u003elearn whoami\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003ePaste the string of characters at the prompt and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eCheck Your Work\u003c/h3\u003e\n\n\u003cp\u003eType \u003ccode\u003elearn whoami\u003c/code\u003e in the terminal. If you see a message with your name,\nusername, and email, continue to the next lesson, \u003cstrong\u003eVerify and Troubleshoot Your\nEnvironment Setup\u003c/strong\u003e.\u003c/p\u003e",
            "exportId": "configuring-the-flatiron-student-portal"
          },
          {
            "id": 432766,
            "title": "Verify and Troubleshoot your WSL2 Environment Setup",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-wsl2-env-verification\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-verification\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-wsl2-env-verification/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eAction Item\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen your \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eRun the following command:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-so-\u003c/span\u003e https://raw.githubusercontent.com/learn-co-curriculum/flatiron-manual-setup-validator/master/wsl-phase-0-manual-setup-validator.sh | bash 2\u0026gt; /dev/null\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eCheck Your Work\u003c/h2\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/LOAbYZmRc9I\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIf all checks pass, you have completed your environment setup and are ready to\nmove on!\u003c/p\u003e\n\n\u003cp\u003eIt may be that you are set up correctly, but the validator script can't tell. If\nthere is some sort of error, revisit the instructions for the item that is not\npassing. If you can run the commands listed in the \u003cstrong\u003eCheck Your Work\u003c/strong\u003e section\nof that item, you should be all set and can disregard the validator.\u003c/p\u003e\n\n\u003ch3\u003eFixing NVM and RVM Issues for WSL2\u003c/h3\u003e\n\n\u003cp\u003eIf you are having trouble getting RVM, Ruby, NVM, or Node to work, you may have\nan issue with your \u003ccode\u003e.bashrc\u003c/code\u003e file. To fix, we need to run two commands.\u003c/p\u003e\n\n\u003cp\u003eThe first command makes a backup of your current \u003ccode\u003e.bashrc\u003c/code\u003e file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003emv\u003c/span\u003e ~/.bashrc\u003cspan class=\"o\"\u003e{\u003c/span\u003e,.bak\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe second command replaces the contents of your \u003ccode\u003e.bashrc\u003c/code\u003e file with a default\nfile:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-sSL\u003c/span\u003e https://raw.githubusercontent.com/flatiron-school/dotfiles/master/minimal-bashrc \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e ~/.bashrc\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eClose and reopen your terminal. With a new \u003ccode\u003e.bashrc\u003c/code\u003e file, we can now test out\neach tool.\u003c/p\u003e\n\n\u003ch4\u003eVerify RVM is Installed\u003c/h4\u003e\n\n\u003cp\u003eTo confirm that RVM is working, run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ervm\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you see a long message ending in\n\u003ccode\u003e\"For additional documentation please visit https://rvm.io\"\u003c/code\u003e, RVM is installed.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf the command \u003ccode\u003ervm\u003c/code\u003e is not recognized, do the following in your terminal:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eType \u003ccode\u003esudo apt-get install software-properties-common\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo -E apt-add-repository -y ppa:rael-gc/rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo apt-get update\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esudo apt-get install rvm\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003esource /etc/profile.d/rvm.sh\u003c/code\u003e and press \u003ccode\u003e\u0026lt;Enter\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eClose the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eReopen the \"Ubuntu\" application\u003c/li\u003e\n\u003cli\u003eType \u003ccode\u003ervm\u003c/code\u003e and press \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003eVerify Ruby is Installed\u003c/h4\u003e\n\n\u003cp\u003eTo confirm Ruby is installed, run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ervm list\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you see \u003ccode\u003e=* ruby-2.7.4\u003c/code\u003e, Ruby is installed and 2.7.4 set as the default\nversion and you are all set for Ruby.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf you do not see \u003ccode\u003eruby-2.7.4\u003c/code\u003e at all, install it with the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ervm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003eruby-2.7.4 \u003cspan class=\"nt\"\u003e--default\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf \u003ccode\u003eruby-2.7.4\u003c/code\u003e is listed, but is not preceded by \u003ccode\u003e=*\u003c/code\u003e, make it the default\nversion by running:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ervm use 2.7.4 \u003cspan class=\"nt\"\u003e--default\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\n\u003ch4\u003eVerify NVM is installed\u003c/h4\u003e\n\n\u003cp\u003eTo confirm NVM is installed, run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003envm\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you see a message ending with \u003ccode\u003e\"Note: to remove, delete, or uninstall nvm…\"\u003c/code\u003e,\nNVM is installed.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf the \u003ccode\u003envm\u003c/code\u003e command is not recognized, install NVM with the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-o-\u003c/span\u003e https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eClose and reopen the \"Terminal\" application, then run \u003ccode\u003envm\u003c/code\u003e again.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003eVerify Node is Installed\u003c/h4\u003e\n\n\u003cp\u003eTo confirm Node is installed, run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003envm list\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you see a message starting with \"-\u0026gt; v14.13.0\" (or any number higher than\nthis), a version of Node is installed that will work for this course.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf you don't see this number, install a new version of Node:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003envm \u003cspan class=\"nb\"\u003einstall \u003c/span\u003enode\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\n\u003ch3\u003eEnabling Virtualization In the BIOS\u003c/h3\u003e\n\n\u003cp\u003eFor most Windows machines, enabling WSL and the Virtual Machine Platform should\nbe enough to get Ubuntu running. Some devices, however, require an additional\nstep - enabling hardware virtualization in the BIOS.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eWARNING:\u003c/strong\u003e Fiddling with your BIOS settings can \u003cstrong\u003etrash your PC\u003c/strong\u003e! Be\ncareful when making changes. Consult your manufacturer’s help pages or search\nfor online advice about your specific make and model.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAccessing your BIOS is typically done by rebooting your computer and hitting a\nspecific key, usually \u003ccode\u003eDEL\u003c/code\u003e, \u003ccode\u003eF2\u003c/code\u003e, or \u003ccode\u003eF10\u003c/code\u003e, as the system starts. In the BIOS,\nlook for \u003cstrong\u003eVirtualization Technology, VTx\u003c/strong\u003e or something similar.\u003c/p\u003e",
            "exportId": "verify-and-troubleshoot-your-wsl2-environment-setup"
          },
          {
            "id": 432767,
            "title": "Survey - Windows Environment Setup",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Windows Environment Setup module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "gd5375df07b09f1a0e73c585b1db435bd"
          }
        ]
      },
      {
        "id": 44855,
        "name": "Pre-Assessment",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g31e3dc73d2a2f6f7b78c6017218b5934",
        "items": [
          {
            "id": 432770,
            "title": "Pre-Assessment",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd6041668226cbaac3699ed99767f0a0f",
            "questionCount": 28,
            "timeLimit": null,
            "attempts": 1,
            "graded": true,
            "pointsPossible": 28.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cp\u003eWelcome to your first quiz! Don't panic - we know you haven't done any coursework yet!\u0026nbsp;\u003c/p\u003e\n\u003cp\u003eThis is a diagnostic pre-assessment. It is absolutely okay if you do not do well on this - your score on this quiz will not impact your admission to our programs. The goal of this quiz is to record a baseline of your understanding coming into this pre-work course.\u003cbr\u003e\u003cbr\u003eThis quiz will cover the core topics we will go through in the pre-work, including Git, HTML, CSS, and JavaScript. If you don't know the answer to a question, that is okay - you can select \"I don't know\". It's expected that you won't know lots of things as you're just starting out!\u003cstrong\u003e\u003cbr\u003e\u003cbr\u003e\u003c/strong\u003e\u003c/p\u003e",
            "exportId": "g7ec93495baef2ebc47d46f87ff5eea81"
          }
        ]
      },
      {
        "id": 44856,
        "name": "CLI",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "gb46d3873ce29900b50d6afd5e6bdb97d",
        "items": [
          {
            "id": 432774,
            "title": "Introduction to the Command Line Interface",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-the-cli\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-the-cli\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-the-cli/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine \"Command Line Interface\"\u003c/li\u003e\n\u003cli\u003eDescribe the purpose of CLIs\u003c/li\u003e\n\u003cli\u003eIdentify differences between command-line interface, terminal emulator, and\nshell\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMost computer users these days are familiar with performing actions and executing\ntasks using a \u003cem\u003eGraphical User Interface\u003c/em\u003e (GUI). When you use things like\nMacOSX's \"Finder\" or Windows' \"File Explorer\", you're using a GUI.\u003c/p\u003e\n\n\u003cp\u003ePrior to the early 1990's, however, the only way to interact with a computer was\nby using a \u003cem\u003ecommand-line interface\u003c/em\u003e (CLI). Accomplishing tasks in those days\n(e.g., creating, viewing or manipulating files; launching software) required\nthe user to type commands into a \u003cem\u003eterminal\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eGiven how prevalent GUIs are at this point, the average computer user will\nprobably rarely or never need to use a command line to accomplish their tasks.\nThe same is not true for developers, however. Learning to use a CLI will allow\nyou to accomplish many tasks more quickly and reliably than you can using a GUI.\nFurthermore, there are some tools you will need as a developer that can only be\nused through the command-line interface.\u003c/p\u003e\n\n\u003cp\u003eLots of people worry that using the CLI will get them in trouble, that they'll\nbreak their computer. We encourage you to think about the CLI like a high-quality,\nsharp kitchen knife: if you pay attention when you use it, you're going to have\na valuable ally on your side.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eWARNING\u003c/strong\u003e: It's true, it is easier to run dangerous commands through the CLI\nthan through a GUI. Commands that list files or create directories are not\nlikely to break anything. Commands that remove files or directories, however,\n\u003cem\u003eshould\u003c/em\u003e be used with caution.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eDefine \"Command Line Interface\"\u003c/h2\u003e\n\n\u003cp\u003eA CLI is a program that allows us to have a text-based conversation with the\ncomputer in which we type the commands for accomplishing tasks. With a CLI,\nusers have wide control over the file system and operating system, and the tasks\nbecome simple. For example, you can ask, through the CLI, which files are\nlocated on the \u003ccode\u003eDesktop\u003c/code\u003e. You can create a new folder or delete it. But on top\nof file-management kinds of activities, you can also find out how busy your CPU\nis, how full your hard drive is, and whether your computer can find a network\npath to \u003ccode\u003eflatironschool.com\u003c/code\u003e. On top of this, you don't have to click through\nseveral menus to get there!\u003c/p\u003e\n\n\u003cp\u003eExperienced developers would say \"the CLI gives you more control\" or that it's\n\"more powerful.\" With a GUI you use the mouse and the keyboard to control the\nfile system or the operating system, which is going to be slower than using the\ncommand line (once you become familiar with the commands). In a CLI, users only\nuse the keyboard and may need to execute only a few short commands to complete\ntheir equivalent GUI tasks. CLI users' fingers never leave the \"home row\"\n(assuming they can touch type) which \u003cem\u003eadds\u003c/em\u003e to their speed.\u003c/p\u003e\n\n\u003cp\u003eWhile some tasks may seem \"easier\" to do with a GUI, development-like tasks are\noften much more easily completed in the CLI. If you had a task such as renaming\n100+ files in a folder according to a formula based on their file size, you\nmight well spend hours on it in the GUI. Doing the same with the CLI on your\nside could be completed in seconds. And if you do that sort of thing often, you\ncan save that process and run it again whenever you wish! This is called\n\"scripting.\"\u003c/p\u003e\n\n\u003ch2\u003eIdentify Differences Between Command-Line Interface, Terminal Emulator, and Shell\u003c/h2\u003e\n\n\u003cp\u003eIn the early days of computers, users didn't work on standalone, \"personal\"\ncomputers. Instead, their workstation consisted of only a keyboard and monitor —\nno mouse and no graphical user interface. This monitor + keyboard device was\ncalled a \"terminal,\" and multiple terminals were connected to a \u003cem\u003eshared\u003c/em\u003e\ncomputer called a \"mainframe.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-intro/Image_56_MainFrameDiagram.png\" alt=\"\u0026quot;Mainframe Computers\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNowadays, the \"terminal\" is emulated in software. It's virtual. You launch the\nemulator by opening a program. And instead of being connected to a remote\ncomputer by a cable, your \"terminal emulator\" talks to the computer you're\nactually typing on. For Mac users, the default terminal emulator program is\ncalled \u003cstrong\u003eTerminal\u003c/strong\u003e. For WSL users, the \u003cstrong\u003eUbuntu\u003c/strong\u003e application will act as your\n\"terminal.\"\u003c/p\u003e\n\n\u003cp\u003eWhen you launch the \"terminal emulator\" program, it will immediately start a\nprogram called a \u003cem\u003eshell\u003c/em\u003e program. The \u003cem\u003eshell\u003c/em\u003e program is what actually prompts\nyou for input and returns the output. \u003ccode\u003ebash\u003c/code\u003e and \u003ccode\u003ezsh\u003c/code\u003e are specific \u003ccode\u003eshell\u003c/code\u003es\nused by Unix systems (like Mac OSX and Linux).\u003c/p\u003e\n\n\u003cp\u003eTo summarize:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eWhen discussing the terminal, we mean the \"terminal emulation\" program, i.e.\nthe thing that handles raw input and output.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eshell\u003c/code\u003e is what handles \u003cem\u003einterpreting\u003c/em\u003e the commands you type in to the\nterminal. It takes input, thinks, prints things out. It knows when a command\ndoesn't exist or make sense, and it knows how to ask the CPU to do work.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe phrase \"command-line\" is roughly the same as \u003ccode\u003eshell\u003c/code\u003e. It's a style of\ninteraction with the \u003ccode\u003eshell\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAlthough using a command line interface might seem intimidating at first as it\nrequires learning dozens of different commands, it can be a valuable resource\nthat makes using a computer easier. Using a command line, you can perform almost\nall of the same tasks that can be done with a GUI. However, many tasks can be\nperformed quicker and can be much easier to automate.\u003c/p\u003e\n\n\u003cp\u003eUltimately though, many programming languages and programming tools assume that\nyou're comfortable with the CLI. You must have this comfort in order to be a\nsuccessful programmer.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\"\u003eLifehacker on the Command Line\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.cybrary.it/0p3n/command-line-interface-cli-vs-graphical-user-interface-gui/\"\u003eCommand Line Interface (CLI) vs. Graphical User Interface (GUI)\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "introduction-to-the-command-line-interface"
          },
          {
            "id": 432776,
            "title": "CLI Navigation",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-bash-navigation\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-bash-navigation\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-bash-navigation/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDemonstrate How to Navigate from the CLI\u003c/li\u003e\n\u003cli\u003eIdentify your \"home directory\"\u003c/li\u003e\n\u003cli\u003eIdentify your logged-in username with \u003ccode\u003ewhoami\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eIdentify the \"current working directory\" with \u003ccode\u003epwd\u003c/code\u003e (\"print working directory\")\u003c/li\u003e\n\u003cli\u003eNavigate directories using \u003ccode\u003ecd\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eUsing the CLI (command line interface) might seem like a big challenge to\nfirst-time users who are afraid of making mistakes that could break their\ncomputers or ruin their files. Fear not! We'll step you through it.\u003c/p\u003e\n\n\u003cp\u003eUnix-like operating systems like MacOS, Linux, and Windows Subsystem for Linux\n(WSL) all have a command-line interface, or \"shell\" application. While there are\nseveral different shell applications, like \u003ccode\u003ezsh\u003c/code\u003e (the default for MacOS) and\n\u003ccode\u003ebash\u003c/code\u003e (the default for Ubuntu in WSL), all these shell applications share a set\nof common commands which developers are familiar with. In this section, we'll\ncover some of the most common commands used by developers.\u003c/p\u003e\n\n\u003cp\u003eTo follow along, go ahead and launch your terminal (the Terminal application for\nMacOS and Ubuntu for WSL).\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate How to Navigate with a Command-Line Interface\u003c/h2\u003e\n\n\u003cp\u003eTo review: a \u003cstrong\u003eshell\u003c/strong\u003e is a text-based interpreter that provides a \u003cem\u003ecommand-line\ninterface\u003c/em\u003e for controlling your computer. As a developer, you will use \u003cstrong\u003eshell\ncommands\u003c/strong\u003e to move around in your project directories to accomplish\ndifferent tasks (e.g., creating, renaming, moving or copying files or folders).\nProgrammers call this activity: \u003cem\u003enavigating\u003c/em\u003e. In the CLI we imagine that we're\n\"traveling\" to different places. We'll use metaphors like \"go into the folder\"\nor \"go up one folder\" or \"visit the location at such-and-such \u003cem\u003epath\u003c/em\u003e.\"\u003c/p\u003e\n\n\u003cp\u003eWhen navigating through a directory, it often helps if we picture the file\nstructure as a tree. With this visualization, we can refer to \"moving up\" or\n\"moving down\" between directory levels, and keep better track of not only where\nour files are but where we are among our files. Here's an example:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/cli-essentials/bash-navigation/Image_58_DirectoryStructureDiagram.png\" alt=\"\u0026quot;Directory tree structure diagram\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eA location within a file system is identified using something called a \u003cem\u003epath\u003c/em\u003e.\nFor example, the path to the \u003ccode\u003elesson1.txt\u003c/code\u003e document in the file structure\npictured above would be:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e/home/my_site/webappdev/unix/notes/lesson1.txt\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003e/\u003c/code\u003e characters in the path represent the \"nesting\" of folders or files\ninside other folders.\u003c/p\u003e\n\n\u003ch3\u003eIdentify Our \"Home Directory\"\u003c/h3\u003e\n\n\u003cp\u003eWhenever you open a terminal session, either by launching the program or by\nopening a new window, you will be placed in your \u003cem\u003ehome directory\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTypically, the path to the home directory looks like this for Mac OSX:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e/Users/username\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eand like this for Linux:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e/home/username\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003e/\u003c/code\u003e on the far left of the path name means the very top of the file system\n\"tree.\" The \u003ccode\u003e/\u003c/code\u003e directory is also called the \"root\" directory. It contains all\nthe \"top-level directories\" that can contain sub-directories (...which can\ncontain sub-directories, which can contain sub-directories, on and on).\u003c/p\u003e\n\n\u003cp\u003eSo the home paths above indicate that the \"root\" contains a directory called\n\u003ccode\u003eUsers\u003c/code\u003e or \u003ccode\u003ehome\u003c/code\u003e (depending on your operating system), which in turn contains\n\u003ccode\u003eusername\u003c/code\u003e. Obviously, our names (well, most of our names) are not \u003ccode\u003eusername\u003c/code\u003e.\nInstead we log into our systems as \u003ccode\u003eByron Poodle\u003c/code\u003e or \u003ccode\u003eNancy the Cat\u003c/code\u003e. How can we\nfind out what our logged-in-user name is?\u003c/p\u003e\n\n\u003ch3\u003eIdentify My Logged-In Username with \u003ccode\u003ewhoami\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWe can ask the computer who we are logged in as using the \u003ccode\u003ewhoami\u003c/code\u003e command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ewhoami\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eAny time you see the\u003c/em\u003e \u003ccode\u003e$\u003c/code\u003e \u003cem\u003echaracter, you shouldn't type it in. This\nis just a standard way to represent the command prompt in a shell application.\nYours may or may not be a\u003c/em\u003e \u003ccode\u003e$\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/prework/whoami.jpg\" alt=\"\u0026quot;whoami\u0026quot;\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ewhoami\u003c/code\u003e command lets you see which user account you're logged in to from\nthe CLI. This might seem obvious, especially if you're logged in on your\npersonal computer. But Unix machines have multiple accounts by default (though\nyou may not have seen them yet).\u003c/p\u003e\n\n\u003cp\u003eMy system says I am \u003ccode\u003ekellyegreene\u003c/code\u003e. Based on what we learned about home\ndirectories, I could figure out what my home directory should be, but there's an\neasier way: we can ask our computer to tell us what path we're in!\u003c/p\u003e\n\n\u003ch3\u003eIdentify the \"Current Working Directory\" With \u003ccode\u003epwd\u003c/code\u003e (\"print working directory\")\u003c/h3\u003e\n\n\u003cp\u003eTry running the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should see some output describing the directory you are currently in. It's\nprobably something like \u003ccode\u003e/Users/byron_the_poodle\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003epwd\u003c/code\u003e command stands for \"\u003cstrong\u003ep\u003c/strong\u003erint \u003cstrong\u003ew\u003c/strong\u003eorking \u003cstrong\u003ed\u003c/strong\u003eirectory\". As you\n\"navigate\" your file system, you might get lost. Just like wandering in a big\ncity, you can look for street signs to find out where you are. The \u003ccode\u003epwd\u003c/code\u003e command\nacts like those street signs. You'll never be lost again!\u003c/p\u003e\n\n\u003cp\u003eWe've just used \u003ccode\u003epwd\u003c/code\u003e to verify that when we open the shell application, the\noperating system automatically \"puts\" us in our home directory. Now let's learn\nhow to do some real \"navigation\" in our file structure.\u003c/p\u003e\n\n\u003ch3\u003eChange Directories Using \u003ccode\u003ecd\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eTry typing this in the command line:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ..\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis command \"moves up\" one level of nesting, so you should now be one\nlevel up from where you were and one level closer to the \"root\" directory.\nVerify this by running \u003ccode\u003epwd\u003c/code\u003e again:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e/Users\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003ecd\u003c/code\u003e command stands for \"\u003cstrong\u003ec\u003c/strong\u003ehange \u003cstrong\u003ed\u003c/strong\u003eirectory\".\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e..\u003c/code\u003e is a shortcut for the directory \u003cem\u003eabove\u003c/em\u003e the working directory. The\nshell application provides a series of \"shortcuts\" for some commonly-used file\nsystem paths. \u003ccode\u003e..\u003c/code\u003e means \"this directory's containing folder\". These shortcuts\nlook strange but they're designed to be \u003cem\u003eshort\u003c/em\u003e and therefore \u003cem\u003eeasy to type\u003c/em\u003e and\ntherefore \u003cem\u003efast\u003c/em\u003e and, as we've hinted, the CLI is all about speed.\u003c/p\u003e\n\n\u003cp\u003eSo in this command example we said: \u003ccode\u003echange directory to the parent folder\u003c/code\u003e. You\ncould run the same command again to navigate up to the \u003ccode\u003e/\u003c/code\u003e (root) directory.\u003c/p\u003e\n\n\u003cp\u003eAnother shortcut, that might not seem very useful at first, is \u003ccode\u003e.\u003c/code\u003e meaning \"the\ncurrent directory I'm in.\"\u003c/p\u003e\n\n\u003cp\u003eIf you try this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should see you are still in the same directory where you wrote the command.\nYou will learn a bit later in the course about when and how the \u003ccode\u003e.\u003c/code\u003e is used.\u003c/p\u003e\n\n\u003cp\u003eThe shell application provides one additional shortcut: \u003ccode\u003e~\u003c/code\u003e. This symbol is used\nto indicate the home directory.\u003c/p\u003e\n\n\u003cp\u003eIf you haven't already, use \u003ccode\u003ecd ..\u003c/code\u003e a second time to go \"up\" another level to\nthe root directory. Run \u003ccode\u003epwd\u003c/code\u003e to verify; you should see \u003ccode\u003e/\u003c/code\u003e output.\u003c/p\u003e\n\n\u003cp\u003eYou can then navigate back to your home directory by running:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou'll see you're back in your home directory. Use \u003ccode\u003epwd\u003c/code\u003e to verify!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Actually, you don't even need the \u003ccode\u003e~\u003c/code\u003e! If you enter \u003ccode\u003ecd\u003c/code\u003e with \u003cem\u003eno\u003c/em\u003e\nargument from anywhere in your file structure, you'll be taken to your home\ndirectory.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003ePaths in Shell\u003c/h3\u003e\n\n\u003cp\u003eIn addition to shortcuts like \u003ccode\u003e..\u003c/code\u003e or \u003ccode\u003e~\u003c/code\u003e, you can also provide a \u003cstrong\u003epath\u003c/strong\u003e as\nthe argument to the \u003ccode\u003ecd\u003c/code\u003e command. For example, another way I could get back to my home\ndirectory is to run this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /Users/kellyegreene\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr, equivalently (in this case):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003eUsers/kellyegreene\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote the difference between these two commands: the first one, which has the \u003ccode\u003e/\u003c/code\u003e\nat the front, is called an \u003cem\u003eabsolute\u003c/em\u003e path. The second, without the leading \u003ccode\u003e/\u003c/code\u003e,\nis a \u003cem\u003erelative\u003c/em\u003e path.\u003c/p\u003e\n\n\u003cp\u003eThe difference between the two is that the \u003cem\u003eabsolute\u003c/em\u003e path will always get you\nto the destination folder, regardless of where you currently are in the file\nstructure. The absolute path tells the shell application to start from the root\ndirectory (\u003ccode\u003e/\u003c/code\u003e), then go \"down\" into \u003ccode\u003eUsers\u003c/code\u003e, then \"down\" again into\n\u003ccode\u003ekellyegreene\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003erelative\u003c/em\u003e path, on the other hand, tells the shell application where to\nnavigate \u003cstrong\u003erelative\u003c/strong\u003e to where you currently are in the file structure. So, if\nI'm in the root directory, I can use the \u003ccode\u003ecd Users\u003c/code\u003e command, but if I'm\nsomewhere else in the file structure, typing \u003ccode\u003ecd Users\u003c/code\u003e will give me an error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003ecd: no such file or directory: Users\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo get to the \u003ccode\u003eUsers\u003c/code\u003e directory (without using one of the shortcuts), I\ncould either use \u003ccode\u003ecd ..\u003c/code\u003e until I'm back at the root directory then run \u003ccode\u003ecd\nUsers\u003c/code\u003e \u003cstrong\u003eor\u003c/strong\u003e I could use the absolute path.\u003c/p\u003e\n\n\u003cp\u003eIf the difference between relative and absolute paths is still unclear, try\nthinking of it in terms of giving a friend directions to your house. In most\ncases, you (or your friend's GPS system) will give them directions \u003cem\u003erelative\u003c/em\u003e to\nsome starting point, but you could also give them the exact latitude and\nlongitude of your house, which will work no matter where they start from.\u003c/p\u003e\n\n\u003ch2\u003eTime-Saving Tip: Tab Completion\u003c/h2\u003e\n\n\u003cp\u003eAs you type in commands in the shell, you can use \"tab completion.\" Tab\ncompletion allows the shell to be smart and to try and guess what command you\nwant to run when you hit the tab. If there's only one logical way to complete\nyour command, the shell application will fill in the rest for you. If there are\nmultiple possibilities, it will show those to you and you can continue to add\nletters until the shell application can tell exactly what you're trying to do.\u003c/p\u003e\n\n\u003cp\u003eFor example let's say I'm in a directory that has the following two sub-\ndirectories:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e/flatiron_school\n/flatiron_building\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf I type \u003ccode\u003e$ cd f\u003c/code\u003e and then hit \u003ccode\u003etab\u003c/code\u003e, it will fill in everything that's the\nsame, so I'll see \u003ccode\u003e$ cd flatiron_\u003c/code\u003e. If I then add the \u003ccode\u003es\u003c/code\u003e and hit \u003ccode\u003etab\u003c/code\u003e it will\nfill in \u003ccode\u003e$ cd flatiron_school\u003c/code\u003e and I can hit enter.\u003c/p\u003e\n\n\u003cp\u003eTab completion can also be used with the other shell commands we'll be learning\nin the lessons that follow.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAs you continue to explore and work with the command line, you will start to unlock\nand understand its full potential! Becoming comfortable with working in the\nterminal will allow you to become more productive.\u003c/p\u003e\n\n\u003cp\u003eSo far we've been finding out where we are in the file system \"tree.\" Next,\nwe'll learn how to explore what's \u003cem\u003ein\u003c/em\u003e these directories.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\"\u003eLifehacker on the Command Line\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Path_(computing)\"\u003eMore on paths - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "cli-navigation"
          },
          {
            "id": 432777,
            "title": "Working with Files and Directories in the CLI",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-navigating-files-in-bash\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-navigating-files-in-bash\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-navigating-files-in-bash/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eList files and directories with \u003ccode\u003els\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCreate new files with \u003ccode\u003etouch\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCreate new directories with \u003ccode\u003emkdir\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eMove or rename files and directories with \u003ccode\u003emv\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCopy files and directories with \u003ccode\u003ecp\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eRemove files or directories with \u003ccode\u003erm\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson we learned how to \"navigate\" the directory structure of\nour file system. But our file systems (and lives) would be so boring without\n\u003cem\u003efiles\u003c/em\u003e. Copying files, moving files, reading the contents of files, etc. We\nlooooooove files.\u003c/p\u003e\n\n\u003cp\u003eThis lesson will show you how to work with your files. In time, you might stop\nusing Finder and other graphical tools because it's so much faster (and more\nfun!) to use the CLI.\u003c/p\u003e\n\n\u003ch2\u003eList Files and Directories with \u003ccode\u003els\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn a new terminal, which automatically puts you in your \u003cem\u003ehome directory\u003c/em\u003e,\ntry this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe command \u003ccode\u003els\u003c/code\u003e stands for \"\u003cstrong\u003elist\u003c/strong\u003e\" — the first character is a lower case\nletter L. After you run it, you should then see a list of the files and folders\nwithin your working directory.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e For Ubuntu/WSL users, your home directory may start out empty, so\nyou might not see anything when you run \u003ccode\u003els\u003c/code\u003e. If this is the case, try\ncreating a folder. In fact, now is a good time to create a \u003ccode\u003eDevelopment\u003c/code\u003e\nfolder where you can store your coursework. (You'll finish setting up the\ndirectory structure for your coursework in the next lesson.) We'll use \u003ccode\u003emkdir\u003c/code\u003e\nto create the folder (more on this a bit later in this lesson):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003eDevelopment\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce the folder is created, run \u003ccode\u003els\u003c/code\u003e again and you should see \u003ccode\u003eDevelopment\u003c/code\u003e\nlisted.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eTrue to Unix style the \u003ccode\u003els\u003c/code\u003e command is easy to type and \u003cstrong\u003e\u003cem\u003eshort\u003c/em\u003e\u003c/strong\u003e (both keys\non the home row of a keyboard, one letter on one hand the other on the other\nhand, it's about as fast as it can get; handy for a command we will run \u003cem\u003eall the\ntime\u003c/em\u003e).\u003c/p\u003e\n\n\u003cp\u003eWe can list the contents of another directory by providing an absolute or\nrelative path:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003els \u003c/span\u003epathname\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eUsing Flags with Commands\u003c/h3\u003e\n\n\u003cp\u003eWe can use flags on most Unix commands to give more specific instructions or to\nchange the output. Most programs accept flags, or options for execution.\u003c/p\u003e\n\n\u003cp\u003eA flag is denoted by a \u003ccode\u003e-\u003c/code\u003e (\"dash\").\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis prints out a list of all the files with \"long form\" output: it will give us\nmore details, including  which user account owns the file, what the permissions\nfor users are on the file, etc.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e  /var/tmp\n\u003cspan class=\"go\"\u003eSIMToolKit\nhi\npfwtfp-dice-thrower-from-a-file\nsinatra-user-auth\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ebecomes:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e /var/tmp\n\u003cspan class=\"go\"\u003etotal 0\ndrwxrwxrwx   3 byron.poodle  wheel   96 Jun  5  2018 SIMToolKit\ndrwxr-xr-x   2 byron.poodle  wheel   64 Jun  5  2018 hi\ndrwxr-xr-x  12 byron.poodle  wheel  384 Nov  9 15:35 pfwtfp-dice-thrower-from-a-file\ndrwxr-xr-x  18 byron.poodle  wheel  576 May 21  2018 sinatra-user-auth\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou don't need to know what all those extra bits of information mean now; just\nbe aware that flags can really enrich the output you get.\u003c/p\u003e\n\n\u003cp\u003eSingle-character options can typically be combined with each other. For example,\n\u003ccode\u003ea\u003c/code\u003e is an additional flag you can use with the \u003ccode\u003els\u003c/code\u003e command to show \"\u003cstrong\u003ea\u003c/strong\u003ell\"\nfiles, including \"hidden files.\" (Hidden files have names that start with a \u003ccode\u003e.\u003c/code\u003e,\nand are often used for internal operating system configuration — we'll expand on\nthis in a moment.)\u003c/p\u003e\n\n\u003cp\u003eWe can combine the two flags when we use \u003ccode\u003els\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-la\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr, equivalently:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-l\u003c/span\u003e \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen you run either of the commands above, you should receive a list of files\nthat includes some you didn't see when you ran just \u003ccode\u003e$ ls\u003c/code\u003e, without the flags:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003edrwxr-xr-x   6 kellyegreene  staff   204B Jun  2 11:21 .\ndrwxr-xr-x   5 kellyegreene  staff   170B May 28 15:52 ..\n-rw-r--r--@  1 kellyegreene  staff   6.0K May 28 15:52 .DS_Store\ndrwxr-xr-x  13 kellyegreene  staff   442B Jun  2 11:02 .git\n-rw-r--r--   1 kellyegreene  staff    66B May 28 15:49 .learn\n-rw-r--r--   1 kellyegreene  staff    11K Jun  2 11:21 README.md\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that at the top of the file output that the current directory (\u003ccode\u003e.\u003c/code\u003e) and\nits parent (\u003ccode\u003e..\u003c/code\u003e) are listed first, followed by several files that start with\na \u003ccode\u003e.\u003c/code\u003e, like \u003ccode\u003e.DS_Store\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFiles like \u003ccode\u003e.DS_Store\u003c/code\u003e are not listed if you don't use the \u003ccode\u003ea\u003c/code\u003e flag. That's\nbecause files and directories that start with a \u003ccode\u003e.\u003c/code\u003e are \u003cem\u003ehidden\u003c/em\u003e files. Shells\nare often configured by putting information in these \u003cem\u003ehidden\u003c/em\u003e files. We'll not\ntalk about these types of files in this lesson except to say that you need to\nuse the \u003ccode\u003ea\u003c/code\u003e flag when you run \u003ccode\u003els\u003c/code\u003e if you want to see them.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cem\u003eCombining flags is only valid for single-letter options. A \"long\noption\" such as\u003c/em\u003e \u003ccode\u003e--force\u003c/code\u003e \u003cem\u003eis defined with more than one character and cannot\nbe combined with other flags.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eCreate New Files with \u003ccode\u003etouch\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWe can use the \u003ccode\u003etouch\u003c/code\u003e command to create a new (empty) file in the current\ndirectory. Try:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003etouch \u003c/span\u003ehello_world.rb\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow try:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should see the file you just created, \u003ccode\u003ehello_world.rb\u003c/code\u003e, in the working\ndirectory. Note that this is an empty file and has nothing inside of it, because\nyou just created it.\u003c/p\u003e\n\n\u003ch2\u003eCreate New Directories with \u003ccode\u003emkdir\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWe can make directories with the \u003ccode\u003emkdir\u003c/code\u003e command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003ename_of_directory\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow if you enter \u003ccode\u003els\u003c/code\u003e you should see the empty directory you just created in the\nworking directory.\u003c/p\u003e\n\n\u003ch2\u003eMove or Rename Files and Directories with \u003ccode\u003emv\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003emv\u003c/code\u003e is the command that is used to move files or directories from one place to\nanother:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003emv \u003c/span\u003efilename destination_path\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe first type the \u003ccode\u003emv\u003c/code\u003e command, followed by the name of the file we want to\nmove. After that, we provide a second argument: a path (either relative or\nabsolute) that points to the folder we want to move our file into.\u003c/p\u003e\n\n\u003cp\u003eIf the file we want to move is not in the working directory (the directory we're\ncurrently in), we can provide a (relative or absolute) path to that as well:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003emv path_to_file/filename destination_path\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr, if we wanted to move that file from its current location into the working\ndirectory, we could do that like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003emv path_to_file/filename ./\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRecall that \u003ccode\u003e.\u003c/code\u003e is a shell application shortcut for the \"current\" directory. The\ncommand above tells the shell to move the file \u003ccode\u003efilename\u003c/code\u003e in the location\nspecified by \u003ccode\u003epath_to_file\u003c/code\u003e into the working directory.\u003c/p\u003e\n\n\u003cp\u003eYou may also see \u003ccode\u003e./\u003c/code\u003e used to explicitly specify that we're starting from the\nworking directory. For example, to move a file into a subdirectory inside the\nworking directory, you could do the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003emv path_to_file/filename ./subdir\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhile the \u003ccode\u003e./\u003c/code\u003e is optional in this case, you will see this syntax used in other\nplaces (and later in the curriculum), so it's good to understand what it's\ndoing.\u003c/p\u003e\n\n\u003cp\u003eIn addition to \u003cstrong\u003emoving\u003c/strong\u003e files, We can also use the \u003ccode\u003emv\u003c/code\u003e command to \u003cstrong\u003erename\u003c/strong\u003e\na file or directory:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003emv \u003c/span\u003eoriginal_program.rb renamed_program.rb\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr we could \u003cstrong\u003ecombine\u003c/strong\u003e moving and renaming in one command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003emv \u003c/span\u003etemp_download.gif ~/Desktop/cats_with_weapons/ninja_cat.gif\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere, we are moving \u003ccode\u003etemp_download.gif\u003c/code\u003e from the working directory into the\n\u003ccode\u003ecats_with_weapons\u003c/code\u003e folder on our desktop and \u003cstrong\u003ealso\u003c/strong\u003e renaming it to\n\u003ccode\u003eninja_cat.gif\u003c/code\u003e. Note that we're using the \u003ccode\u003e~\u003c/code\u003e shortcut here! This expands into\n\u003ccode\u003e/Users/username/Desktop/cats_with_weapons/ninja_cat.gif\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2\u003eCopy Files and Directories with \u003ccode\u003ecp\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eIf you think about it, move is really \"copy, but delete the original.\" Well,\n\u003ccode\u003ecp\u003c/code\u003e does a \u003ccode\u003emv\u003c/code\u003e, but doesn't delete the original. It's therefore a \"copy.\"\u003c/p\u003e\n\n\u003cp\u003eIt uses the same syntax as \u003ccode\u003emv\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecp \u003c/span\u003eletter_to_mom.txt letter_to_mom-2019-02-15.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf, instead of a single file, you want to copy a directory and its file\ncontents, you need to use the \u003ccode\u003e-r\u003c/code\u003e (\u003cstrong\u003er\u003c/strong\u003eecursive) flag:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecp\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e february_cat_gifs ~/Desktop/vital_media_files\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis command tells the shell application to copy the \u003ccode\u003efebruary_cat_gifs\u003c/code\u003e folder\n\u003cstrong\u003eand all of its contents\u003c/strong\u003e into the \u003ccode\u003evital_media_files\u003c/code\u003e folder on the desktop.\u003c/p\u003e\n\n\u003ch2\u003eRemove Files or Directories with \u003ccode\u003erm\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eTo delete a file, we can use the \u003ccode\u003erm\u003c/code\u003e command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003erm \u003c/span\u003ehello_world.rb\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eImportant:\u003c/strong\u003e Deleting a file with \u003ccode\u003erm\u003c/code\u003e is \u003cem\u003epermanent\u003c/em\u003e. This action cannot be\nundone!\u003c/p\u003e\n\n\u003cp\u003eMuch like \u003ccode\u003ecp\u003c/code\u003e, if you want to delete a directory (and all its contents), you\nneed to add the \u003ccode\u003e-r\u003c/code\u003e flag:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003erm\u003c/span\u003e \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e ~/Desktop/pokemon_fan_fiction\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere are additional options to \u003ccode\u003erm\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-i\u003c/code\u003e (interactive): Prompts you to confirm the deletion. This option can stop\nyou from deleting a file by mistake.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-f\u003c/code\u003e (force): Overrides interactive mode and removes the file(s) without\nprompting. Use this with caution. This action cannot be undone!\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-v\u003c/code\u003e (verbose): Shows the progress of the files as they are being removed.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere are a variety of commands you can use to manipulate files via the command\nline. If this list seems overwhelming at first, remember that it takes all\nprogrammers a little time to practice their CLI workflows. Refer back to these\nresources as you need to, and it will get easier as you go along.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything\"\u003eLifehacker on the Command Line\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Path_(computing)\"\u003eMore on paths - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://linux-audit.com/linux-history-how-dot-files-became-hidden-files/\"\u003eHow Dot Files Became Hidden Files\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "working-with-files-and-directories-in-the-cli"
          },
          {
            "id": 432778,
            "title": "Organizing Your Work for this Course",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-organizing-work-on-your-computer\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-organizing-work-on-your-computer\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-organizing-work-on-your-computer/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eConfigure a directory for storing lessons\u003c/li\u003e\n\u003cli\u003eUnderstand the relationship between navigating directories in the terminal and\nnavigating directories in a graphical user interface like Finder\u003c/li\u003e\n\u003cli\u003ePractice common terminal commands such as \u003ccode\u003epwd\u003c/code\u003e, \u003ccode\u003els\u003c/code\u003e, \u003ccode\u003emkdir\u003c/code\u003e, and \u003ccode\u003ecd\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFrom now on, you'll be executing code on your own computer. For each and every\nlab, you'll be copying the code to your computer using\n\u003ca href=\"https://git-scm.com\"\u003eGit\u003c/a\u003e. You will then be able to run and test your code in\nyour terminal, and submit your work using the learn-co gem.\u003c/p\u003e\n\n\u003ch2\u003eMacOS: Setting Up Your Directory Structure\u003c/h2\u003e\n\n\u003cp\u003eFor Mac users, follow along with this video:\u003c/p\u003e\n\n\u003ciframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/_zeNHyW9gvw\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eWSL: Setting Up Your Directory Structure\u003c/h2\u003e\n\n\u003cp\u003eFor Windows users, follow along with this video:\u003c/p\u003e\n\n\u003ciframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/EwLe9M4xZlk\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eCreating Folders to Organize Your Work\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eGo to your terminal and navigate to your home directory by typing \u003ccode\u003ecd ~\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eNavigate into the \u003ccode\u003eDevelopment\u003c/code\u003e folder with \u003ccode\u003ecd Development\u003c/code\u003e (if you don't\nhave a \u003ccode\u003eDevelopment\u003c/code\u003e folder yet, you can create it with \u003ccode\u003emkdir Development\u003c/code\u003e,\nthen \u003ccode\u003ecd\u003c/code\u003e into it).\u003c/li\u003e\n\u003cli\u003eCreate a directory for all your assignments by typing \u003ccode\u003emkdir code\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eNavigate into this folder with \u003ccode\u003ecd code\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIn here, create a directory for Software Engineering Prep with\n\u003ccode\u003emkdir se-prep\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou'll be going through multiple phases in this course, so it may be helpful\nto go one step further and also create folders for phases 1 through 5 within\n\u003ccode\u003ecode\u003c/code\u003e. When making the phase folders use a \u003ccode\u003e-\u003c/code\u003e between words. For example,\nthe phase 1 folder should be named \u003ccode\u003ephase-1\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHaving a specific place for your work will make it easier to find if you ever\nneed to look back at an earlier project. It'll also keep the rest of your\ncomputer's folders clear of random code.\u003c/p\u003e\n\n\u003ch2\u003eTerminal Command Reference\u003c/h2\u003e\n\n\u003cp\u003eHere's a quick reference of the terminal commands used in these videos. For\nmore, check out this awesome \u003ca href=\"https://github.com/0nn0/terminal-mac-cheatsheet\"\u003echeatsheet\u003c/a\u003e.\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eCommand\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003els\u003c/td\u003e\n\u003ctd\u003eList all files and folders in the current directory\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003els -a\u003c/td\u003e\n\u003ctd\u003eList all files and folders, including hidden files\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003emkdir [name]\u003c/td\u003e\n\u003ctd\u003eMake a new directory with the given [name]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecd [folder]\u003c/td\u003e\n\u003ctd\u003eChange directories to the given [folder]\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecd ..\u003c/td\u003e\n\u003ctd\u003eChange directories to the parent directory\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecd ~\u003c/td\u003e\n\u003ctd\u003eChange directories to the home directory\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003epwd\u003c/td\u003e\n\u003ctd\u003ePrint the full path of the current working directory\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eexplorer.exe\u003c/td\u003e\n\u003ctd\u003e(Windows) Open the File Explorer to the current directory\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eopen .\u003c/td\u003e\n\u003ctd\u003e(Mac) Open the Finder application to the current directory\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/0nn0/terminal-mac-cheatsheet\"\u003eTerminal Commands Cheatsheet\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "organizing-your-work-for-this-course"
          },
          {
            "id": 432780,
            "title": "Complete Your First Software Engineering Assignment",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-completing-assignments\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-completing-assignments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand the steps needed to complete an assignment and submit it in Canvas\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eDuring this course, you will work on various assignments as you learn to code.\nAll assignments will be interactive pieces of curriculum that require some work.\nSome assignments may ask you to follow a set of instructions, while others will\nask you to figure out your own solution to pass specific tests. This lesson is\nyour first assignment!\u003c/p\u003e\n\n\u003cp\u003eAll assignments are hosted on GitHub. In order to work on them, however, you\nwill need to complete work on your local machine. The general process is:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eClick the blue \"Fork\" button in Canvas\u003c/li\u003e\n\u003cli\u003eCreate a personal copy (a 'fork') of the assignment in GitHub\u003c/li\u003e\n\u003cli\u003eDownload your personal copy (referred to as 'cloning') to your computer\u003c/li\u003e\n\u003cli\u003eComplete the required work\u003c/li\u003e\n\u003cli\u003eSubmit your completed work to Canvas\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this assignment, you'll learn the workflow that you will be using to complete\nyour assignments. You can follow along with the steps in the videos below, or\ncontinue reading to get a more detailed explanation of the process of working on\nlessons in Canvas.\u003c/p\u003e\n\n\u003ch2\u003eWSL: Completing Assignments Code Along\u003c/h2\u003e\n\n\u003cp\u003eFor Windows users, follow along with this video:\u003c/p\u003e\n\n\u003ciframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/wkM_3VZT2Nw\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eMacOS: Completing Assignments Code Along\u003c/h2\u003e\n\n\u003cp\u003eFor Mac users, follow along with this video:\u003c/p\u003e\n\n\u003ciframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/otfhhI-5qtM\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003ch3\u003eA Quick Note on Organizing Work on Your Machine\u003c/h3\u003e\n\n\u003cp\u003eThroughout this course, you will be downloading many assignments, so it is\nimportant to keep your code organized. If you haven't yet, we recommend that you\ngo through the steps in\n\u003ca href=\"https://github.com/learn-co-curriculum/phase-0-organizing-work-on-your-computer\"\u003ethe previous lesson\u003c/a\u003e\nto set up a directory where you can keep all of your work for this course.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The process we'll go through in this lesson will create sub-folders\nautomatically. Whenever you are starting a new assignment, navigate back to\nyour main \u003ccode\u003eprework\u003c/code\u003e folder (\u003ccode\u003ecd ~/Development/code/prework\u003c/code\u003e) before cloning\nthe assignment to ensure these sub-folders don't get created\n\u003cem\u003ewithin each other\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eAccessing GitHub and Forking\u003c/h3\u003e\n\n\u003cp\u003eAll the lessons in this course have a corresponding repository (repo) in GitHub.\nOn this page in Canvas, you should see three icons in the \u003cstrong\u003eupper right\u003c/strong\u003e\ncorner. The first says \u003cstrong\u003eFork\u003c/strong\u003e. The second is a button that looks like a\nlarge-headed cat (GitHub's 'Octocat' icon), which will open the lesson's GitHub\nrepo \u003cem\u003ewithout\u003c/em\u003e forking. The third is a flag, which you can use to submit an\n\u003cem\u003eissue\u003c/em\u003e for the lesson (e.g., if you find a typo or other error).\u003c/p\u003e\n\n\u003cp\u003eOne way to fork an assignment is to click the Octocat button to go to the\nassignment's GitHub repo and fork directly from that page. (We'll go through\nthat process in a later lesson.) However, when completing your Canvas\nassignments, you should use the \u003cstrong\u003eFork\u003c/strong\u003e button. Doing so will automate several\nsteps for you and ensure that, when you complete a lab, it is registered as\ncomplete in Canvas.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and fork this assignment by clicking the \u003cstrong\u003eFork\u003c/strong\u003e button at the top of\nthe page.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://curriculum-content.s3.amazonaws.com-link.png\" alt=\"fork link\" height=\"25px\"\u003e\n  \u003cfigcaption\u003eThis is just a picture, the button is up at the top of the page.\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eClicking the \u003cstrong\u003eFork\u003c/strong\u003e button will do one of two things — it will either start\nthe forking process or bring you to a page where you select where to create your\nfork. If you're prompted to choose, select your personal GitHub account. The\nforking process will begin and may take a few moments. When complete, you will\nbe redirected to a new copy of the assignment that exists under \u003cem\u003eyour\u003c/em\u003e GitHub\naccount. The \u003ccode\u003eREADME.md\u003c/code\u003e file in your copy of the repository contains these\ninstructions, so you can continue this lesson here or in GitHub.\u003c/p\u003e\n\n\u003cp\u003eForking is a process which creates an exact copy of a collection of code and\nfiles. Once you've created a fork on your own GitHub account, you will be able\nto edit the files in the repository and write your own code solution without\ninterfering with the original copy.\u003c/p\u003e\n\n\u003cp\u003eOnce your fork is ready, the next step is to download (\u003cstrong\u003eclone\u003c/strong\u003e) your new\nrepository to your local machine.\u003c/p\u003e\n\n\u003ch3\u003eCloning to Your Local Machine\u003c/h3\u003e\n\n\u003cp\u003eTo download the repository for this lesson, make sure you're in your personal\nfork on GitHub, then click the \u003cstrong\u003eCode\u003c/strong\u003e button. A pop-up will appear which shows\nseveral options for cloning: \u003cstrong\u003eHTTPS\u003c/strong\u003e, \u003cstrong\u003eSSH\u003c/strong\u003e, and \u003cstrong\u003eGitHub CLI\u003c/strong\u003e. \u003cstrong\u003eBefore\ndoing anything else\u003c/strong\u003e, be sure to switch to \u003cstrong\u003eSSH\u003c/strong\u003e. With \u003cstrong\u003eSSH\u003c/strong\u003e selected, you\nshould see what looks sort of like an email in the box below, starting with\n\u003ccode\u003egit@github.com:\u003c/code\u003e. You should see your GitHub name after the \u003ccode\u003e:\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eAside:\u003c/strong\u003e Why SSH? If you followed the setup instructions, you have added\nyour personal SSH key to GitHub. GitHub will store your personal copies of all\nthe work you do in this course. Because you've added your SSH key, GitHub will\nknow who you are when you send work from your local machine to GitHub to be\nstored. Using HTTPS instead would require you to sign in from your terminal\nusing your log-in credentials each time you try to push your code to GitHub;\nit also may not work at all for some assignments.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFrom here, click the copy button.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/completing-assignments/clone-repo.gif\" alt=\"clone-repo\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNow, open your terminal and navigate to where you'd like to download the\nassignment (e.g. \u003ccode\u003ecd ~/Development/code\u003c/code\u003e). Type \u003ccode\u003egit clone\u003c/code\u003e and a space, then\npaste in the copied SSH link from GitHub. It should look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit clone git@github.com:\u0026lt;your-user-name\u0026gt;/phase-0-completing-assignments.git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePress enter, and you should see a flurry of terminal activity.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTroubleshooting\u003c/strong\u003e: If you are a Mac user and you see the following message:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003excrun: error: invalid active developer path\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eYou need to install the Xcode Command Line Tools. Run the following command to\ninstall them:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003excode-select \u003cspan class=\"nt\"\u003e--install\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd follow the prompts. Then try running the \u003ccode\u003egit clone\u003c/code\u003e command again. See\n\u003ca href=\"https://stackoverflow.com/a/52522566\"\u003ethis Stack Overflow post\u003c/a\u003e for more\ndetails. Note that you may need to re-install \u003ccode\u003excode-select\u003c/code\u003e any time you\nupdate your Mac OS version.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOnce the terminal gives you control to type again, a new folder with the GitHub\nname of the assignment will have been created. Change directory into this folder\nto access the assignment files.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003ephase-0-completing-assignments\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow type \u003ccode\u003ecode .\u003c/code\u003e to open up a text editor window with access to all of the\nassignment's files. These instructions are now also available on your local\nmachine in \u003ccode\u003eREADME.md\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote: the first time you open a directory in Visual Studio Code, you'll see a\nmessage asking \"Do you trust the authors of the files in this folders?\" This\nis a \u003ca href=\"https://code.visualstudio.com/docs/editor/workspace-trust\"\u003esecurity feature\u003c/a\u003e of Visual Studio Code. It's safe to\nchoose \"Yes\", and we recommend selecting the \"Trust the authors of all the\nfiles in the parent folder\" option to prevent this warning from coming up\nevery time you open a lesson. Just be sure to download your code from trusted\nsources!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eCompleting an Assignment\u003c/h3\u003e\n\n\u003cp\u003eMost assignments will have tests that check your work and provide immediate\nfeedback in the terminal. We'll walk through some examples in upcoming lessons.\u003c/p\u003e\n\n\u003cp\u003eThis assignment has a single test: check to see if you've correctly cloned this\nassignment to your local machine. If you've followed the steps above, you've\ncompleted everything you need to do to pass the test; all that is left to do is\nrun it.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e in the terminal. This command will install all the lesson\ndependencies and run the test. You should again see a flurry of text as\ndependencies are installed. Then you'll see the results of your test. By cloning\nthis assignment down, you've already passed the test!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003eThis assignment\n    ✓ has been correctly cloned to your local environment\n\n\n  1 passing (5ms)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you did not receive a passing test, or if your terminal produced\nsome sort of error, walk through the steps in this lesson again and make sure\nyou've followed each one. If you got a \"command not found\" error, go back to\nthe \u003ca href=\"https://github.com/learn-co-curriculum/phase-0-configuring-the-flatiron-student-portal\"\u003eConfiguring the Flatiron Student Portal\u003c/a\u003e\nlesson and go through the steps provided there to make sure the \u003ccode\u003elearn-co\u003c/code\u003e gem\nwas installed correctly. If you're still receiving errors, we recommend going\nback through the local environment setup instructions again to ensure\neverything is set up properly.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOnce the test is passing, you can head back to the assignment on Canvas. Refresh\nthe assignment page and you should see that Canvas now registers the assignment\nas both \u003cstrong\u003eSubmitted\u003c/strong\u003e and \u003cstrong\u003eComplete\u003c/strong\u003e. A URL to your fork of the assignment has\nbeen submitted in Canvas, so you are ready to move on to the next lesson.\u003c/p\u003e\n\n\u003cp\u003eEach assignment will be different and will include instructions on what is\nrequired to complete it. Some labs will have many tests. You can run\n\u003ccode\u003elearn test\u003c/code\u003e as many times as you'd like while working to solve these labs. You\nwill submit your work to Canvas each time you do, but the assignment will be\nmarked \u003cstrong\u003eIncomplete\u003c/strong\u003e until all tests are passing.\u003c/p\u003e\n\n\u003ch3\u003eYour Work in GitHub\u003c/h3\u003e\n\n\u003cp\u003eEvery time you run \u003ccode\u003elearn test\u003c/code\u003e, all the changes you've made locally will be\nautomatically pushed to your GitHub fork of the repo. If you head back to your\nrepo after running \u003ccode\u003elearn test\u003c/code\u003e, you should see a message that a new branch,\n\u003ccode\u003efis-wip\u003c/code\u003e, has been created:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/configuring-the-student-portal/fis-wip.jpg\" alt=\"pr_prompt\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e you should \u003cstrong\u003edisregard\u003c/strong\u003e the \u003cstrong\u003eCompare \u0026amp; pull request\u003c/strong\u003e button.\u003c/p\u003e\n\n\u003cp\u003eThis branch contains the work you've done so far. If you ever want to go back to\na previous solution, go to your repository on GitHub and switch to the \u003ccode\u003efis-wip\u003c/code\u003e\nbranch.\u003c/p\u003e\n\n\u003ch2\u003eTypes of Assignments\u003c/h2\u003e\n\n\u003cp\u003eFor most assignments, you will go through the process we just walked through. In\nour curriculum, these assignments are often referred to as \u003cstrong\u003elabs\u003c/strong\u003e — coding\nlessons that include tests. There are a few other types of assignments, though,\nthat require slightly different submission steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eCode-alongs:\u003c/strong\u003e These also require code, but will guide you through what\nneeds to be written. There are no tests to pass, but you will still need to go\nthrough forking, cloning, and running \u003ccode\u003elearn test\u003c/code\u003e. You should see a message\nstating that no tests were found, but if you check the assignment in Canvas,\nyou should see it is marked as \u003cstrong\u003eComplete\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003ePortfolio Projects:\u003c/strong\u003e For these assignments, you'll be building fully\nfunctional applications. Some guidelines and requirements will be provided,\nbut it will be up to you to design and create your own app. These will\neventually become the projects you showcase to potential employers! You will\nsubmit your projects in Canvas by submitting a link to your GitHub repo.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eBlog Submissions:\u003c/strong\u003e Blogs are a required part of our Software Engineering\ncourses. They help to develop your online presence and are a great way to\nreinforce the concepts you learn. You'll write your blog posts on a different\nplatform, but submit links to them in Canvas.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eSubmitting Projects and Blogs\u003c/h2\u003e\n\n\u003cp\u003eFor both portfolio projects and blog posts, you'll need to manually submit a\nlink to your work on Canvas. While viewing the assignment, you should see a\n\u003cstrong\u003eSubmit Assignment\u003c/strong\u003e button in the upper-right section of the page.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/submit-assignment-canvas.png\" alt=\"submit assignment button\"\u003e\u003c/p\u003e\n\n\u003cp\u003eClicking this button will bring you to the bottom of the page where you can\nsubmit a URL link to your work.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/canvas-welcome/submit-assignment-canvas-form.png\" alt=\"submit assignment form\"\u003e\u003c/p\u003e\n\n\u003cp\u003eUpon submission you should see confetti appear, indicating that your submission\nhas been accepted.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It is possible to submit lab and code-along assignments manually\nthis way. However, the assignment will only be marked as \u003cstrong\u003eSubmitted\u003c/strong\u003e, not\n\u003cstrong\u003eComplete\u003c/strong\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations! You've completed your first assignment using the \u003ccode\u003elearn-co\u003c/code\u003e\ngem! You now know how to work on and submit assignments going forward:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eClick the \u003cstrong\u003eFork\u003c/strong\u003e button on the Canvas assignment\u003c/li\u003e\n\u003cli\u003eOnce the assignment is forked, clone it down to your local machine\u003c/li\u003e\n\u003cli\u003eComplete any required work, then run \u003ccode\u003elearn test\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eWhen all tests pass, the assignment will be submitted to Canvas and marked as\n\u003cstrong\u003eComplete\u003c/strong\u003e\n\u003c/li\u003e\n\u003cli\u003eYour work will also be pushed to GitHub and will be available on the \u003ccode\u003efis-wip\u003c/code\u003e\nbranch\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEquipped with this knowledge, you are now ready to tackle greater challenges!\u003c/p\u003e",
            "exportId": "g5ff7d5760c88af65e785893eeee32111"
          },
          {
            "id": 432782,
            "title": "Survey - CLI",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the CLI module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "gf4b8c026b1d004597b234c5a1ec18429"
          }
        ]
      },
      {
        "id": 44858,
        "name": "Programming as Conversation Part 1: Expressions",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g757b868a05844e442fb3bda2f8f011f5",
        "items": [
          {
            "id": 432786,
            "title": "Introduction to Programming as Conversation",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-intro\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWelcome! In this module, we’re going to start learning how to program in\nJavaScript.\u003c/p\u003e\n\n\u003cp\u003eIt will be a long process and you will have moments of elation, excitement and,\nsometimes, frustration. But we \u003cem\u003epromise\u003c/em\u003e you, learning to think in the\ndisciplined way that programming teaches will change your life for the better.\u003c/p\u003e\n\n\u003ch2\u003eProgramming as Conversation\u003c/h2\u003e\n\n\u003cp\u003eOur method for teaching programming starts from a different place than you might\nexpect. If you've ever looked at a programming tutorial or book you might be\nexpecting lectures on how to convert decimal numbers to binary numbers, data\ntypes, variables, or something like that. We've designed our curriculum to \u003cem\u003enot\u003c/em\u003e\ndo that.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_50_SadHead.png\" alt=\"Confused by code being front-loaded\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe think there's a different, and better, way: we start instead by thinking\ndeeply about having \u003cem\u003econversations\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_51_HappyHead.png\" alt=\"Conversations are a natural model for thinking about programming\"\u003e\u003c/p\u003e\n\n\u003cp\u003eMany of the ideas we’ll share in this module ask you to reflect on \"when you\nlearned to talk\" or \"when you’re talking with a friend.\" We call this\n\"programming as conversation\" and it gets you to think about \u003cem\u003ecommunicating\u003c/em\u003e\ninstead of \"memorizing strange programmer words, facts, and symbols.\" You'll\nlearn those strange words and symbols eventually, of course, but you'll see them\nas part of the act of communication, something you find natural right now.\u003c/p\u003e\n\n\u003ch2\u003eProgramming is About Communication\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_53_TwoHeads_Evaluation.png\" alt=\"Turning Gears in Communication. Indicating that programming is about communicating your ideas through code.\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAt its heart, programming is about communicating strategies for solving\nproblems. You:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDocument these strategies for yourself\u003c/li\u003e\n\u003cli\u003eCommunicate these documented strategies to others\u003c/li\u003e\n\u003cli\u003eAnd then, lastly, ask a computer to run these strategies \u003cem\u003every fast\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA \"program\" then is actually a strategy for solving a problem that people use to\ncommunicate with one another \u003cem\u003eas well as\u003c/em\u003e give to a machine.\u003c/p\u003e\n\n\u003cp\u003eA recipe for a fancy dish is a good comparison: you \u003cstrong\u003edocument\u003c/strong\u003e the ingredients\nand preparation for yourself using human language. You can then \u003cstrong\u003ecommunicate\u003c/strong\u003e\nthat plan for food preparation by sharing the recipe with a friend.\u003c/p\u003e\n\n\u003ch2\u003ePrograms are Written in Notation\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_82_GraphicNotationSystems.png\" alt=\"Notation Systems. Says graphic notations are used everywhere to including chemistry formulas, Music notes, road signs and Knitting symbols\"\u003e\u003c/p\u003e\n\n\u003cp\u003eEven in recipes, we commonly use special \u003cem\u003enotation\u003c/em\u003e like \u003ccode\u003e3g\u003c/code\u003e for \"3 grams\" or\n\u003ccode\u003e½C.\u003c/code\u003e for \"½ Imperial Cup.\" In recipes, we usually use \u003cem\u003enotation\u003c/em\u003e to save time\nso our wrists don't get tired. But with computers, we have to communicate using\nnotation. Human language is often vague and imprecise and computers are\n\u003cem\u003eterrible\u003c/em\u003e about handling unclear directions. To help prevent communication\nbreakdowns, we converse with them using a special notation. The \"special\nnotation\" is the programming language's rules or \"syntax.\"\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDEFINITION\u003c/strong\u003e Notation: A specialized vocabulary or system of symbols for\ncommunication. \u003cstrong\u003eExamples\u003c/strong\u003e Musical notation, arithmetic symbols, chemistry\nsymbols, traffic signs, or knitting patterns.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eProgramming Defined\u003c/h2\u003e\n\n\u003cp\u003eLet's propose a definition of programming:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDEFINITION\u003c/strong\u003e Programming: The act of creating programs, documents written in\na notation system that can be understood by other humans \u003cem\u003eas well as\u003c/em\u003e\ncomputers.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eProgramming Language Defined\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDEFINITION\u003c/strong\u003e Programming Language: A programming language defines the rules\nof notation (\"syntax\") that are required for it to ask the computer to do work\non your behalf.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhen programmers say \"I prefer Ruby to JavaScript\" they're saying \"I like the\nnotation system that Ruby uses for expressing problems and their solutions.\"\nIt's a lot like why some people like to play one instrument over another. In\nyour heart you might \u003cem\u003efeel\u003c/em\u003e like a bassoonist, tuba player, or pianist —\nbut all those instruments play a Middle-C note at the same frequency.\nProgramming languages are similar: while their notation varies, they all ask the\nchips inside the computer to do the same work at the end of the day.\u003c/p\u003e\n\n\u003cp\u003eAs such, a lot of the \"fashion parade\" of \"what's hot\" in the technical scene is\njust fashion. The really important thing to learn is: \"What kind of problems or\nsolutions does this language make easier to express?\"\u003c/p\u003e\n\n\u003ch2\u003eWe Converse With Computers\u003c/h2\u003e\n\n\u003cp\u003eOne of the most essential ways of communicating, that we've all practiced\nthousands of times, is a \u003cem\u003econversation\u003c/em\u003e.  \"Conversation\" comes from the Latin\nwords meaning \"by taking turns.\" In conversation, we \"take turns\" \u003cem\u003eexpressing\u003c/em\u003e\nourselves.\u003c/p\u003e\n\n\u003cp\u003eA unit of \"ideas\" is an \u003cem\u003eexpression\u003c/em\u003e. When a listener hears an \u003cem\u003eexpression\u003c/em\u003e they\ninterpret the words and symbols and sounds in the \u003cem\u003eexpression\u003c/em\u003e into a \u003cem\u003emeaning\u003c/em\u003e.\nWe call the work they're doing \u003cem\u003eevaluation\u003c/em\u003e. The result of \u003cem\u003eevaluation\u003c/em\u003e\nfor a human is \"understanding.\" Computers show their understanding by returning\nthe result of that evaluation. That value is called a \u003cem\u003ereturn\u003c/em\u003e value.\u003c/p\u003e\n\n\u003cp\u003eConsider this diagram:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/Image_52_TwoHeadsConversingSummary.png\" alt=\"Conversational Summary Graphic. Mentions the steps we use to converse. 1. Expressing a feeling (in this case \u0026quot;I'm hungry\u0026quot;). 2. The other person tries to evaluate the expression. 3. Then generate meaning from it (Understanding). 4. Analyze the expression to find a good solution (using logic). 5. Send back an appropriate expression resulting from the previous step.\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the next lessons, we're going to see how JavaScript acts as a \"listener\" in a\nconversation. When given an \u003cem\u003eexpression\u003c/em\u003e, JavaScript will \u003cem\u003eevaluate\u003c/em\u003e it and,\nlike a good friend, give you a reaction about \u003cem\u003ehow\u003c/em\u003e it evaluated your\nexpression. In the programming world, we call responses from the programming\nlanguage a \u003cem\u003ereturn value\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eWhen expressions are evaluated, they return something\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSometimes our expressions might not make sense to JavaScript, just like\nsometimes our conversations with friends don't \u003cem\u003equite\u003c/em\u003e make sense to them.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eWork, you stupid machine\u003c/code\u003e is not part of the valid notation of JavaScript.\nBelow, we've embedded a tool that can read JavaScript. To see what happens when\nJavaScript tries to interpret \u003ccode\u003eWork, you stupid machine\u003c/code\u003e, you can simply type it\ninto the console window below and press enter. Give it a try.\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eHere we've broken the rules of the notation system. This is known as a \u003cem\u003esyntax\nerror\u003c/em\u003e. Computers require us to honor \u003cem\u003etheir\u003c/em\u003e \u003cstrong\u003e\u003cem\u003elimited\u003c/em\u003e\u003c/strong\u003e vocabulary. Syntax\nerrors are prompts from the programming language to help steer \u003cem\u003eour\u003c/em\u003e\ncommunication to be more precise.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Take a look at the green \"run\" button at the top of the window. When\nyou're experimenting in the console window, you can use this button to \"reset\"\nthe console. This will both clear out any code in the window and cause JavaScript\nto \"forget\" what you've run, which can come in handy if you're getting an error.\u003c/p\u003e\n\n\u003cp\u003eWhen we follow the rules and adhere to the syntax, however, JavaScript will\nreturn something to us. This time, try typing \u003ccode\u003e1 + 1\u003c/code\u003e into the console window.\n(Don't forget to hit enter.) You should see the following:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-1-intro/return-value.png\" alt=\"Console showing return value from the expression 1 + 1 which is number 2\"\u003e\u003c/p\u003e\n\n\u003cp\u003eJavaScript has \u003cem\u003eevaluated\u003c/em\u003e the \u003cem\u003eexpression\u003c/em\u003e \u003ccode\u003e1 + 1\u003c/code\u003e and the result — the\nexpression's \u003cem\u003ereturn value\u003c/em\u003e — is returned on the next line.\u003c/p\u003e\n\n\u003cp\u003eSometimes, we might get something unexpected. Type in \u003ccode\u003e1 + \"Cookie Monster\"\u003c/code\u003e\n(including the quotes) and see what happens.\u003c/p\u003e\n\n\u003cp\u003eYou'll learn more about \u003cem\u003ewhy\u003c/em\u003e this happened later. The important thing to know\nnow is that, as long as we follow JavaScript's syntax rules, we'll get\n\u003cem\u003esomething\u003c/em\u003e in return.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: When you see an instruction to type something into the REPL, we\nsuggest you do exactly that rather than copy/pasting. Actually typing in the\ncode helps your brain learn!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations! You've finished your first lesson in thinking about programming\nas a conversation. As you might guess, \u003cem\u003eexpressions\u003c/em\u003e are important because\nthey're how we \"push\" ideas to computers and other programmers. We're going to\nspend the remainder of this module learning to build expressions and\nunderstanding how JavaScript will \u003cem\u003eevaluate\u003c/em\u003e them. Make sure you've integrated\nthe vocabulary words of \"expression,\" \"evaluation,\" and \"return value\" before\nmoving on.\u003c/p\u003e",
            "exportId": "introduction-to-programming-as-conversation"
          },
          {
            "id": 432788,
            "title": "Expressions in JavaScript",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-expressions-in-js\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-expressions-in-js\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-expressions-in-js/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine \"Expression\"\u003c/li\u003e\n\u003cli\u003eDefine \"Evaluation\"\u003c/li\u003e\n\u003cli\u003eExpression and Evaluation with JavaScript\u003c/li\u003e\n\u003cli\u003eIdentify the Parts of an Expression\u003c/li\u003e\n\u003cli\u003eIdentify Core Operators in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eConversations, we've seen, are the things that result when two individuals — be\nthey human or machine — communicate \u003cem\u003eexpressions\u003c/em\u003e to one another.\u003c/p\u003e\n\n\u003cp\u003eWe've been imprecise in defining \"expression\" while we were getting the hang of\nit. In this lesson, we'll propose formal definitions for \u003cem\u003eexpression\u003c/em\u003e and\n\u003cem\u003eevaluation\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003ePractice Practice Practice\u003c/h3\u003e\n\n\u003cp\u003ePreviously, we saw a tool that allowed us to have a conversation with\nJavaScript. This tool is known as a REPL, short for \u003ca href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\"\u003eRead Evaluate Print\nLoop\u003c/a\u003e. As we've seen, we can type in an expression in the console and the\nresponse, whatever is returned, will be printed below it. For example, if you\ntype \u003ccode\u003e10 + 10\u003c/code\u003e in the console below and press enter, you should see \u003ccode\u003e20\u003c/code\u003e appear\nunderneath.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eRemember you can hit the \"run\" button at the top of the window to reset\nthe console and clear out any old code you may have in there!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eWe strongly encourage you to experiment with this and other code examples as you\nwork through the curriculum. To this end, we recommend that you open \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit.com\u003c/a\u003e\nwhen you're working so you always have a REPL available. This will enable you to\nexperiment with code from the lessons and to try coming up with your own examples.\nThe more you code, the more you'll learn!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: if you go to \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit.com\u003c/a\u003e, you'll see that it opens with two windows\nrather than just one. The window on the left is the code window. You can\ndisregard it for now — we'll start using that in a later lesson. The window on\nthe right is the console window, which functions in the same way as the embedded\nREPL above.\u003c/p\u003e\n\n\u003ch2\u003eDefine \"Expression\"\u003c/h2\u003e\n\n\u003cp\u003eAn expression in a programming language is like a sentence in a spoken language.\u003c/p\u003e\n\n\u003cp\u003eSome sentences are simple: \"Hello, world.\" Some sentences are complex: \"Only by\nlearning to live in harmony with your contradictions can you keep it all\nafloat.\"\u003ca href=\"https://www.poetryfoundation.org/poets/audre-lorde\"\u003e-Audrey Lorde\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSome expressions are simple: \u003ccode\u003e2\u003c/code\u003e. Some expressions are complex \u003ccode\u003e1 + 2\u003c/code\u003e. Some\nexpressions are \u003cem\u003ereally\u003c/em\u003e complex: \u003ccode\u003e10 + (3 * ( (-1) ** 3) + 2) / 18\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDefinition\u003c/strong\u003e: Expression: A combination of information, called \u003cem\u003edata\u003c/em\u003e, and\n\u003cem\u003esymbols\u003c/em\u003e indicating how to combine \u003cem\u003edata\u003c/em\u003e, called \u003cem\u003eoperators\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eDefine \"Evaluation\"\u003c/h2\u003e\n\n\u003cp\u003e\u003cem\u003eEvaluation\u003c/em\u003e is the process of interpreting an expression, according to rules,\nto produce a return value.\u003c/p\u003e\n\n\u003ch2\u003eExpression and Evaluation with JavaScript\u003c/h2\u003e\n\n\u003cp\u003eThese definitions should align with your experience of having a conversation\nwith REPLs so far. Think about \u003ccode\u003e255 / 5\u003c/code\u003e. Which parts of the expression are\n\u003cem\u003edata\u003c/em\u003e? Which parts are \u003cem\u003eoperators\u003c/em\u003e?\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ePro-tip\u003c/strong\u003e: Think it through yourself. Which is a given thing (\u003cem\u003edata\u003c/em\u003e) and\nwhich parts tell you how to combine things (\u003cem\u003eoperators\u003c/em\u003e)? When reading\ntechnical documents you can't simply read the answers, you \u003cstrong\u003e\u003cem\u003ehave to think\nalong\u003c/em\u003e\u003c/strong\u003e in order to learn. Active participation tells your brain that this\nstuff is important!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eIdentify the Parts of an Expression\u003c/h2\u003e\n\n\u003cp\u003eThe \u003cem\u003edata\u003c/em\u003e are: \u003ccode\u003e255\u003c/code\u003e and \u003ccode\u003e5\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003eoperator\u003c/em\u003e: is \u003ccode\u003e/\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this example, there is only one operator. It's certainly possible for\nexpressions to have multiple operators like \u003ccode\u003e100 + 10 - 3\u003c/code\u003e. In this example, the\n\u003cem\u003eoperators\u003c/em\u003e are \u003ccode\u003e+\u003c/code\u003e and \u003ccode\u003e-\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Core Operators in JavaScript\u003c/h2\u003e\n\n\u003cp\u003eHere's a table of other operators and their operations. While some of the\nsymbols used are different from their mathematical counterparts, the operations\nwork in the familiar way.\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eOperator\u003c/th\u003e\n\u003cth\u003eOperation\u003c/th\u003e\n\u003cth\u003eNote\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eAddition\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSubtraction\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eMultiplication\u003c/td\u003e\n\u003ctd\u003eWe use \u003ccode\u003e*\u003c/code\u003e instead of \u003ccode\u003e×\u003c/code\u003e because it looks like x-the-letter\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e/\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eDivision\u003c/td\u003e\n\u003ctd\u003eWe use \u003ccode\u003e/\u003c/code\u003e instead of \u003ccode\u003e÷\u003c/code\u003e because that's not on a keyboard\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e**\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eExponentiation\u003c/td\u003e\n\u003ctd\u003eWe use \u003ccode\u003e**\u003c/code\u003e instead of \u003ccode\u003e^\u003c/code\u003e because \u003ccode\u003e^\u003c/code\u003e means something else in programming languages\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e()\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eAssociation\u003c/td\u003e\n\u003ctd\u003eExpressions inside of \u003ccode\u003e()\u003c/code\u003e get evaluated earlier\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn the next few lessons, we're going to introduce the \u003cstrong\u003eEssential Three\nExpressions\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/expressions-in-javascript/essential-3-expressions.jpg\" alt=\"Three Essential Expression\"\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe constant expression\u003c/li\u003e\n\u003cli\u003eThe assignment expression (variable assignment)\u003c/li\u003e\n\u003cli\u003eThe variable lookup expression\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eAll expressions, which are the core of every programming language, are built\non these Essential Three Expressions.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions\"\u003eExpressions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\"\u003eRead-evaluate-print loop\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "expressions-in-javascript"
          },
          {
            "id": 432790,
            "title": "The Constant Expression",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-constant-expression\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-constant-expression\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-constant-expression/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the \u003cem\u003econstant expression\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eExplain how the \u003cem\u003econstant expression\u003c/em\u003e stops evaluation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLets repeat our definition of \u003cem\u003eexpression\u003c/em\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDefinition\u003c/strong\u003e: Expression: A combination of information, called \u003cem\u003edata\u003c/em\u003e, and\n\u003cem\u003esymbols\u003c/em\u003e indicating how to combine \u003cem\u003edata\u003c/em\u003e, called \u003cem\u003eoperators\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhat if we were to make an expression that had no \u003cem\u003eoperators\u003c/em\u003e? What if it only\nhad \u003cem\u003edata\u003c/em\u003e. For example, what if we just pass \u003ccode\u003e9000\u003c/code\u003e into a REPL:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder\u003c/strong\u003e: Click the \"run\" button to clear any old or unwanted code in\nyour code sandbox and reset the console!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn response, we get \u003ccode\u003e9000\u003c/code\u003e. This type of expression is known as the \u003cem\u003econstant\nexpression\u003c/em\u003e and it's very important, although very boring.\u003c/p\u003e\n\n\u003cp\u003eIt's boring because it doesn't \u003cem\u003edo\u003c/em\u003e anything except be itself. But it's\nimportant because it confirms that JavaScript knows when to stop applying\noperations. It tells JavaScript to \u003cem\u003estop\u003c/em\u003e, you have an answer.\u003c/p\u003e\n\n\u003ch3\u003eExplain How the \u003cem\u003eConstant Expression\u003c/em\u003e Stops Evaluation\u003c/h3\u003e\n\n\u003cp\u003eLet's consider a simple arithmetic expression. Keep in mind we apply operators\nin \"\u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003ePEMDAS\u003c/a\u003e\" order: parenthesis, exponents, multiplication, division,\naddition, subtraction.\u003c/p\u003e\n\n\u003cp\u003eWe'll start with the expression:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step0.png\" alt=\"Math Expression: Step 0. 3*(10-4)\"\u003e\u003c/p\u003e\n\n\u003cp\u003eJavaScript's mission is to find a constant piece of data or a \u003cem\u003econstant\nexpression\u003c/em\u003e. Because of \u003ccode\u003e()\u003c/code\u003e, it goes there first. The \u003ccode\u003e(10 - 4)\u003c/code\u003e is clearly\n\u003cstrong\u003enot\u003c/strong\u003e a constant expression because of the \u003ccode\u003e-\u003c/code\u003e operator's presence. JavaScript\nmakes a \"tree\" of the two sides of the operator (\u003ccode\u003e-\u003c/code\u003e) and then looks on each\nside to see whether those sides are \u003cem\u003econstant expressions\u003c/em\u003e i.e. \"plain old\ndata.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step1.5.png\" alt=\"Math Expression: Step 1. The expression is divided into two parts subtraction and multiplication. The subtraction is evaluated first because of the parenthesis that surround it. Please refer to Resources section at the end of this page for the order of operations.\"\u003e\u003c/p\u003e\n\n\u003cp\u003eSince both \u003ccode\u003e4\u003c/code\u003e and \u003ccode\u003e10\u003c/code\u003e are plain old data, it can apply \u003ccode\u003e-\u003c/code\u003e to them and produce\n\u003ccode\u003e6\u003c/code\u003e — a \u003cem\u003econstant expression\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo what JavaScript now sees looks like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step4.png\" alt=\"Math Expression: Step 2. 3 * 6\"\u003e\u003c/p\u003e\n\n\u003cp\u003eHere again, JavaScript checks both sides of the operator \u003ccode\u003e*\u003c/code\u003e and, because both\nsides are now \u003cem\u003econstant expressions\u003c/em\u003e, applies the \u003ccode\u003e*\u003c/code\u003e to \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e6\u003c/code\u003e and creates\na new \u003cem\u003econstant expression\u003c/em\u003e, the answer (or \"return value\"):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-constant-expression/Image_54_Step5.png\" alt=\"Math Expression: Step 3. number 18\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhew! Fortunately, JavaScript does \u003cem\u003eall this work\u003c/em\u003e of building a tree of\noperators and returning a value very quickly!\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003econstant expression\u003c/em\u003e is \u003cem\u003ealways\u003c/em\u003e the last expression in a complex\nexpression. It's how JavaScript knows it has \u003cem\u003edata\u003c/em\u003e that it can work with and\nthat no other operations need to be applied.\u003c/p\u003e\n\n\u003ch2\u003eTable Explanation\u003c/h2\u003e\n\n\u003cp\u003eAnother way of looking at this process might be to look at a table. We'll repeat\nall the same things we just showed graphically, but if a table makes more sense\nfor you, then you'll like this one better!\u003c/p\u003e\n\n\u003cp\u003eThis is an important strategy when learning to program: if you like thinking in\ncode, try out the code; if you prefer diagrams, draw a diagram; if tables make\nmore sense to you, build a table. An important part of learning to be a\ntechnologist is learning to build the tools that will help you learn.\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eExpression\u003c/th\u003e\n\u003cth\u003eHas Operators?\u003c/th\u003e\n\u003cth\u003eOperators\u003c/th\u003e\n\u003cth\u003eAre we done?\u003c/th\u003e\n\u003cth\u003eNext Step\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e3*(10-4)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e()\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eZoom in on new sub-expression in \u003ccode\u003e()\u003c/code\u003e because of PEMDAS\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(10-4)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eEvaluate sub-expressions\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e10\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eNONE\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eZoom in on expression \u003ccode\u003e10\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e4\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eNONE\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eZoom in on expression \u003ccode\u003e4\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e(10-4)\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eReplace \u003ccode\u003e( 10 - 4 )\u003c/code\u003e with application of \u003ccode\u003e-\u003c/code\u003e to \u003ccode\u003e10\u003c/code\u003e and \u003ccode\u003e4\u003c/code\u003e making \u003ccode\u003e6\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e3*6\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eZoom out and replace the sub-expression with its value we just determined\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e3\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eNONE\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eZoom in on expression \u003ccode\u003e3\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e6\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eNONE\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eZoom in on expression \u003ccode\u003e6\u003c/code\u003e. Constant expression! Return the value of the constant, we're done!\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e3*6\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eApply \u003ccode\u003e*\u003c/code\u003e to \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e6\u003c/code\u003e making \u003ccode\u003e18\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e18\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eNO\u003c/td\u003e\n\u003ctd\u003eNONE\u003c/td\u003e\n\u003ctd\u003eYES\u003c/td\u003e\n\u003ctd\u003eConstant expression! Return the value of the constant, we're done!\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWhile the \u003cem\u003econstant expression\u003c/em\u003e might seem dull, it lets us (and JavaScript)\nknow when expression evaluation is done \u003cem\u003eand\u003c/em\u003e establishes a groundwork for all\nthe following expressions. The first rule of Aristotle's logic is \u003ccode\u003eA is A\u003c/code\u003e; the\nconstant expression provides a similar \"foundation\" for programming.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.mathsisfun.com/operation-order-pemdas.html\"\u003eOrder of Operations: PEMDAS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "the-constant-expression"
          },
          {
            "id": 432793,
            "title": "The Assignment Expression",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-assignment-expression\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-assignment-expression\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-assignment-expression/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the \u003cem\u003eAssignment Expression\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eDefine Mutability / Immutability\u003c/li\u003e\n\u003cli\u003eLearn what the Return Value of an \u003cem\u003eAssignment Expression\u003c/em\u003e is\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo you've seen the first of our \u003cstrong\u003eessential three expressions\u003c/strong\u003e, the \u003cem\u003econstant\nexpression\u003c/em\u003e, which gives JavaScript some constant facts about the world: \u003ccode\u003e2\u003c/code\u003e is\n\u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e is \u003ccode\u003e3\u003c/code\u003e, etc...\u003c/p\u003e\n\n\u003cp\u003eIt's really useful to associate an \u003cem\u003eexpression's evaluated result\u003c/em\u003e with a\n'name'. We call those names that we associate with the \u003cem\u003eexpression's\u003c/em\u003e result,\n\u003cem\u003evariable names\u003c/em\u003e or, commonly, just \u003cem\u003evariables\u003c/em\u003e. The process of bonding an\nexpression to a variable is called \u003cem\u003eassigning a variable\u003c/em\u003e. Programmers also say\nthat \"the variable name 'points to' the expression that was assigned to it.\"\u003c/p\u003e\n\n\u003cp\u003eA helpful metaphor here is that it's like adding a new entry to a dictionary:\n\u003ccode\u003eaFunNumber\u003c/code\u003e's definition is \u003ccode\u003e3 * (10 - 4)\u003c/code\u003e or \u003ccode\u003emyBirthYear\u003c/code\u003e's is \u003ccode\u003e1989\u003c/code\u003e. Or you\ncan think about a variable name as a label you put on a box. Using this\nmetaphor, the box labeled \u003ccode\u003eaFunNumber\u003c/code\u003e contains the value \u003ccode\u003e3 * (10 - 4)\u003c/code\u003e, and\nthe box labeled \u003ccode\u003emyBirthYear\u003c/code\u003e contains the value \u003ccode\u003e1989\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe create the association between a variable name and a value by using the\nsecond of our \u003cstrong\u003eessential three expressions\u003c/strong\u003e: the \u003cem\u003eassignment expression\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDefine the \u003cem\u003eAssignment Expression\u003c/em\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn JavaScript, the assignment expression is like so:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/assigning-a-variable.jpg\" alt=\"Assignment Expression Graphic. Variable name followed by an assignment operator followed by an expression. In this example the variable name is heightInCentimeters followed by an equal sign as the assignment operator followed by an expression like 180 or 160+2\"\u003e\u003c/p\u003e\n\n\u003cp\u003eHere are some examples:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eaFunNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003emyBirthYear\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1989\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eVariable names are most often descriptions of what their assigned expressions\n\u003cem\u003emean\u003c/em\u003e. In JavaScript, when a variable name is made of multiple words, every\nword after the first is capitalized. This is referred to as \u003cem\u003ecamelCase\u003c/em\u003e and\nalthough it isn't strictly required, it is a common convention in JavaScript.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: In JavaScript, it's \u003cem\u003eoptional\u003c/em\u003e to include a semi-colon at the end of\neach line. You may encounter JavaScript expressions written both ways.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhile you \u003cem\u003ecan include\u003c/em\u003e numbers and some symbols in variable names, let's keep\nthings simple for the moment and just use camelCased letters.\u003c/p\u003e\n\n\u003cp\u003eConsider the following expression:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emaximumSpeed\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRun this alone in a REPL, and we get an error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eReferenceError: maximumSpeed is not defined\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere, JavaScript, by default, doesn't know anything about \u003ccode\u003emaximumSpeed\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen we define a variable using the \"assignment expression\" we add something new\nto JavaScript.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emaximumSpeed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's try this out in the REPL:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eNotice that by using the assignment expression, \u003ccode\u003emaximumSpeed = 9000\u003c/code\u003e, our code\nevaluates to \u003ccode\u003e9000\u003c/code\u003e when run. Once \u003ccode\u003emaximumSpeed\u003c/code\u003e is defined, JavaScript will\nknow what it is. Now try putting just \u003ccode\u003emaximumSpeed\u003c/code\u003e in and hitting enter and\nyou'll see that JavaScript remembered its value! (We'll look at this more\nclosely in the next lesson.)\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eSUPER-IMPORTANT\u003c/em\u003e\u003c/strong\u003e: In the assignment expression \u003ccode\u003e=\u003c/code\u003e means \"assignment\". It\ndoes not mean \"what's on the left of the \u003ccode\u003e=\u003c/code\u003e is equal to what's on the right.\"\nIn math courses, we use \u003ccode\u003e=\u003c/code\u003e to say that the expressions on either side of the\n\u003ccode\u003e=\u003c/code\u003e are the same. JavaScript uses \u003ccode\u003e==\u003c/code\u003e and \u003ccode\u003e===\u003c/code\u003e for that purpose. It's very\ncommon — and very confusing — for beginners to have bugs where they confuse\n\u003ccode\u003e=\u003c/code\u003e for \u003ccode\u003e==\u003c/code\u003e or \u003ccode\u003e===\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eDefine Mutability / Immutability\u003c/h2\u003e\n\n\u003cp\u003eA variable is said to be \"mutable.\" That means the value that the name \"points\nto\" can be changed during the running of the program. Being able to change the\nvalue a variable points to is very important. For example, if we need to do\nsomething 10 times, we need a variable to keep track of how many times the thing\nhappens. That variable will need to change: its value will need to increase by 1\neach time. Here's \u003cem\u003emutability\u003c/em\u003e in action:\u003c/p\u003e\n\n\u003cp\u003eMany years ago my height in centimeters was 50cm; go ahead and add the following\nline into the REPL's console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eheightInCentimeters\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e50\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eBut today my height is 180cm. Let's now put the following code into the console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eheightInCentimeters\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e180\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow that we have assigned \u003ccode\u003eheightInCentimeters\u003c/code\u003e to two different values, what do\nyou think the console will return if we just type \u003ccode\u003eheightInCentimeters\u003c/code\u003e and hit\nenter? Let's try it out!\u003c/p\u003e\n\n\u003cp\u003eIf you guessed we would see a return value of \u003ccode\u003e180\u003c/code\u003e, you were right! The last\nvalue assigned to the variable is what is saved.\u003c/p\u003e\n\n\u003cp\u003eSometimes, we might want to make a variable's value permanent. We might want to\nsay \"hey, this value should not change.\" We want to say that the value is\n\u003cem\u003eimmutable\u003c/em\u003e, the opposite of \u003cem\u003emutable\u003c/em\u003e. We do this by writing a \u003cstrong\u003econstant\u003c/strong\u003e\n(not the same as the constant expression we discussed previously). We'll go into\nmore detail on constants in the next part of this course.\u003c/p\u003e\n\n\u003ch2\u003eReturn Value of an \u003cem\u003eAssignment Expression\u003c/em\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe return value of an \u003cem\u003eassignment expression\u003c/em\u003e is the evaluated result of the\nexpression to the right of the \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003erecurringExpressionValue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 18\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePay attention here: the return value of the assignment expression \u003cstrong\u003e\u003cem\u003eIS NOT THE\nSAME THING\u003c/em\u003e\u003c/strong\u003e as getting the value out of the variable name. We'll learn to get\nthe value \"back out of a variable\" in the next lesson. What JavaScript is saying\nis that the assignment expression's return value is the value of the expression\nto the right of the \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The line underneath \u003ccode\u003erecurringExpressionValue\u003c/code\u003e indicates what this\nexpression evaluates to; in this case, it's the number \u003ccode\u003e18\u003c/code\u003e. Any line that\nstarts with \u003ccode\u003e//\u003c/code\u003e in JavaScript is a \"comment\": it's code that is ignored by\nthe JavaScript engine, but can be used to indicate something to other\ndevelopers looking at your code.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThink about a baby who has never spoken before. The parent stands in front of\nit saying their name over and over (...and over) again.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/Image_55_Mama-Baby_1.png\" alt=\"Learning to talk 1. A mom trying to teach a baby to assign their face to the variable name \u0026quot;Mama\u0026quot; or \u0026quot;Dada\u0026quot;.\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThey wave towards their bodies and say their names again and again. What the\nparent is trying to do is teach the baby to assign their face to the variable\nname \"Mama\" or \"Dada.\" But to the baby, this means nothing.\u003c/p\u003e\n\n\u003cp\u003eWhile neither the baby or the (average) adult is aware of it, they're trying to\nteach the baby the second of the \u003cem\u003ethree essential expressions\u003c/em\u003e: the assignment\nexpression. Then, one magical day, it clicks for the baby. It performs an\nassignment in its precious little head:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-assignment-expression/Image_55_Mama-Baby_2.png\" alt=\"Learning to talk 2. The Mom is still sad; she doesn't know if the baby has assigned the word \u0026quot;mama\u0026quot;: to the correct person.\"\u003e\u003c/p\u003e\n\n\u003cp\u003eUnfortunately, Mom is still sad; she doesn't have any \u003cem\u003eproof\u003c/em\u003e that the\nassignment was successful. For that to work, the baby will need to prove that it\ncan \"look up\" the variable assignment of who \"ma-ma\" points to. The baby will\nneed to learn the last of our \u003cem\u003eessential expressions\u003c/em\u003e: the variable lookup\nexpression!\u003c/p\u003e",
            "exportId": "the-assignment-expression"
          },
          {
            "id": 432795,
            "title": "The Variable Lookup Expression",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-the-variable-lookup-expression\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-variable-lookup-expression\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-the-variable-lookup-expression/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the Variable Lookup Expression\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThe final of our \u003cem\u003eessential three\u003c/em\u003e expressions is the variable lookup\nexpression. Like the \u003cem\u003econstant expression\u003c/em\u003e, it is boring yet profound. Once\nwe've assigned a value to a \u003cem\u003evariable name\u003c/em\u003e using the \u003cem\u003eassignment expression\u003c/em\u003e,\nwe can use the \u003cem\u003evariable lookup expression\u003c/em\u003e to retrieve that value. Using our\nmetaphors from the previous lesson, it looks up the variable's definition in the\ndictionary, or \"shakes out\" the value that was put in the labeled box.\u003c/p\u003e\n\n\u003ch2\u003eDefine the Variable Lookup Expression\u003c/h2\u003e\n\n\u003cp\u003eTo look up the value in a variable we simply type the variable's name in.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Assignment expression that returns 32\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Type in the assigned name\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn return, we get \u003ccode\u003e32\u003c/code\u003e. Try this out on your own in the below REPL console.\nRemember, the more you try things out, the more it will start to make sense!\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eThat's it. The values we associate with the assignment expression can be\nretrieved by simply typing the variable's name.\u003c/p\u003e\n\n\u003ch2\u003eVariable Lookup as Conversation\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we talked about a parent and a baby. A parent repeats\ntheir name hundreds of times to get the baby to assign their face to the\nvariable \u003ccode\u003ema-ma\u003c/code\u003e. When the baby first sees that face again and says \"\u003ccode\u003ema-ma\u003c/code\u003e!\"\nthe parent has successfully taught the child \"variable lookup.\" Although there\nare no pages in baby journals for \"Baby's First Variable Lookup.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-variable-lookup-expression/Image_55_Mama-Baby_4.png\" alt=\"Successful Lookup. The mom is happy, because when the baby first sees that face again and says \u0026quot;ma-ma!\u0026quot; the parent has successfully taught the child \u0026quot;variable lookup\u0026quot;.\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you think about it, most of childhood education until early elementary school\nis giving them thousands of assignment expressions so they can participate in\nthe world: \"Red,\" \"one,\" \"eleven,\" \"far.\"\u003c/p\u003e\n\n\u003cp\u003eConsider this scenario. Look for the \u003cem\u003eessential three\u003c/em\u003e expressions in here.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eParent: See the doggie? That's a doggie.\nChild: Doggie?\nParent: That's right, that's a doggie. Doggies say \"Woof-woof!\"\nChild: Doggie?\nParent: Right. Doggie.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eSome time later\u003c/em\u003e...\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eChild: Doggie!\nParent: That's right. Doggie!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's compare teaching a baby a four-legged animal's name and teaching JavaScript\nthat \u003ccode\u003ea\u003c/code\u003e is \u003ccode\u003e4\u003c/code\u003e.\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eExpression\u003c/th\u003e\n\u003cth\u003eReal-Life Conversation\u003c/th\u003e\n\u003cth\u003eJavaScript Conversation\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eConstant Expression\u003c/td\u003e\n\u003ctd\u003eParent points to the doggie\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e4\u003c/code\u003e (evaluates to \u003ccode\u003e4\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eAssignment Expression\u003c/td\u003e\n\u003ctd\u003eParent teaches child that \"Doggie\" = \u003cimg alt=\"Puppy picture\" src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-variable-lookup-expression/small_puppy.JPG\"\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ea = 4\u003c/code\u003e (evaluates to \u003ccode\u003e4\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eVariable Lookup\u003c/td\u003e\n\u003ctd\u003eChild sees the dog and says \"Doggie!\"\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003ea\u003c/code\u003e (evaluates to \u003ccode\u003e4\u003c/code\u003e)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNow that the \u003cem\u003eessential three\u003c/em\u003e expressions are under your control, we're going\nto start rapidly building up the richness of things you can do using\nexpressions. Whole programming languages are built around executing through\nevaluating expressions! Languages that work this way are called \"functional\nlanguages\" and they are some of the first programming languages ever created.\u003c/p\u003e",
            "exportId": "the-variable-lookup-expression"
          },
          {
            "id": 432797,
            "title": "JavaScript Variables",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-variables\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-variables/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine what a variable is\u003c/li\u003e\n\u003cli\u003eVariable names in JavaScript\u003c/li\u003e\n\u003cli\u003eInitializing variables in JavaScript\u003c/li\u003e\n\u003cli\u003eRetrieving and changing the value of variables\u003c/li\u003e\n\u003cli\u003eIdentify when to use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for declaring variables\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn an earlier lesson, we talked about using the \u003cem\u003eassignment expression\u003c/em\u003e to save\ninformation into a variable. \"Saving\" to a variable allows us to \u003cem\u003estore\u003c/em\u003e a\nresult so we can use it again later. Storing calculations to \u003cem\u003etemporary storage\nplaces\u003c/em\u003e is the heart of making efficient programs. It's a simple idea that has\npowerful consequences.\u003c/p\u003e\n\n\u003ch2\u003eWhat is a Variable?\u003c/h2\u003e\n\n\u003cp\u003eA variable is a container in which we can store values for later retrieval.\u003c/p\u003e\n\n\u003cp\u003eImagine a box that can hold any type of data: a number, a string, etc. We take\nsome data that we want to store, place it inside the box, and hand the box off\nto the JavaScript engine, which stores it in memory. All done! Our data is\nsafely cached until we need to access it again.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://user-images.githubusercontent.com/17556281/28639657-fea1930a-7216-11e7-8c38-45bc9fab96a7.gif\" alt=\"Raiders of the Lost Ark warehouse. View of a person pushing a package into a big warehouse.\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBut wait! When we ask for the data back, how will the JavaScript engine know\n\u003cem\u003ewhich\u003c/em\u003e box to retrieve? We need to assign a name to our variable —\u0026nbsp;a\nlabel for our box — so that we can use the \u003cem\u003evariable lookup expression\u003c/em\u003e to\ntell the engine exactly which piece of stored data we want to access.\u003c/p\u003e\n\n\u003ch2\u003eVariable Names in JavaScript\u003c/h2\u003e\n\n\u003cp\u003eVariable names in JavaScript can sometimes be complicated, but if you follow\nthese three rules you'll be fine:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eStart every variable name with a lowercase letter. Variable names starting\nwith a number are not valid.\u003c/li\u003e\n\u003cli\u003eDon't use spaces. If a variable name consists of multiple words,\n\u003ccode\u003ecamelCaseYourVariableNames\u003c/code\u003e (see the camel humps?) instead of\n\u003ccode\u003esnake_casing_them\u003c/code\u003e (think of the underscore as a snake that swallowed the\nwords).\u003c/li\u003e\n\u003cli\u003eDon't use JavaScript \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Reserved_keywords_as_of_ECMAScript_2015\"\u003ereserved words\u003c/a\u003e or \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Future_reserved_keywords\"\u003efuture reserved\nwords\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIt's important to note that case matters, so \u003ccode\u003ejavaScript\u003c/code\u003e, \u003ccode\u003ejavascript\u003c/code\u003e,\n\u003ccode\u003eJavaScript\u003c/code\u003e, and \u003ccode\u003eJAVASCRIPT\u003c/code\u003e are four different variables.\u003c/p\u003e\n\n\u003ch2\u003eInitializing Variables in JavaScript\u003c/h2\u003e\n\n\u003cp\u003eInitializing variables in JavaScript is really a two-step process: first, we\n\u003cem\u003edeclare\u003c/em\u003e the variable, then we \u003cem\u003eassign a value\u003c/em\u003e to it.\u003c/p\u003e\n\n\u003cp\u003eTo declare the variable, we use either the \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e reserved word. (And,\nin fact, there's a third option as well: \u003ccode\u003evar\u003c/code\u003e. We'll talk about when to use\neach a bit later in this lesson. For now, just know that when you see \u003ccode\u003econst\u003c/code\u003e,\n\u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003evar\u003c/code\u003e, those are reserved words that are used to declare a variable.)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe JavaScript engine sets aside a chunk of memory to store the declared\nvariable. Then, we assign a value to that variable using the \u003cem\u003eassignment\nexpression\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14159\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 3.14159\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can make our code a bit more efficient by packaging both initialization steps\n—\u0026nbsp;declaration and assignment —\u0026nbsp;in a single line of code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14159\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou will encounter cases later on where it makes sense to declare a variable\nwithout immediately assigning a value to it, but combining the two steps will\nwork most of the time.\u003c/p\u003e\n\n\u003ch2\u003eRetrieving and Changing the Value of Variables\u003c/h2\u003e\n\n\u003cp\u003eSay we've declared a variable \u003ccode\u003epi\u003c/code\u003e and set its value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14159\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo retrieve the value of \u003ccode\u003epi\u003c/code\u003e, we use the \u003cem\u003evariable lookup expression\u003c/em\u003e, i.e., we\nsimply type in its name:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 3.14159\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we want to change (reassign) that value, we use the \u003cem\u003eassignment expression\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 3.14159\u003c/span\u003e\n\u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 3.14;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eIdentify When to Use \u003ccode\u003econst\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e for Declaring Variables\u003c/h2\u003e\n\n\u003cp\u003eIn the past, \u003ccode\u003evar\u003c/code\u003e was the only option available in JavaScript for declaring\nvariables. Then, in 2015, the language underwent a major revision that, among\nmany other changes, added two new options: \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Delving into the history of JavaScript and the many changes and\nimprovements that were made to it in 2015 is outside the scope of this lesson.\nHowever, as you're learning to code in JavaScript you may see references to\n\u003ccode\u003eECMAScript 2015\u003c/code\u003e, \u003ccode\u003eES2015\u003c/code\u003e, or \u003ccode\u003eES6\u003c/code\u003e. These terms are interchangeable and\nrefer to that major revision. (ECMAScript is the \"official\" name of\nJavaScript.) There are some resources listed at the end of this lesson if\nyou're interested in learning more about \u003ccode\u003eES2015\u003c/code\u003e and the history of\nJavaScript.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe addition of \u003ccode\u003econst\u003c/code\u003e and \u003ccode\u003elet\u003c/code\u003e was in response to significant problems that\nthe use of \u003ccode\u003evar\u003c/code\u003e can cause. In particular, it can create scope issues (which is\na whole other topic that you'll learn about later) that lead to unpredictable\nand difficult to diagnose bugs in your code. You will likely see \u003ccode\u003evar\u003c/code\u003e used a\nlot in legacy code and older StackOverflow posts, so it's important to be\nfamiliar with it. \u003cstrong\u003e\u003cem\u003eHowever, there is no good reason to use \u003ccode\u003evar\u003c/code\u003e to declare\nvariables in your own code, and good reasons not to\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003elet\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe main advantage of using \u003ccode\u003elet\u003c/code\u003e for declaring a variable is that, unlike\n\u003ccode\u003evar\u003c/code\u003e, it will throw an error if you try to declare the same variable a second\ntime:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14159\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ethe ratio between a circle's circumference and diameter\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; Uncaught SyntaxError: Identifier 'pi' has already been declared\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhy is this a good thing? Well, you can imagine how easy it could be, especially\nin a lengthy program, to accidentally reuse a variable name. Doing so can cause\nunpredictable behavior because the value associated with the variable in one\npart of the program may be changed by code in a different part of the program.\nThese types of problems can be very difficult to track down and debug. Using\n\u003ccode\u003elet\u003c/code\u003e to declare your variables will reduce the likelihood of introducing such\nerrors into your code.\u003c/p\u003e\n\n\u003cp\u003eWhile we can't \u003cem\u003eredeclare\u003c/em\u003e a variable that is declared using \u003ccode\u003elet\u003c/code\u003e, we can still\n\u003cem\u003ereassign\u003c/em\u003e its value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14159\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ethe ratio between a circle's circumference and diameter\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"the ratio between a circle's circumference and diameter\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003econst\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003econst\u003c/code\u003e reserved word should be your go-to option for declaring variables in\nJavaScript. When you declare a variable with \u003ccode\u003econst\u003c/code\u003e, not only can it not be\nredeclared but it also \u003cstrong\u003e\u003cem\u003ecannot be reassigned\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14159\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.71828\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; Uncaught TypeError: Assignment to constant variable.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen you (or another developer) sees that \u003ccode\u003epi\u003c/code\u003e has been declared with \u003ccode\u003econst\u003c/code\u003e,\nyou immediately know that the variable points to the same value every other time\nit's referenced in the program. For variables declared with \u003ccode\u003elet\u003c/code\u003e (or \u003ccode\u003evar\u003c/code\u003e),\nyou cannot be so sure and will have to keep track of how those variables change\nthroughout the program. The extra information provided by \u003ccode\u003econst\u003c/code\u003e is valuable,\nand it comes at no extra cost to you! Just use \u003ccode\u003econst\u003c/code\u003e whenever possible and\nreap the benefits.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: With \u003ccode\u003elet\u003c/code\u003e, it's possible to declare a variable without assigning a value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14159\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 3.14159\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, because \u003ccode\u003econst\u003c/code\u003e doesn't allow reassignment after the variable is\ninitialized, we \u003cstrong\u003emust\u003c/strong\u003e assign a value right away:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; Uncaught SyntaxError: Missing initializer in const declaration\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epi\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.14159\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\n\u003cp\u003eAs your JavaScript powers increase with experience, you'll develop a more\nnuanced understanding of what to use where. However, for now, this is a good\nrule of thumb:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003evar\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e never.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003elet\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e when you know the value of a variable will change. For\nexample, a \u003ccode\u003ecounter\u003c/code\u003e variable that starts at \u003ccode\u003e0\u003c/code\u003e and is subsequently\nincremented to \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e, and so on. In the lessons on looping and\niteration in JavaScript, \u003ccode\u003elet\u003c/code\u003e will have its moment in the spotlight.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003cem\u003eUse \u003ccode\u003econst\u003c/code\u003e...\u003c/em\u003e\u003c/strong\u003e for \u003cem\u003eevery\u003c/em\u003e other variable.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBest practice is to always declare variables with \u003ccode\u003econst\u003c/code\u003e and then, if you later\nrealize that the value has to change over the course of your program, circle\nback to change it to \u003ccode\u003elet\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe covered what a variable is, how to initialize and retrieve it, and how to\nassign or reassign its value. We also looked at best practices for naming\nvariables and for when to use \u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003econst\u003c/code\u003e, and \u003ccode\u003evar\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics#Variables\"\u003eMDN —\u0026nbsp;Language basics crash course: Variables\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"\u003eMDN —\u0026nbsp;\u003ccode\u003elet\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\"\u003eMDN —\u0026nbsp;\u003ccode\u003econst\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\"\u003eMDN —\u0026nbsp;\u003ccode\u003evar\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75\"\u003eJavaScript ES6+: \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003elet\u003c/code\u003e, or \u003ccode\u003econst\u003c/code\u003e?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/JavaScript#History\"\u003eW3C - A Short History of JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/ECMAScript#Versions\"\u003eWikipedia - ECMAScript: Versions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "javascript-variables"
          },
          {
            "id": 432799,
            "title": "JavaScript Data Types",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-js-data-types\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-js-data-types/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a data type\u003c/li\u003e\n\u003cli\u003eDemonstrate basic type checking with the \u003ccode\u003etypeof\u003c/code\u003e operator\u003c/li\u003e\n\u003cli\u003eIdentify JavaScript's seven basic data types\u003c/li\u003e\n\u003cli\u003eDescribe interactions between data of various types in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eDid you ever hear this song from educational TV?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eOne of these things is not like the others.\nOne of these things doesn't belong.\nCan you tell which thing is not like the other by the time\nI finish this song?\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat this song is asking the young viewer to engage in is a pretty powerful\nbehavior: \u003cem\u003eabstraction\u003c/em\u003e. It's looking at several \u003cem\u003econcrete\u003c/em\u003e examples and finding\nsome sort of \"ideal\" that the \u003cem\u003econcrete\u003c/em\u003e examples all have in common and using\nthat as a rule to find something that doesn't \u003cem\u003equite\u003c/em\u003e fit.\u003c/p\u003e\n\n\u003cp\u003eDoing this is one of the most profound problems in philosophy and human\ndevelopment. No less an authority than Aristotle wrote a \u003ca href=\"https://plato.stanford.edu/entries/aristotle-categories/\"\u003ewhole book\u003c/a\u003e on it\nand how humans do it (one of the essential reasons why he \u003ca href=\"https://www.diffen.com/difference/Aristotle_vs_Plato\"\u003ediffers\u003c/a\u003e from his\nteacher, Plato).\u003c/p\u003e\n\n\u003cp\u003eWho knew JavaScript would lead us to ancient Greece as well as \"Sesame Street?\"\u003c/p\u003e\n\n\u003cp\u003eIn JavaScript, \u003cem\u003econcrete\u003c/em\u003e instances of data can be categorized into \u003cem\u003eabstract\u003c/em\u003e\nnames called \"data types\" or, more simply, \"types.\"\u003c/p\u003e\n\n\u003ch2\u003eWhat Is a Data Type?\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eEverything in JavaScript is data\u003c/em\u003e\u003c/strong\u003e except:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eOperators\u003c/strong\u003e: \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e!\u003c/code\u003e, \u003ccode\u003e\u0026lt;=\u003c/code\u003e, etc.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReserved words\u003c/strong\u003e: \u003ccode\u003efunction\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003edebugger\u003c/code\u003e, etc.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eEvery piece of data falls into one of JavaScript's seven data types: numbers,\nstrings, booleans, symbols, objects, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eBasic Type Checking Using the \u003ccode\u003etypeof\u003c/code\u003e Operator\u003c/h2\u003e\n\n\u003cp\u003eThroughout this lesson, we'll use the \u003ccode\u003etypeof\u003c/code\u003e operator to give us an idea of\nwhat data types we're dealing with. \u003ccode\u003etypeof\u003c/code\u003e accepts one argument, the piece of\ndata that we'd like to know the \u003cem\u003etype of\u003c/em\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e \u003ccode\u003etypeof\u003c/code\u003e is an operator, just like \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e!\u003c/code\u003e. We get used to\noperators being only one character, but JavaScript (and many other languages)\nhave operators with \u003cstrong\u003e\u003cem\u003emore than one\u003c/em\u003e\u003c/strong\u003e character. Because it's an operator,\n\u003cstrong\u003ewe don't need parentheses with \u003ccode\u003etypeof\u003c/code\u003e\u003c/strong\u003e. That said, JavaScript also\nsupports \u003ccode\u003e()\u003c/code\u003e after \u003ccode\u003etypeof\u003c/code\u003e, but it's commonly not done.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eIdentify JavaScript's Seven Basic Data Types\u003c/h2\u003e\n\n\u003ch3\u003eNumbers\u003c/h3\u003e\n\n\u003cp\u003eSome programming languages divide numbers up into integers, decimals, doubles,\nfloats, and so on. They do this so that they can have higher \u003cem\u003eprecision\u003c/em\u003e in\ntheir calculations. In a banking application or airplane wing engineering\napplication we want our interest rate or the curve of the wing to be \u003cstrong\u003e\u003cem\u003eas\naccurate as possible\u003c/em\u003e\u003c/strong\u003e. For good reason: we want to make sure we get paid or\nhave a safe plane! When JavaScript was created, this level of precision was not\nthought to be a thing that would be needed, so JavaScript only has a single,\nall-encompassing number type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"number\"\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.141592653589793\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"number\"\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e324\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"number\"\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"kc\"\u003eInfinity\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"number\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eThink About This:\u003c/strong\u003e As JavaScript has become a language for the back end as\nwell as the front end, its imprecision around numbers keeps it from entering\nmany banking or engineering applications where precision is vital.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eStrings\u003c/h3\u003e\n\n\u003cp\u003eStrings are how we represent text in JavaScript. A string consists of a matching\npair of \u003ccode\u003e'single quotes'\u003c/code\u003e, \u003ccode\u003e\"double quotes\"\u003c/code\u003e, or \u003ccode\u003e`backticks`\u003c/code\u003e with zero or\nmore characters in between:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eI am a string.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"string\"\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eMe too!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"string\"\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"s2\"\u003e`Me three!`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"string\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEven empty strings are strings:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"string\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eBooleans\u003c/h3\u003e\n\n\u003cp\u003eA boolean can only be one of two possible values: \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Booleans\nplay a big role in \u003ccode\u003eif\u003c/code\u003e statements and looping in JavaScript.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"boolean\"\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"boolean\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eObjects\u003c/h3\u003e\n\n\u003cp\u003eA JavaScript object, unlike the types we've looked at so far, is a \u003cem\u003ecollection\u003c/em\u003e\nof data rather than a single value. An object consists of a list of properties,\nwrapped in curly braces \u003ccode\u003e{}\u003c/code\u003e and separated by commas. Each property in the list\nconsists of a name — also known as a \u003ccode\u003ekey\u003c/code\u003e — which points to a value:\n\u003ccode\u003e\"name\": \"JavaScript\"\u003c/code\u003e. The example below has four properties, with the names\n(or \u003ccode\u003ekey\u003c/code\u003es) \"name\", \"createdBy\", \"firstReleased\", and \"isAwesome\":\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ejs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJavaScript\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecreatedBy\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBrendan\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eEich\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efirstReleased\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1995\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eisAwesome\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"object\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA dictionary is a good metaphor here: an object is a collection of terms (the\nnames or keys) and their definitions (the values). In fact, the programming\nlanguage Python has a similar data type which is called a dictionary.\u003c/p\u003e\n\n\u003cp\u003eNote that objects' properties can point to values of any data type. In the\nexample above, the properties have values of four different types: a string, a\nnumber, a boolean, and another object!\u003c/p\u003e\n\n\u003ch3\u003eArrays\u003c/h3\u003e\n\n\u003cp\u003eTechnically, Arrays are not a data type in JavaScript — they are instead a\nspecial case of the object data type. However, because they are used quite\nfrequently in JavaScript code, we are including them here.\u003c/p\u003e\n\n\u003cp\u003eAn array is just a list of values enclosed in square brackets: \u003ccode\u003e[\"Byron\",\n\"Cubby\", \"Boo Radley\", \"Luca\"]\u003c/code\u003e. As with objects, the values can be of any data\ntype.\u003c/p\u003e\n\n\u003cp\u003eIf we check the data type of our array, we can confirm that arrays are really\nobjects in JavaScript:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edogs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eByron\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCubby\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBoo Radley\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eLuca\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003edogs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"object\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis may seem strange at first, but will make more sense as we learn more about\nobjects and arrays in future lessons.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003enull\u003c/code\u003e data type represents an intentionally absent object. For example, if\na piece of code returns an object when it successfully executes, we could have\nit return \u003ccode\u003enull\u003c/code\u003e in the event of an error. Confusingly, the \u003ccode\u003etypeof\u003c/code\u003e operator\nreturns \u003ccode\u003e\"object\"\u003c/code\u003e when called with \u003ccode\u003enull\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"object\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe bane of many JS developers, \u003ccode\u003eundefined\u003c/code\u003e is a bit of a misnomer. Instead of\n'not defined,' it actually means something more like 'not yet assigned a value.'\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"kc\"\u003eundefined\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"undefined\"\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eunassignedVariable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003eunassignedVariable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"undefined\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eunassignedVariable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003eunassignedVariable\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"string\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAny variable declared but not defined will be \u003ccode\u003eundefined\u003c/code\u003e until a value is assigned.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eTop Tip\u003c/em\u003e\u003c/strong\u003e: When writing JavaScript code, it's good practice to \u003cstrong\u003e\u003cem\u003enever\u003c/em\u003e\u003c/strong\u003e\nset a variable equal to \u003ccode\u003eundefined\u003c/code\u003e. Variables will be \u003ccode\u003eundefined\u003c/code\u003e until we\nexplicitly assign a value, so encountering an \u003ccode\u003eundefined\u003c/code\u003e variable is a strong\nsignal that the variable was declared but not assigned prior to the reference.\nThat's valuable information that we can use while debugging, and it comes at\nno additional cost to us.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eSymbols\u003c/h3\u003e\n\n\u003cp\u003eSymbols are a relatively new data type (introduced in ES2015) that's primarily\nused as an alternative way to add properties to objects. Don't worry about\nsymbols for now.\u003c/p\u003e\n\n\u003ch3\u003ePrimitive Types\u003c/h3\u003e\n\n\u003cp\u003eSix of the seven JavaScript data types — everything except object — are\n\u003cstrong\u003eprimitive\u003c/strong\u003e. All this means is that they represent \u003cem\u003esingle\u003c/em\u003e values, such as\n\u003ccode\u003e7\u003c/code\u003e or \u003ccode\u003e\"hello\"\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, instead of a collection of values.\u003c/p\u003e\n\n\u003ch2\u003eHow Different JavaScript Data Types Interact\u003c/h2\u003e\n\n\u003cp\u003eEvery programming language has its own rules governing the ways in which we can\noperate on data of a given type. For example, it's rather uncontroversial that\nnumbers can be subtracted from other numbers...\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e...and that strings can be added to other strings:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s2\"\u003e`world!`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Hello, world!\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut what happens if you mix them?\u003c/p\u003e\n\n\u003cp\u003eSome programming languages, such as Python, are strict about how data of\ndifferent types can interact, and they will refuse to compile a program that\nblends types. Well, that's rather strict.\u003c/p\u003e\n\n\u003cp\u003eOther languages, such as Ruby, will attempt to handle the interaction by\nconverting one of the data types so all data is of the same type. For example,\ninstead of throwing an error when an integer (\u003ccode\u003e3\u003c/code\u003e) is added to a floating-point\nnumber (\u003ccode\u003e0.14159\u003c/code\u003e), Ruby will simply convert the integer into a floating-point\nnumber and correctly calculate the sum:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.14159\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e#=\u0026gt; 3.14159\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRuby throws errors when some stranger cases come up:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"s2\"\u003e\"THX-\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1138\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e#=\u0026gt; TypeError: no implicit conversion of Fixnum into String\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat seems pretty reasonable: Ruby won't make the \u003ccode\u003eInteger\u003c/code\u003e, \u003ccode\u003e1138\u003c/code\u003e, into a\n\u003ccode\u003eString\u003c/code\u003e without being directly told that you want it to be a \u003ccode\u003eString\u003c/code\u003e (same as\nPython's rule).\u003c/p\u003e\n\n\u003cp\u003eThat seems like a good baseline. JavaScript, on the other hand, is a little\n\u003cem\u003etoo\u003c/em\u003e nice when handling conflicting data types. \u003cstrong\u003eNo matter what weird\ncombination of types you give it, JavaScript won't throw an error and will\nreturn \u003cem\u003esomething\u003c/em\u003e (though that \u003cem\u003esomething\u003c/em\u003e might make no sense at all).\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSometimes it makes \u003cem\u003esome\u003c/em\u003e sense:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHigh \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"High 5!\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e...and sometimes it's downright \u003ca href=\"https://www.destroyallsoftware.com/talks/wat\"\u003ecomical\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// null to the power of 2\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 0\u003c/span\u003e\n\n\u003cspan class=\"kc\"\u003eundefined\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// undefined to the power of null\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 1\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"p\"\u003e{};\u003c/span\u003e \u003cspan class=\"c1\"\u003e// empty object plus empty object\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"[object Object][object Object]\" \u0026lt;-- That's a string!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhy JavaScript returns a string when we ask it to add two empty objects is\nanyone's guess, but its heart is in the right place. The language always tries\nto bend over backwards for us, returning actionable data instead of throwing\nerrors. However, JavaScript's eagerness occasionally results in data type issues\nthat surprise novice and expert programmers alike.\u003c/p\u003e\n\n\u003cp\u003eTry to follow along with what's happening here:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 15\u003c/span\u003e\n\n\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e1\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"12345\"\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e2\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"12345\"\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e3\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"3345\"\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e4\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"645\"\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e5\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"105\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs long as we are only adding numbers to other numbers, JavaScript performs the\nexpected addition. However, as soon as we throw a string in the mix, we stop\nadding and start concatenating everything together into a string. Let's take a\nlook at an example to see how this works:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e3\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"3345\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFirst, we add the numbers \u003ccode\u003e1\u003c/code\u003eand \u003ccode\u003e2\u003c/code\u003e together to get \u003ccode\u003e3\u003c/code\u003e (a number). We then ask\nJavaScript to add \u003ccode\u003e3\u003c/code\u003e (a number) to \u003ccode\u003e\"3\"\u003c/code\u003e (a string). JavaScript can't perform\naddition with a string, so it decides to concatenate the two operands instead,\nresulting in \u003ccode\u003e\"33\"\u003c/code\u003e (a string). The next operation, \u003ccode\u003e\"33\" + 4\u003c/code\u003e, is also between\na string and a number, and JavaScript once again concatenates, giving us the\nresult of \u003ccode\u003e\"334\"\u003c/code\u003e (a string). In the final operation, we're adding \u003ccode\u003e\"334\"\u003c/code\u003e with\n\u003ccode\u003e5\u003c/code\u003e (a number). Again, JavaScript concatenates, giving the final result of\n\u003ccode\u003e\"3345\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou'll encounter a lot of these weird data type behaviors throughout your\nJavaScript programming, but fear not: they'll trip you up less and less often as\nyou gain experience.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson we've learned about data types, which are abstractions used to\ncategorize pieces of information, or data. JavaScript defines seven different\ntypes: numbers, strings, booleans, symbols, objects, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\"\u003eMDN — JavaScript data types and data structures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.destroyallsoftware.com/compendium/types?share_key=baf6b67369843fa2\"\u003eDestroy All Software — Types\u003c/a\u003e – A cross-language examination of type in various languages\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.destroyallsoftware.com/talks/wat\"\u003eDestroy All Software — Wat\u003c/a\u003e – A beloved \u003cstrong\u003e\u003cem\u003eand hilarious\u003c/em\u003e\u003c/strong\u003e talk in which JavaScript's friendliness when mixing types is discussed at a feverish pace – with awesome slides\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "javascript-data-types"
          },
          {
            "id": 432801,
            "title": "Working With Strings",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-working-with-strings\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-working-with-strings\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-working-with-strings/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize how to declare a \u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eDefine \u003cem\u003einterpolation\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eExplain how different quote characters allow flexibility\u003c/li\u003e\n\u003cli\u003eJoin \u003ccode\u003eString\u003c/code\u003es using \u003ccode\u003e+\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThus far in programming as conversation, we've used numbers as data most of the\ntime. Numbers are great because they reach across languages and cultures. But\nthere are times when we need our programs to return information in the form of\ntext. In this lesson, we'll learn more about using text (i.e. \u003ccode\u003eString\u003c/code\u003es) in our\nJavaScript expressions.\u003c/p\u003e\n\n\u003ch2\u003eRecognize How to Declare a \u003ccode\u003eString\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWe declare \u003ccode\u003eString\u003c/code\u003es most often by enclosing our text in double quotes:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, folks\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe letters inside of a \u003ccode\u003eString\u003c/code\u003e are often called \"characters.\"\u003c/p\u003e\n\n\u003cp\u003eThe pair of matching \u003ccode\u003e\"\u003c/code\u003es are called \"\u003ccode\u003eString\u003c/code\u003e delimiters\" because they form a\nboundary or \u003cem\u003elimit\u003c/em\u003e around the characters that make up the \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe can also declare \u003ccode\u003eString\u003c/code\u003es by putting the characters in single quotes:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello, folks\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eor backticks:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`Hello, folks`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSingle quotes and double quotes can be used interchangeably in JavaScript — they\nare treated the same. Using backticks to enclose a string, however, brings some\nadditional capabilities. A string enclosed in backticks forms a\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003etemplate literal\u003c/a\u003e,\nwhich allows you to \u003cem\u003einterpolate\u003c/em\u003e data into the \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003cem\u003einterpolation\u003c/em\u003e\u003c/h2\u003e\n\n\u003cp\u003eString \u003cem\u003einterpolation\u003c/em\u003e is the process of injecting the value of an expression\n(often, but not necessarily, the \u003cem\u003evariable lookup expression\u003c/em\u003e) into a \u003ccode\u003eString\u003c/code\u003e.\nYou wrap the expression inside the \u003cem\u003einterpolation operator\u003c/em\u003e which lets\nJavaScript know that it should interpret the value of the expression, convert it\nto a \u003ccode\u003eString\u003c/code\u003e if necessary, and insert it into the containing \u003ccode\u003eString\u003c/code\u003e where the\n\u003cem\u003einterpolation operator\u003c/em\u003e appeared.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003einterpolation operator\u003c/em\u003e looks like this: \u003ccode\u003e${}\u003c/code\u003e. When it appears in a\nbacktick-delimited \u003ccode\u003eString\u003c/code\u003e, the return value of the expression inside the\noperator is \"plugged in\" to the containing \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn a single or double-quoted \u003ccode\u003eString\u003c/code\u003e there is no interpolation possible.\nJavaScript would not interpret the value inside the \u003ccode\u003e${}\u003c/code\u003e; instead, it would\ncreate a literal string containing the operator and whatever expression is\ninside it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ebarkCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ebacktick\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`Spinach barks \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ebarkCount\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e times`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinach barks 3 times\"\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esingleQuote\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eSpinach barks ${barkCount} times\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinach barks ${barkCount} times\"\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edoubleQuote\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach barks ${barkCount} times\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinach barks ${barkCount} times\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe expression inside the \u003ccode\u003e${}\u003c/code\u003e does not need to be a variable lookup. Any\nexpression, i.e., any statement that returns a value, can be used:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003espinach\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`Spinach is \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e years old`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinach is 5 years old\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere JavaScript knows to interpret the value inside the interpolation operator\nbecause the string is enclosed in backticks. It evaluates the expression\n(\u003ccode\u003e2 + 3\u003c/code\u003e yields the value \u003ccode\u003e5\u003c/code\u003e), turns the result into a string and inserts it in\nplace.\u003c/p\u003e\n\n\u003ch2\u003eExplain How Different Quote Characters Allow Flexibility\u003c/h2\u003e\n\n\u003cp\u003eWhat if you needed to store some \u003cem\u003edialog\u003c/em\u003e as a \u003ccode\u003eString\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003eIn the book it would look like:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\"Wait,\" said Jo, \"Do not go without me!\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIf we want to create a string containing this text, we might try wrapping the\nwhole thing in quotes, like this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\"\"Wait,\" said Jo, \"Do not go without me!\"\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eHowever, because \u003ccode\u003e\"\u003c/code\u003e is the \u003ccode\u003eString\u003c/code\u003e delimiter, JavaScript would get confused.\nIt would attempt to end the \u003ccode\u003eString\u003c/code\u003e right before the \u003ccode\u003eW\u003c/code\u003e as the two \u003ccode\u003e\"\u003c/code\u003es\n\"delimit\" the \u003ccode\u003eString\u003c/code\u003e. Not what we wanted.\u003c/p\u003e\n\n\u003cp\u003eTo fix this, we can use single quotes as our delimiter instead:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elittleWomanEsque\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e\"Wait,\" said Jo, \"Do not go without me!\"\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBecause the opening delimiter of the \u003ccode\u003eString\u003c/code\u003e was \u003ccode\u003e'\u003c/code\u003e, JavaScript will \"close\"\nthe \u003ccode\u003eString\u003c/code\u003e at the next \u003ccode\u003e'\u003c/code\u003e — at the very end. Inside of the single quotes, the\n\u003ccode\u003e\"\u003c/code\u003e loses its meaning of \"here's a \u003ccode\u003eString\u003c/code\u003e\" and, instead, is just a plain\nliteral, letter-like character \u003ccode\u003e\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut oh my goodness, what if the speaker said \u003ccode\u003eDon't\u003c/code\u003e instead of \u003ccode\u003eDo not\u003c/code\u003e. That\nwould break our \u003ccode\u003eString\u003c/code\u003e \u003cem\u003eagain\u003c/em\u003e as JavaScript attempted to use the \u003ccode\u003e'\u003c/code\u003e inside\n\u003ccode\u003eDon't\u003c/code\u003e as the closing delimiter.\u003c/p\u003e\n\n\u003cp\u003eSometimes we need to tell JavaScript, \"Don't use this \u003ccode\u003e'\u003c/code\u003e or \u003ccode\u003e\"\u003c/code\u003e as a \u003ccode\u003eString\u003c/code\u003e\ndelimiter. To do this we need \u003cem\u003eescaping\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe can \"escape\" the power of \u003ccode\u003e\"\u003c/code\u003e or \u003ccode\u003e'\u003c/code\u003e to close a \u003ccode\u003eString\u003c/code\u003e by putting a \u003ccode\u003e\\\u003c/code\u003e in\nfront of it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elittleWomanEsque\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e\"Wait,\" said Jo, \"Don\u003c/span\u003e\u003cspan class=\"se\"\u003e\\'\u003c/span\u003e\u003cspan class=\"s1\"\u003et go without me!\"\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWithout the backslash, JavaScript would interpret the apostrophe inside\n\u003ccode\u003e\"Don't\"\u003c/code\u003e as the end of the string, and we'd end up with a mess. \u003cstrong\u003e\u003cem\u003eBUT\u003c/em\u003e\u003c/strong\u003e since\nthere is a \u003ccode\u003e\\\u003c/code\u003e immediately before the second \u003ccode\u003e'\u003c/code\u003e (the apostrophe), thus\n\u003cem\u003eescaping\u003c/em\u003e it, JavaScript says \"Oh you mean to use this as a character, not as a\n\u003ccode\u003eString\u003c/code\u003e delimiter. I'll find the next unescaped \u003ccode\u003e'\u003c/code\u003e.\"\u003c/p\u003e\n\n\u003cp\u003eIt doesn't find an unescaped \u003ccode\u003e'\u003c/code\u003e until the very end, just like we want.\u003c/p\u003e\n\n\u003ch2\u003eJoin \u003ccode\u003eString\u003c/code\u003es using \u003ccode\u003e+\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWe already know that we can use \u003ccode\u003e+\u003c/code\u003e as an arithmetical operator to add two\n\u003ccode\u003eNumber\u003c/code\u003es together. But we can also use it as a \u003ccode\u003eString\u003c/code\u003e operator: when placed\nbetween two \u003ccode\u003eString\u003c/code\u003es, it joins them and returns a \u003cstrong\u003e\u003cem\u003enew\u003c/em\u003e\u003c/strong\u003e \u003ccode\u003eString\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou may want to follow along with the examples in\n\u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e. Remember to use the console\nwindow (the one on the right), and that, if you get an error, you can \"reset\"\nthe console by clicking the run button.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinachius\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eclanName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eKarbitus\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecommonName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMaris\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003efullName\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// With +\u003c/span\u003e\n\u003cspan class=\"nx\"\u003efullName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eclanName\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ecommonName\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinachius Karbitus Maris\"\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Or, with interpolation\u003c/span\u003e\n\u003cspan class=\"nx\"\u003efullName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eclanName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecommonName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinachius Karbitus Maris\"\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Keep in mind it returns a _new_ String; therefore:\u003c/span\u003e\n\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinachius\"\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eclanName\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Karbitus\"\u003c/span\u003e\n\u003cspan class=\"nx\"\u003ecommonName\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Maris\"\u003c/span\u003e\n\u003cspan class=\"nx\"\u003efullName\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinachius Karbitus Maris\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eA Warning About Mixing Data Types\u003c/h3\u003e\n\n\u003cp\u003eRecall from the lesson on data types that JavaScript, unlike some other\nprogramming languages, will bend over backwards to return a value instead of\nthrowing a type error. This means that the following will work in JavaScript:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efact\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach is \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// fact is of type `String`\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etail\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e years old\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// tail is of type `String`\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// age is of type `Number`\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003efact\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003etail\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinach is 5 years old\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we were to try this in Ruby or Python, we would get an error, but JavaScript\nreturns what it \u003cem\u003ethinks\u003c/em\u003e we meant to do. While in this case this seems pretty\nreasonable, there are times when JavaScript's behavior will yield unexpected\nresults. For this reason, best practice is \u003cstrong\u003enot\u003c/strong\u003e to depend on JavaScript to\nhandle mixed data types in this way. A better way to handle this situation is by\nusing interpolation instead:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efact\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach is\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etail\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eyears old\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efact\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003etail\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinach is 5 years old\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere, by using backticks and the interpolation operator, we are explicitly\ntelling JavaScript to \u003cem\u003einterpret\u003c/em\u003e the expression inside the \u003ccode\u003e${}\u003c/code\u003e, convert it to\na string (if necessary), and insert it into our String.\u003c/p\u003e\n\n\u003cp\u003eAnother alternative is to use JavaScript's \u003ccode\u003etoString()\u003c/code\u003e method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efact\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach is \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// fact is of type `String`\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etail\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e years old\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// tail is of type `String`\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// age is of type `Number`\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003efact\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003etail\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"Spinach is 5 years old\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eWhen to Use \u003ccode\u003e+\u003c/code\u003e vs. \u003ccode\u003e${}\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe choice of whether to use \u003ccode\u003e+\u003c/code\u003e or interpolation is, to a certain extent, a\nmatter of personal preference — you can accomplish what you need to using either\nmethod. That said, however, JavaScript programmers tend to use interpolation\nmore often than \u003ccode\u003e+\u003c/code\u003e. As you gain experience working with strings, you may find\nthat using interpolation results in cleaner code that's easier to read. As a\ngeneral rule, if the string you're constructing is simple and short, using \u003ccode\u003e+\u003c/code\u003e\nmay be cleaner but you may want to consider using interpolation with more\ncomplex strings.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we learned how to declare \u003ccode\u003eString\u003c/code\u003es, how to interpolate the\nvalue of expressions into \u003ccode\u003eString\u003c/code\u003es, how to use different quote delimiters and\nescaping to create more complicated \u003ccode\u003eString\u003c/code\u003es, and a couple different methods\nfor joining \u003ccode\u003eString\u003c/code\u003es.\u003c/p\u003e",
            "exportId": "working-with-strings"
          },
          {
            "id": 432802,
            "title": "Boolean Expressions",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-booleans\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-booleans/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain What a Boolean Expression Is\u003c/li\u003e\n\u003cli\u003eDescribe Truthy and Falsey Values in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eQuite commonly in our computer programs, we want to execute code\n\u003cem\u003econditionally\u003c/em\u003e, i.e., if some condition is true (or false). For example:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eIf\u003c/em\u003e the user has entered the correct login credentials, \u003cem\u003ethen\u003c/em\u003e log them into\nour web app\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eIf\u003c/em\u003e there isn't enough money in the user's account to execute the transfer,\n\u003cem\u003ethen\u003c/em\u003e send them an error message\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the following lessons, we will learn about operators we can use to construct\nthose conditional statements. Before we get to that, however, we need to\nunderstand \u003cem\u003eboolean expressions\u003c/em\u003e and the concepts of \u003cem\u003etruthy-ness\u003c/em\u003e and\n\u003cem\u003efalsey-ness\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eExplain What a Boolean Expression Is\u003c/h2\u003e\n\n\u003cp\u003eWe have learned that \u003cem\u003eexpressions\u003c/em\u003e are code statements that return a value: the\n\u003cem\u003econstant expression\u003c/em\u003e returns the value of the constant, the \u003cem\u003eassignment\nexpression\u003c/em\u003e returns the value that is assigned, and the \u003cem\u003evariable lookup\nexpression\u003c/em\u003e returns the value of a variable. We have also learned that\nJavaScript has a \u003ccode\u003eBoolean\u003c/code\u003e data type that has only two values: \u003ccode\u003etrue\u003c/code\u003e or\n\u003ccode\u003efalse\u003c/code\u003e. As you might expect, therefore, a \u003cem\u003eBoolean expression\u003c/em\u003e is an expression\nthat returns either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDescribe the Difference Between Truthy and Falsey Values\u003c/h2\u003e\n\n\u003cp\u003eAll values in Javascript, of any data type (\u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eNumber\u003c/code\u003e, etc.), are\ntreated as either \u003cem\u003etruthy\u003c/em\u003e or \u003cem\u003efalsey\u003c/em\u003e. The following values are \u003cstrong\u003efalsey\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enull\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eundefined\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNaN\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAn empty string (\u003ccode\u003e\"\"\u003c/code\u003e, \u003ccode\u003e''\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eEvery other value is truthy\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo check whether a value is truthy or falsey, we can pass it to the global\n\u003ccode\u003eBoolean\u003c/code\u003e object, which converts the value into its boolean equivalent. You may\nwant to try these out yourself in\n\u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003eundefined\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003eNaN\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eBoolean\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDon't worry if this seems a little theoretical at this point. We will learn how\nthis information is used in constructing Boolean expressions in the following\nlessons.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we've learned what a \u003cem\u003eBoolean expression\u003c/em\u003e is. We've also learned\nwhich values in JavaScript are considered \u003cem\u003etruthy\u003c/em\u003e and which are considered\n\u003cem\u003efalsey\u003c/em\u003e. With these understandings, we are now ready to learn how to construct\nBoolean expressions that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\"\u003eTruthy\u003c/a\u003e and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\"\u003efalsey\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "boolean-expressions"
          },
          {
            "id": 432803,
            "title": "Comparisons in JavaScript",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-comparisons-in-javascript\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-comparisons-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify equality operators\u003c/li\u003e\n\u003cli\u003eCompare numbers using relational operators\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow that we know what \u003cem\u003eBoolean expressions\u003c/em\u003e are we'll start learning how to\ncreate them. In this lesson we'll learn about comparison operators, which enable\nus to check to see if a value is what we're expecting. Follow along with the\nexamples below in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e JavaScript includes both \u003cem\u003estrict\u003c/em\u003e and \u003cem\u003eloose\u003c/em\u003e comparison operators.\nWhen writing JavaScript, you should strongly prefer the \u003cstrong\u003estrict\u003c/strong\u003e operators.\u003c/p\u003e\n\n\u003cp\u003eThe reason for this is the loose operators will return true even if the data\ntypes aren't the same, which can result in unexpected behavior and bugs that can\nbe difficult to track down. Even if you find you need to compare two values of\ndifferent data types, you should avoid using loose operators. You will be better\noff converting the data type of one of the variables so they have the same type,\nthen comparing them using a strict operator.\u003c/p\u003e\n\n\u003ch2\u003eIdentify equality operators\u003c/h2\u003e\n\n\u003cp\u003eJavaScript includes four equality operators:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003estrict equality operator\u003c/strong\u003e (\u003ccode\u003e===\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003estrict inequality operator\u003c/strong\u003e (\u003ccode\u003e!==\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eloose equality operator\u003c/strong\u003e (\u003ccode\u003e==\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eloose inequality operator\u003c/strong\u003e (\u003ccode\u003e!=\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese operators allow us to compare values and determine whether they are the\nsame.\u003c/p\u003e\n\n\u003ch3\u003eStrict Equality Operator \u003ccode\u003e===\u003c/code\u003e and Strict Inequality Operator \u003ccode\u003e!==\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003cstrong\u003estrict equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal \u003cem\u003ewithout\nperforming type conversions\u003c/em\u003e. Even if the values on both sides of the operator\nlook similar (e.g., \u003ccode\u003e'42' === 42\u003c/code\u003e), the \u003ccode\u003e===\u003c/code\u003e operator will only return \u003ccode\u003etrue\u003c/code\u003e\nif the data types also match:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e42\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e0\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"kc\"\u003enull\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"kc\"\u003eundefined\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is logical and accurate!\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003estrict inequality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are \u003cem\u003enot\u003c/em\u003e equal\n\u003cem\u003ewithout\u003c/em\u003e performing type conversions:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e9000\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e9001\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e9001\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e9001\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"dl\"\u003e''\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3\u003eLoose Equality Operator \u003ccode\u003e==\u003c/code\u003e and Loose Inequality Operator \u003ccode\u003e!=\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eloose equality operator\u003c/strong\u003e returns \u003ccode\u003etrue\u003c/code\u003e if two values are equal:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, it will \u003cem\u003ealso\u003c/em\u003e return \u003ccode\u003etrue\u003c/code\u003e if it can perform a type conversion (e.g.,\nchanging the string \u003ccode\u003e'42'\u003c/code\u003e into the number \u003ccode\u003e42\u003c/code\u003e) that makes the two values\nequal:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e42\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e42\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e0\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"kc\"\u003enull\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003eundefined\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003cstrong\u003eloose inequality operator\u003c/strong\u003e is the opposite of \u003ccode\u003e==\u003c/code\u003e. It returns \u003ccode\u003etrue\u003c/code\u003e if\ntwo values are \u003cem\u003enot\u003c/em\u003e equal, performing type conversions as necessary:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e9000\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9001\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e9001\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e9001\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"dl\"\u003e''\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is confusing and inaccurate! It makes no sense that the string \u003ccode\u003e'0'\u003c/code\u003e is\nequal to the boolean \u003ccode\u003efalse\u003c/code\u003e or that \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e — two \u003cstrong\u003ecompletely\ndifferent\u003c/strong\u003e data types — are equivalent.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eYou should prefer \u003ccode\u003e===\u003c/code\u003e and \u003ccode\u003e!==\u003c/code\u003e for comparisons\u003c/em\u003e\u003c/strong\u003e. There are \u003ca href=\"https://dorey.github.io/JavaScript-Equality-Table/\"\u003ea lot of\nrules\u003c/a\u003e that JavaScript follows when performing type coercion\nusing the \u003ccode\u003e==\u003c/code\u003e operator, and it's not worth keeping track of them all.\u003c/p\u003e\n\n\u003ch2\u003eCompare Numbers with Relational Operators\u003c/h2\u003e\n\n\u003cp\u003eJavaScript includes four relational operators:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003egreater than\u003c/strong\u003e (\u003ccode\u003e\u0026gt;\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003egreater than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026gt;=\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eless than\u003c/strong\u003e (\u003ccode\u003e\u0026lt;\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eless than or equals\u003c/strong\u003e (\u003ccode\u003e\u0026lt;=\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe behavior of these operators is consistent with the meaning of the\ncorresponding symbols in mathematics:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e88\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e88\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e88\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e88\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, beware of type conversion when comparing non-numbers against numbers.\nFor instance, when a string is compared with a number, the JavaScript engine\ntries to convert the string to a number:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e88\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e9\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf the engine can't convert the string into a number, the comparison will always\nreturn \u003ccode\u003efalse\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e88\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e88\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eStrings are compared with other strings lexicographically, meaning\ncharacter-by-character from left-to-right. The following returns \u003ccode\u003efalse\u003c/code\u003e because\nthe Unicode value of \u003ccode\u003e8\u003c/code\u003e, the first character in \u003ccode\u003e88\u003c/code\u003e, is less than the Unicode\nvalue of \u003ccode\u003e9\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e88\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e9\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you aren't sure what data type you are going to be receiving, but you still\nneed to compare them, make sure that you tell JavaScript to \u003ca href=\"https://gomakethings.com/converting-strings-to-numbers-with-vanilla-javascript/\"\u003econvert the string\nto a number\nfirst\u003c/a\u003e,\nand then compare.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Stick to comparing \u003cem\u003enumerical\u003c/em\u003e values with the relational\noperators and you'll be golden.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eJavaScript contains both equality and relational operators that we can use in\nwriting code to compare two values. The resulting statements are \u003cem\u003eBoolean\nexpressions\u003c/em\u003e — they always return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eMake sure you're using the strict equality operators whenever possible, and only\ncomparing numerical values using the relational operators, and you'll avoid\nannoying errors that can be time consuming to troubleshoot!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\"\u003eComparison operators\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\"\u003eEquality comparisons and sameness\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dorey.github.io/JavaScript-Equality-Table/\"\u003eJavaScript Equality Table\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://forum.freecodecamp.org/t/javascript-comparison-operators/14660\"\u003efreeCodeCamp Forum —\u0026nbsp;JavaScript Comparison Operators\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "comparisons-in-javascript"
          },
          {
            "id": 432804,
            "title": "Logical Operators",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-logical-operators\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-logical-operators/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how to use \u003ccode\u003e!\u003c/code\u003e to negate an expression\u003c/li\u003e\n\u003cli\u003eDescribe how to convert an expression to a Boolean using \u003ccode\u003e!!\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e\n\u003cli\u003eDescribe how to link conditions using the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators\u003c/li\u003e\n\u003cli\u003ePractice What We Learned\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we will continue to expand our tool set for creating Boolean\nexpressions by learning about logical operators. Using JavaScript's three\nlogical operators, NOT (\u003ccode\u003e!\u003c/code\u003e), AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e), and OR (\u003ccode\u003e||\u003c/code\u003e), we'll learn how to\nnegate and combine expressions. These operators, in combination with the\nequality and relational operators we learned earlier, will enable us to create\nmore complex and sophisticated Boolean expressions.\u003c/p\u003e\n\n\u003ch2\u003eDescribe How to Use \u003ccode\u003e!\u003c/code\u003e to Negate an Expression\u003c/h2\u003e\n\n\u003ch3\u003e\u003ccode\u003e!\u003c/code\u003e NOT\u003c/h3\u003e\n\n\u003cp\u003eIn an earlier lesson, we learned about truthy and falsey values in JavaScript.\nThe logical NOT operator (\u003ccode\u003e!\u003c/code\u003e), also called the \u003cem\u003ebang operator\u003c/em\u003e, operates on an\nexpression, returning the opposite of the expression's truthiness. If \u003ccode\u003ex\u003c/code\u003e\nresolves to a truthy value, \u003ccode\u003e!x\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e. If \u003ccode\u003ex\u003c/code\u003e is falsey, \u003ccode\u003e!x\u003c/code\u003e returns\n\u003ccode\u003etrue\u003c/code\u003e. Let's add the following code into our REPL and see what the values are.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etruthyValue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eThis value is truthy.\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efalseyValue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003etruthyValue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eVerify the above code works in the REPL console. You will see the bang operator\nin action, returning the reverse of \u003ccode\u003etruthyValue\u003c/code\u003e's truthiness. Be sure to\nverify that it works for \u003ccode\u003efalseyValue\u003c/code\u003e as well. Remember to click the run\nbutton to reset the console if you get an error or want to clear out the code.\u003c/p\u003e\n\n\u003ch2\u003eDescribe How to Convert an Expression to a Boolean Using \u003ccode\u003e!!\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn an earlier lesson, we passed values into the \u003ccode\u003eBoolean()\u003c/code\u003e \u003cem\u003econstructor\nfunction\u003c/em\u003e to check their truthiness. We'll learn all about constructor functions\nlater in the course; for now, just think of \u003ccode\u003eBoolean()\u003c/code\u003e as a function that takes\nin some input, \u003cem\u003econstructs\u003c/em\u003e a new Boolean from that input, and outputs the newly\nconstructed Boolean.\u003c/p\u003e\n\n\u003cp\u003eAs a shorter way to convert any value into a Boolean, we can use two NOT\noperators. Let's try running \u003ccode\u003e!!truthyValue\u003c/code\u003e in our console to see the difference.\u003c/p\u003e\n\n\u003cp\u003eThe JavaScript engine reads from left to right: it sees the first \u003ccode\u003e!\u003c/code\u003e and looks\nto the right to check what we're asking it to invert (\u003ccode\u003e!truthyValue\u003c/code\u003e). It then\nsees the second \u003ccode\u003e!\u003c/code\u003e and looks to the right \u003cem\u003eagain\u003c/em\u003e, this time finding our\n\u003ccode\u003etruthyValue\u003c/code\u003e variable. At this point, the engine resolves \u003ccode\u003etruthyValue\u003c/code\u003e to\n\u003ccode\u003e\"This value is truthy.\"\u003c/code\u003e, which (as it tells us) is truthy. It then executes\nthe inner \u003ccode\u003e!\u003c/code\u003e operator on it. \u003ccode\u003e!truthyValue\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e, so instead of\n\u003ccode\u003e!!truthyValue\u003c/code\u003e JavaScript is now evaluating \u003ccode\u003e!false\u003c/code\u003e. Executing the outer \u003ccode\u003e!\u003c/code\u003e\noperator on \u003ccode\u003efalse\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTry inverting various values in the REPL above to get a feel for the NOT\noperator. See what happens when you stack a ton of them: \u003ccode\u003e!!!!!!!!!truthyValue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOn to the next!\u003c/p\u003e\n\n\u003ch2\u003eDefine the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e Operators\u003c/h2\u003e\n\n\u003ch3\u003e\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (AND)\u003c/h3\u003e\n\n\u003cp\u003eThe logical AND (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e) operator takes two expressions:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eexpression1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003eexpression2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe return value of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator is always \u003cstrong\u003eone of the two expressions\u003c/strong\u003e.\nIf the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the first\nexpression. If the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns the value of the\nsecond expression.\u003c/p\u003e\n\n\u003cp\u003eAgain, if the first expression is falsey, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e returns that value and exits\n\u003cem\u003ewithout ever checking the second expression\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAnything\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 4 * 0 returns 0, which is falsey\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAnything\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf the first expression is truthy, \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e then returns whatever the second\nexpression evaluates to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; false\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWhatever\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Whatever\"\u003c/span\u003e\n\n\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe truthiest of truthy strings\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 81\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere are three different ways the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator can be evaluated:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eLeft side\u003c/th\u003e\n\u003cth\u003eRight side\u003c/th\u003e\n\u003cth\u003eReturn value\u003c/th\u003e\n\u003cth\u003eTruthiness of return value\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eFalsey\u003c/td\u003e\n\u003ctd\u003eDoesn't matter\u003c/td\u003e\n\u003ctd\u003eLeft side\u003c/td\u003e\n\u003ctd\u003eFalsey\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTruthy\u003c/td\u003e\n\u003ctd\u003eFalsey\u003c/td\u003e\n\u003ctd\u003eRight side\u003c/td\u003e\n\u003ctd\u003eFalsey\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTruthy\u003c/td\u003e\n\u003ctd\u003eTruthy\u003c/td\u003e\n\u003ctd\u003eRight side\u003c/td\u003e\n\u003ctd\u003eTruthy\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003col\u003e\n\u003cli\u003eIf the left-side expression is falsey, the right-side expression doesn't\nmatter at all. The \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the left side's falsey value and\nfinishes.\u003c/li\u003e\n\u003cli\u003eIf the left-side expression is truthy, the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operator returns the right\nside's value (whether it's truthy or falsey) and finishes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhat this means is that the return value of the expression will be truthy if the\nvalues on either side of the \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e are \u003cem\u003eboth\u003c/em\u003e truthy, and falsey otherwise.\u003c/p\u003e\n\n\u003cp\u003eIf you're feeling a little confused, that's ok. This is one of those concepts\nthat's a bit hard to understand unless you've played around with it in code. You\nwill have an opportunity to practice at the end of the lesson.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e||\u003c/code\u003e (OR)\u003c/h3\u003e\n\n\u003cp\u003eThe logical OR (\u003ccode\u003e||\u003c/code\u003e) operator also takes two expressions:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eexpression1\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nx\"\u003eexpression2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs with \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, the return value of the \u003ccode\u003e||\u003c/code\u003e operator is always \u003cstrong\u003eone of the two\nexpressions\u003c/strong\u003e. If the first expression is truthy, \u003ccode\u003e||\u003c/code\u003e returns the value of the\nfirst expression. If the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns the value of\nthe second expression.\u003c/p\u003e\n\n\u003cp\u003eIf the first expression is truthy, that value is immediately returned and the\nsecond expression is never evaluated:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWhatever\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWhatever\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf the first expression is falsey, \u003ccode\u003e||\u003c/code\u003e returns whatever the second expression\nevaluates to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWhatever\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Whatever\"\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 64\u003c/span\u003e\n\n\u003cspan class=\"dl\"\u003e\"\"\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNot \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ean \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eempty \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003estring\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Not an empty string\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere are three different ways the \u003ccode\u003e||\u003c/code\u003e operator can be evaluated:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eLeft side\u003c/th\u003e\n\u003cth\u003eRight side\u003c/th\u003e\n\u003cth\u003eReturn value\u003c/th\u003e\n\u003cth\u003eTruthiness of return value\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eTruthy\u003c/td\u003e\n\u003ctd\u003eDoesn't matter\u003c/td\u003e\n\u003ctd\u003eLeft side\u003c/td\u003e\n\u003ctd\u003eTruthy\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFalsey\u003c/td\u003e\n\u003ctd\u003eTruthy\u003c/td\u003e\n\u003ctd\u003eRight side\u003c/td\u003e\n\u003ctd\u003eTruthy\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eFalsey\u003c/td\u003e\n\u003ctd\u003eFalsey\u003c/td\u003e\n\u003ctd\u003eRight side\u003c/td\u003e\n\u003ctd\u003eFalsey\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003col\u003e\n\u003cli\u003eIf the left-side expression is truthy, the right-side expression doesn't\nmatter at all. The \u003ccode\u003e||\u003c/code\u003e operator returns the left side's truthy value and\ncompletes.\u003c/li\u003e\n\u003cli\u003eIf the left-side expression is falsey, the \u003ccode\u003e||\u003c/code\u003e operator returns the right\nside's value (regardless of whether it's truthy or falsey) and completes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhat this means is that the return value of the expression will be truthy if\n\u003cem\u003eone or both\u003c/em\u003e of the values on either side of the \u003ccode\u003e||\u003c/code\u003e are truthy, and falsey\notherwise.\u003c/p\u003e\n\n\u003ch2\u003ePracticing What We've Learned\u003c/h2\u003e\n\n\u003cp\u003eOkay, let's get some practice with logical operators. Take a look at the first\nun-commented out line in the snippet below: \u003ccode\u003e0 \u0026amp;\u0026amp; false;\u003c/code\u003e. What do you think the\nexpression will return? Think it through and come up with an answer, then copy \u0026amp;\npaste it into the REPL console and hit enter to check whether you're right. When\nyou're done with the first expression, work your way down through the remaining\nexpressions in turn. Be sure you think each example through and figure out your\nanswer before running the code.\u003c/p\u003e\n\n\u003cp\u003eIf you're having difficulty with the examples, try following this procedure:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eEvaluate each side of the operator individually: what is the \u003cem\u003ereturn value\u003c/em\u003e\nof each individual expression, and what is the \u003cem\u003etruthiness\u003c/em\u003e of each of those\nvalues?\u003c/li\u003e\n\u003cli\u003eFind the corresponding row in the appropriate table above and refer to the\n'Return value' column to determine the return value of the full expression.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFinally, once you're done with the provided expressions, experiment with some\nexamples of your own to cement your understanding.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e//What should each of the following expressions return? \u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//Once you have an answer, copy the expression in question into the console and hit enter to see if you're right!\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Practice with AND\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"kc\"\u003eNaN\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThis is a string\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Practice with OR\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn the last few lessons, we've been introduced to powerful tools for creating\nBoolean expressions: comparison operators (equality and relational) and logical\noperators. With these tools, we can construct very sophisticated expressions. A\nbit later in the course, we will learn how to use these expressions to execute\ncode conditionally, which will enable us to implement powerful logic in our\nprograms.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/\"\u003eMDN\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\"\u003eLogical operators\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals\"\u003eReview of conditionals, comparisons, and logical operators\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "logical-operators"
          },
          {
            "id": 432806,
            "title": "Programming with Expressions",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-1-programming-with-expressions\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-1-programming-with-expressions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the code window in replit to try out code\u003c/li\u003e\n\u003cli\u003eIdentify the Ternary Expression\u003c/li\u003e\n\u003cli\u003eWrite a program with conditional logic using expressions\u003c/li\u003e\n\u003cli\u003eRefactor code\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've traveled quite a road! You started, from a conversational perspective,\nmute and unable to interact, and now you can converse with JavaScript.\u003c/p\u003e\n\n\u003cp\u003eAs conversationalists with computers, we are now able to construct complex,\nsophisticated \u003cem\u003eexpressions\u003c/em\u003e. But so far our expressions have followed a single\ntrack: \u003cem\u003eevaluate\u003c/em\u003e this one single expression, or line of thought. It's like a\nworld of absolute certainty in every statement: \"My outfit today: rain boots\" or\n\"My outfit today: sun hat.\" In real life, however, we sometimes need to base our\ndecisions on a test of some sort. \"\u003cstrong\u003eIF\u003c/strong\u003e it's raining: rain boots...\n\u003cstrong\u003eOTHERWISE\u003c/strong\u003e: sun hat.\" This means that \u003cem\u003ecomplexity\u003c/em\u003e is entering our\nexpressions; we \u003cem\u003eneed\u003c/em\u003e that complexity so that we can express our\nproblem-solving strategies in code.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we will learn how to write an expression that expresses\n\"conditional thinking\" or \"if-then\" logic. It's called the \u003cstrong\u003eternary\nexpression\u003c/strong\u003e. It's an expression that takes a Boolean value or expression and\nreturns one of two values, depending on the truth-status of that first\nexpression. We will also learn how to write a program using conditional\nexpressions. Before we get to that, though, let's expand our \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e skills a\nbit.\u003c/p\u003e\n\n\u003ch2\u003eUsing the Code Window in replit\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've been using the console window in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e and ignoring the code\nwindow. Now we're going to learn how we can use the code window to make it\neasier to write, test, and experiment with code. Go ahead and open \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen you open it, you'll see a single line of code in the code window on the\nleft side:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you click the \"Run\" button, you will see the message \"Hello, world!\" written\nout in the console window on the right. You will learn more about using\n\u003ccode\u003econsole.log()\u003c/code\u003e a bit later in this section. For now, just know that\n\u003ccode\u003econsole.log()\u003c/code\u003e allows us to write code in the code window and print out results\nof that code to the console.\u003c/p\u003e\n\n\u003cp\u003eWhen you pressed \"Run\", the REPL \u003cem\u003eevaluated\u003c/em\u003e the expression inside the\nparentheses, and then printed that value out to the console. In this case, there\nis a constant expression inside the parentheses, so that value is what is\noutput. But we can put other types of expressions in the parentheses as well.\u003c/p\u003e\n\n\u003cp\u003eFor example, try entering the following into the code window, then press \"Run\".\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should see the value \u003ccode\u003e2\u003c/code\u003e written to the console.\u003c/p\u003e\n\n\u003cp\u003eWhat do you think will happen if you type the following into the code window and\nrun it?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs long as whatever is inside the parentheses \u003cem\u003eevaluates to a value\u003c/em\u003e — i.e., as\nlong as it's an expression — that value will be logged in the console.\u003c/p\u003e\n\n\u003cp\u003eSo now we know two different ways to check the value of an expression in the\nREPL: we can either wrap it in a \u003ccode\u003econsole.log()\u003c/code\u003e in the code window and press\n\"Run\", or we can enter it directly in the console window and hit enter.\u003c/p\u003e\n\n\u003cp\u003eNote that we could also combine the two approaches. Go ahead and enter this line\nof code into the code window and click \"Run\":\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edifference\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAlthough it doesn't appear that anything happens because nothing is printed to\nthe console, when we clicked \"Run\", JavaScript evaluated the arithmetic\nexpression and stored that value in the variable \u003ccode\u003edifference\u003c/code\u003e. Now type\n\u003ccode\u003edifference;\u003c/code\u003e in the \u003cem\u003econsole window\u003c/em\u003e and hit enter.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImportant\u003c/strong\u003e: the evaluation and assignment happen when you click \"Run\". If you\njust paste the code into the code window and then try to check the value of\n\u003ccode\u003edifference\u003c/code\u003e in the console, it won't work.\u003c/p\u003e\n\n\u003cp\u003eOften, it's inconvenient to type or copy/paste code into the console — if you're\nworking with a large block of code, for example, or if you want to be able to\nmake multiple changes. Putting code in the code window makes it easier to\ncorrect errors and try different things.\u003c/p\u003e\n\n\u003cp\u003eAs you work through the curriculum, we encourage you to use \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e to try\nout code samples from the lessons and to experiment with your own examples. Now\nthat you know how to use the code window, you have another tool at your\ndisposal.\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Ternary Expression\u003c/h2\u003e\n\n\u003cp\u003eThe ternary expression looks like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/programming-with-expressions/ternary.jpg\" alt=\"Ternary Graphic\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOr, in code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ebooleanExpression\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ethingToReturnIfTrue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ethingToReturnIfFalse\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf the expression in the first position evaluates to a truthy value, then the\nreturn value of the ternary expression is whatever is in the second position;\nhere, \u003ccode\u003e\"thingToReturnIfTrue\"\u003c/code\u003e. If the expression in the first position is\nfalsey, however, whatever is in the last position is returned; here,\n\u003ccode\u003e\"thingToReturnIfFalse\"\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's try an example. Go ahead and copy the code below into the \u003cem\u003ecode window\u003c/em\u003e of\nreplit. When you click the \"Run\" button, JavaScript will log the value of\n\u003ccode\u003eclothingChoice\u003c/code\u003e to the console.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elikelyToRain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eclothingChoice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003elikelyToRain\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003erain boots\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003esun hat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eclothingChoice\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe expression in the first position evaluates to \u003ccode\u003etrue\u003c/code\u003e, so the ternary\nexpression returns the value after the question mark, \"rain boots\". Try changing\nthe variable \u003ccode\u003elikelyToRain\u003c/code\u003e from \u003ccode\u003etrue\u003c/code\u003e to \u003ccode\u003efalse\u003c/code\u003e in the code window, then\npress \"Run\" again. The return value of our ternary expression should now be \u003ccode\u003esun\nhat\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe now have the ability to express conditional logic. You should try writing\nseveral ternary expressions yourself in the REPL to make sure you've gotten the\nhang of things.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: we will add \u003ccode\u003econsole.log()\u003c/code\u003es to the code samples in this lesson so\nyou just need to click \"Run\" to see the results. If you want to check the\nvalue of any other expressions or variables, you can either add more\n\u003ccode\u003econsole.log()\u003c/code\u003es to the code window or check the values directly in the\nconsole. Remember to click \"Run\"!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eLEARNING TIP\u003c/strong\u003e: Developers learn their craft by making slight experiments to\ngiven code: be sure you're adopting that habit now.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eMoving Beyond Boolean Values\u003c/h3\u003e\n\n\u003cp\u003eAbove we had a variable, \u003ccode\u003elikelyToRain\u003c/code\u003e, in which the literal Boolean value\n\u003ccode\u003etrue\u003c/code\u003e was stored and we used that as our Boolean expression in our ternary. But\nwe can, in fact, use \u003cem\u003eany\u003c/em\u003e Boolean expression, not just literal Boolean values.\nSpecifically, we can use the comparison operators and logical operators that we\nlearned about in the previous lessons to construct our expression.\u003c/p\u003e\n\n\u003cp\u003eLet's look at an example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eclothingChoice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.3\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003erain boots\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003esun hat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eclothingChoice\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere we see we can make a decision based on a \u003cem\u003ecomparison\u003c/em\u003e. \u003cem\u003eIf\u003c/em\u003e the chance of\nrain is greater than 30%, we know we should take our rain boots; \u003cem\u003eotherwise\u003c/em\u003e\nwe'll grab our sun hat. Try different values for \u003ccode\u003erainPercentage\u003c/code\u003e and see what\nhappens.\u003c/p\u003e\n\n\u003cp\u003eWith this understanding of ternary expressions, we are now ready to write a\nprogram using expressions.\u003c/p\u003e\n\n\u003ch2\u003eWrite a Program with Conditional Logic Using Expressions\u003c/h2\u003e\n\n\u003cp\u003eGuess what? We've already done this!\n\u003ca href=\"https://en.wikipedia.org/wiki/Computer_program\"\u003eAccording to Wikipedia\u003c/a\u003e, a\nprogram is \"a collection of instructions that can be executed by a computer to\nperform a specific task.\" The ternary (set of instructions) we looked at above\nis an \u003cem\u003eexpression\u003c/em\u003e that performs the task of \u003cem\u003eevaluating a condition\u003c/em\u003e and, based\non the results, \u003cem\u003ereturning a value\u003c/em\u003e. But of course we can expand on this, making\nour conditions more sophisticated and our return values more informative:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Input values: we could easily imagine asking a user for these values.\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eYour name here\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Create our message\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`Hello, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, with a rain chance of \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e% and a temperature of \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003eC we recommend that you `\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.3\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003etake an umbrella\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eenjoy this rain-free day\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e and watch out for heatstroke.\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e and bask in this fine weather.\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we have three variables and we're using them not only to construct ternary\nexpressions but also to output a more informative message. Try experimenting\nwith the values of the variables and see how it affects the return value.\u003c/p\u003e\n\n\u003cp\u003eAlthough this code works — JavaScript knows what we want it to do — that doesn't\nmake it good code. Recall that programming is \u003cem\u003econversation\u003c/em\u003e, not just with the\nJavaScript engine but \u003cem\u003ealso\u003c/em\u003e with other programmers or ourselves in the future.\nHow easy is it to read the line of code that defines our return value? How much\nwork does it take to figure out how it works? Writing good code means writing\ncode that not only works but is also as clean and readable as we can make it.\u003c/p\u003e\n\n\u003ch2\u003eRefactoring our Code\u003c/h2\u003e\n\n\u003cp\u003eWe have learned that, in assigning values to variables, we can use constant\nvalues:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach the Shiba\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr values evaluated from an expression:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can also include variables as part of the evaluated expression:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn fact, \u003cstrong\u003e\u003cem\u003eyou can assign virtually any \u003cem\u003eexpression\u003c/em\u003e as the value of a\nvariable\u003c/em\u003e\u003c/strong\u003e, including \u003cem\u003ecomparison\u003c/em\u003e expressions. So to start, let's use our new\n\u003ccode\u003erainPercentage\u003c/code\u003e variable and also create a couple of appropriately named\nvariables to store the conditions we're checking in our ternary statements. The\ncondition \u003ccode\u003eprobabilityOfRain \u0026gt; 0.3\u003c/code\u003e is basically checking whether it's likely to\nrain, while the condition \u003ccode\u003etemperatureInC \u0026gt;= 26\u003c/code\u003e is checking whether it's hot\nenough that we should stay out of the sun. Once we've created these variables,\nwe can then use them instead of including the math in the message, which will\nmake it a little easier to read:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach the Shiba\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elikelyToRain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esunIsDangerous\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`Hello, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, with a rain chance of \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e% and a temperature of \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003eC we recommend that you `\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elikelyToRain\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003etake an umbrella\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eenjoy this rain-free day\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003esunIsDangerous\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e and watch out for heatstroke!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e and bask in this fine weather.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is already a bit easier to read. We've:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003emoved the math and some of the logic out of our return value\u003c/li\u003e\n\u003cli\u003eused meaningful variable names that make it clearer how we're using our\nconditions and, by extension, what the ternary expressions are doing\u003c/li\u003e\n\u003cli\u003esplit out our message onto multiple lines to make it easier to follow the\nlogic.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBut we can do better.\u003c/p\u003e\n\n\u003cp\u003eWe mentioned above that we can assign virtually any expression as the value of a\nvariable; this includes \u003cem\u003eternary expressions\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eA ternary expression returns a value, just like any other expression; the value\nit returns is what is assigned to the variable. Here's an example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eadvice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eraining\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003etake an umbrella\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eenjoy this rain-free day\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe value assigned to \u003ccode\u003eadvice\u003c/code\u003e will be \"take an umbrella\" if \u003ccode\u003eraining\u003c/code\u003e is\n\u003ccode\u003etrue\u003c/code\u003e, and \"enjoy this rain-free day\" otherwise.\u003c/p\u003e\n\n\u003cp\u003eNote that we can write ternary expressions on one line, as we did above, or on\nmultiple lines:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erainAdvice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003elikelyToRain\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003etake an umbrella\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eenjoy this rain-free day\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's create variables to hold the results of our ternary expressions and use\nthose in our message as well:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach the Shiba\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elikelyToRain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esunIsDangerous\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erainAdvice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003elikelyToRain\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003etake an umbrella\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eenjoy this rain-free day\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esunAdvice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esunIsDangerous\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e and watch out for heatstroke\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e and bask in this fine weather\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`Hello, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, with a rain chance of \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e% and a temperature of \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003eC we recommend that you `\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003erainAdvice\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003esunAdvice\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMuch better! But there are still some improvements we can make. For one thing,\nit looks a little strange that we're using both interpolation and the \u003ccode\u003e+\u003c/code\u003e\noperator; let's fix that. And, while we're at it, we can take the \" and\" and the\npunctuation out of the \u003ccode\u003esunAdvice\u003c/code\u003e ternary and incorporate them into our return\nvalue instead. This not only improves the readability of our return message, it\nalso makes our code more flexible: if we decide to reverse the order of\n\u003ccode\u003erainAdvice\u003c/code\u003e and \u003ccode\u003esunAdvice\u003c/code\u003e in our message, or to add a third piece of advice,\nwe don't need to go back and edit the values returned by the ternary.\u003c/p\u003e\n\n\u003cp\u003eOnce we've done all that, the code defining our return value is much easier to\nread: it no longer includes a jumble of mathematical, comparison, and ternary\nexpressions. Furthermore, by using meaningful variable names, we've made it\nclear what the final message will consist of.\u003c/p\u003e\n\n\u003cp\u003eBe sure to verify that our refactored code still works!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach the Shiba\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elikelyToRain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mf\"\u003e0.3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esunIsDangerous\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eprobabilityOfRain\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erainAdvice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003elikelyToRain\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003etake an umbrella\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eenjoy this rain-free day\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esunAdvice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esunIsDangerous\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ewatch out for heatstroke\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ebask in this fine weather\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`Hello, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, with a rain chance of \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003erainPercentage\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e% and a temperature of \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003etemperatureInC\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003eC we recommend that you \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003erainAdvice\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e and \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esunAdvice\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNice!\u003c/p\u003e\n\n\u003cp\u003eOne final note before we move on. In the example above, we used simple \u003ccode\u003eString\u003c/code\u003es\nas the return values in our ternary expressions. But we can use any data type\nhere — numbers, Booleans, objects, etc. And, of course, we can also use more\ncomplex expressions. Let's look at an example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eproblem\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e99\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eluckyNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efirst\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eproblem\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eproblem\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eluckyNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; ??? (Test it out yourself!)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat's the value of \u003ccode\u003eluckyNumber\u003c/code\u003e? Step through the expressions to make sure you\nunderstand what happens step by step.\u003c/p\u003e\n\n\u003cp\u003eThe ternary expression enables us to make a leap upward in the complexity of our\nexpression-writing. An important thing to remember is that a ternary is an\nexpression that, itself, is made up of three \"inner\" expressions.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Those familiar with programming languages might be wondering, why\nnot use \u003ccode\u003eif/else\u003c/code\u003e statements. We'll work our way up to them, but for now we\nhave the ability to implement simple conditional decisions in one line of\ncode!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations, you've learned the art of conversing with JavaScript at a basic\nlevel. You should be proud of this accomplishment. Learning any programming\nlanguage generally follows these same steps. It's a proven general structure for\nfinding your bearings in a programming language. Feel free to return to it.\u003c/p\u003e\n\n\u003cp\u003eAs you build code in future lessons, be sure to try to make tiny changes and\nmake sure the code still works. Flatiron School has learned that the students\nwho are most successful in our programs are those who make the most \"small hops\"\naway from the given content to make the content their own. Programmers usually\ncall this \"playing with the code.\" Try swapping out a conditional expression,\nnesting a ternary within a ternary, turning a conditional from \u0026lt; to \u0026lt;=, etc. As\nyou move on, make sure you continue to play with all the skills you've learned\nso far. If you need help making those \"small hops\" be sure to work with your\ncommunity via Slack. You won't regret the investment.\u003c/p\u003e\n\n\u003cp\u003eBy the way, doing this exact work is how most programmers orient themselves to a\nnew language. Having the skill of getting started in a new language is a rocket\nbooster for your career.\u003c/p\u003e\n\n\u003cp\u003eBut to take your skills to the next level, you need to learn a new type of\nconstruction: a statement. Unlike an expression which always returns a value,\nstatements are used to help choose which expressions to evaluate or to do\nrepetitive tasks. That's Programming as Conversation Part II: Statements. Take a\nvirtual high-five from us! You've come a long way!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\"\u003eConditional (ternary) operator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "programming-with-expressions"
          },
          {
            "id": 432808,
            "title": "Survey - Programming as Conversation Part 1",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Programming as Conversation Part 1 module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "g98d22273478b00f37fc86950063f6191"
          }
        ]
      },
      {
        "id": 44860,
        "name": "Programming as Conversation Part 2: Statements",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g3ae5c97a4f464a725aa409482edaaa18",
        "items": [
          {
            "id": 432813,
            "title": "Programming as Conversation 2: Introduction",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-intro\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a statement versus an expression\u003c/li\u003e\n\u003cli\u003eUnderstand the Default Execution Order\u003c/li\u003e\n\u003cli\u003eIdentify two core categories of code statements\u003c/li\u003e\n\u003cli\u003eProvide an example of selection statement\u003c/li\u003e\n\u003cli\u003eProvide an example of repetition statement\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWelcome to Programming as Conversation, Part 2! In this module, we'll be\nenriching the kinds of conversations we have with JavaScript. In Part 1, we\nlearned to recognize \u003cem\u003eexpressions\u003c/em\u003e and saw that the data and operations they are\ncomprised of are \u003cem\u003eevaluated\u003c/em\u003e to produce a result or \"return value.\" We also\nlearned three important expressions: the constant expression, the assignment\nexpression, and the variable lookup expression. In this next module, we'll see\nthat evaluations of expressions, while powerful, need \u003cem\u003estatements\u003c/em\u003e to control\nwhen (sequence), whether (selection), and how many times (repetition) they are\n\u003cem\u003eevaluated\u003c/em\u003e. Code of this type is called a \"statement.\"\u003c/p\u003e\n\n\u003cp\u003eWe can see a parallel between expressions and statements with how children\n\u003cem\u003efirst\u003c/em\u003e learn to speak and how they enrich their communication with time.\nLearning to talk is a gigantic achievement. It's a much-loved moment for parents\nwhen a child learns to communicate through words instead of screaming fits. In\nthis early phase, however, some of their statements lack politeness and\nsensitivity.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Image_92_CookieNOW.png\" alt=\"Raw id, uncouth expression of desire for a cookie\"\u003e\u003c/p\u003e\n\n\u003cp\u003ePart of growing in their ability to converse is learning to wrap their desires\nin politeness and consideration for the listener. \"Would you mind giving me a\ncookie?\" and \"Would you care to join me for a cookie?\" both express the same\ndesire as our \"rougher\" example above, but show maturity.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Image_93_CookiePolite.png\" alt=\"A mannerly cookie request\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe same is true in code: we can do a great amount of work using just\n\u003cem\u003eexpressions\u003c/em\u003e. However, \u003cem\u003emature\u003c/em\u003e \"speakers\" of code learn to wrap their\n\u003cem\u003eexpressions\u003c/em\u003e in other \u003cem\u003edecisions\u003c/em\u003e and \u003cem\u003econtext\u003c/em\u003e. This ensures not only that the\nright thing happens, \u003cstrong\u003e\u003cem\u003ebut also\u003c/em\u003e\u003c/strong\u003e that others can understand the code easily.\nLearning to \"wrap\" expressions in reader-friendly context will continue into\nProgramming as Conversation Part 3 as well.\u003c/p\u003e\n\n\u003cp\u003eLet's start learning how to wrap our \u003cem\u003eexpressions\u003c/em\u003e in \u003cem\u003estatements\u003c/em\u003e that will\ngive us greater flexibility \u003cstrong\u003eand\u003c/strong\u003e enrich our communication.\u003c/p\u003e\n\n\u003ch2\u003eDefine a Statement Versus an Expression\u003c/h2\u003e\n\n\u003cp\u003eWe have learned that all JavaScript expressions have a return value. JavaScript\nstatements, on the other hand, don't necessarily. We can think of a statement\nas an \u003cem\u003einstruction\u003c/em\u003e for some action we want to carry out.\u003c/p\u003e\n\n\u003cp\u003eWe've already seen one type of statement: the variable declaration. A variable\ndeclaration has no return value; this is the case regardless of whether we\nassign a value at the time the variable is declared:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003estring2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\u003cspan class=\"nx\"\u003estring2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWorld\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"World\"\u003c/span\u003e\n\u003cspan class=\"nx\"\u003estring2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"World\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA \u003cem\u003evariable declaration\u003c/em\u003e is a statement, while a \u003cem\u003evariable assignment\u003c/em\u003e and a\n\u003cem\u003evariable lookup\u003c/em\u003e (as we have learned) are expressions.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you recall the previous lesson on data types, \u003ccode\u003eundefined\u003c/code\u003e is\n\u003cem\u003etechnically\u003c/em\u003e its own \u003cstrong\u003ething\u003c/strong\u003e in JavaScript. However, it is used to\nrepresent a \u003cem\u003elack\u003c/em\u003e of any particular value, so we treat it as such when we say\nthat variable declaration has no return value.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOne type of statement you will encounter frequently as you learn JavaScript is a\n\u003cem\u003eblock statement\u003c/em\u003e. A block statement (also called a \u003cem\u003ecode block\u003c/em\u003e) consists of\none or more expressions or statements wrapped inside curly brackets (\u003ccode\u003e{}\u003c/code\u003e). We\nwill see them in action in upcoming lessons.\u003c/p\u003e\n\n\u003cp\u003eSome of the most commonly used statements in JavaScript and other languages\nallow us to alter the order in which code is evaluated, in other words, to\nchange the \u003cem\u003edefault execution order\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eUnderstand the Default Execution Order\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Sequence_thick.png\" alt=\"Sequence Image\"\u003e\u003c/p\u003e\n\n\u003cp\u003eJavaScript by default will read our code according to the rules of a \u003cstrong\u003edefault\nsequence\u003c/strong\u003e or \u003cstrong\u003edefault flow\u003c/strong\u003e: \"every line, top to bottom, left to right as\nruled by order of operations.\" The \"icon\" above represents that rule. When you\nsee it in the following lessons, you should immediately think about \"execution\norder.\"\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou probably have an intuitive model of the \u003cstrong\u003edefault sequence\u003c/strong\u003e since you have\nthe general mindset that English text is read \"top to bottom, left to right\" and\nexpect that to apply to code. It does! Isn't it nice when things meet our\ndefault assumptions?\u003c/p\u003e\n\n\u003cp\u003eThis is why you intuitively grasp why JavaScript would throw an error with the\nfollowing code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; Error\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis error makes sense because this code is trying to do a variable lookup\n\u003cem\u003ebefore\u003c/em\u003e initializing the variable that is looked up.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Two Core Categories of Code Statements\u003c/h2\u003e\n\n\u003cp\u003eThere are two types of statements that affect whether code is executed and in\nwhat order:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSelection\u003c/strong\u003e: Given the default order (or \"sequence\"), can we choose to run\ncertain lines of code and not others? How do we do so?\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRepetition\u003c/strong\u003e: Given the default order (or \"sequence\"), can we choose to do\nsomething until a condition is met or until code has run some number of times?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eProvide An Example of Selection Statement\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Selection Image\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAs represented in the icon above, sometimes we need to deviate from the default\n\u003cstrong\u003esequence\u003c/strong\u003e. We might need to \u003cstrong\u003eselect\u003c/strong\u003e a different path. There's a \u003ca href=\"https://www.poetryfoundation.org/poems/44272/the-road-not-taken\"\u003epoem by\nRobert Frost\u003c/a\u003e\nabout it.\u003c/p\u003e\n\n\u003cp\u003eIn this case, the traveler is JavaScript, traveling fatefully down the default\nsequence. We, as programmers, create a fork, a \"split\" in fate, and ask\nJavaScript to take one path (or the other, or a third, or a fourth...and so on)\nbased on a Boolean \"test\" expression's return value. We ask JavaScript to\n\u003cem\u003eselect\u003c/em\u003e the path.\u003c/p\u003e\n\n\u003cp\u003eThe first  \u003cstrong\u003eselection\u003c/strong\u003e tool we'll learn is \u003ccode\u003eif\u003c/code\u003e. The \u003ccode\u003eif\u003c/code\u003e statement disrupts\nthe \"default sequence\" by asking JavaScript to run a test, decide whether to\nfollow the path, and then move back to the default sequence. Go ahead and open\n\u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e, paste the code below into the code window, and run it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"c1\"\u003e// evaluating favoriteNumber \u0026gt;= 10 returns true\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eSelection\u003c/strong\u003e lets us disrupt default flow by \u003cem\u003emaking a choice\u003c/em\u003e. JavaScript\nevaluates the condition in the parentheses and, if it returns \u003ccode\u003etrue\u003c/code\u003e, executes\nthe code inside the \u003cem\u003eblock\u003c/em\u003e (the code enclosed in \u003ccode\u003e{}\u003c/code\u003e). If \u003ccode\u003efavoriteNumber\u003c/code\u003e\nwere assigned \u003ccode\u003e0\u003c/code\u003e at the time the \u003ccode\u003eif\u003c/code\u003e statement is evaluated, it would skip\nover the code inside the block. That's why our icon shows the default flow\n\"hopping\" from one point to another, skipping what's in the middle.\u003c/p\u003e\n\n\u003cp\u003eTry changing the initial value of \u003ccode\u003efavoriteNumber\u003c/code\u003e or using a different\ncomparison operator and see what happens.\u003c/p\u003e\n\n\u003ch2\u003eProvide An Example of Repetition Statement\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Repetition_thick.png\" alt=\"Repetition Graphic\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRepetition\u003c/strong\u003e lets us disrupt default flow by \u003cem\u003erepeating\u003c/em\u003e. The \u003ccode\u003ewhile\u003c/code\u003e loop,\nwhich we will introduce formally in a few lessons, means \"do something \u003ccode\u003ewhile\u003c/code\u003e\n(or \"as long as\") some condition is true.\" That \"something\" is held inside a\ncode block:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efavoriteNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRun this code in the REPL as well. Try changing the value we're using in our\ncondition, or experiment with where you put the \u003ccode\u003econsole.log()\u003c/code\u003e, and see what\nhappens.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRepetition\u003c/strong\u003e lets us disrupt default flow by marking off a set of commands\nthat should be re-evaluated multiple times before resuming default flow. It's\neven possible to get into a repetition statement that you never exit.\nProgrammers call that an \"infinite loop.\" Most of the time, that's not a\ndesirable situation. Our icon shows the more desirable situation of us following\ndefault sequence, then finding a block that we repeat multiple times, then\nreturning to default sequence.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThis concludes our introduction to this module. This module is like a writing\nclass: we know how to write basic \u003cem\u003esentences\u003c/em\u003e with a simple subject and a simple\nverb. We're now going to try to write complete sentences with conjunctions and\npunctuation (like the cookie examples!). We improve our basic sentences by using\nSELECTION or REPETITION statements that allow us to create code that deviates\nfrom the default \"flow\" or SEQUENCE.\u003c/p\u003e",
            "exportId": "programming-as-conversation-2-introduction"
          },
          {
            "id": 432815,
            "title": "Default Sequence and Comments",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-default-sequence-and-comments\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-default-sequence-and-comments\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-default-sequence-and-comments/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize the comment marker\u003c/li\u003e\n\u003cli\u003eAdd a comment to code\u003c/li\u003e\n\u003cli\u003e'Comment out' code\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eAs said in the introduction to this section:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eJavaScript by default will read our code according to the rules of a \u003cstrong\u003edefault\nsequence\u003c/strong\u003e or \u003cstrong\u003edefault flow\u003c/strong\u003e: \"every line, top to bottom, left to right as\nruled by order of operations.\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eUsing SELECTION statements we can make JavaScript \"skip\" over code if some\nBoolean \u003cem\u003eevaluation\u003c/em\u003e is (or is not) \u003ccode\u003etrue\u003c/code\u003e. Using REPETITION statements, we can\nmake JavaScript \"stay put\" on one line and do it over and over until some\nBoolean \u003cem\u003eevaluation\u003c/em\u003e is (or is not) \u003ccode\u003etrue\u003c/code\u003e. The only way to make JavaScript \"not\nsee\" a line without a Boolean \u003cem\u003eevaluation\u003c/em\u003e at play is to \"hide\" it from\nJavaScript using a \u003cem\u003ecomment\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eBe sure to \"play along\" with the examples below in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e. We need to build\ncomfort with working along with the lessons.\u003c/p\u003e\n\n\u003ch2\u003eRecognize the Comment Marker\u003c/h2\u003e\n\n\u003cp\u003eWe can exclude a line from the \u003cstrong\u003edefault sequence\u003c/strong\u003e by starting the line with\nthe comment marker: \u003ccode\u003e//\u003c/code\u003e. After JavaScript sees a \u003ccode\u003e//\u003c/code\u003e, it will ignore from the\n\u003ccode\u003e//\u003c/code\u003e to the next line.\u003c/p\u003e\n\n\u003cp\u003eBe careful! A comment placed in the middle of an expression can confuse JavaScript.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Don't do this:\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"c1\"\u003e//+ 1);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs a rule of thumb, try to comment out whole lines only (i.e., place the comment\nmarker at the beginning of the line) to reduce the chances of breaking your code.\nWhile you \u003cem\u003ecan\u003c/em\u003e place comments within a line of code, it's best to keep things simple\nfor now.\u003c/p\u003e\n\n\u003ch2\u003eAdd a Comment to Code\u003c/h2\u003e\n\n\u003cp\u003eComments are \u003cstrong\u003eprimarily\u003c/strong\u003e used to provide references or explanations about\nwhat's going on in code.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// Perform a constant expression evaluation\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// Assign constant 3 to variable triangleSides\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangleSides\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eComments such as these are not particularly helpful. They're just restating\nwhat the code does. More often we add comments with motivation, or references,\nor blog posts, or bug reports:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// From the Three Dog Night song: \"Joy to the World (Jeremiah was a Bullfrog)\"\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineOne\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy to the world\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineTwo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAll the boys and girls\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineThree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy to the fishes in the deep blue sea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineFour\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy to you and me\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// The '\\n' inserts a new line into the string\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003echorus\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineOne\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineTwo\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineThree\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineFour\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you enter the code above into the REPL's code window and click \"Run\", you'll\nsee that nothing happens — which is good! JavaScript has recognized the\ncommented-out lines as comments and ignored them. If you try \"un-commenting out\"\none of them and rerunning the code, you'll get a \u003ccode\u003eSyntaxError\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo far, so good, but we still haven't verified that our code is doing what we\nwant it to do. Go ahead and check the value of \u003ccode\u003echorus\u003c/code\u003e. Try it using both of\nthe methods we've learned: adding a \u003ccode\u003econsole.log()\u003c/code\u003e of the variable in the code\nwindow, and directly checking its value in the console. Remember that, with\neither option, you need to \u003cem\u003eRun\u003c/em\u003e the code.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eA-HA! Moment\u003c/strong\u003e. Recall that the \"return value\" documentation shorthand\n\u003ccode\u003e//=\u0026gt;\u003c/code\u003e starts with a comment marker. This indicates that what's after \u003ccode\u003e//\u003c/code\u003e is\nnot part of the code itself. That's why it's used as an \"in-code\"\ndocumentation convention.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eComment Out code\u003c/h2\u003e\n\n\u003cp\u003eAnother way to use comments is to \"comment out\" code, to \"hide\" or \"mute\" buggy\nor unused code from the \u003cstrong\u003edefault sequence\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith our current code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineOne\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy to the world\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineTwo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAll the boys and girls\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineThree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy to the fishes in the deep blue sea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineFour\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy to you and me\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003echorus\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineOne\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineTwo\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineThree\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineFour\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eDefault sequence\u003c/strong\u003e satisfies our expectations if we check the value of\n\u003ccode\u003echorus\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eJoy to the world\nAll the boys and girls\nJoy to the fishes in the deep blue sea\nJoy to you and me\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow let's \"comment out\" \u003ccode\u003elineThree\u003c/code\u003e. We'll also need to modify \u003ccode\u003echorus\u003c/code\u003e\naccordingly. (If you aren't sure why, try \u003cstrong\u003ejust\u003c/strong\u003e commenting out \u003ccode\u003elineThree\u003c/code\u003e in\nyour REPL and see what happens when you run the code.) We'll comment out the\ncurrent version of \u003ccode\u003echorus\u003c/code\u003e to save it and modify a copy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineOne\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy to the world\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineTwo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAll the boys and girls\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//const lineThree = \"Joy to the fishes in the deep blue sea\";\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineFour\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy to you and me\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// const chorus = `${lineOne}\\n${lineTwo}\\n${lineThree}\\n${lineFour}`;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003echorus\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineOne\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineTwo\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\n\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003elineFour\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, if we run the code and check the value of \u003ccode\u003echorus\u003c/code\u003e, it returns:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eJoy to the world\nAll the boys and girls\nJoy to you and me\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we want to go back to the original version, we simply \"comment back in\"\n\u003ccode\u003elineThree\u003c/code\u003e and the original \u003ccode\u003echorus\u003c/code\u003e variable, and comment out or delete the\nmodified version of \u003ccode\u003echorus\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf we want to comment out \u003cem\u003emultiple\u003c/em\u003e lines, we can either place the comment\nmarker at the beginning of each line, \u003cem\u003eor\u003c/em\u003e we can wrap the lines with \u003ccode\u003e/*\u003c/code\u003e and\n\u003ccode\u003e*/\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/*\nconst lineOne = \"Joy to the world\";\nconst lineTwo = \"All the boys and girls\";\nconst lineThree = \"Joy to the fishes in the deep blue sea\"; \n*/\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elineFour\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy to you and me\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003elineFour\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// =\u0026gt; \"Joy to you and me\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt's common for developers to test two code paths (in effect, doing a selection\nstatement's work by hand!) by \"commenting out\" and \"commenting back in\" code.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe \u003cstrong\u003edefault sequence\u003c/strong\u003e is how JavaScript reads and executes each of the\nstatements and commands in JavaScript code. To \"hide\" a line of code from being\nseen by the JavaScript engine, start the line with the comment marker \u003ccode\u003e//\u003c/code\u003e. We\nuse comments to provide lightweight documentation or to hide code while we debug\nor test it.\u003c/p\u003e",
            "exportId": "default-sequence-and-comments"
          },
          {
            "id": 432816,
            "title": "Selection with Conditionals: the if Statement",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-selection-with-conditionals\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-selection-with-conditionals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn to use the \u003ccode\u003eif\u003c/code\u003e statement\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've covered the default sequence the JavaScript engine follows when reading\nand executing JavaScript code. We've also learned that there are two types of\nstatements that will enable us to change the default sequence: \u003cstrong\u003eselection\u003c/strong\u003e\nstatements and \u003cstrong\u003erepetition\u003c/strong\u003e statements. In this lesson and the next one, we'll\nlearn more about \u003cstrong\u003eselection\u003c/strong\u003e statements, i.e., conditionals.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Selection Image\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eConditional\u003c/strong\u003e statements enable us to execute code if a certain condition is\ntrue (or false). Some real-life examples might look like:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eif\u003c/code\u003e hungry → make a meal.\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eelse\u003c/code\u003e → don't make a meal.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eif\u003c/code\u003e light is green → press gas pedal.\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eelse\u003c/code\u003e → press brake pedal.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eif\u003c/code\u003e it's the first of the month → pay the bill.\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eelse\u003c/code\u003e → don't pay the bill.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou might also hear this referred to as \u003cstrong\u003econtrol flow\u003c/strong\u003e because it helps\ncontrol the flow (i.e., sequence) of an application.\u003c/p\u003e\n\n\u003cp\u003eJavaScript includes three structures for implementing code conditionally: \u003cem\u003eif\nstatements\u003c/em\u003e, \u003cem\u003eswitch statements\u003c/em\u003e, and \u003cem\u003eternary expressions\u003c/em\u003e. In this lesson, we\nwill learn how to construct \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e\n\n\u003ch3\u003eNote about the Embedded REPL's in this Lesson\u003c/h3\u003e\n\n\u003cp\u003eYou'll notice that the embedded REPL's in this lesson look a little different\nfrom the ones you've seen in previous lessons. They include both a code window\non the top, and the console window on the bottom. Code is pre-written in the\ncode window so you just need to click the \"Run\" button to see what it does.\u003c/p\u003e\n\n\u003cp\u003eNote, however, that if you want to experiment with any of the code (which we\nstrongly recommend), you'll need to open \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e in the browser and\ncopy/paste the code there.\u003c/p\u003e\n\n\u003ch2\u003eLearn to Use the \u003ccode\u003eif\u003c/code\u003e Statement\u003c/h2\u003e\n\n\u003cp\u003eTo write a basic \u003ccode\u003eif\u003c/code\u003e statement, we use the following structure:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econdition\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Block of code\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt consists of the \u003ccode\u003eif\u003c/code\u003e keyword followed by the condition to be checked in\nparentheses. After that comes a \u003cem\u003eblock statement\u003c/em\u003e (more commonly called a \u003cem\u003ecode\nblock\u003c/em\u003e): one or more JavaScript expressions or statements enclosed in \u003ccode\u003e{}\u003c/code\u003e. The\n\u003cem\u003ecode block\u003c/em\u003e contains the code we want to execute \u003cem\u003eif\u003c/em\u003e the condition returns a\ntruthy value:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/FixedUnacceptableCable?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIn the code above, age is initialized to 30, so the condition (\u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e)\nresolves to \u003ccode\u003etrue\u003c/code\u003e. The code in the code block executes, setting the \u003ccode\u003eisAdult\u003c/code\u003e\nvariable to \u003ccode\u003etrue\u003c/code\u003e. Copy/paste the code above into \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e and try making\nsome changes (e.g., assigning different values to \u003ccode\u003eage\u003c/code\u003e; changing the\nconditional statement) to see what happens.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eelse\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eOften we want to run one block of code when the condition returns a \u003ccode\u003etruthy\u003c/code\u003e\nvalue and a \u003cem\u003edifferent\u003c/em\u003e block of code when it returns a \u003ccode\u003efalsey\u003c/code\u003e value. To do\nthis, we use an \u003ccode\u003eelse\u003c/code\u003e clause:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/CourteousEquatorialTree?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eNote that the \u003ccode\u003eelse\u003c/code\u003e clause \u003cstrong\u003edoes not take a condition\u003c/strong\u003e — if the condition for\nthe \u003ccode\u003eif\u003c/code\u003e returns a falsey value, we want the \u003ccode\u003eelse\u003c/code\u003e code block to run \u003cstrong\u003eno\nmatter what\u003c/strong\u003e. This means that exactly one of the code blocks will \u003cem\u003ealways\u003c/em\u003e run.\u003c/p\u003e\n\n\u003ch3\u003eThe Ternary Expression\u003c/h3\u003e\n\n\u003cp\u003eRecall that this is the exact situation where we can use a ternary expression.\nHere's what the code above would look like using a ternary:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/EnchantedAchingProcedurallanguage?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eHere, we assign \u003ccode\u003eisAdult\u003c/code\u003e as \u003ccode\u003etrue\u003c/code\u003e if the condition returns a truthy value and\nas \u003ccode\u003efalse\u003c/code\u003e otherwise, exactly like the version using \u003ccode\u003eif\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRemember that a ternary is an \u003cem\u003eexpression\u003c/em\u003e — it returns a \u003cem\u003evalue\u003c/em\u003e. What this\nmeans is that we can simplify the code above a bit and assign the \u003cem\u003eresult\u003c/em\u003e of\nthe ternary directly to a variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; true\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe ternary expression is evaluated and resolved to \u003ccode\u003etrue\u003c/code\u003e, and that value is\nassigned to the variable \u003ccode\u003eisAdult\u003c/code\u003e. Try this version out in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e to verify\nthat it works.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e What is the ternary above doing? Basically, it's saying: \"when the\nconditional code returns \u003ccode\u003etrue\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e, and when the conditional code\nreturns \u003ccode\u003efalse\u003c/code\u003e, return \u003ccode\u003efalse\u003c/code\u003e.\" Sounds a bit redundant, doesn't it? When the\nreturn values are \u003ccode\u003etrue\u003c/code\u003e and \u003ccode\u003efalse\u003c/code\u003e as in the example above, you actually don't\nneed to use a ternary — or an \u003ccode\u003eif...else\u003c/code\u003e — at all! This is because \u003cstrong\u003e\u003cem\u003ethe\nconditional is an expression as well\u003c/em\u003e\u003c/strong\u003e. The return value of \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e is a\n\u003cem\u003eBoolean value\u003c/em\u003e (\u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e), so it can be assigned directly to our\n\u003ccode\u003eisAdult\u003c/code\u003e variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; false\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe ternary (or \u003ccode\u003eif...else\u003c/code\u003e) is only necessary if the desired return value is\nsomething other than a Boolean:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eageMessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCongratulations! You're an adult!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eEnjoy your childhood while it lasts!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eageMessage\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Congratulations! You're an adult!\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Be careful not to overuse the ternary expression. It's fine for\nslimming down a simple \u003ccode\u003eif...else\u003c/code\u003e, but be conscious of how easy your code is\nto understand for an outsider. Remember, you generally write code once, but it\ngets read (by yourself and others) \u003cstrong\u003efar\u003c/strong\u003e more than once. The ternary is\noften more difficult to quickly interpret than a regular old \u003ccode\u003eif...else\u003c/code\u003e, so\nmake sure the reduction in code is worth any potential reduction in\nreadability.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\u003ccode\u003eelse if\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWe've discussed the case where our condition is \u003cem\u003ebinary\u003c/em\u003e (one code block\nexecutes if the conditional returns true and a second executes otherwise), but\nsometimes we need to check multiple conditions. We can handle this situation by\nusing one or more \u003ccode\u003eelse if\u003c/code\u003e clauses.\u003c/p\u003e\n\n\u003cp\u003eLet's say that instead of just deciding whether the passed-in \u003ccode\u003eage\u003c/code\u003e meets the\ncriterion for \u003ccode\u003eisAdult\u003c/code\u003e, we want to add in some other examples of adulthood (in\nAmerican society, at least): \u003ccode\u003ecanWork\u003c/code\u003e, \u003ccode\u003ecanEnlist\u003c/code\u003e, and \u003ccode\u003ecanDrink\u003c/code\u003e.\n16-year-olds can legally work; 18-year-olds can do what 16-year-olds can do\n\u003cstrong\u003eplus\u003c/strong\u003e they can enlist and they are legal adults; 21-year-olds can do what 16-\nand 18-year-olds can do \u003cstrong\u003eplus\u003c/strong\u003e they can drink (at the federally set minimum\nage).\u003c/p\u003e\n\n\u003cp\u003eHere's how we can handle that using \u003ccode\u003eelse if\u003c/code\u003e clauses:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/SuburbanScentedAccounting?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eAny time you use an \u003ccode\u003eif...else if\u003c/code\u003e construction, \u003cstrong\u003eat most one code block will\nbe executed\u003c/strong\u003e. As soon as one of the conditions returns a truthy value, the\nattached code block runs and the conditional statement ends. In the example\nabove, we have not included an \u003ccode\u003eelse\u003c/code\u003e statement so, if none of the conditions is\ntruthy, no code blocks will be run. If we had included an \u003ccode\u003eelse\u003c/code\u003e clause, exactly\none code block would be run.\u003c/p\u003e\n\n\u003cp\u003eTry different values for \u003ccode\u003eage\u003c/code\u003e in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e and check the resulting values of\nthe four variables.\u003c/p\u003e\n\n\u003ch3\u003eNested \u003ccode\u003eif\u003c/code\u003e Statements\u003c/h3\u003e\n\n\u003cp\u003eYou may have noticed that there is some redundancy in the example above: three\nof the four variables appear in more than one of the conditions. In this\ncircumstance, we can streamline our code a bit by using nested conditional\nstatements:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/MutedUntrueAdware?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eThe first \u003ccode\u003eif\u003c/code\u003e condition checks for the \"base level\" of adulthood (\u003ccode\u003eage \u0026gt;= 16\u003c/code\u003e),\nand each subsequent nested \u003ccode\u003eif\u003c/code\u003e \"adds on.\" Note that each inner \u003ccode\u003eif\u003c/code\u003e statement\nis nested \u003cstrong\u003einside\u003c/strong\u003e the code block of the one before. This means that the inner\n\u003ccode\u003eif\u003c/code\u003e statements will only execute if the outer ones are truthy. This makes\nsense: if age is less than 16, we're done — there's no need to check the\nremaining conditions because we know they have to be false as well. Otherwise\nJavaScript will keep checking each subsequent condition until it either comes to\none that is false or finishes running all the code blocks.\u003c/p\u003e\n\n\u003cp\u003eWhile nested \u003ccode\u003eif\u003c/code\u003es are more efficient than \u003ccode\u003eif...else if\u003c/code\u003es for handling\noverlapping categories, they are also more difficult to read. An \u003ccode\u003eif...else if\u003c/code\u003e\nconstruction will always work. You should consider the tradeoff of readability\nvs. efficiency in deciding which construction to use.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we've learned about one of the \u003cem\u003eselection statements\u003c/em\u003e that\nenable us to modify the \u003cem\u003edefault sequence\u003c/em\u003e: the \u003ccode\u003eif\u003c/code\u003e statement. In the simplest\ncase, the \u003ccode\u003eif\u003c/code\u003e statement consists of the \u003ccode\u003eif\u003c/code\u003e clause, a condition, and a code\nblock to run if the condition returns \u003ccode\u003etrue\u003c/code\u003e. In more complex situations, we can\nadd one or more \u003ccode\u003eelse if\u003c/code\u003e clauses or an \u003ccode\u003eelse\u003c/code\u003e clause.\u003c/p\u003e\n\n\u003cp\u003eIn the next lesson, we'll learn about another selection statement we can use to\ncreate conditional code: the \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#Conditional_statements\"\u003eConditional statements\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\"\u003e\u003ccode\u003eif...else\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "selection-with-conditionals-the-if-statement"
          },
          {
            "id": 432817,
            "title": "Selection with Conditionals: the 'switch' Statement",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-switch-statements\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-switch-statements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn to use the \u003ccode\u003eswitch\u003c/code\u003e statement\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've now learned about two of the three \u003cem\u003eselection\u003c/em\u003e tools available to us in\nJavaScript: the \u003ccode\u003eif\u003c/code\u003e statement and the \u003ccode\u003eternary\u003c/code\u003e expression. In this lesson,\nwe'll learn about a third: the \u003ccode\u003eswitch\u003c/code\u003e statement. The \u003ccode\u003eswitch\u003c/code\u003e statement\nprovides an alternate way of expressing conditional code that is less repetitive\nin cases where you want to test multiple conditions against a single value.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Selection_thick.png\" alt=\"Selection is a deviation from the default execution path of a program. By choosing a different path using a conditional (switch-case) statement.\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eLearn to Use the Switch Statement\u003c/h2\u003e\n\n\u003cp\u003eLet's say we have a program that includes a variable containing a person's name\nand we want to execute certain code depending on what that person's name is.\nUsing an \u003ccode\u003eif...else if\u003c/code\u003e construction, that might look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAlice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAlice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, Alice!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe White Rabbit\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDon't be late, White Rabbit\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe Mad Hatter\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWelcome to the tea party, Mad Hatter\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe Queen of Hearts\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ePlease don't chop off my head!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWhoooo are you?\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Hello, Alice!\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs we can see, there's quite a bit of repetition here: we always test \u003ccode\u003ename\u003c/code\u003e and\nwe always compare with \u003ccode\u003e===\u003c/code\u003e. This is a pretty common selection need. It's so\nstandard that the \u003ccode\u003eswitch\u003c/code\u003e statement was created to enable us to streamline our\ncode. Here's the \u003ccode\u003eswitch\u003c/code\u003e version of the code above:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/VastVividPreprocessor?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eThe JavaScript engine compares the value passed in to the \u003ccode\u003eswitch\u003c/code\u003e statement\n(here, \u003ccode\u003ename\u003c/code\u003e) against each of the \u003ccode\u003ecase\u003c/code\u003e values \u003cem\u003eusing strict equality\u003c/em\u003e\n(\u003ccode\u003e===\u003c/code\u003e). When a match is found, the statements nested under that \u003ccode\u003ecase\u003c/code\u003e are\nexecuted. In this example, by using the \u003ccode\u003eswitch\u003c/code\u003e statement, we avoid the need to\nrepeat the \u003ccode\u003eif (name === _____)\u003c/code\u003e line for each possibility.\u003c/p\u003e\n\n\u003cp\u003eWe can also assign the same set of statements to multiple cases:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/LatestAshamedStrategy?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIn the above example, if the \u003ccode\u003ename\u003c/code\u003e variable matches the names of any of the\ndwarves, the \u003ccode\u003echaracterType\u003c/code\u003e variable will be set to \"dwarf\".\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e and \u003ccode\u003ebreak\u003c/code\u003e keywords are both \u003cem\u003eoptional\u003c/em\u003e in \u003ccode\u003eswitch\u003c/code\u003e statements,\nbut can be useful. In more complicated statements, they become necessary to\nensure the correct flow.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003edefault\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003edefault\u003c/code\u003e keyword is similar to the \u003ccode\u003eelse\u003c/code\u003e clause in an \u003ccode\u003eif...else\u003c/code\u003e\nconstruction. It specifies a set of statements to run after all of the \u003ccode\u003eswitch\u003c/code\u003e\nstatement's \u003ccode\u003ecase\u003c/code\u003es have been checked. However, it is different from an \u003ccode\u003eelse\u003c/code\u003e\nin that \u003cstrong\u003ethe only time it does \u003cem\u003enot\u003c/em\u003e run is if the engine hits a \u003ccode\u003ebreak\u003c/code\u003e in one\nof the \u003ccode\u003ecase\u003c/code\u003e statements\u003c/strong\u003e. If you only want one code block in your \u003ccode\u003eswitch\u003c/code\u003e\nstatement to execute, you should always include the \u003ccode\u003ebreak\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003ebreak\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn the previous example, \u003ccode\u003ebreak\u003c/code\u003e is used to stop the \u003ccode\u003eswitch\u003c/code\u003e statement from\ncontinuing to look at case statements once it finds a match. If we left out the\n\u003ccode\u003ebreak\u003c/code\u003e keywords, the JavaScript engine would first assign \u003ccode\u003echaracterType\u003c/code\u003e to\n\"dwarf\" when it reached the \"Grumpy\" case (as desired), but the code would\n\u003cstrong\u003econtinue to execute\u003c/strong\u003e and \u003ccode\u003echaracterType\u003c/code\u003e would wind up being reset to \"minor\ncharacter.\" To keep that from happening, we use \u003ccode\u003ebreak\u003c/code\u003e to tell the JavaScript\nengine to stop executing the \u003ccode\u003eswitch\u003c/code\u003e statement as soon as it finds a match. You\nwill often see switch statements where \u003ccode\u003ebreak\u003c/code\u003e is used in every case as a way to\nensure there is no unexpected behavior from multiple cases executing.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAdvanced:\u003c/strong\u003e Sometimes we \u003cem\u003ewant\u003c/em\u003e to potentially match multiple cases, and we\nwill need to leave out \u003ccode\u003ebreak\u003c/code\u003e in order to do this. Let's revisit an example\nfrom the lesson on \u003ccode\u003eif\u003c/code\u003e statements:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can refactor the above \u003ccode\u003eif...else if...else\u003c/code\u003e chain as a more compact, less\nrepetitious \u003ccode\u003eswitch\u003c/code\u003e statement. To make it work, we will employ a neat little\ntrick: we'll use comparisons for our \u003ccode\u003ecase\u003c/code\u003e statements instead of a simple\nvalue.\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/YummyThreadbareResource?lite=true#index.js\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eWe specified \u003ccode\u003etrue\u003c/code\u003e as the value to \u003ccode\u003eswitch\u003c/code\u003e on. All of our \u003ccode\u003ecase\u003c/code\u003es are\n\u003cem\u003ecomparison expressions\u003c/em\u003e that return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Therefore, if a\ncomparison returns \u003ccode\u003etrue\u003c/code\u003e, its statements will be run. Because we did not\ninclude any \u003ccode\u003ebreak\u003c/code\u003e statements, once \u003cem\u003eone\u003c/em\u003e case statement matches, all\nsubsequent statements will execute. This is what we want here: if \u003ccode\u003eage\u003c/code\u003e is\ngreater than 21, it's also greater than 18 and 16, so we want \u003cem\u003eall\u003c/em\u003e the\nassignments to be made.\u003c/p\u003e\n\n\u003cp\u003eIf we set \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e20\u003c/code\u003e in the above example, the first \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 21\u003c/code\u003e,\nreturns \u003ccode\u003efalse\u003c/code\u003e and the assignment of \u003ccode\u003ecanDrink\u003c/code\u003e never happens. The engine then\nproceeds to the next \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003eage \u0026gt;= 18\u003c/code\u003e, which returns \u003ccode\u003etrue\u003c/code\u003e, assigning the\nvalue \u003ccode\u003etrue\u003c/code\u003e to \u003ccode\u003eisAdult\u003c/code\u003e and \u003ccode\u003ecanEnlist\u003c/code\u003e. Since it encounters no \u003ccode\u003ebreak\u003c/code\u003e\nstatement, it then proceeds to the last case statement where \u003ccode\u003ecanWork\u003c/code\u003e is set to\ntrue as well.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eYou now have three different tools available to you to use \u003cem\u003eselection\u003c/em\u003e in\nJavaScript: the \u003ccode\u003eif\u003c/code\u003e statement, the \u003ccode\u003eternary\u003c/code\u003e expression, and the \u003ccode\u003eswitch\u003c/code\u003e\nstatement. The \u003ccode\u003eif\u003c/code\u003e statement is the one you will use most often — in fact, you\ncan \u003cem\u003ealways\u003c/em\u003e construct your conditional code using some combination of \u003ccode\u003eif\u003c/code\u003e,\n\u003ccode\u003eelse if\u003c/code\u003e, and \u003ccode\u003eelse\u003c/code\u003e. It may not be the most efficient way to write the code,\nbut it will always do the trick.\u003c/p\u003e\n\n\u003cp\u003eAs a rule of thumb, you may find it makes sense to start with \u003ccode\u003eif\u003c/code\u003e statements\nand, once you've got the code working, consider refactoring it to use a ternary\nor switch statement if they're better suited for what you need to do.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\"\u003e\u003ccode\u003eswitch\u003c/code\u003e statement\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "selection-with-conditionals-the-switch-statement"
          },
          {
            "id": 432819,
            "title": "Logging in JavaScript",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-logging-in-javascript\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-logging-in-javascript\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-logging-in-javascript/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn about logging in JavaScript\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003econsole.log()\u003c/code\u003e in the development process\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003econsole.log()\u003c/code\u003e for debugging\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eLogging\u003c/h2\u003e\n\n\u003cp\u003eThe venerable \u003ccode\u003econsole.log()\u003c/code\u003e is an all-purpose logging \u003cem\u003emethod\u003c/em\u003e. (A \u003cstrong\u003emethod\u003c/strong\u003e\nor a \u003cstrong\u003efunction\u003c/strong\u003e is a bit of code that \u003cem\u003edoes\u003c/em\u003e something. We \u003cem\u003ecall\u003c/em\u003e them when we\nwant them to act.) In programming, \u003cem\u003elogging\u003c/em\u003e refers to the process of printing\ninformation about the program as it runs. Note that \u003ccode\u003econsole.log()\u003c/code\u003e is a\n\u003cem\u003edevelopment\u003c/em\u003e tool; it's not something that's used in deployed code.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at how it works. Open up \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e and follow along.\u003c/p\u003e\n\n\u003cp\u003eAs we've seen before, there is an example provided in the code window:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe've also seen that we can log more than just a simple message. In fact, we can\npass any number of messages to \u003ccode\u003econsole.log()\u003c/code\u003e by separating them with commas;\nwhen printed, they'll be separated by a space:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eone\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003etwo\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ethree\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can also include values of different types. Give this a try:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eI must have logged\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003etimes today.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that, for that first string (\"I must have logged\"), the comma is \u003cem\u003eafter\u003c/em\u003e\nthe end quotation mark. This is because the comma is not part of the string;\ninstead, it's how we tell JavaScript, \"Hey, I'm going to give you something\nelse!\"\u003c/p\u003e\n\n\u003cp\u003eAs we saw earlier in this section, we can also pass \u003cem\u003evariables\u003c/em\u003e to\n\u003ccode\u003econsole.log()\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSpinach the Shiba\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello,\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs a reminder, we can log any \u003cem\u003eexpression\u003c/em\u003e — even very complex ones — using\n\u003ccode\u003econsole.log()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003econsole.log()\u003c/code\u003e in the Development Process\u003c/h2\u003e\n\n\u003cp\u003eWhere \u003ccode\u003econsole.log()\u003c/code\u003e gets really helpful is when you use it to check that your\ncode is functioning as you want it to. Let's revisit an example from an earlier\nlesson:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's say we want to run some tests to make sure that we have our \u003ccode\u003eif\u003c/code\u003e statement\nset up properly. We can do this by checking the values of the four variables for\ndifferent values of \u003ccode\u003eage\u003c/code\u003e. Here's where \u003ccode\u003econsole.log()\u003c/code\u003e comes in.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and open \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e and copy/paste the code above into the code window.\nNext, let's add the following to the end of our code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNext, let's set the \u003ccode\u003eage\u003c/code\u003e variable to a value of 16 and click the run button.\nYou should see the following output to the terminal:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003etrue false false false\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt looks like our code is working if \u003ccode\u003eage\u003c/code\u003e is set to 16, but our message could\nbe a little more informative. We can see that only one of the variables is\n\u003ccode\u003etrue\u003c/code\u003e, which is what we want, but it's not immediately apparent \u003cem\u003ewhich\u003c/em\u003e of the\nvariables is the one that's \u003ccode\u003etrue\u003c/code\u003e. So let's add some labels. To do this, we'll\nuse a combination of strings and variables inside our \u003ccode\u003econsole.log()\u003c/code\u003e. While\nwe're at it, let's log the \u003ccode\u003eage\u003c/code\u003e value as well. Replace the existing\n\u003ccode\u003econsole.log()\u003c/code\u003e with the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAge:\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCan work:\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCan enlist:\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eIs a legal adult:\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCan drink:\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis looks complicated, but all we're doing here is stringing together a series\nof expressions — some of them simple string values, and some of them variables —\nwith commas between each one.\u003c/p\u003e\n\n\u003cp\u003eAlternatively, we can use string interpolation inside our \u003ccode\u003econsole.log()\u003c/code\u003e to do\nthe same thing:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e`Age: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, Can work: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, Can enlist: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, Is a legal adult: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, Can drink: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith this approach, we're passing \u003cem\u003ea single expression\u003c/em\u003e to \u003ccode\u003econsole.log()\u003c/code\u003e\ninstead of a series of them. The commas here, therefore, are part of the string.\nBe sure to run both versions in the REPL so you can see the difference.\u003c/p\u003e\n\n\u003cp\u003eIf we were writing user-facing code here, we would probably want to make it\neasier to read by putting each variable on its own line. We could do that either\nby using multiple \u003ccode\u003econsole.log()\u003c/code\u003es, or by using the new line character (\u003ccode\u003e\\n\u003c/code\u003e).\nBut since the \u003ccode\u003econsole.log()\u003c/code\u003e is just for our (the developer's) use, the above\nmay be perfectly acceptable.\u003c/p\u003e\n\n\u003cp\u003eWith this \u003ccode\u003econsole.log()\u003c/code\u003e set up we can try our code with as many age values as\nwe like, checking each time to verify that the variables have been set\ncorrectly.\u003c/p\u003e\n\n\u003ch2\u003eUsing \u003ccode\u003econsole.log()\u003c/code\u003e for Debugging\u003c/h2\u003e\n\n\u003cp\u003eLet's say we've gotten our code to this point:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`Age: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\nCan work: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\nCan enlist: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\nIs a legal adult: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\nCan drink: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe have our \u003ccode\u003econsole.log()\u003c/code\u003e set up and we're ready to start testing it. We\ndecide to start with our 'least adult' category, which is children under age 16,\nso we set \u003ccode\u003eage\u003c/code\u003e equal to 15 and click run. Everything looks fine — we get four\n\u003ccode\u003efalse\u003c/code\u003es — so we change \u003ccode\u003eage\u003c/code\u003e to 16, then 17. So far, so good. But then when we\ntest it for an \u003ccode\u003eage\u003c/code\u003e of 18, we see the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003eAge: 18\nCan work: true\nCan enlist: false\nIs a legal adult: false\nCan drink: false\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHmm, obviously we've got an error somewhere. The code for ages 18-20 isn't\nreturning the expected result, so let's take a look at that conditional:\n\u003ccode\u003eelse if (age \u0026gt; 18)\u003c/code\u003e. With a simple condition like this, we might realize right\naway that we accidentally used \u003ccode\u003e\u0026gt;\u003c/code\u003e instead of \u003ccode\u003e\u0026gt;=\u003c/code\u003e. But imagine a case where our\ncondition is more complex and we don't immediately see the problem. Let's think\nabout some ideas for ways we can use \u003ccode\u003econsole.log()\u003c/code\u003e to help us find and correct\nit. Be sure to follow along in the REPL.\u003c/p\u003e\n\n\u003cp\u003eTo start, we could try logging a message \u003cem\u003einside\u003c/em\u003e the block for the condition\nwhere the error is (i.e., inside the block that \u003cem\u003eshould\u003c/em\u003e be executing):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe condition returned true\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`Age: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\nCan work: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanWork\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\nCan enlist: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanEnlist\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\nIs a legal adult: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eisAdult\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\\nCan drink: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecanDrink\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we click the Run button, the message does \u003cem\u003enot\u003c/em\u003e get logged so we know the\ncode block is not getting executed. This tells us that there's something wrong\nwith the conditional itself. If the message \u003cem\u003edid\u003c/em\u003e get logged we would know that\nthe problem is somewhere inside the code block instead.\u003c/p\u003e\n\n\u003cp\u003eNext, we could try changing \u003ccode\u003eage\u003c/code\u003e to 19. In this case, the message \u003cem\u003edoes\u003c/em\u003e get\nlogged, so we know our conditional is only broken for age 18. This gives us\nanother clue as to how to fix it.\u003c/p\u003e\n\n\u003cp\u003eIf we had a more complicated conditional and still couldn't find the problem, we\ncould try logging the conditional itself, simplifying it one step at a time\nuntil it \u003cem\u003edoes\u003c/em\u003e return \u003ccode\u003etrue\u003c/code\u003e. As soon as we get a \u003ccode\u003etrue\u003c/code\u003e return value, we know\nthat the last thing we removed was what was causing the problem. For example, if\nour overall condition is comprised of two conditions joined by \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, we could\ncheck each expression individually. Whichever one returns \u003ccode\u003efalse\u003c/code\u003e instead of\n\u003ccode\u003etrue\u003c/code\u003e is the one with the problem. We could then continue to \"drill down\" as\nnecessary until we find what's wrong.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Even better, we can use \u003ccode\u003econsole.log()\u003c/code\u003e as we're building the\nconditional in the first place, using an approach like the one outlined below.\nOnly after you have the conditions working the way you need them to would you\nbegin building out the code blocks. Taking this incremental approach will make\nit much easier to find and fix any errors.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econdition1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCondition 1 returned true\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econdition2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCondition 2 returned true\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/blockquote\u003e\n\n\u003cp\u003eYou should think of the ideas presented above as examples of a general approach\nto debugging. Debugging is largely a matter of using \u003cem\u003elogic\u003c/em\u003e to narrow in on the\nproblematic bit of code until you find the error. It is worth getting\ncomfortable using \u003ccode\u003econsole.log()\u003c/code\u003e because it can be a valuable tool in this\nprocess.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we've learned how to use the \u003ccode\u003econsole.log()\u003c/code\u003e method. We've also\nexplored some ways we can use it to help us with writing and debugging code.\u003c/p\u003e",
            "exportId": "logging-in-javascript"
          },
          {
            "id": 432821,
            "title": "Repetition: the while Loop",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-2-while-loop\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-while-loop\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-2-while-loop/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the basic \u003ccode\u003ewhile\u003c/code\u003e structure\u003c/li\u003e\n\u003cli\u003eWrite an infinite loop\u003c/li\u003e\n\u003cli\u003eUsing Control-C to break out of an infinite loop\u003c/li\u003e\n\u003cli\u003eTerminate a \u003ccode\u003ewhile\u003c/code\u003e loop naturally\u003c/li\u003e\n\u003cli\u003eUse operators to increment/decrement values\u003c/li\u003e\n\u003cli\u003eUse a \u003ccode\u003edo...while\u003c/code\u003e loop\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThe final piece of using \u003cem\u003estatements\u003c/em\u003e to control the flow of JavaScript\nexecution is \u003cstrong\u003erepetition\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pac-2-intro/Repetition_thick.png\" alt=\"Repetition Graphic\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhile the \u003cstrong\u003edefault sequence\u003c/strong\u003e requires JavaScript to execute top-down, left to\nright, we've seen that we can skip chunks of code using \u003cem\u003eselection\u003c/em\u003e statements\n(\u003ccode\u003eif\u003c/code\u003e or \u003ccode\u003eswitch\u003c/code\u003e). In some ways the reverse of \u003cem\u003eselection\u003c/em\u003e is \u003cem\u003erepetition\u003c/em\u003e:\n\"Don't move on,\" we tell JavaScript. \"Instead do something else until I say it's\nOK to move on.\" The most fundamental \u003cem\u003erepetition\u003c/em\u003e construct, present in pretty\nmuch every programming language, is the \u003ccode\u003ewhile\u003c/code\u003e loop.\u003c/p\u003e\n\n\u003ch2\u003eDefine the Basic \u003ccode\u003ewhile\u003c/code\u003e Structure\u003c/h2\u003e\n\n\u003cp\u003eA basic \u003ccode\u003ewhile\u003c/code\u003e loop looks like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econdition\u003c/span\u003e \u003cspan class=\"nx\"\u003eexpression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"c1\"\u003e// stuff to do\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs long as the condition expression is \u003ccode\u003etrue\u003c/code\u003e (or truthy), the code inside the\ncode block will run. Keep in mind the condition expression can be quite rich,\nusing \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e, \u003ccode\u003e()\u003c/code\u003e, etc.\u003c/p\u003e\n\n\u003ch2\u003eWrite an Infinite Loop\u003c/h2\u003e\n\n\u003cp\u003eGiven this definition of \u003ccode\u003ewhile\u003c/code\u003e, any truthy expression will make the loop run\nforever.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003esay this forever...\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis will output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esay this forever...\nsay this forever...\nsay this forever...\nsay this forever...\nsay this forever...\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that the condition expression doesn't need to be the literal value \u003ccode\u003etrue\u003c/code\u003e —\nany truthy value will have the same effect:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// -1 is truthy....\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003esay this forever...\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBy contrast, a \u003ccode\u003efalse\u003c/code\u003e (or falsey) condition expression will keep the code block\nfrom executing at all:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eI will never run\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eUsing Control-C to Break Out of an Infinitely Looping Program\u003c/h2\u003e\n\n\u003cp\u003eWhen you start writing code and creating loops yourself, you will almost\ncertainly inadvertently create infinite loops from time to time. If you try to\nrun the code and it either logs over and over without end \u003cstrong\u003eor\u003c/strong\u003e never seems to\nfinish, you're probably stuck in an infinite loop.\u003c/p\u003e\n\n\u003cp\u003eIn most programming environments, you can break out of an infinite loop by\ntyping Control-C. That's an old-school UNIX key combination that means\nINTERRUPT. In order for this to work, you first need to make the terminal\nportion of the programming environment (where the results of running the\ncode are displayed) the active window by clicking inside it.\u003c/p\u003e\n\n\u003ch2\u003eTerminate a \u003ccode\u003ewhile\u003c/code\u003e Loop Naturally\u003c/h2\u003e\n\n\u003cp\u003eMost loops aren't meant to run infinitely. There's some condition that they\ncross, captured in the \u003cem\u003econdition expression\u003c/em\u003e, that tells JavaScript that it's\ntime to return to the \u003cstrong\u003edefault sequence\u003c/strong\u003e and execute the code after the while\nloop.\u003c/p\u003e\n\n\u003cp\u003eSo, somehow we need to create an expression that's true when the \u003ccode\u003ewhile\u003c/code\u003e begins\n(so that the code in the \u003ccode\u003e{}\u003c/code\u003e runs), but that eventually becomes false.\u003c/p\u003e\n\n\u003cp\u003eHere's a simple example that uses a very common approach:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Initialize a counter variable; note that we need to use `let` here\u003c/span\u003e\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e//A Boolean expression that uses the counter to decide whether to keep looping\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`I am the \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, I love to count!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// The work the loop does\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Update the counter variable; this keeps track of how many times the loop has executed\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the last line, \u003ccode\u003ecount = count + 1\u003c/code\u003e, we are \u003cem\u003eassigning\u003c/em\u003e a new value to the\n\u003ccode\u003ecount\u003c/code\u003e variable, where the new value is equal to its current value plus 1.\u003c/p\u003e\n\n\u003cp\u003eThe code above produces:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eI am the 0, I love to count!\nI am the 1, I love to count!\nI am the 2, I love to count!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's say we forgot the line \u003ccode\u003ecount = count + 1\u003c/code\u003e. If our \u003ccode\u003ecount\u003c/code\u003e variable never\nchanges, our \u003cem\u003econdition expression\u003c/em\u003e would \u003cem\u003ealways\u003c/em\u003e be \u003ccode\u003etrue\u003c/code\u003e and we'd have an\ninfinite loop. (Hint: this is a very common mistake, even for experienced\nprogrammers.)\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eYou may wonder why we're starting our counter variable at \u003ccode\u003e0\u003c/code\u003einstead of \u003ccode\u003e1\u003c/code\u003e\nThe answer may sound a bit... opaque. It's because, in computer science,\narrays are \u003cem\u003eindexed\u003c/em\u003e starting with 0 instead of 1. In other words, we need to\nuse the \u003cem\u003eindex\u003c/em\u003e value of 0 to retrieve the first element from an array.\nBecause loops are frequently used to access elements in arrays, the\n\u003cem\u003econvention\u003c/em\u003e is to start loop counter variables at 0 instead of 1. If this\ndoesn't entirely make sense at this point, don't worry — it will become\nclearer when we learn about arrays.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eLearn About Operators Used to Increment/Decrement\u003c/h2\u003e\n\n\u003cp\u003eLet's look back at that previous example to notice how we're moving from a\ntrue or truthy statement to a false or falsey statement. Within each loop, the\nfollowing code is executed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ewhich slowly moves \u003ccode\u003ecount\u003c/code\u003e to a place where it is no longer less than 3, thus\nending the loop.\u003c/p\u003e\n\n\u003cp\u003eBut writing \u003ccode\u003ecount = count + 1\u003c/code\u003e is a bit long-winded (although very explicit;\nsometimes a few extra keystrokes can save you headaches with debugging,\nespecially when you're first learning to code). This pattern of \"incrementing\" a\nvariable is very common, so JavaScript includes a couple of shorthand operators\nyou can use. It's like a contraction in conversation: very few English speakers\nsay \"can not,\" \"have not,\" or \"would not\" \u003cstrong\u003eall\u003c/strong\u003e the time. You're likely to\nhear them use \u003cem\u003econtractions\u003c/em\u003e (from the Latin: \"pulling together\") like \"can't,\"\n\"haven't,\" and \"wouldn't.\" In the code below, we are combining the addition and\nassignment with the \u003ccode\u003eaddition assignment operator\u003c/code\u003e, \u003ccode\u003e+=\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// take the value of count, add 1 to it and then assign that result to count\u003c/span\u003e\n\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUnsurprisingly \u003ccode\u003e-=\u003c/code\u003e does the reverse of \u003ccode\u003e+=\u003c/code\u003e: it \"decrements\" the variable's\nvalue and re-assigns the new value to the variable. JavaScript has a number of\nother \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Assignment_operators\"\u003eassignment operators\u003c/a\u003e that allow you to use multiplication (\u003ccode\u003e*=\u003c/code\u003e),\ndivision (\u003ccode\u003e/=\u003c/code\u003e), and a variety of other operations.\u003c/p\u003e\n\n\u003cp\u003eThe assignment operators will work with any \u003cem\u003enumber\u003c/em\u003e. If you want to add 10 or\nmultiply by 3.14, the assignment operators will do that for you. For the special\n(but common) case where you want to add (or subtract) 1, however, there is\nanother option: the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Increment_and_decrement\"\u003eincrement and decrement operators\u003c/a\u003e, \u003ccode\u003e++\u003c/code\u003e and \u003ccode\u003e--\u003c/code\u003e. For a\ncase such as the above, where we're using a counter variable to keep track of\nwhere we are in our loop, the \u003ccode\u003eincrement operator\u003c/code\u003e is frequently used:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@LizBurton/EuphoricNoteworthyMuse?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eGet comfortable using the different options for incrementation and experiment\nwith writing some loops of your own.\u003c/p\u003e\n\n\u003ch2\u003eUse a \u003ccode\u003edo...while\u003c/code\u003e Loop\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003edo...while\u003c/code\u003e loop is similar to \u003ccode\u003ewhile\u003c/code\u003e, in that it will execute a block of\ncode based on a condition or set of conditions. The difference, however, is that\n\u003cstrong\u003eit will always execute at least once\u003c/strong\u003e. The reason is that the condition isn't\nevaluated until \u003cstrong\u003eafter\u003c/strong\u003e the code block executes the first time:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`I will execute once`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe JavaScript engine will enter the loop, execute the \u003ccode\u003econsole.log()\u003c/code\u003e, then\nevaluate the condition. Because the condition returns \u003ccode\u003efalse\u003c/code\u003e the loop will stop\nexecuting there.\u003c/p\u003e\n\n\u003cp\u003eThis construction is helpful any time you want to make sure that the loop\nexecutes at least once. As an example, this might be useful for asking a user to\ncreate a password. The \u003ccode\u003edo while\u003c/code\u003e loop will always ask them to enter their\npassword the first time, and can continue to ask as long as (\u003ccode\u003ewhile\u003c/code\u003e) the value\nthey enter doesn't meet the password requirements.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we have learned how to use a \u003cem\u003erepetition\u003c/em\u003e statement, the \u003ccode\u003ewhile\u003c/code\u003e\nloop. JavaScript includes some other looping mechanisms that you'll learn about\nlater in the course. But for now, with an understanding of \u003cem\u003esequence\u003c/em\u003e,\n\u003cem\u003eselection\u003c/em\u003e and now \u003cem\u003erepetition\u003c/em\u003e on top of your experience with expressions, you\ncan write powerful programs! Be sure to experiment with writing your own loops\nand don't forget, if your code is not responding, you can use Control-C to\ninterrupt the program!\u003c/p\u003e",
            "exportId": "repetition-the-while-loop"
          },
          {
            "id": 432823,
            "title": "Survey - Programming as Conversation Part 2",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Programming as Conversation Part 1 module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "g8c810d94ee17a3795585af037591ae8f"
          }
        ]
      },
      {
        "id": 44862,
        "name": "Programming as Conversation Part 3: Bundling Expressions and Statements into Functions",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g5640a4410609590d5b562023ad7afaff",
        "items": [
          {
            "id": 432827,
            "title": "Programming as Conversation Part 3: Introduction",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRevisit abstraction\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBefore we jump into more code, let's think for a moment about something you\nencounter pretty much every day when you read a news article or email: the way\nwe organize words to express and clarify meaning. For example, a \u003cstrong\u003eparagraph\u003c/strong\u003e\nis a collection of sentences, introduced by a topic sentence and bundled up or\nclosed by a closing sentence. A \u003cstrong\u003eparagraph\u003c/strong\u003e can persuade or offend, direct or\nexplain. A paragraph has a \u003cem\u003efunction\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\"Code paragraphs\" are called, depending on language, \"functions,\" \"procedures,\"\n\"methods,\" or \"subroutines.\" They bundle up expressions and statements to\naccomplish a task. Just as \"Make a Sandwich\" encompasses specific, \"atomic\"\nactions like \"get slice of bread,\" \"get jelly,\" etc., \u003ccode\u003eexecuteTransfer\u003c/code\u003e\nencompasses logic like \u003ccode\u003eif (accountStatus === \"open\")\u003c/code\u003e or \u003ccode\u003eif (accountBalance \u0026gt;=\ntransactionAmount)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo have code that is easy to read, debug, and maintain, we need to bundle\ncollections of atomic activities into \"code paragraphs\" that do work. JavaScript\ncalls these \"functions.\"\u003c/p\u003e\n\n\u003ch2\u003eAbstraction\u003c/h2\u003e\n\n\u003cp\u003eThis process of bundling up small atoms into a \u003cem\u003efunction\u003c/em\u003e is called\n\"abstraction.\" \"Abstraction\" comes from the Latin word for \"to pull away.\" When\nwe're further away, many details are hard to see. Only the most relevant shapes\nare recognizable. For example, when you're on an airplane overlooking a city,\nthe details of the cars below — the mileage, what's in the cup holder, the\nmake or model — are invisible; they're not \u003cem\u003eessential\u003c/em\u003e. But what we may be\nable to see is the vehicle type (car vs. truck) or the color of the car. By\nabstracting we see what's true at a higher level, or more \u003cem\u003egenerally\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere are a few more \"abstractions:\"\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Jerry_Seinfeld\"\u003eJerry Seinfeld\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/Ruth_Bader_Ginsburg\"\u003eRuth Bader Ginsburg\u003c/a\u003e, and \u003ca href=\"https://en.wikipedia.org/wiki/Cardi_B\"\u003eCardi B\u003c/a\u003e are\natomic individuals, but we can refer to them all collectively by the\nabstraction (or they can be \u003cem\u003eabstracted\u003c/em\u003e into) \"famous New Yorkers\"\u003c/li\u003e\n\u003cli\u003eBooks about a killer dog, a scary alter ego, and a scary clown can be\n\u003cem\u003eabstracted\u003c/em\u003e into the name \"horror novels (by Stephen King)\"\u003c/li\u003e\n\u003cli\u003eIndividuals with strange powers and (usually) strange clothing can be\n\u003cem\u003eabstracted\u003c/em\u003e into \"superheroes\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAbstraction is a natural part of learning to converse. When you're first\nlearning to communicate, you don't know enough to start talking about\nabstractions. You prefer to think about real, visible, tangible things. But as\nyou learn about opposites, how things are similar (and how perhaps one thing is\ndissimilar) you grow in your ability to \u003cem\u003eabstract\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn fact, the thing that makes most higher learning \"higher\" is that the\ndiscussion, work, and discovery is focused on uncovering general principles\nthat allow us to predict how things will work more-or-less most of the time.\nAmazingly, this was considered a pretty revolutionary idea at the time when\nGalileo and Newton started doing it. The moment that natural philosophers\nstarted looking for these \"general rules of how things work,\" science as we\nknow it was born.\u003c/p\u003e\n\n\u003ch2\u003eNext Steps\u003c/h2\u003e\n\n\u003cp\u003eIn Programming as Conversation 3, we'll learn to take our JavaScript\n\u003cem\u003eexpressions\u003c/em\u003e and \u003cem\u003estatements\u003c/em\u003e and bundle them up into abstractions called\n\u003cem\u003efunctions\u003c/em\u003e. Before we get to that, however, we first need to learn a little\nabout \u003cem\u003etesting\u003c/em\u003e in JavaScript.\u003c/p\u003e",
            "exportId": "programming-as-conversation-part-3-introduction"
          },
          {
            "id": 432829,
            "title": "Testing With Javascript",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-what-is-a-test\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn about testing in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMany of the labs you will complete in this program use tests. Passing the tests\nverifies that the code you write behaves as desired and produces the expected\nresults. But writing tests is also a way to provide specifics about exactly how\nthe code should function. In a common development strategy known as \u003ca href=\"https://en.wikipedia.org/wiki/Test-driven_development\"\u003etest-driven\ndevelopment\u003c/a\u003e (or TDD), programmers \u003cem\u003efirst\u003c/em\u003e write the test for a specific\nfunction of the code \u003cem\u003ethen\u003c/em\u003e write the code to make the tests pass. TDD is\nconsidered the most reliable methodology for delivering quality code.\u003c/p\u003e\n\n\u003cp\u003eWhat this means is that the results of running the tests will be an important\ntool in figuring out how to get those tests passing. Code testing can feel like\nan abstract concept at first, but it's worth starting to learn how they work.\nWhen you're having difficulty passing a test, being able to read and understand\nthe test output — and the tests themselves — can be an invaluable skill.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eThe lesson is set up as a code-along, so you'll first need to fork and\nclone it to your local environment.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eQuick Review:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e1.\u003c/strong\u003e click the \u003cstrong\u003eFork\u003c/strong\u003e icon in the upper right of this page. This will bring\nyou to GitHub. If you are prompted to choose where to fork, choose your personal\nGitHub account.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e2.\u003c/strong\u003e Once your fork is created, click the \u003cstrong\u003eCode\u003c/strong\u003e button in GitHub, make sure\n\u003cstrong\u003eSSH\u003c/strong\u003e is selected, and copy the provided git URL info.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/completing-assignments/clone-repo.gif\" alt=\"clone-repo\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThen, in your terminal:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e3.\u003c/strong\u003e Make sure you're in \u003ccode\u003eDevelopment/code\u003c/code\u003e (or wherever you're storing your\ncode for the course) and clone the repo to your local machine with \u003ccode\u003egit clone\u003c/code\u003e\nfollowed by the git URL you copied.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit clone git@github.com:learn-co-curriculum/phase-0-pac-3-what-is-a-test.git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e4.\u003c/strong\u003e The previous command will create a folder in the location you're\ncurrently in containing your fork of this lab's repository. \u003ccode\u003ecd\u003c/code\u003e into the\nrepository that you just cloned down in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open\nthe files in Visual Studio Code.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003ephase-0-pac-3-what-is-a-test\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ecode \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOpen up \u003ccode\u003eindex.js\u003c/code\u003e in your code editor. You are going to see mostly familiar\nthings:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoe\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e74\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e is \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e inches tall`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emodule\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eexports\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis should all look familiar except for that last line. You don't need to worry\nabout it for now — just know that line of code makes the variables available to\nthe test file.\u003c/p\u003e\n\n\u003cp\u003eTake a look at the \u003ccode\u003emessage\u003c/code\u003e variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e is \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e inches tall`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can use \u003ccode\u003econsole.log\u003c/code\u003e to take a look at the value of the \u003ccode\u003emessage\u003c/code\u003e variable.\nTo do that, first type \u003ccode\u003econsole.log(message);\u003c/code\u003e on the last line of \u003ccode\u003eindex.js\u003c/code\u003e\nand save the file. Next, navigate to the terminal, and type the following\ncommand in the command line and hit enter (be sure you're still in the lab's\ndirectory):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003enode index.js\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003enode\u003c/code\u003e command \u003cem\u003eexecutes\u003c/em\u003e the code in whatever file you specify (in this\ncase, \u003ccode\u003eindex.js\u003c/code\u003e). You should see \u003ccode\u003e\"Joe is 74 inches tall\"\u003c/code\u003e logged in the\nterminal.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: \u003ccode\u003econsole.log\u003c/code\u003e is one of the debugging tools you can use as you're\nwriting your code. Logging a variable and executing the code will allow you to\nverify that the value of the variable is what you're expecting.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn the line of code above, we are using \u003cem\u003estring interpolation\u003c/em\u003e to inject the\nvalues of the \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e variables into the message. Recall that, for\nthis to work, you have to wrap the entire string in backticks and wrap the\nvariables themselves in \u003ccode\u003e${}\u003c/code\u003e. If you'd like a refresher, try leaving out the\n\u003ccode\u003e${}\u003c/code\u003es or switching to a different type of quotes and run your code again to see\nwhat the value of \u003ccode\u003emessage\u003c/code\u003e is. The backticks and the \u003ccode\u003e${}\u003c/code\u003e tell Javascript to\ngrab the \u003cem\u003evalue\u003c/em\u003e inside the variable, not just that variable name.\u003c/p\u003e\n\n\u003ch3\u003eThe Tests\u003c/h3\u003e\n\n\u003cp\u003eWe have our code, now let's take a look at the tests. They are located in the\n\u003ccode\u003etest\u003c/code\u003e folder inside a file named \u003ccode\u003eindex-test.js\u003c/code\u003e. In this lesson we'll get\nfamiliar with the tests, and then run them in the next lesson.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e../index.js\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/*\ndescribe('what-is-a-test', () =\u0026gt; {\n  describe('Name', () =\u0026gt; {\n    it('returns \"Susan\"', () =\u0026gt; {\n      expect(name).toEqual('Susan')\n    })\n  })\n\n\n  describe('Height', () =\u0026gt; {\n    it('is less than 40', () =\u0026gt; {\n      expect(height).toBeLessThan(40)\n    })\n  })\n\n  describe('Message', () =\u0026gt; {\n    it('gives the name and height', () =\u0026gt; {\n      expect(message).toInclude(name)\n      expect(message).toInclude(height)\n    })\n  })\n})\n*/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the first line, we're enabling the tests to access the variables in\n\u003ccode\u003eindex.js\u003c/code\u003e. You don't need to worry about exactly how this works at this point —\njust know that the \u003ccode\u003emodule.exports\u003c/code\u003e and \u003ccode\u003erequire\u003c/code\u003e keywords allow us to access\nvariables written in the \u003ccode\u003eindex.js\u003c/code\u003e file from within the test file.\u003c/p\u003e\n\n\u003cp\u003eThe next thing to notice is that the test code itself is commented out using the\n\u003ccode\u003e/*\u003c/code\u003e and \u003ccode\u003e*/\u003c/code\u003e block commenting syntax. This is because, as mentioned above, we\ndon't actually want to run the tests yet. We will run the tests in the lab that\nfollows this lesson; in the version of the files provided for the lab, you'll see\nthat the \u003ccode\u003e/*\u003c/code\u003e and \u003ccode\u003e*/\u003c/code\u003e have been removed.\u003c/p\u003e\n\n\u003cp\u003eNext, note that the test code consists of three individual tests (each starting\nwith \u003ccode\u003edescribe\u003c/code\u003e) nested inside a block for the tests as a whole (also starting\nwith \u003ccode\u003edescribe\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThe first grouping is testing our \u003ccode\u003ename\u003c/code\u003e variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eName\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ereturns \"Susan\"\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSusan\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTake a look at the line that begins with \u003ccode\u003eexpect\u003c/code\u003e. If we read it out loud, we\nget \"Expect \u003ccode\u003ename\u003c/code\u003e to equal Susan\". That's exactly what it's saying! If we\ncontinue down to the Height section you'll see this code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHeight\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eis less than 40\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoBeLessThan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAgain, reading the line starting with \u003ccode\u003eexpect\u003c/code\u003e out loud, we get \"Expect \u003ccode\u003eheight\u003c/code\u003e\nto be less than 40.\" Again, this is just what the test is checking. Let's look\nat the final one:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMessage\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003egives the name and height\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoInclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoInclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis one has two \u003ccode\u003eexpect\u003c/code\u003e statements. If you read them out as English you'll\ndiscover that the tests expect the value of \u003ccode\u003eindex.message\u003c/code\u003e to include both\n\u003ccode\u003eindex.name\u003c/code\u003e and \u003ccode\u003eindex.height\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOK Great. You now understand what the tests are saying. In the next lesson we\nare going to cover how to run them, and then you will solve the lab!\u003c/p\u003e\n\n\u003ch2\u003eSubmitting the Assignment\u003c/h2\u003e\n\n\u003cp\u003eTo register completion of this lesson, submit the URL for your forked copy of\nthe repo in Canvas. Even though you didn't need to write any code for this\nlesson, you'll need to submit a link in order for this lesson to be marked as\ncomplete in Canvas.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eGo to your repository in GitHub and copy the URL. Note, this should be copied\nfrom the browser's address bar, and should start with \u003ca href=\"https://github.com/\"\u003ehttps://github.com/\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eGo to the assignment in Canvas and click Submit Assignment (or Start\nAssignment)\u003c/li\u003e\n\u003cli\u003ePaste in your GitHub URL as your submission\u003c/li\u003e\n\u003c/ol\u003e",
            "exportId": "g664bf104061e1538845ab8917c670d57"
          },
          {
            "id": 432831,
            "title": "Testing with JavaScript Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-what-is-a-test-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eLearn about testing in JavaScript\u003c/li\u003e\n\u003cli\u003eRun JavaScript tests\u003c/li\u003e\n\u003cli\u003eLearn how to read test results\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMany of the labs you will complete in this program use tests. Passing the tests\nverifies that the code you write behaves as desired and produces the expected\nresults. But writing tests is also a way to provide specifics about exactly how\nthe code should function. In a common development strategy known as \u003ca href=\"https://en.wikipedia.org/wiki/Test-driven_development\"\u003etest-driven\ndevelopment\u003c/a\u003e (or TDD), programmers \u003cem\u003efirst\u003c/em\u003e write the test for a specific\nfunction of the code \u003cem\u003ethen\u003c/em\u003e write the code to make the tests pass. TDD is\nconsidered the most reliable methodology for delivering quality code.\u003c/p\u003e\n\n\u003cp\u003eWhat this means is that the results of running the tests will be an important\ntool in figuring out how to get those tests passing. Code testing can feel like\nan abstract concept at first, but it's worth starting to learn how they work.\nWhen you're having difficulty passing a test, being able to read and understand\nthe test output — and the tests themselves — can be an invaluable skill.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eRecall that in the previous lesson, the tests were commented out. Be sure to fork\nand clone this lab into your local environment so you have the version of the test\nfile that is not commented out.\u003c/p\u003e\n\n\u003cp\u003eNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.)\u003c/p\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003eindex.js\u003c/code\u003e in your code editor. You are going to see mostly familiar\nthings:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoe\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e74\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e is \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e inches tall`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emodule\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eexports\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis should all look familiar except for that last line. You don't need to worry\nabout it for now — just know that line of code makes the variables available to\nthe test file.\u003c/p\u003e\n\n\u003cp\u003eTake a look at the \u003ccode\u003emessage\u003c/code\u003e variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e is \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e inches tall`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can use \u003ccode\u003econsole.log\u003c/code\u003e to take a look at the value of the \u003ccode\u003emessage\u003c/code\u003e variable.\nTo do that, first type \u003ccode\u003econsole.log(message);\u003c/code\u003e on the last line of \u003ccode\u003eindex.js\u003c/code\u003e\nand save the file. Next, navigate to the terminal, and type the following\ncommand in the command line and hit enter (be sure you're still in the lab's\ndirectory):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003enode index.js\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003enode\u003c/code\u003e command \u003cem\u003eexecutes\u003c/em\u003e the code in whatever file you specify (in this\ncase, \u003ccode\u003eindex.js\u003c/code\u003e). You should see \u003ccode\u003e\"Joe is 74 inches tall\"\u003c/code\u003e logged in the\nterminal. If you don't, make sure you saved the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: \u003ccode\u003econsole.log\u003c/code\u003e is one of the debugging tools you can use as you're\nwriting your code. Logging a variable and executing the code will allow you to\nverify that the value of the variable is what you're expecting.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn the line of code above, we are using \u003cem\u003estring interpolation\u003c/em\u003e to inject the\nvalues of the \u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e variables into the message. Recall that, for\nthis to work, you have to wrap the entire string in backticks and wrap the\nvariables themselves in \u003ccode\u003e${}\u003c/code\u003e. If you'd like a refresher, try leaving out the\n\u003ccode\u003e${}\u003c/code\u003es or switching to a different type of quotes and run your code again to see\nwhat the value of \u003ccode\u003emessage\u003c/code\u003e is. The backticks and the \u003ccode\u003e${}\u003c/code\u003e tell Javascript to\ngrab the \u003cem\u003evalue\u003c/em\u003e inside the variable, not just that variable name.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and delete the \u003ccode\u003econsole.log\u003c/code\u003e from \u003ccode\u003eindex.js\u003c/code\u003e before moving on.\u003c/p\u003e\n\n\u003ch3\u003eThe Tests\u003c/h3\u003e\n\n\u003cp\u003eWe have our code, now let's take a look at the tests. They are located in the\n\u003ccode\u003etest\u003c/code\u003e folder inside a file named \u003ccode\u003eindex-test.js\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e../index.js\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ewhat-is-a-test\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eName\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ereturns \"Susan\"\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSusan\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHeight\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eis less than 40\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoBeLessThan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMessage\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003egives the name and height\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoInclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoInclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eImportant\u003c/strong\u003e: You should never need to make changes to test files unless a\nlab's instructions specifically tell you to do so.\u003c/p\u003e\n\n\u003cp\u003eIn the first line, we're enabling the tests to access the variables in\n\u003ccode\u003eindex.js\u003c/code\u003e. You don't need to worry about exactly how this works at this point —\njust know that the \u003ccode\u003emodule.exports\u003c/code\u003e and \u003ccode\u003erequire\u003c/code\u003e keywords allow us to access\nvariables written in the \u003ccode\u003eindex.js\u003c/code\u003e file from within the test file.\u003c/p\u003e\n\n\u003cp\u003eNext, note that the test code consists of three individual tests (each starting\nwith \u003ccode\u003edescribe\u003c/code\u003e) nested inside a block for the tests as a whole (also starting\nwith \u003ccode\u003edescribe\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThe first grouping is testing our \u003ccode\u003ename\u003c/code\u003e variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eName\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ereturns \"Susan\"\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSusan\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTake a look at the line that begins with \u003ccode\u003eexpect\u003c/code\u003e. If we read it out loud, we\nget \"Expect \u003ccode\u003ename\u003c/code\u003e to equal Susan\". That's exactly what it's saying! If we\ncontinue down to the Height section you'll see this code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHeight\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eis less than 40\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoBeLessThan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAgain, reading the line starting with \u003ccode\u003eexpect\u003c/code\u003e out loud, we get \"Expect \u003ccode\u003eheight\u003c/code\u003e\nto be less than 40.\" Again, this is just what the test is checking. Let's look\nat the final one:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMessage\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003egives the name and height\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoInclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoInclude\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis one has two \u003ccode\u003eexpect\u003c/code\u003e statements. If you read them out as English you'll\ndiscover that the tests expect the value of \u003ccode\u003eindex.message\u003c/code\u003e to include both\n\u003ccode\u003eindex.name\u003c/code\u003e and \u003ccode\u003eindex.height\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOK great. Now that you understand what the tests are saying, it's time to run\nthem.\u003c/p\u003e\n\n\u003ch2\u003eRunning Tests\u003c/h2\u003e\n\n\u003cp\u003eTo run the tests, make sure you're inside the lab's directory in the terminal,\nthen run \u003ccode\u003elearn test\u003c/code\u003e. Recall that this command first installs the lab's\ndependencies, then shows the results of running the tests.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhat exactly do we mean by installing dependencies? Open the \u003ccode\u003epackage.json\u003c/code\u003e\nfile and scroll down to the bottom. You'll see a list of 'DevDependencies'.\nWhat's listed here are JavaScript \u003cem\u003epackages\u003c/em\u003e: files or sets of files full of\nexisting, reusable code. They are designed to be shared, allowing many\ndevelopers to use the same code in their own projects. The packages you see\nlisted in \u003ccode\u003epackage.json\u003c/code\u003e make it possible to run the lab's tests. In order to\nuse the packages, we have to install them. One of the things \u003ccode\u003elearn test\u003c/code\u003e does\nfor us is run \u003ccode\u003enpm install\u003c/code\u003e, which is the command that installs the\ndependencies.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe next step is learning how to read the results that the tests give you.\u003c/p\u003e\n\n\u003ch2\u003eReading Results of Tests\u003c/h2\u003e\n\n\u003cp\u003eThe first time you run \u003ccode\u003elearn test\u003c/code\u003e, you should see something that looks like\nthis:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ejs-functions-lab@0.1.0 \u003cspan class=\"nb\"\u003etest\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003emocha \u003cspan class=\"nt\"\u003e--timeout\u003c/span\u003e 5000 \u003cspan class=\"nt\"\u003e-R\u003c/span\u003e mocha-multi \u003cspan class=\"nt\"\u003e--reporter-options\u003c/span\u003e \u003cspan class=\"nv\"\u003espec\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e-,json\u003cspan class=\"o\"\u003e=\u003c/span\u003e.results.json\n\u003cspan class=\"go\"\u003e\n\n  what-is-a-test\n    Name\n      1) returns \"Susan\"\n    Height\n      2) is less than 40\n    Message\n      ✓ gives the name and height\n\n\n  1 passing (552ms)\n  2 failing\n\n  1) what-is-a-test\n       Name\n         returns \"Susan\":\n\n      Error: Expected 'Joe' to equal 'Susan'\n      + expected - actual\n\n      -Joe\n      +Susan\n\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:6:26\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\n  2) what-is-a-test\n       Height\n         is less than 40:\n     Error: Expected 74 to be less than 40\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:13:28\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\nnpm ERR! Test failed.  See above for more details.\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: If you also get an error that ends with \"unexpected character (after\n) at line 1, column 1 \u003ca\u003eparse.c:769\u003c/a\u003e\", go back to the\n\u003ccode\u003eindex.js\u003c/code\u003e file and remove the \u003ccode\u003econsole.log\u003c/code\u003e we added earlier, then run\n\u003ccode\u003elearn test\u003c/code\u003e again.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's break this down a bit. If you look about a third of the way down in the\noutput, you'll see a summary of how the tests went:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e  1 passing (552ms)\n  2 failing\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGreat! We've already got one test passing! Now let's see how we failed the other\ntwo tests.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e  1) what-is-a-test\n       Name\n         returns \"Susan\":\n\n      Error: Expected 'Joe' to equal 'Susan'\n      + expected - actual\n\n      -Joe\n      +Susan\n\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n      at Context.\u0026lt;anonymous\u0026gt; (test/index-test.js:6:26)\n      at processImmediate (internal/timers.js:461:21)\n\n  2) what-is-a-test\n       Height\n         is less than 40:\n     Error: Expected 74 to be less than 40\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\n      at Context.\u0026lt;anonymous\u0026gt; (test/index-test.js:13:28)\n      at processImmediate (internal/timers.js:461:21)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhile there is no hard and fast rule, and there will be exceptions, it is most\noften best to address your test errors in order. So let's take a look at our\nfirst error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e1) what-is-a-test\n       Name\n         returns \"Susan\":\n\n      Error: Expected 'Joe' to equal 'Susan'\n      + expected - actual\n\n      -Joe\n      +Susan\n\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n      at Context.\u0026lt;anonymous\u0026gt; (test/index-test.js:6:26)\n      at processImmediate (internal/timers.js:456:21)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is the specific error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e      Error: Expected 'Joe' to equal 'Susan'\n      + expected - actual\n\n      -Joe\n      +Susan\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt tells us what the test is expecting (\u003ccode\u003eExpected 'Joe' to equal 'Susan'\u003c/code\u003e) and\nthen gives us details about the \u003ccode\u003eexpected\u003c/code\u003e and \u003ccode\u003eactual\u003c/code\u003e values. This shows you\nexactly how the value your code is returning (the \u003ccode\u003eactual\u003c/code\u003e value) differs from\nwhat the test is looking for. Make sure you understand what this is telling you\n— it will come in handy in later labs!\u003c/p\u003e\n\n\u003cp\u003eThis error makes sense because we have the \u003ccode\u003ename\u003c/code\u003e variable set equal to \"Joe\" in\nour \u003ccode\u003eindex.js\u003c/code\u003e file. Let's change that line of code to set \u003ccode\u003ename\u003c/code\u003e equal to\n\"Susan\" instead. Run the tests again by typing \u003ccode\u003elearn test\u003c/code\u003e in the terminal's\ncommand line, and you should see that we are now passing 2 of the 3 tests!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e  what-is-a-test\n    Name\n      ✓ returns \"Susan\"\n    Height\n      1) is less than 40\n    Message\n      ✓ gives the name and height\n\n\n  2 passing (736ms)\n  1 failing\n\n  1) what-is-a-test\n       Height\n         is less than 40:\n     Error: Expected 74 to be less than 40\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\n      at Context.\u0026lt;anonymous\u0026gt; (test/index-test.js:13:28)\n      at processImmediate (internal/timers.js:461:21)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWoot! You passed another one. Now go ahead and try to pass the remaining test on\nyour own.\u003c/p\u003e\n\n\u003ch3\u003eCommon Errors\u003c/h3\u003e\n\n\u003cp\u003eWhile you are solving the other tests you may come across a few errors. Let's go\nover some common ones:\u003c/p\u003e\n\n\u003ch4\u003eVariable Not Defined\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eReferenceError: name is not defined\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat one says that the \u003ccode\u003ename\u003c/code\u003e variable is not defined. That makes no sense! We\ninitialized the \u003ccode\u003ename\u003c/code\u003e variable in \u003ccode\u003eindex.js\u003c/code\u003e! What that actually means is that\nthe test couldn't find the variable \u003ccode\u003ename\u003c/code\u003e. You'll get this error if the name of\none of your variables is different than the test is expecting. Check to make\nsure you used the correct variable names and look carefully for typos.\u003c/p\u003e\n\n\u003ch4\u003eUnexpected Identifier\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/index.js:1\ncnst name = \"Susan\";\n     ^^^^\n\nSyntaxError: Unexpected identifier\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require (internal/modules/cjs/helpers.js:88:18)\n    at Object.\u0026lt;anonymous\u0026gt; (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/test/index-test.js:1:15)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require (internal/modules/cjs/helpers.js:88:18)\n    at /Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:311:36\n    at Array.forEach (\u0026lt;anonymous\u0026gt;)\n    at Mocha.loadFiles (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:308:14)\n    at Mocha.run (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:849:10)\n    at Object.exports.singleRun (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:108:16)\n    at exports.runMocha (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:143:13)\n    at Object.exports.handler (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run.js:305:3)\n    at Object.runCommand (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/lib/command.js:242:26)\n    at Object.parseArgs [as _parseArgs] (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:1104:24)\n    at Object.parse (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:566:25)\n    at Object.exports.main (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/cli.js:68:6)\n    at Object.\u0026lt;anonymous\u0026gt; (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/bin/mocha:133:29)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\nnpm ERR! Test failed.  See above for more details.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhoa! So many words that make no sense. Don't worry though. The most important\nline is the \u003ccode\u003eSyntaxError: Unexpected identifier\u003c/code\u003e line. What that means is you\nhave some sort of typo or syntax mistake. It could be a HUGE variety of things\nbut usually, JS will try and give you a hint. This time it's pointing to the\n\u003ccode\u003ecnst name = \"Susan\"\u003c/code\u003e line of code. Take a look and read \u003cem\u003every carefully\u003c/em\u003e:\n\u003ccode\u003econst\u003c/code\u003e is misspelled. Whoops! Once we fix that everything will work.\u003c/p\u003e\n\n\u003cp\u003eOne note on this type of error is that it is sort of a catch-all. Tons and tons\nof problems end in that sort of error message. Whenever you see it, be sure to\nread over your code with a fine-toothed comb... and you'll find the problem!\u003c/p\u003e\n\n\u003ch2\u003eType Errors\u003c/h2\u003e\n\n\u003cp\u003eOn the second test, there is a chance you might see the following error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e1) what-is-a-test\n       Height\n         is less than 40:\n     Error: The \"actual\" argument in expect(actual).toBeLessThan() must be a number\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)\n      at Context.\u0026lt;anonymous\u0026gt; (test/index-test.js:13:28)\n      at processImmediate (internal/timers.js:456:21)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis error is slightly different than the last two. In this case, the test is\ngiving us a unique message because it recognizes a problem. If we look at this\ntest in \u003ccode\u003etest/index-test.js\u003c/code\u003e, we see this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHeight\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eis less than 40\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoBeLessThan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can see that the word \u003ccode\u003e\"actual\"\u003c/code\u003e in this case is referring to the \u003ccode\u003eheight\u003c/code\u003e\nvariable. The error message is telling us that \u003ccode\u003eheight\u003c/code\u003e \u003cstrong\u003emust be a number\u003c/strong\u003e. If\nyou're seeing this, make sure that you have set the \u003ccode\u003eheight\u003c/code\u003e variable to a\n\u003cstrong\u003enumber\u003c/strong\u003e that's less than 40 (e.g. \u003ccode\u003e39\u003c/code\u003e), not a \u003cstrong\u003estring\u003c/strong\u003e (\u003ccode\u003e\"39\"\u003c/code\u003e). The test\nwill interpret the value as a string due to the quotation marks wrapping it.\u003c/p\u003e\n\n\u003ch2\u003eOptional Mocha Configuration\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we only had three tests to pass, but as you continue through the\ncurriculum you will encounter labs with many more tests. You can imagine that\nthe test output could get very long, making it more difficult to focus in on how\nto fix a particular error.\u003c/p\u003e\n\n\u003cp\u003eTo help with this issue, there is some very simple setup you can put in place in\nMocha that will cause the tests to stop as soon as the first failing test is\nencountered.\u003c/p\u003e\n\n\u003cp\u003eTo implement this, open up the \u003ccode\u003epackage.json\u003c/code\u003e file and find the test script. It\nshould look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003e\"test\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAdd the \u003ccode\u003e--bail\u003c/code\u003e flag to the end of the line, inside the quotes:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003e\"test\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat's it!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eOnce you've got all your tests passing, you're ready to move on.\nCongratulations! You've solved your first JavaScript tests!\u003c/p\u003e",
            "exportId": "g05bb825dd4cd623e71242416c1a462cd"
          },
          {
            "id": 432832,
            "title": "Introduction to Functions in JavaScript",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro-to-functions\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWriting and calling JavaScript functions\u003c/li\u003e\n\u003cli\u003eUnderstand \u003ccode\u003earguments\u003c/code\u003e and \u003ccode\u003eparameters\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLearn what a return value is in JavaScript\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll introduce functions and cover how to create and execute\nthem. There are no tests, but be sure to follow along with the examples.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eTo start, fork and clone this lesson into your local environment. Since this\nlesson doesn't have a \"Fork\" button, you'll need to click the GitHub \"octocat\"\nbutton at the top of the page to open the lesson's repo in GitHub, then click\nthe fork button in the upper right corner.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com_button.jpg\" alt=\"Fork Button\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce the lesson has been forked, clone it to your local environment, navigate\ninto the lesson directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.) You will be writing your code in the \u003ccode\u003eindex.js\u003c/code\u003e file, and\nrunning it by entering \u003ccode\u003enode index.js\u003c/code\u003e in the terminal. Remember that you need\nto save the file before running the command.\u003c/p\u003e\n\n\u003ch2\u003eWriting and Calling JavaScript Functions\u003c/h2\u003e\n\n\u003cp\u003eSo far, our programs have consisted of writing individual lines of code directly\ninto a REPL. This is a great way to test out JavaScript functionality and to get\na feel for how it handles different values and operations, but it's not super\nextensible. What if, for example, we wanted to log \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e a bunch of\ntimes? We could write the statement out repeatedly:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut that quickly gets tiresome, and it's easy to see how even small programs\nwould come to rival \u003cem\u003eWar and Peace\u003c/em\u003e in length.\u003c/p\u003e\n\n\u003cp\u003eThe good news is, there's a better way! We can use a function!\u003c/p\u003e\n\n\u003cp\u003eFunctions are ways of giving instructions to the JavaScript interpreter that can\nbe reused over and over again by \u003cem\u003ecalling\u003c/em\u003e the function. Functions are the basic\nbuilding blocks of programming in many languages (although they aren't always\ncalled \u003cem\u003efunctions\u003c/em\u003e), serving both to store the instructions for how to perform a\ncertain task, and to help organize the code in our programs. By using functions\n— and giving them meaningful names — we can make our code easier to\nread, debug and maintain.\u003c/p\u003e\n\n\u003cp\u003eIn JavaScript, functions are written with the \u003ccode\u003efunction\u003c/code\u003e keyword:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edoNothing\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you can see, when we declare a function, we start with the \u003ccode\u003efunction\u003c/code\u003e\nkeyword, followed by a name for the function (in this case, \u003ccode\u003edoNothing\u003c/code\u003e),\nfollowed by a pair of parentheses. Next comes a pair of curly braces, which\ncontains the code to be executed when the function is called. In this case, the\nfunction, as its name implies, doesn't do much. Copy the function into\n\u003ccode\u003eindex.js\u003c/code\u003e and then execute it by running \u003ccode\u003enode index.js\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003cp\u003e...\u003c/p\u003e\n\n\u003cp\u003eAnything happen? No? Good! This isn't surprising because even though we declared\nthe function, we didn't give it any instructions. (Conventionally, a function\nthat does nothing is called a \"noop\" (pronounced \"no op\") — sometimes they\ncome in handy!)\u003c/p\u003e\n\n\u003cp\u003eLet's declare another function and this time give it something to do. As\nmentioned above, we put the code that we want to be executed when our function\nis called inside the curly braces — this is called the \u003cem\u003efunction body\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esayHello\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere we have a function called \u003ccode\u003esayHello\u003c/code\u003e; its body reads\n\u003ccode\u003econsole.log('Hello!');\u003c/code\u003e. Add this function to \u003ccode\u003eindex.js\u003c/code\u003e and then execute it\nagain.\u003c/p\u003e\n\n\u003cp\u003eWhat happened this time? Still nothing? That's because the code above is just\nthe \u003cem\u003efunction declaration\u003c/em\u003e. So far, all we have done is \u003cem\u003edefine\u003c/em\u003e the function.\nIn order to actually execute the code in the function body, we have to \u003cem\u003ecall\u003c/em\u003e\nit. To call the function, we simply type the name of the function followed by\n\u003ccode\u003e()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAdd the following to \u003ccode\u003eindex.js\u003c/code\u003e, after the function declaration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003esayHello\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow when you execute the code, you should see \u003ccode\u003eHello!\u003c/code\u003e printed in the\nterminal!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote: We've just learned that, in order for the code in a function to be\nexecuted, the function must be called. Any time you're trying out code, either\nin a REPL or in your local environment, you'll need to add the function call,\nas we did above, before executing the code. For \u003cstrong\u003elabs\u003c/strong\u003e, however, you will\ngenerally \u003cem\u003enot\u003c/em\u003e need to do this yourself. The tests will take care of it for\nyou.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eSaying hello\u003c/h3\u003e\n\n\u003cp\u003eLet's write a function to say hello to Guadalupe — be sure to follow along!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esayHelloToGuadalupe\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, Guadalupe!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRun this code and see what you get. Don't forget to include the function call!\u003c/p\u003e\n\n\u003cp\u003eNow what if we want to say hello to Liz? Well, we could write another function\nand add it to \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esayHelloToLiz\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, Liz!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we can call it, we should see \u003ccode\u003eHello, Liz!\u003c/code\u003e written out in the terminal.\u003c/p\u003e\n\n\u003cp\u003eOkay, now we're going to say hello to Samip — you know the drill!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esayHelloToSamip\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, Samip!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow let's call all three!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003esayHelloToGuadalupe\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"nx\"\u003esayHelloToLiz\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"nx\"\u003esayHelloToSamip\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can stack all three of these calls in \u003ccode\u003eindex.js\u003c/code\u003e and, when we execute the\ncode, we should see all three messages output in the terminal.\u003c/p\u003e\n\n\u003cp\u003eWhile these functions are undoubtedly useful, they're only useful if we only\ntalk to Guadalupe, Liz, and Samip. Every time we want to greet someone new (or\nuse a greeting other than \"Hello,\" for that matter), we need to define a new\nfunction.\u003c/p\u003e\n\n\u003cp\u003eWhat if there was some way to take what's similar about these functions —\nthe fact that they all call \u003ccode\u003econsole.log()\u003c/code\u003e with \"Hello,\" a name, and an\nexclamation point — and substitute what's different (the name) as we go?\u003c/p\u003e\n\n\u003cp\u003eTurns out, we can! We can use something called an \u003cem\u003eargument\u003c/em\u003e to pass information\nto a function.\u003c/p\u003e\n\n\u003ch2\u003eUnderstand \u003ccode\u003earguments\u003c/code\u003e and \u003ccode\u003eparameters\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eArguments give us a way to pass information into a function to make our\nfunctions more flexible. We pass the argument at the time that we \u003cstrong\u003ecall\u003c/strong\u003e the\nfunction, by including it inside the parentheses after the name of the function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edoSomething\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ething\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ething\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edoSomething\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eanything\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// passing the argument 'anything' into our function\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTry this out with a few different arguments. You'll see that whatever value we\npass in when we \u003cem\u003ecall\u003c/em\u003e the function is what the function logs. Pretty cool,\nright?\u003c/p\u003e\n\n\u003cp\u003eWe can easily extend this to our \"say hello to\" example; by using an argument,\nwe no longer need a separate function for each person we want to say hello to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esayHelloTo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`Hello, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003esayHelloTo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eGuadalupe\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \"Hello, Guadalupe!\"\u003c/span\u003e\n\u003cspan class=\"nx\"\u003esayHelloTo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJane\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \"Hello, Jane!\"\u003c/span\u003e\n\u003cspan class=\"nx\"\u003esayHelloTo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eR2-D2\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \"Hello, R2-D2!\"\u003c/span\u003e\n\u003cspan class=\"nx\"\u003esayHelloTo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \"Hello, 1!\"\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// ^ Note that in the above, JavaScript coerces the number 1 to the string \"1\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the example above, you may have noticed that there's also something inside\nthe parentheses in the function \u003cem\u003edeclaration\u003c/em\u003e: \u003ccode\u003efunction sayHelloTo(firstName)\u003c/code\u003e.\nThis is called the \u003cstrong\u003eparameter\u003c/strong\u003e, in this case \u003ccode\u003efirstName\u003c/code\u003e. A \u003cstrong\u003eparameter\u003c/strong\u003e is a\nplaceholder that stores whatever value gets passed in as an \u003cstrong\u003eargument\u003c/strong\u003e. For\nexample, when we run the function call \u003ccode\u003esayHelloTo('Guadalupe')\u003c/code\u003e, the value of the\nargument, 'Guadalupe', gets stored in the parameter \u003ccode\u003efirstName\u003c/code\u003e. Then, inside the\nfunction body, we access that value by using the parameter name, interpolate it\ninto the string, and log the string to the terminal.\u003c/p\u003e\n\n\u003cp\u003eEssentially, the arguments are the actual values that we pass to the function,\nand the parameters are the named references where we store those passed-in\nvalues. An argument can be any JavaScript expression —\u0026nbsp;any piece of\nJavaScript code that evaluates to a value —\u0026nbsp;from something as simple as\n\u003ccode\u003e5\u003c/code\u003e or \u003ccode\u003e'Avi'\u003c/code\u003e to something as complex as an entire function.\u003c/p\u003e\n\n\u003cp\u003eDefining a parameter in our function declaration ensures that the argument gets\nstored as a local, function-level variable that's available anywhere in the\nfunction body. We access the value simply by using the name of the parameter\nthat it's stored in.\u003c/p\u003e\n\n\u003cp\u003eNote that we can only access parameters within the body of the function. Try\nadding \u003ccode\u003econsole.log(firstName)\u003c/code\u003e to the end of the \u003ccode\u003eindex.js\u003c/code\u003e and running the\ncode. You should see a \u003ccode\u003eReferenceError\u003c/code\u003e telling you that \u003ccode\u003efirstName\u003c/code\u003e is not\ndefined. This relates to a very important concept in JavaScript, \u003cem\u003evariable\nscope\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eVariable Scope\u003c/h3\u003e\n\n\u003cp\u003eVariables in JavaScript exist within a particular \u003cstrong\u003escope\u003c/strong\u003e. For example, if a\nvariable is defined in a function — whether it's defined as a parameter or\ninside the body of the function — it can only be accessed inside that\nfunction.\u003c/p\u003e\n\n\u003cp\u003eVariables can also be declared in the \u003cem\u003eglobal scope\u003c/em\u003e, i.e., outside of any\nfunction. These variables will be accessible (and can potentially be\noverwritten) everywhere within the program. As a general rule, it is best to\navoid global variables as much as possible because they can lead to bugs that\ncan be difficult to track down. Using local variables instead makes it easier to\nkeep track of the values of your variables and makes your code easier to debug\nand maintain.\u003c/p\u003e\n\n\u003cp\u003eThe topic of scope in JavaScript is quite complex. You will learn more about it,\nand its implications, later in the course.\u003c/p\u003e\n\n\u003ch3\u003eSaying something new\u003c/h3\u003e\n\n\u003cp\u003eWhat if we want our function to say something other than \"Hello\"? Well, we can\nmove the greeting to a parameter as well:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAdd the above to your \u003ccode\u003eindex.js\u003c/code\u003e file along with the function call\n\u003ccode\u003esay(\"Goodbye\", \"Julio\");\u003c/code\u003e. When you run the code you should see \"Goodbye,\nJulio!\" written out to the terminal.\u003c/p\u003e\n\n\u003ch3\u003eOrder of Arguments\u003c/h3\u003e\n\n\u003cp\u003eWhat if we reversed the order of our arguments? Try this function call:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJulio\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should now see \"Julio, hello!\" in the terminal. It looks like the name is\nnow stored in the \u003ccode\u003egreeting\u003c/code\u003e parameter and the greeting is stored in the \u003ccode\u003ename\u003c/code\u003e\nvariable. We can verify that by adding a couple more \u003ccode\u003econsole.log()\u003c/code\u003es:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003efirstName: \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003egreeting: \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen you run this using the function call above, you should see this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efirstName:  hello\ngreeting:  Julio\nJulio, hello!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou've just illustrated an important point: \u003cstrong\u003ethe parameter names only have\nmeaning to us, the programmer; JavaScript assigns values to parameters based\nsolely on the order of the arguments that are passed.\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eReturn Values in JavaScript\u003c/h2\u003e\n\n\u003cp\u003eThese functions we've been coding are pretty cool, but they don't actually do a\nwhole lot — mostly they just print things to the terminal. We've seen how\nwe can make them a little bit more dynamic with arguments, but how do we make\nthem do something for us? For example, we might want to create a function\n\u003ccode\u003eadd()\u003c/code\u003e that allows us to add together two numbers. Enter the following in\n\u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we return inside a function, we're giving that value back to the world\noutside the function. Let's add the function call \u003ccode\u003eadd(1, 2)\u003c/code\u003e and run the code.\nWait — nothing happened! What's going on here? Well, our function is\n\u003cem\u003ereturning\u003c/em\u003e the value of the sum \u003ccode\u003ex + y\u003c/code\u003e but we can't see that because we aren't\ndoing anything with it. So let's use our handy developer tool, \u003ccode\u003econsole.log()\u003c/code\u003e,\nto see what it's returning. Rerun the code after modifying your function call as\nfollows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSee that? We got \u003ccode\u003e3\u003c/code\u003e back! What if we pass 80 and 9000 as our arguments instead?\nWhoa! We got 9080!\u003c/p\u003e\n\n\u003cp\u003eLet's unpack what's happening here. We're \u003cem\u003ecalling\u003c/em\u003e our \u003ccode\u003eadd()\u003c/code\u003e function,\npassing in two numbers as the arguments. The function is \u003cem\u003ereturning\u003c/em\u003e the value\nof the sum of the two arguments, and we're \u003cem\u003elogging\u003c/em\u003e that result in the terminal\nso we can see it. The difference between this and what we were doing before\n— having the \u003cem\u003efunction itself\u003c/em\u003e log something to the terminal — may\nseem subtle, but it's actually quite important. Let's look at another example.\nBe sure to follow along.\u003c/p\u003e\n\n\u003cp\u003eLet's rewrite our \u003ccode\u003esay()\u003c/code\u003e function from above so that now instead of\n\u003ccode\u003econsole.log()\u003c/code\u003e-ing what it says, it returns it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e!`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow when we call \u003ccode\u003econsole.log(say(\"Hello\", \"Liz\"));\u003c/code\u003e we'll see\n\u003ccode\u003eHello, Liz!\u003c/code\u003e, just as we did before. But what if we try logging the result of\ncalling the \u003cem\u003eoriginal\u003c/em\u003e version of the function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow \u003ccode\u003econsole.log(say(\"Hello\", \"Liz\"));\u003c/code\u003e will result in the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eHello, Liz!\nundefined\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe first line comes from the \u003ccode\u003econsole.log()\u003c/code\u003e inside the function body, and the\nsecond line comes from logging the result of the function call. What this shows\nus is that this version of our function \u003cstrong\u003edoes not have a return value\u003c/strong\u003e! This\nis because a \u003ccode\u003econsole.log()\u003c/code\u003e doesn't return anything — it just writes\nsomething out for the developer to see. \u003cstrong\u003eIn JavaScript, in order to have our\nfunction return a value, we need to use the \u003ccode\u003ereturn\u003c/code\u003e keyword.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can also see this if we go back to our \u003ccode\u003eadd()\u003c/code\u003e function, and remove the\n\u003ccode\u003ereturn\u003c/code\u003e keyword:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow if you call the function and log the results:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eyou'll see that the function has no return value. Our function is doing the\naddition but we can't do anything with the result, which makes it pretty\nuseless. Be sure to add the \u003ccode\u003ereturn\u003c/code\u003e keyword back in.\u003c/p\u003e\n\n\u003cp\u003eSetting up your function to return a value means that value is available to be\nused elsewhere in your program. So how might we use the return value of our\n\u003ccode\u003eadd()\u003c/code\u003e function? Let's say we're creating a simple calculator function. A\nhigh-level outline of how it could work might be:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ethe calculator function asks the user to enter two numbers they want to be\nadded together,\u003c/li\u003e\n\u003cli\u003ethe values are stored into variables (\u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e, perhaps),\u003c/li\u003e\n\u003cli\u003ethe function then calls the \u003ccode\u003eadd()\u003c/code\u003e function, passing \u003ccode\u003enum1\u003c/code\u003e and \u003ccode\u003enum2\u003c/code\u003e as\narguments,\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003eadd()\u003c/code\u003e function \u003cem\u003ereturns\u003c/em\u003e the sum\u003c/li\u003e\n\u003cli\u003ethe calculator function returns a message to the user telling them what the\nsum is.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNote what's happening in step 3: our calculator function is \u003cstrong\u003ecalling\u003c/strong\u003e our add\nfunction. This is an important thing to know about functions: they can be called\nby other functions! Eventually we'll want our calculator to do more than just\nadd. Rather than build one very long function that contains code for adding,\nsubtracting, multiplying, etc., we can \u003cem\u003eencapsulate\u003c/em\u003e the code for each operator\ninto its own function and call them.\u003c/p\u003e\n\n\u003cp\u003eThe code that calls the \u003ccode\u003eadd()\u003c/code\u003e function and creates the message might look\nsomething like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`The sum of your numbers is: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr, equivalently:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`The sum of your numbers is: \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum2\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003emessage\u003c/code\u003e could then be written out to the screen.\u003c/p\u003e\n\n\u003ch3\u003eOne Last Point About \u003ccode\u003ereturn\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThere's one additional thing it's important to know about \u003ccode\u003ereturn\u003c/code\u003e. If we wanted\nto both \u003ccode\u003ereturn\u003c/code\u003e \u003cem\u003eand\u003c/em\u003e log a string in our \u003ccode\u003esay()\u003c/code\u003e function, we might try\nwriting:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e!`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eI was called!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's call the function and log the result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHowdy\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003epartner\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen you run that code, the return value is logged, but the \u003ccode\u003econsole.log()\u003c/code\u003e\ninside the function body does not execute!\u003c/p\u003e\n\n\u003cp\u003eThis is because \u003ccode\u003ereturn\u003c/code\u003e \u003cstrong\u003eends the execution inside the function\u003c/strong\u003e. Nothing\nafter the line with the \u003ccode\u003ereturn\u003c/code\u003e will be executed.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Take a look at the above code in \u003ccode\u003eindex.js\u003c/code\u003e. Depending on which\ntext editor you're using, you may see that the line with the \u003ccode\u003econsole.log()\u003c/code\u003e\nis \"grayed out.\" This is the text editor giving you a hint that that line of\ncode is unreachable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eTo both log and return like we want to, we can switch the order around:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eI was called!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003egreeting\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e!`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow if we rerun the code, we should see the output of both \u003ccode\u003econsole.log()\u003c/code\u003es.\u003c/p\u003e\n\n\u003ch2\u003eYour turn!\u003c/h2\u003e\n\n\u003cp\u003eTry rewriting some of the functions that we've written in this lesson to get\nused to the difference between \u003ccode\u003ereturn\u003c/code\u003e-ing and printing (\u003ccode\u003econsole.log()\u003c/code\u003e-ing)\nto the terminal. Try writing a function of your own that returns something.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\"\u003eMDN - Functions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "introduction-to-functions-in-javascript"
          },
          {
            "id": 432833,
            "title": "Introduction to Functions Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-intro-to-functions-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice reading tests and test errors\u003c/li\u003e\n\u003cli\u003ePractice writing functions\u003c/li\u003e\n\u003cli\u003eLearn how to use JavaScript's \u003ccode\u003etoUpperCase()\u003c/code\u003e and \u003ccode\u003etoLowerCase()\u003c/code\u003e methods\u003c/li\u003e\n\u003cli\u003ePractice using \u003ccode\u003ereturn\u003c/code\u003e and \u003ccode\u003econsole.log()\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ePractice creating conditional statements\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWelcome to the JavaScript functions lab! You'll notice a few new things in this\nlesson that we haven't encountered before. Don't worry, we'll walk you through\nthem.\u003c/p\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.)\u003c/p\u003e\n\n\u003ch3\u003eCode-Along\u003c/h3\u003e\n\n\u003cp\u003eTo start, open up \u003ccode\u003eindex.js\u003c/code\u003e in your text editor. You should see, well, nothing.\nWe'll fix that soon.\u003c/p\u003e\n\n\u003cp\u003eNow open up \u003ccode\u003etest/root.js\u003c/code\u003e. Hey, there's something! What's all of this stuff\ndoing?\u003c/p\u003e\n\n\u003cp\u003eAt the very top of the file, you'll see\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eglobal\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eexpect\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ebabel\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ebabel-core\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ejsdom\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ejsdom\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003epath\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis might be a bit bewildering, but all we're doing is referencing different\n\u003cem\u003elibraries\u003c/em\u003e that help us run the tests. You may recall that we talked about\n\u003cem\u003epackages\u003c/em\u003e in an earlier lesson. A library is similar: it's code that someone\nelse (usually multiple someones) wrote for our use. The code above makes the\nlibraries available inside our test environment, which enables us to run the\ntests.\u003c/p\u003e\n\n\u003cp\u003eIf you go to \u003ccode\u003etest/index-test.js\u003c/code\u003e, you'll see\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eshout(string)\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// there's stuff in here, too\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003edescribe\u003c/code\u003e is a function provided by our test runner (in this case, we're using\n\u003ca href=\"https://mochajs.org/\"\u003eMocha\u003c/a\u003e) — it's basically a container for our tests.\u003c/p\u003e\n\n\u003cp\u003eLet's take a closer look at that \u003ccode\u003edescribe()\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eshout(string)\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ereceives one argument and returns it in all caps\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// we'll get to this in a sec\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese internal \u003ccode\u003edescribe()\u003c/code\u003e calls are used for \u003cem\u003edescribing\u003c/em\u003e the functions that\nyou're going to write. In this case, the test is saying, \"Okay, I think there's\ngoing to be a function called \u003ccode\u003eshout\u003c/code\u003e, and it should take one argument (it\ndoesn't actually matter what the argument is called, but \u003ccode\u003estring\u003c/code\u003e, is nice and\nspecific, don't you think?). It should \u003cem\u003ereturn\u003c/em\u003e that argument in all caps.\u003c/p\u003e\n\n\u003cp\u003eFinally, we have\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eshout\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHELLO\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ewhich says that it \u003cem\u003eexpects\u003c/em\u003e a call to \u003ccode\u003eshout()\u003c/code\u003e with the string \u003ccode\u003e'hello'\u003c/code\u003e will\n\u003ccode\u003eequal\u003c/code\u003e the string \u003ccode\u003e'HELLO'\u003c/code\u003e. This is the actual test — otherwise called a spec,\nexpectation, or assertion — for this function. We can have more than one test\nper function, but let's start with this one.\u003c/p\u003e\n\n\u003ch3\u003eRunning the Tests\u003c/h3\u003e\n\n\u003cp\u003eTo run the tests, run \u003ccode\u003elearn test\u003c/code\u003e in the terminal. The first output you'll see\nwill look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003elearn \u003cspan class=\"nb\"\u003etest\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ejava-script-intro-to-functions-lab@0.1.0 \u003cspan class=\"nb\"\u003etest\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003emocha \u003cspan class=\"nt\"\u003e--timeout\u003c/span\u003e 5000 \u003cspan class=\"nt\"\u003e-R\u003c/span\u003e mocha-multi \u003cspan class=\"nt\"\u003e--reporter-options\u003c/span\u003e \u003cspan class=\"nv\"\u003espec\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e-,json\u003cspan class=\"o\"\u003e=\u003c/span\u003e.results.json\n\u003cspan class=\"go\"\u003e\n\n\n  shout(string)\n    1) receives one argument and returns it in all caps\n\n  whisper(string)\n    2) receives one argument and returns it in all lowercase\n\n  logShout(string)\n    3) takes a string argument and logs it in all caps using console.log()\n\n  logWhisper(string)\n    4) takes a string argument and logs it in all lowercase using console.log()\n\n  sayHiToHeadphonedRoommate(string)\n    5) returns \"I can't hear you!\" if `string` is lowercase\n    6) returns \"YES INDEED!\" if `string` is uppercase\n    7) returns \"I would love to!\" if `string` is \"Let's have dinner together!\"`\n\n\n  0 passing (120ms)\n  7 failing\n\n  1) shout(string)\n       receives one argument and returns it in all caps:\n     ReferenceError: shout is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:4:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\n  2) whisper(string)\n       receives one argument and returns it in all lowercase:\n     ReferenceError: whisper is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:10:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\n  3) logShout(string)\n       takes a string argument and logs it in all caps using console.log():\n     ReferenceError: logShout is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:18:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\n  4) logWhisper(string)\n       takes a string argument and logs it in all lowercase using console.log():\n     ReferenceError: logWhisper is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:30:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\n  5) sayHiToHeadphonedRoommate(string)\n       returns \"I can't hear you!\" if `string` is lowercase:\n     ReferenceError: sayHiToHeadphonedRoommate is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:40:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\n  6) sayHiToHeadphonedRoommate(string)\n       returns \"YES INDEED!\" if `string` is uppercase:\n     ReferenceError: sayHiToHeadphonedRoommate is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:44:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\n  7) sayHiToHeadphonedRoommate(string)\n       returns \"I would love to!\" if `string` is \"Let's have dinner together!\"`:\n     ReferenceError: sayHiToHeadphonedRoommate is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:48:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.j\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHm, seven failed tests - that seems like a lot to navigate. Let's go ahead and\nget Mocha set up to only show the first failing test. Find the test script in\nthe \u003ccode\u003epackage.json\u003c/code\u003e file and add the \u003ccode\u003e--bail\u003c/code\u003e tag to the end:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"nl\"\u003e\"test\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\"\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSave the file and run the tests. You should now see something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003enpm \u003cspan class=\"nb\"\u003etest\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ejava-script-intro-to-functions-lab@0.1.0 \u003cspan class=\"nb\"\u003etest\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003emocha \u003cspan class=\"nt\"\u003e--timeout\u003c/span\u003e 5000 \u003cspan class=\"nt\"\u003e-R\u003c/span\u003e mocha-multi \u003cspan class=\"nt\"\u003e--reporter-options\u003c/span\u003e \u003cspan class=\"nv\"\u003espec\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e-,json\u003cspan class=\"o\"\u003e=\u003c/span\u003e.results.json \u003cspan class=\"nt\"\u003e--bail\u003c/span\u003e\n\u003cspan class=\"go\"\u003e\n\n\n  shout(string)\n    1) receives one argument and returns it in all caps\n\n  0 passing (159ms)\n  1 failing\n\n  1) shout(string)\n       receives one argument and returns it in all caps:\n     ReferenceError: shout is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:4:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\n\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMuch better! Now let's see if we can get that first test to pass. Open up\n\u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen we write our code, we follow the guidance of the tests. Let's take a look\nat that first error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e  1) shout(string)\n       receives one argument and returns it in all caps:\n     ReferenceError: shout is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:4:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe output above comes from this test in \u003ccode\u003eindex-test.js\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edescribe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eshout(string)\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ereceives one argument and returns it in all caps\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eshout\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoEqual\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHELLO\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe know that the test is expecting a function called \u003ccode\u003eshout\u003c/code\u003e that accepts an\nargument. The error tells us that \u003ccode\u003eshout\u003c/code\u003e isn't defined. So let's start by\ndeclaring our function in \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eshout\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// todo\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe know we won't pass the test yet because our function doesn't do anything yet.\nHowever, if we rerun the test, it should now give us more information about what\nwe need to do:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e  1) shout(string)\n       receives one argument and returns it in all caps:\n     Error: Expected undefined to equal 'HELLO'\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:4:28\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnytime you see \u003ccode\u003eError: Expected undefined to equal [something]\u003c/code\u003e, that means\nthat the test is looking for a \u003ccode\u003ereturn\u003c/code\u003e value. We can also see the description\nof what the function should do: it \u003ccode\u003ereceives one argument and returns it in all caps\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOkay, so with that information, we know that our function should return whatever\nstring is passed in as an argument:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eshout\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut we're still missing one piece: how do we make \u003ccode\u003estring\u003c/code\u003e all caps? JavaScript\nhas a built-in method for that! It's called \u003ccode\u003etoUpperCase()\u003c/code\u003e. We can call it on\nany string:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoUpperCase\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 'HELLO!'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAbove, we've called it directly on a literal string but, of course, we can also\ncall it on a variable. So let's try it with our \u003ccode\u003eshout()\u003c/code\u003e function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eshout\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoUpperCase\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eand run our tests again. We get:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e  shout(string)\n    ✓ receives one argument and returns it in all caps\n\n  whisper(string)\n    1) receives one argument and returns it in all lowercase\n\n  1 passing (147ms)\n  1 failing\n\n  1) whisper(string)\n       receives one argument and returns it in all lowercase:\n     ReferenceError: whisper is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:10:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:461:21)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHey! We got one to pass! Time to tackle the next error!\u003c/p\u003e\n\n\u003ch2\u003eYour Turn\u003c/h2\u003e\n\n\u003cp\u003eNow it's your turn to get the rest of the tests to pass. Note that some of them\nrequire you to use \u003ccode\u003econsole.log()\u003c/code\u003e instead of \u003ccode\u003ereturn\u003c/code\u003e — follow the guidance of\nthe tests!\u003c/p\u003e\n\n\u003ch3\u003eInstructions\u003c/h3\u003e\n\n\u003cp\u003eIn this lab, we're writing functions that \"speak\" at different volumes — they\nwhisper or they shout. The next test is similar to the first:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e1) whisper(string)\n       receives one argument and returns it in all lowercase:\n     ReferenceError: whisper is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:10:5\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (internal/timers.js:456:21)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis test is telling us that \u003ccode\u003ewhisper(string)\u003c/code\u003e receives one argument and returns\nit in all lowercase. At the moment, the test is failing because whisper is not\ndefined.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Just like \u003ccode\u003e.toUpperCase()\u003c/code\u003e changes any string to all uppercase in\nJavaScript, \u003ccode\u003e.toLowerCase()\u003c/code\u003e (e.g., \u003ccode\u003e'HELLO'.toLowerCase()\u003c/code\u003e) changes any\nstring to all lowercase.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAfter you get \u003ccode\u003ewhisper(string)\u003c/code\u003e passing, the next two tests will be checking to\nsee if a specific string is logged when a function is called. You will still\nneed to use the \u003ccode\u003e.toUpperCase()\u003c/code\u003e and \u003ccode\u003e.toLowerCase()\u003c/code\u003e methods for\n\u003ccode\u003elogShout(string)\u003c/code\u003e and \u003ccode\u003elogWhisper(string)\u003c/code\u003e. Keep in mind, though, that these\ntests are not looking for return values, only logs.\u003c/p\u003e\n\n\u003cp\u003eThe final function you need to create is \u003ccode\u003esayHiToHeadphonedRoommate()\u003c/code\u003e. Your\nroommate is very into their music, so whispering can be a bit difficult, but\nthey'll always hear you if you say, \"Let's have dinner together!\" This time,\nyou will need to return different strings depending on the string passed into\nthe function.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Although there are 3 tests for \u003ccode\u003esayHiToHeadphonedRoommate()\u003c/code\u003e, you only\nneed to write \u003cstrong\u003eone\u003c/strong\u003e function. This function should be able to handle all three\ntest conditions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf the string that is passed into the function is all lowercase, the function\nshould return \"I can't hear you!\"\u003c/li\u003e\n\u003cli\u003eIf the string that is passed into the function is all uppercase, the function\nshould return \"YES INDEED!\"\u003c/li\u003e\n\u003cli\u003eIf the string that is passed into the function is equal to \"Let's have dinner\ntogether!\", the function should return \"I would love to!\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHow do we check if a string is all lowercase or all uppercase? Let's take a look\nusing a REPL:\u003c/p\u003e\n\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/InsubstantialTanInternet?lite=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eIn the first line we're defining a string variable. In the next two lines we log\nthe original variable, then the variable after calling \u003ccode\u003etoUpperCase()\u003c/code\u003e on it.\nFinally, we're checking to see whether those two values are equal. If you click\nthe Run button, you'll see that the original string is mixed case and the upper\ncased version of it is (not surprisingly) uppercase. It should not come as a\nsurprise, therefore, that comparing them with the equality operator (\u003ccode\u003e===\u003c/code\u003e)\nreturns false. What do you think will happen if we initialize \u003ccode\u003estring\u003c/code\u003e to\n\"HELLO!\" instead? Play around with different values for \u003ccode\u003estring\u003c/code\u003e in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e\nand see what happens. Also try doing the same thing with \u003ccode\u003etoLowerCase()\u003c/code\u003e and\nmake sure you understand what's happening.\u003c/p\u003e\n\n\u003cp\u003eBasically, if we compare a string to its uppercased (or lowercased) version and\nthe two values are equal, then we know that the original string is uppercase (or\nlowercase). So now that we know how to make these comparisons, how can we use\nthem to conditionally return different strings? If you need a refresher, go back\nand review the lesson on Selection with Conditionals.\u003c/p\u003e\n\n\u003cp\u003eRemember that punctuation is important! Humans might be able to understand that\n\"Lets have dinner together\" is close enough to \"Let's have dinner together!\" and\nmeans the same thing, but JavaScript will not consider these equal!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReminder:\u003c/strong\u003e As you're working through the tests, you can run your code by\nrunning \u003ccode\u003enode index.js\u003c/code\u003e in the terminal. If you want to do this, remember that\nyou'll need to \u003cem\u003ecall\u003c/em\u003e the function inside \u003ccode\u003eindex.js\u003c/code\u003e. If you are just running\ntests, however, you don't need to include a function call — the tests will\nhandle that for you.\u003c/p\u003e\n\n\u003cp\u003eGood luck!\u003c/p\u003e",
            "exportId": "ga60b64877463f070ac1f8cdfb67852c2"
          },
          {
            "id": 432835,
            "title": "JavaScript Function Parameters Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-function-parameters-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a function that uses a parameter\u003c/li\u003e\n\u003cli\u003eDefine a function that uses two parameters\u003c/li\u003e\n\u003cli\u003eDefine a function with a parameter that has a default value\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we'll practice using parameters in our functions. We'll also learn\nhow to create a default value for a parameter.\u003c/p\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.)\u003c/p\u003e\n\n\u003cp\u003eYou will be writing your code in the \u003ccode\u003eindex.js\u003c/code\u003e file and running the tests by\nrunning \u003ccode\u003elearn test\u003c/code\u003e in the terminal.\u003c/p\u003e\n\n\u003ch2\u003eDefine a Function That Uses a Parameter\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstructions:\u003c/strong\u003e Define a function called \u003ccode\u003eintroduction\u003c/code\u003e that defines a\nparameter, \u003ccode\u003ename\u003c/code\u003e, and returns the phrase: \"Hi, my name is ${name}.\"\u003c/p\u003e\n\n\u003ch2\u003eDefine a Function That Uses Two Parameters\u003c/h2\u003e\n\n\u003cp\u003eSetting up your function to use two parameters is straightforward: simply\ninclude both parameters in the parentheses in the function declaration line,\nseparated by a comma:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003elogTwoValues\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`The two values are \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e and \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue2\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you might expect, if we instead wanted to log three values — or ten\nvalues — we can just continue listing the parameters in the parentheses,\nwith commas between each.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstructions:\u003c/strong\u003e To pass the second test, you'll need to define a function\ncalled \u003ccode\u003eintroductionWithLanguage\u003c/code\u003e that defines two parameters, \u003ccode\u003ename\u003c/code\u003e and\n\u003ccode\u003elanguage\u003c/code\u003e, and returns the phrase: \"Hi, my name is [name] and I am learning to\nprogram in [language].\"\u003c/p\u003e\n\n\u003ch2\u003eDefine a Function That Uses an Optional Parameter\u003c/h2\u003e\n\n\u003cp\u003eIn a previous lesson, we created a function that logs a personalized greeting:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esayHelloTo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`Hello, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat if we wanted to make this function work \u003cem\u003ewhether or not\u003c/em\u003e a first name is\npassed in as an argument? We can do this by setting a \u003cem\u003edefault value\u003c/em\u003e for the\n\u003ccode\u003efirstName\u003c/code\u003e parameter:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esayHelloTo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eUser\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`Hello, \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that we have used the assignment operator (\u003ccode\u003e=\u003c/code\u003e) here to assign a default\nvalue. The way this works is, if the function is called \u003cem\u003ewith\u003c/em\u003e an argument, the\nargument's value will supersede the default value. If it's called \u003cem\u003ewithout\u003c/em\u003e an\nargument, the function will use the default value, logging \"Hello, User!\"\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstructions:\u003c/strong\u003e Copy the function you created for the second test and name it\n\u003ccode\u003eintroductionWithLanguageOptional\u003c/code\u003e. It should have two parameters, \u003ccode\u003ename\u003c/code\u003e and\n\u003ccode\u003elanguage\u003c/code\u003e, and the second parameter should have a default value of\n\"JavaScript\".\u003c/p\u003e",
            "exportId": "gd45939ac3df3f22e33431eccd843cd0d"
          },
          {
            "id": 432837,
            "title": "JavaScript Calculator Challenge Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-pac-3-arithmetic-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice doing math with JavaScript\u003c/li\u003e\n\u003cli\u003ePractice writing functions that do things with numbers\u003c/li\u003e\n\u003cli\u003ePractice parsing strings as numbers\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to practice writing functions and manipulating numbers\nin JavaScript. First, though, we need to review some basic math. In this lab,\nwe're going to learn about various arithmetic operators. What's an operator, you\nsay? It's a symbol that \u003cem\u003eoperates\u003c/em\u003e on one or more (usually two) objects —\n\u003ccode\u003e+\u003c/code\u003e is a good example. The \u003ccode\u003e+\u003c/code\u003e operator says \"add what's to the left of \u003ccode\u003e+\u003c/code\u003e and\nwhat's to the right of \u003ccode\u003e+\u003c/code\u003e together.\"\u003c/p\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code. (If you are using a different text editor, the command\nwill be different.)\u003c/p\u003e\n\n\u003cp\u003eAs you read through this lesson, you're going to be adding your solutions to\n\u003ccode\u003eindex.js\u003c/code\u003e. You'll write a total of eight functions. Use the results of running\n\u003ccode\u003elearn test\u003c/code\u003e to guide you towards the right function names and functionality.\u003c/p\u003e\n\n\u003ch2\u003eBasic Math\u003c/h2\u003e\n\n\u003cp\u003eThe most fundamental math operations work as one might expect in JavaScript: \u003ccode\u003e+\u003c/code\u003e\nadds two numbers; \u003ccode\u003e-\u003c/code\u003e subtracts one number from another; \u003ccode\u003e*\u003c/code\u003e multiplies two\nnumbers; and \u003ccode\u003e/\u003c/code\u003e divides one number by another.\u003c/p\u003e\n\n\u003cp\u003eGive it a try: type each of the following math examples into the REPL console.\nYou can use the embedded console below or open \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e in a separate window\nif you prefer.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 81\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e60\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 20\u003c/span\u003e\n\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mf\"\u003e3.4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 6.8\u003c/span\u003e\n\u003cspan class=\"mf\"\u003e5.0\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mf\"\u003e2.5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ciframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@lizbur10/Sandbox?embed=true\" scrolling=\"no\" frameborder=\"no\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\u003e\u003c/iframe\u003e\n\n\u003cp\u003eGo ahead and run \u003ccode\u003elearn test\u003c/code\u003e and take a look at the first failing test:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e  1) basic math functions\n       'add()' is a valid function:\n     ReferenceError: add is not defined\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:10:12\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (node:internal/timers:464:21)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe description of the test, \u003ccode\u003e'add()' is a valid function\u003c/code\u003e, along with the error\nmessage, \u003ccode\u003ereferenceError: add is not defined\u003c/code\u003e, tells us that we need to define a\nfunction \u003ccode\u003eadd()\u003c/code\u003e. Go ahead and create the \u003ccode\u003eadd()\u003c/code\u003e function in \u003ccode\u003eindex.js\u003c/code\u003e. This\ntest is only looking for the function to exist, so we can leave the code block\nempty for now:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// we'll fill this in shortly\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce you've added the empty function, run \u003ccode\u003elearn test\u003c/code\u003e again; the first test\nshould be passing. Go ahead and get the next three tests passing as well before\nmoving on.\u003c/p\u003e\n\n\u003cp\u003eOnce you have the first four tests passing, the first error you get should look\nsimilar to this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003ebasic\u003c/span\u003e \u003cspan class=\"nx\"\u003emath\u003c/span\u003e \u003cspan class=\"nx\"\u003efunctions\u003c/span\u003e\n       \u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eadds\u003c/span\u003e \u003cspan class=\"nx\"\u003etwo\u003c/span\u003e \u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e \u003cspan class=\"nx\"\u003eand\u003c/span\u003e \u003cspan class=\"nx\"\u003ereturns\u003c/span\u003e \u003cspan class=\"nx\"\u003ethe\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n     \u003cspan class=\"nb\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eExpected\u003c/span\u003e \u003cspan class=\"kc\"\u003eundefined\u003c/span\u003e \u003cspan class=\"nx\"\u003eto\u003c/span\u003e \u003cspan class=\"nx\"\u003eequal\u003c/span\u003e \u003cspan class=\"mi\"\u003e1078\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eat\u003c/span\u003e \u003cspan class=\"nx\"\u003eassert\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enode_modules\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003elib\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eat\u003c/span\u003e \u003cspan class=\"nx\"\u003eExpectation\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoEqual\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enode_modules\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003eexpect\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003elib\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003eExpectation\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e81\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eat\u003c/span\u003e \u003cspan class=\"nx\"\u003eContext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eanonymous\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etest\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003etest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e23\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eat\u003c/span\u003e \u003cspan class=\"nx\"\u003eprocessImmediate\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"nx\"\u003einternal\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003etimers\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e464\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e21\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: the test document is randomly creating numbers to pass as arguments to\nthe functions in this lab, so the specific values you see in your errors will\nbe different from what's shown in this lesson, and will be different each time\nyou run the tests!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe tests have found our \u003ccode\u003eadd()\u003c/code\u003e function, getting us past the first test, and\nnow we need to write the code inside the function to return what the test is\nexpecting. Let's break down the information from our error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eadds\u003c/span\u003e \u003cspan class=\"nx\"\u003etwo\u003c/span\u003e \u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e \u003cspan class=\"nx\"\u003eand\u003c/span\u003e \u003cspan class=\"nx\"\u003ereturns\u003c/span\u003e \u003cspan class=\"nx\"\u003ethe\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eError\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eExpected\u003c/span\u003e \u003cspan class=\"kc\"\u003eundefined\u003c/span\u003e \u003cspan class=\"nx\"\u003eto\u003c/span\u003e \u003cspan class=\"nx\"\u003eequal\u003c/span\u003e \u003cspan class=\"mi\"\u003e1078\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe first line tells us what our function needs to do, and the second line tells\nus the specific error that is being thrown. Any time you see the error \"Expected\nundefined to equal\" something, that means the test is expecting your function to\n\u003cem\u003ereturn\u003c/em\u003e a value but it's currently not returning anything (\u003ccode\u003eundefined\u003c/code\u003e). Let's\nsee if we can just get that specific error cleared. We won't worry about exactly\n\u003cem\u003ewhat\u003c/em\u003e we're returning just yet:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003esomething\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRunning the tests now we get:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e  1) basic math functions\n       add(a, b) adds two numbers and returns the result:\n     Error: Expected 'something' to equal 853\n      at assert (node_modules/expect/lib/assert.js:29:9)\n      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e      at Context.\u0026lt;anonymous\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e/index-test.js:26:23\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"go\"\u003e      at processImmediate (node:internal/timers:464:21)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGreat! So now our function is returning \"something\" instead of nothing! So the\nnext step is to look more closely at the test's description of the function to\nfigure out what should be returned:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003eadd(a, b) adds two numbers and returns the result\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003eadd(a, b)\u003c/code\u003e tells us the test is trying to pass two \u003cem\u003earguments\u003c/em\u003e to our\nfunction, so let's get that set up:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003esomething\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe rest of the description tells us we need to add the two arguments together\nand return that value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith this code, both tests for the \u003ccode\u003eadd()\u003c/code\u003e function should now be passing!\u003c/p\u003e\n\n\u003ch3\u003eA Quick Note about Hard Coding\u003c/h3\u003e\n\n\u003cp\u003eThink back to the errors we were getting above, e.g., \u003ccode\u003eExpected undefined to\nequal 1078\u003c/code\u003e. One thing that might be tempting to do when addressing an error\nlike this is to explicitly return exactly what the test is looking for:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e1078\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is what's known as \u003cstrong\u003ehard coding\u003c/strong\u003e and is virtually never what you should\ndo! If you think about it, it doesn't really make sense. We've created an\n\u003ccode\u003eadd()\u003c/code\u003e function that can take any two numbers as arguments but will always\nreturn 1078. This makes it a pretty useless function. Instead, we want to create\nfunctions that will return the correct answer for whatever argument or arguments\nwe pass in.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and tackle the next three tests on your own. You should follow a\nprocess very similar to what we did above. Once you have those passing, continue\nto the next section.\u003c/p\u003e\n\n\u003ch2\u003eMath + Assignment\u003c/h2\u003e\n\n\u003cp\u003eRecall that we can increment (\u003ccode\u003e++\u003c/code\u003e) and decrement (\u003ccode\u003e--\u003c/code\u003e) a number if it's\nassigned to a variable. Don't forget to follow along in the REPL console.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 5... hmmmm\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 6 -- the number was incremented after it was evaluated\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 6\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can also put the increment and decrement operators before the number, in\nwhich case the number is evaluated \u003cem\u003eafter\u003c/em\u003e the operator is executed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 4\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 4\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 5\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut generally, you will see them placed \u003cem\u003eafter\u003c/em\u003e the number (and we recommend\nthat that's where you put them). If you're interested in the difference, take a\nlook at the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\"\u003eMDN documentation\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAnd, while we're on the subject, you'll usually only want to use these\nincrementors and decrementors when the shorthand makes what you're writing\neasier to read (more on when \u003cem\u003eexactly\u003c/em\u003e in a later lesson). Instead, it's best to\nuse the basic arithmetic operators combined with \u003ccode\u003e=\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFollow along in the REPL console. You can pick up where we left off with the\nprevious examples. Start by setting \u003ccode\u003enumber\u003c/code\u003e equal to 5.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e+=\u003c/code\u003e modifies the value to the operator's left by adding to it the value to\nthe operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 8\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e-=\u003c/code\u003e modifies the value to the operator's left by subtracting from it the\nvalue to the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 6\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e*=\u003c/code\u003e modifies the value to the operator's left by multiplying it by the value\nto the operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e*=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 60\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e/=\u003c/code\u003e modifies the value to the operator's left by dividing it by the value to\nthe operator's right:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e/=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 12\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that these methods modify the variable in place. So, if we have two\nfunctions that depend on the same external variable, the order in which they are\ncalled matters. Follow along in the console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e//reset number\u003c/span\u003e\n\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eadd5\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edivideBy3\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e/=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edivideBy3\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 3.3333333333333335\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eadd5\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 8.333333333333334\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// reset number\u003c/span\u003e\n\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eadd5\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 15\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edivideBy3\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eBecause these methods are more explicit, we prefer \u003ccode\u003e+=\u003c/code\u003e to \u003ccode\u003e++\u003c/code\u003e and \u003ccode\u003e-=\u003c/code\u003e to\n\u003ccode\u003e--\u003c/code\u003e (usually).\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOkay, now we're ready to write solutions for the next two functions:\n\u003ccode\u003eincrement(n)\u003c/code\u003e and \u003ccode\u003edecrement(n)\u003c/code\u003e. As indicated by the tests, these methods\nshould take a number as an argument, increment/decrement the provided value by\none, and return the result.\u003c/p\u003e\n\n\u003ch2\u003eParsing Numbers\u003c/h2\u003e\n\n\u003cp\u003eSometimes, we'll receive a number wrapped in quotes. We recognize it as a\nnumber, but JavaScript will think it's a string. Luckily, JavaScript gives us\ntools to turn these strings into proper numbers (that is, numbers that\nJavaScript understands).\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eparseInt()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe first such tool is the function \u003ccode\u003eparseInt()\u003c/code\u003e, which accepts two arguments:\nthe value to parse and the base of the value being parsed (called the \u003cem\u003eradix\u003c/em\u003e).\n\u003cem\u003eUsually\u003c/em\u003e you will want to work with base 10, so a typical call to \u003ccode\u003eparseInt()\u003c/code\u003e\nlooks like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e2\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; 2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat happens if we pass a representation of a non-integer to \u003ccode\u003eparseInt()\u003c/code\u003e? Let's\ntry it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e2.2222\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we enter the above in the REPL console, we will see that \u003ccode\u003eparseInt()\u003c/code\u003e forces\nthe parsed number to be an integer — which makes sense when we think about it,\nright?\u003c/p\u003e\n\n\u003cp\u003eWhat happens, though, if we pass utter nonsense to \u003ccode\u003eparseInt()\u003c/code\u003e? Go ahead and\ntry it — something like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003enonsense!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat did it return? \u003ccode\u003eNaN\u003c/code\u003e? What is that?\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eNaN\u003c/code\u003e stands for \"Not a Number\" — pretty handy, right? This is the number (in\nthe JavaScript sense) that JavaScript returns when it can't determine a valid\nvalue for a numeric operation.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You may see \u003ccode\u003eparseInt()\u003c/code\u003e used without a radix specified. In most\ncases, the radix will default to 10, \u003cstrong\u003ebut not always\u003c/strong\u003e! To be safe, you should\n\u003cstrong\u003ealways specify a radix\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eparseFloat()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAbove, we saw that \u003ccode\u003eparseInt()\u003c/code\u003e lops off everything after the decimal point and\nonly returns integers. If we want to preserve decimals, we'll need to use\n\u003ccode\u003eparseFloat()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUnlike \u003ccode\u003eparseInt()\u003c/code\u003e, \u003ccode\u003eparseFloat()\u003c/code\u003e accepts only a single argument, the thing to\nbe parsed. We can use it like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eparseFloat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e80.123999\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 80.123999\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou now have the information you need to write the final two functions,\n\u003ccode\u003emakeInt(string)\u003c/code\u003e and \u003ccode\u003epreserveDecimal(string)\u003c/code\u003e. \u003ccode\u003emakeInt(string)\u003c/code\u003e should take\nin a string, parse it into a base 10 integer and return it.\n\u003ccode\u003epreserveDecimal(string)\u003c/code\u003e should take in a string, parse it into a float and\nreturn it.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\"\u003eMDN - parseInt()\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\"\u003eMDN - parseFloat()\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "g4019c79cc846a8a6d051fea96db6124a"
          },
          {
            "id": 432839,
            "title": "Survey - Programming as Conversation Part 3",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Programming as Conversation Part 3 module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "g9d456e4944d39921d1877407a2e6ce7d"
          }
        ]
      },
      {
        "id": 44864,
        "name": "Working with Data Structures",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "ga6f6f326137c27ad7fd69f851e837622",
        "items": [
          {
            "id": 432843,
            "title": "Introduction to Working with Data Structures",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-working-with-data-structures-intro\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-working-with-data-structures-intro/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCompare collection data types to other data types\u003c/li\u003e\n\u003cli\u003eDefine \u003ccode\u003eArray\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eDefine \u003ccode\u003eArray\u003c/code\u003e element\u003c/li\u003e\n\u003cli\u003eDefine \u003ccode\u003eArray\u003c/code\u003e index\u003c/li\u003e\n\u003cli\u003eDefine \u003ccode\u003eObject\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eDefine \u003ccode\u003eObject\u003c/code\u003e key\u003c/li\u003e\n\u003cli\u003eDefine \u003ccode\u003eObject\u003c/code\u003e value\u003c/li\u003e\n\u003cli\u003eDemonstrate nesting of collection data structures\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThus far, we've been storing simple data in our variables, values like:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eString\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBoolean\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNumber\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eetc.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut sometimes we want to refer to a \u003cem\u003ecollection\u003c/em\u003e of values by a common name.\nThis is very natural in conversation: we know \"The Beatles\" refer to four guys\nfrom Liverpool who sang \"I Wanna Hold Your Hand.\" \"Grocery List\" is something\nthat contains multiple small elements that we identify by \"the third item on my\ngrocery list, or the last item on my grocery list.\" Ordered lists in JavaScript\nare called \"Arrays.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/working-with-data-structures-intro/grocery-list.png\" alt=\"Grocery List\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAnother collection type we know about from daily life are dictionaries: we use\none thing to \"look up\" a value. We \"look up\" the word \"computer\" in a real\ndictionary and we are \"pointed to\" a long \u003ccode\u003eString\u003c/code\u003e that tells us what the word\nmeans. Lookup tables, or dictionaries, in JavaScript, are called \"Objects.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/working-with-data-structures-intro/dictionary.png\" alt=\"Dictionary\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLearning to store and to work with the data held in data structures will be the\nfocus of this section. In this lesson, we'll give you a broad, conceptual\nintroduction to collection data types.\u003c/p\u003e\n\n\u003ch2\u003eCompare Collection Data Types to Scalar Data Types\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eString\u003c/code\u003es and \u003ccode\u003eNumber\u003c/code\u003es are scalar data types, they can be put on a scale. A\ncollection type holds multiple pieces of data and allows us to talk about the\ncollection as an \u003cem\u003eabstraction\u003c/em\u003e. \"The Beatles\" is an \u003cem\u003eabstraction\u003c/em\u003e used to refer\nto the individuals John, Paul, George, and Ringo. Because collection types can't\nbe put on a scale, they \u003cstrong\u003e\u003cem\u003eare not\u003c/em\u003e\u003c/strong\u003e called scalar data types.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eArray\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is a collection that holds multiple pieces of data under a single\nname (\"Countries\", \"Fast and the Furious Movies\"). In daily life, we call them\n\"lists.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe Beatles\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth\u003eData\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e\"John Lennon\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e\"Paul McCartney\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e\"Ringo Starr\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e\"George Harrison\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eor\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eGroceries\u003c/strong\u003e\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIndex\u003c/th\u003e\n\u003cth\u003eData\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e\"Parsnips\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e\"English Toffee\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e\"Milk\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e3\u003c/td\u003e\n\u003ctd\u003e\"Sprouted Rye Bread\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eThe individual \u003cem\u003eelements\u003c/em\u003e that make up this collection (or list) are identified\nby an \u003cem\u003eindex\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/working-with-data-structures-intro/beatles.png\" alt=\"Beatles\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIt might seem strange that we start our list at \u003ccode\u003e0\u003c/code\u003e instead of \u003ccode\u003e1\u003c/code\u003e. Programmers\nlike \u003ccode\u003e0\u003c/code\u003e and most programming languages start their index at \u003ccode\u003e0\u003c/code\u003e. Otherwise,\nit's pretty much a list like you've been making most of your life.\u003c/p\u003e\n\n\u003cp\u003eTo define this \"list\" in JavaScript we would type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etheBeatles\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJohn Lennon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ePaul McCartney\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eRingo Starr\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eGeorge Harrison\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou provide a name (\u003ccode\u003etheBeatles\u003c/code\u003e), an assignment operator (\u003ccode\u003e=\u003c/code\u003e) and then a list\nof data, separated by commas, that should go in the \u003ccode\u003eArray\u003c/code\u003e, wrapped in \u003ccode\u003e[]\u003c/code\u003e.\nEach bit of information is often a scalar value, but it could also be another\ncollection (more on that later).\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eArray\u003c/code\u003e Element / Member\u003c/h2\u003e\n\n\u003cp\u003eThe individual pieces of data inside an \u003ccode\u003eArray\u003c/code\u003e are called \u003cem\u003eelements\u003c/em\u003e. Some\npeople also call the \u003cem\u003eelements\u003c/em\u003e the \u003cem\u003emembers\u003c/em\u003e. In a collection of\n\u003ccode\u003etheBeatles\u003c/code\u003e, the \u003ccode\u003eString\u003c/code\u003e \u003ccode\u003e\"George Harrison\"\u003c/code\u003e is an \u003cem\u003eelement\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eArray\u003c/code\u003e Index\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eArray\u003c/code\u003es provide a number that identifies each \u003cem\u003eelement\u003c/em\u003e called an \u003cem\u003eindex\u003c/em\u003e. The\nindex for the \u003cem\u003eelement\u003c/em\u003e \u003ccode\u003e\"Ringo Starr\"\u003c/code\u003e above is \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe'll cover adding, removing, retrieving, and deleting \u003cem\u003eelements\u003c/em\u003e via their\n\u003cem\u003eindex\u003c/em\u003e in another lesson.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eObject\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eAnother way of thinking about \u003ccode\u003eArray\u003c/code\u003es is that they are like tables that have an\nidentifier that is a \u003ccode\u003eNumber\u003c/code\u003e. If we let the identifier be a \u003ccode\u003eString\u003c/code\u003e \u003cem\u003einstead\u003c/em\u003e\nof a \u003ccode\u003eNumber\u003c/code\u003e, then we'd basically be describing an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhat if we wanted to take our list of the Beatles and describe each member not\nby some \u003ccode\u003eNumber\u003c/code\u003e \u003cem\u003eindex\u003c/em\u003e, but rather by the instrument they played in the band?\nAs a table this might look like:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eInstrument\u003c/th\u003e\n\u003cth\u003eBeatle\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\"Rhythm Guitar\"\u003c/td\u003e\n\u003ctd\u003e\"John Lennon\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\"Bass\"\u003c/td\u003e\n\u003ctd\u003e\"Paul McCartney\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\"Drums\"\u003c/td\u003e\n\u003ctd\u003e\"Ringo Starr\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\"Lead Guitar\"\u003c/td\u003e\n\u003ctd\u003e\"George Harrison\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eAn \u003ccode\u003eObject\u003c/code\u003e is a collection data type that holds multiple pieces of data under a\ncollected name whose members can be read and updated by using a \u003cem\u003ekey\u003c/em\u003e instead of\nan \u003cem\u003eindex\u003c/em\u003e. In daily conversation we use \u003cem\u003ekeys\u003c/em\u003e to retrieve \u003cem\u003evalues\u003c/em\u003e all the\ntime: \"Who was the guy who played \u003cstrong\u003edrums\u003c/strong\u003e in \u003cstrong\u003eThe Beatles\u003c/strong\u003e?\"\u003c/p\u003e\n\n\u003cp\u003eWe can think of \u003ccode\u003eObject\u003c/code\u003es like a table that looks like this:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eKey\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\"liverpool\"\u003c/td\u003e\n\u003ctd\u003e\"The Beatles\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\"manchester\"\u003c/td\u003e\n\u003ctd\u003e\"The Smiths\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\"coventry\"\u003c/td\u003e\n\u003ctd\u003e\"Delia Derbyshire and the BBC Radiophonic Band\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\"london\"\u003c/td\u003e\n\u003ctd\u003e\"Ziggy Stardust and the Spiders from Mars\"\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003eTo define this \"table\" in JavaScript we would type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eenglishBandsByCity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eliverpool\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe Beatles\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003emanchester\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe Smiths\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecoventry\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDelia Derbyshire and the BBC Radiophonic Band\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elondon\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eZiggy Stardust and the Spiders from Mars\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou provide a name (\u003ccode\u003eenglishBandsByCity\u003c/code\u003e), an assignment operator (\u003ccode\u003e=\u003c/code\u003e) and then\na list of pairs, separated by commas, that should go in the \u003ccode\u003eObject\u003c/code\u003e, wrapped in\n\u003ccode\u003e{}\u003c/code\u003e. Each pair should have a key, a colon (\u003ccode\u003e:\u003c/code\u003e), and a value. A value is often\na scalar value, but it could be another collection; more on that later.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eObject\u003c/code\u003e Key\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eObject\u003c/code\u003es are like tables that have a name that is a piece of data, typically a\n\u003ccode\u003eSymbol\u003c/code\u003e or a \u003ccode\u003eString\u003c/code\u003e. This identifier is called a \u003cem\u003ekey\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDefine \u003ccode\u003eObject\u003c/code\u003e Value\u003c/h2\u003e\n\n\u003cp\u003eThe value that's returned from asking an \u003ccode\u003eObject\u003c/code\u003e what a given \u003cem\u003ekey\u003c/em\u003e points to\nis known as the key's \u003cem\u003evalue\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe'll cover adding, removing, retrieving, and deleting \u003cem\u003evalues\u003c/em\u003e via their\n\u003cem\u003ekey\u003c/em\u003e in another lesson.\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate Nesting of Collection Data Structures\u003c/h2\u003e\n\n\u003cp\u003eNow that you know about \u003ccode\u003eArray\u003c/code\u003es (grocery lists, band members, todo lists) and\n\u003ccode\u003eObject\u003c/code\u003es (abbreviation to full name lookup, a stock symbol to trading value\nlookup, instrument to band member name lookup) you might be a bit unimpressed.\n\"Surely the world's data needs are more complex than simple lists and lookup\ntables,\" you might exclaim.\u003c/p\u003e\n\n\u003cp\u003eYou'd be right, but the amazing thing about collections is that they can\ncontain \u003cem\u003eother\u003c/em\u003e collections as part of a process called \u003cem\u003enesting\u003c/em\u003e. Can you\nimagine an \u003ccode\u003eArray\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es? Or an \u003ccode\u003eObject\u003c/code\u003e of \u003ccode\u003eArrays\u003c/code\u003e of \u003ccode\u003eObject\u003c/code\u003es of\n\u003ccode\u003eArray\u003c/code\u003es? You can cover a staggeringly huge model of data with nesting of these\ntwo data types.\u003c/p\u003e\n\n\u003cp\u003eWe want to provide a really complex example of \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es working\ntogether. Most programming texts don't share this concept this early and it\nmakes \"nesting\" sound scary and complex. We're going to give you a short\ndemonstration here so that you can see why you want to have these complex data\nstructures. The details on how to build them etc... will come in later lessons.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003eelements\u003c/em\u003e in an \u003cem\u003eArray\u003c/em\u003e and the \u003cem\u003evalues\u003c/em\u003e in an \u003cem\u003eObject\u003c/em\u003e can be \u003ccode\u003eObject\u003c/code\u003es or\n\u003ccode\u003eArray\u003c/code\u003es \u003cem\u003ethemselves\u003c/em\u003e. This leads to \"nesting\" such that you could build a\ncomplex data structure like the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eenglishMusicByCity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003emanchester\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ebandName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe Smiths\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ememberNames\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMorrissey\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJohnny\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAndy\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMike\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ebandName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJoy Division\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ememberNames\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ePeter\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eStephen\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBernard\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eIan\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003cem\u003eabstraction\u003c/em\u003e \u003ccode\u003eenglishMusicByCity\u003c/code\u003e hides the complexity in that piece of data.\u003c/p\u003e\n\n\u003cp\u003eAs a peek ahead, we can use bracket notation (\u003ccode\u003e[]\u003c/code\u003e) to \"dig into\" this nested\ncollection and get interesting information out:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eenglishMusicByCity\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003emanchester\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ebandName\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; \"The Smiths\"\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eenglishMusicByCity\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003emanchester\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ememberNames\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"c1\"\u003e//=\u0026gt; [\"Morrissey\", \"Johnny\", \"Andy\", \"Mike\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e`There were \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eenglishMusicByCity\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003emanchester\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ememberNames\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e members in \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eenglishMusicByCity\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003emanchester\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ebandName\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]}\u003c/span\u003e\u003cspan class=\"s2\"\u003e`\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"There were 4 members in The Smiths\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThis has been a broad tour of JavaScript's collection data types, \u003ccode\u003eObject\u003c/code\u003e\nand \u003ccode\u003eArray\u003c/code\u003e. Individually, they are data structures that can hold list- and\ndictionary-like data. Amazingly, they can even \u003cem\u003ehold each other\u003c/em\u003e — and that\nmeans we can make very complex data structures from them! We'll practice with\nthese types in the following lessons!\u003c/p\u003e",
            "exportId": "introduction-to-working-with-data-structures"
          },
          {
            "id": 432845,
            "title": "Arrays",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-arrays\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-arrays/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify data structures and \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eCreate \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eAccess the elements in an \u003ccode\u003eArray\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLearn about nested \u003ccode\u003eArray\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eIntroduce \u003ccode\u003eArray\u003c/code\u003e methods\u003c/li\u003e\n\u003cli\u003eUnderstand mutability\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've been focusing on JavaScript's \u003cem\u003eprimitive\u003c/em\u003e data types — types\nthat represent a single value — in particular, strings, Booleans, and\nnumbers. But sometimes we need a way to store a \u003cem\u003ecollection\u003c/em\u003e of data. For this,\nwe need data structures. In this and the next lesson, we will learn about a very\nuseful data structure: \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eBe sure to follow along with the examples in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e. Remember that you can\nsee the value of variables and other expressions by either using a \u003ccode\u003econsole.log\u003c/code\u003e\nin the code window or entering them directly in the console window.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Data Structures and Arrays\u003c/h2\u003e\n\n\u003cp\u003eA \u003cem\u003edata structure\u003c/em\u003e is a means for associating and organizing information.\nOutside of the programming world, we use data structures all the time. For\nexample, we might have a shopping list of the items we need to buy on our next\ngrocery run or an address book for organizing contact information.\u003c/p\u003e\n\n\u003cp\u003eIf we have a lot of related data, it's best to represent it in a related system.\nImagine that we're working on a lottery application that has to represent the\nwinning lottery numbers. We could do that as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esecondNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ethirdNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efourthNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e33\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efifthNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e48\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epowerBall\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe've represented all six pieces of data, but there's no way to refer to them as\na group. Every single time we want to reference that combination of winning\nnumbers, we need to remember and type out six different variable names:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efirstNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esecondNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ethirdNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efourthNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e33\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efifthNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e48\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epowerBall\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003elogWinningNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ethird\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efourth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efifth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003epower\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWinning numbers:\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ethird\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efourth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efifth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003epower\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003elogWinningNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003efirstNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003esecondNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ethirdNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003efourthNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003efifthNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003epowerBall\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Winning numbers: 32 9 14 33 48 5\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat's so much typing! There are much, much better ways to organize data in\nJavaScript. Let's learn about one of the most common: the \u003cem\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCreate Arrays\u003c/h2\u003e\n\n\u003cp\u003eAn \u003ccode\u003eArray\u003c/code\u003e is a list, with the items listed in a particular order, surrounded by\nsquare brackets (\u003ccode\u003e[]\u003c/code\u003e) and separated by commas:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThis\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eis\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ean\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003earray\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eof\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003estrings.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"This\", \"is\", \"an\", \"array\", \"of\", \"strings.\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003cem\u003emembers\u003c/em\u003e or \u003cem\u003eelements\u003c/em\u003e in an \u003ccode\u003eArray\u003c/code\u003e can be data of any type in JavaScript:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003eNaN\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Hello, world!\", 42, null, NaN]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: In some other languages \u003ccode\u003eArray\u003c/code\u003es \u003cem\u003ecannot include elements of\nmultiple types\u003c/em\u003e. In C, C++, Java, Swift, and others you cannot mix types.\nJavaScript, Python, Ruby, Lisp, and others permit this.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eArrays are \u003cem\u003eordered\u003c/em\u003e, meaning that the elements in them will always appear in\nthe same order. This also means that the \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[1, 2, 3]\u003c/code\u003e is different from\nthe \u003ccode\u003eArray\u003c/code\u003e \u003ccode\u003e[3, 2, 1]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eJust like any other type of JavaScript data, we can assign an \u003ccode\u003eArray\u003c/code\u003e to a\nvariable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimeNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e17\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e19\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e23\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e29\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e31\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e37\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eflowers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eRose\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTulip\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eOrchid\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eLily\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can find out how many elements an \u003ccode\u003eArray\u003c/code\u003e contains by checking the \u003ccode\u003eArray\u003c/code\u003e's\nbuilt-in \u003ccode\u003elength\u003c/code\u003e property:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThis\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003earray\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ehas\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eelements\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 5\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe defined the above \u003ccode\u003eArray\u003c/code\u003es using the \u003cem\u003earray literal\u003c/em\u003e syntax —\u0026nbsp;that is, we\nliterally typed out the \u003ccode\u003eArray\u003c/code\u003e that we wanted to create, square brackets and all.\nThere are other ways to create new \u003ccode\u003eArray\u003c/code\u003es, but they are only necessary for very\nrare circumstances. For now, use \u003ccode\u003eArray\u003c/code\u003e literals.\u003c/p\u003e\n\n\u003cp\u003eTo get a sense of just how effective \u003ccode\u003eArray\u003c/code\u003es are at keeping data organized, let's\nrewrite our lottery code to use an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ewinningNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e33\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e48\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003elogWinningNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWinning numbers:\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003elogWinningNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ewinningNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Winning numbers: [32, 9, 14, 33, 48, 5]\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003eArray\u003c/code\u003e provides organization, and we only have to remember \u003cem\u003eone\u003c/em\u003e identifier\n(\u003ccode\u003ewinningNumbers\u003c/code\u003e) instead of six (\u003ccode\u003efirstNumber\u003c/code\u003e, \u003ccode\u003esecondNumber\u003c/code\u003e, and so on). We\ncan also call \u003ccode\u003eArray\u003c/code\u003es \u003cem\u003eexpressive\u003c/em\u003e because putting all the winning numbers in a\nshared data structure communicates to other programmers \"Hey, these things go\ntogether.\"\u003c/p\u003e\n\n\u003cp\u003eThe one benefit of storing all six lottery numbers separately is that we had a\nreally easy way to access each individual number. For example, we could just\nreference \u003ccode\u003epowerBall\u003c/code\u003e to grab the sixth number. Luckily, \u003ccode\u003eArray\u003c/code\u003es offer an\nequally simple syntax for accessing individual members.\u003c/p\u003e\n\n\u003ch2\u003eUsing Bracket Notation\u003c/h2\u003e\n\n\u003cp\u003eEvery element in an \u003ccode\u003eArray\u003c/code\u003e is assigned a unique index value that corresponds to\nits place within the collection, \u003cstrong\u003estarting at 0\u003c/strong\u003e. The first element in the\n\u003ccode\u003eArray\u003c/code\u003e is at index \u003ccode\u003e0\u003c/code\u003e, the fifth element at index \u003ccode\u003e4\u003c/code\u003e, and the 428th element\nat index \u003ccode\u003e427\u003c/code\u003e. We can use \u003cstrong\u003ebracket notation\u003c/strong\u003e (\u003ccode\u003e[]\u003c/code\u003e) to access the element at\na given index.\u003c/p\u003e\n\n\u003ch3\u003eAccessing an Element\u003c/h3\u003e\n\n\u003cp\u003eTo access an element, we use bracket notation like this: \u003ccode\u003enameOfArray[index]\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ewinningNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e14\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e33\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e48\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; undefined\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ewinningNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 32\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ewinningNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 33\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's take a minute to think about how we could access the \u003cstrong\u003elast\u003c/strong\u003e element in\nany \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf \u003ccode\u003emyArray\u003c/code\u003e contains 10 elements, the final element will be at \u003ccode\u003emyArray[9]\u003c/code\u003e. If\n\u003ccode\u003emyArray\u003c/code\u003e contains 15000 elements, the final element will be at\n\u003ccode\u003emyArray[14999]\u003c/code\u003e. So the index of the final element is always one less than the\nnumber of elements in the \u003ccode\u003eArray\u003c/code\u003e. If only we had an easy way to figure out how\nmany elements are in the \u003ccode\u003eArray\u003c/code\u003e...\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ealphabet\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eb\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ec\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ee\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ef\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eg\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eh\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ei\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ej\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ek\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003el\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003em\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003en\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eo\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ep\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eq\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003er\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003es\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003et\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ev\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ew\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ex\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ey\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ez\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; undefined\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ealphabet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 26\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ealphabet\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ealphabet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"z\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe placed an expression (\u003ccode\u003ealphabet.length - 1\u003c/code\u003e) inside the square brackets, and\nthe JavaScript engine \u003cem\u003ecomputed\u003c/em\u003e the value of that expression to determine which\nelement we were trying to access. In this case, \u003ccode\u003ealphabet.length - 1\u003c/code\u003e evaluated\nto \u003ccode\u003e25\u003c/code\u003e, so \u003ccode\u003ealphabet[alphabet.length - 1]\u003c/code\u003e became \u003ccode\u003ealphabet[25]\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eUpdating the Value of an Element\u003c/h2\u003e\n\n\u003cp\u003eWe can also use bracket notation (\u003ccode\u003e[]\u003c/code\u003e) — along with the assignment operator\n(\u003ccode\u003e=\u003c/code\u003e) — to update the value of an element in the array.\u003c/p\u003e\n\n\u003cp\u003eSay we've defined an array, \u003ccode\u003eplanets\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eplanets\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMercury\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eVenus\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eEarth\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMars\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJuptier\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSaturn\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eUranus\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNeptune\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLooks like we've misspelled Jupiter. Let's fix it. To do that, we access\nthe element we want (\u003ccode\u003eplanets[4]\u003c/code\u003e), then reassign that element's value using \u003ccode\u003e=\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eplanets\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJupiter\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Jupiter\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eplanets\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou might wonder why that worked, given that we declared \u003ccode\u003eplanets\u003c/code\u003e using\n\u003ccode\u003econst\u003c/code\u003e. After all, declaring with \u003ccode\u003econst\u003c/code\u003e is supposed to prevent us from\nreassigning the value of the variable! This is an important thing to know about\nhow \u003ccode\u003econst\u003c/code\u003e works with \u003ccode\u003eArray\u003c/code\u003es. We are not able to reassign the array \u003cem\u003eitself\u003c/em\u003e\nbut we \u003cstrong\u003ecan\u003c/strong\u003e reassign any of its elements. We can also add or delete elements.\nJavaScript \u003ccode\u003eObject\u003c/code\u003es work similarly when declared using \u003ccode\u003econst\u003c/code\u003e (which isn't\nsurprising, given that \u003ccode\u003eArray\u003c/code\u003es are a special type of \u003ccode\u003eObject\u003c/code\u003e). The only thing\n\u003ccode\u003econst\u003c/code\u003e prevents us from doing is assigning a new value to the variable\n\u003ccode\u003eplanets\u003c/code\u003e using the \u003ccode\u003e=\u003c/code\u003e operator:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eplanets\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003enew\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003earray\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; Uncaught TypeError: Assignment to constant variable.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eNested Arrays\u003c/h2\u003e\n\n\u003cp\u003eWe mentioned above that arrays can contain elements of \u003cstrong\u003eany\u003c/strong\u003e data type; this includes\n\u003cstrong\u003eother \u003ccode\u003eArray\u003c/code\u003es\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eegregiouslyNestedArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHow\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edeep\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ecan\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ewe\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ego\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e?\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ePretty\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edang\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edeep,\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eit\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eseems.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you examine the array above, you'll see it contains three elements, the\nsecond of which is itself an array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eegregiouslyNestedArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 'How'\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eegregiouslyNestedArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [ 'deep', [ 'can', [ 'we', [Array], 'dang' ], 'deep,' ], 'it' ]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eegregiouslyNestedArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 'seems.'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo we know we can access the inner array using \u003ccode\u003eegregiouslyNestedArray[1]\u003c/code\u003e, but\nhow do we access the array nested inside \u003cem\u003ethat\u003c/em\u003e array? We simply add another set\nof brackets:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eegregiouslyNestedArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 'deep'\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eegregiouslyNestedArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [ 'can', [ 'we', [ 'go', [Array], 'Pretty' ], 'dang' ], 'deep,' ]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eegregiouslyNestedArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 'it'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can continue drilling down in this way, adding another set of brackets for\neach nested array, until we get to the innermost array:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eegregiouslyNestedArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; ['?']\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat innermost array contains only one element, so how would we access that?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eegregiouslyNestedArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; '?'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhile it's great that \u003ccode\u003eArray\u003c/code\u003es allow us to store other \u003ccode\u003eArray\u003c/code\u003es inside them,\nthis is a terrible way to represent a deeply nested data structure. In general,\nit is best to keep your \u003ccode\u003eArray\u003c/code\u003es to \u003cem\u003eno more than two levels deep\u003c/em\u003e. Two levels\nis perfect for representing two-dimensional things, like a tic-tac-toe board:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eboard\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eX\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eO\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eX\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eO\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eX\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eO\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eboard\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [[\"X\", \"O\", \" \"], [\" \", \"X\", \"O\"], [\"X\", \" \", \"O\"]]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe cool thing about representing a game board like that is in how we can access\nthe different squares by specifying coordinates. The first \u003ccode\u003e[]\u003c/code\u003e operator grabs\nthe \u003cstrong\u003erow\u003c/strong\u003e that we want, top (\u003ccode\u003eboard[0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1]\u003c/code\u003e), or bottom\n(\u003ccode\u003eboard[2]\u003c/code\u003e). For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eboard\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\" \", \"X\", \"O\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe second \u003ccode\u003e[]\u003c/code\u003e operator specifies the column, or the square within that row:\nleft (\u003ccode\u003eboard[1][0]\u003c/code\u003e), middle (\u003ccode\u003eboard[1][1]\u003c/code\u003e), or right (\u003ccode\u003eboard[1][2]\u003c/code\u003e). For\nexample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eboard\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"X\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eboard\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \" \"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eboard\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"O\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEffectively, we're using X and Y coordinates to refer to data within a two-\ndimensional structure.\u003c/p\u003e\n\n\u003ch2\u003eArray Methods\u003c/h2\u003e\n\n\u003cp\u003eJavaScript includes a number of built-in \u003ccode\u003eArray\u003c/code\u003e \u003cem\u003emethods\u003c/em\u003e, functions that\n\u003cem\u003ebelong to\u003c/em\u003e (i.e., can only be called on) \u003ccode\u003eArray\u003c/code\u003es. These methods allow us to\nmanipulate arrays in various ways, for example, to add an element to the\nbeginning or end of an \u003ccode\u003eArray\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe have seen methods already in this course. In an earlier lesson, for example,\nwe learned how to use a \u003ccode\u003eString\u003c/code\u003e method, \u003ccode\u003etoUpperCase()\u003c/code\u003e, to get the uppercase\nversion of a \u003ccode\u003eString\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoUpperCase\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"HELLO\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs shown above, we call \u003ccode\u003eString\u003c/code\u003e methods \u003cem\u003eon\u003c/em\u003e a string using dot notation.\n\u003ccode\u003eArray\u003c/code\u003e methods work in the same way. Some of them will take one or more\narguments — for example, the element we want to add to the array. The arguments\nare passed in the parentheses after the method name.\u003c/p\u003e\n\n\u003cp\u003eWe will learn about these \u003ccode\u003eArray\u003c/code\u003e methods in the next lesson. Before we get to\nthat, however, we need to introduce one more concept.\u003c/p\u003e\n\n\u003ch2\u003eMutability\u003c/h2\u003e\n\n\u003cp\u003eSome methods update or \u003cem\u003emutate\u003c/em\u003e the object they are called on; these methods are\nreferred to as \u003cem\u003edestructive\u003c/em\u003e. Other methods, known as \u003cem\u003enondestructive\u003c/em\u003e methods,\nleave the object intact. For example, the \u003ccode\u003eString\u003c/code\u003e method \u003ccode\u003etoUpperCase()\u003c/code\u003e is\n\u003cem\u003enondestructive\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHello\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoUpperCase\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"HELLO\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Hello\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003etoUpperCase()\u003c/code\u003e method returns the uppercased version of \u003ccode\u003estring\u003c/code\u003e, it does\nnot \u003cem\u003echange\u003c/em\u003e its value to uppercase.\u003c/p\u003e\n\n\u003cp\u003eSometimes we want to mutate the original object but, in general, it's good\npractice to avoid mutating a program's state whenever possible. Otherwise, we\nwon't always know what we're dealing with. You will learn more about\nimmutability and why it's important later in the course. But, in the meantime,\nit's important to know which JavaScript methods are destructive and which are\nnondestructive so you can choose the appropriate method for what you need to\naccomplish.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to create\nthem, access their elements, and change the value of elements. We also learned\nthat arrays can contain elements of any data type, including other \u003ccode\u003eArray\u003c/code\u003es; we\nrefer to these as \u003cem\u003enested\u003c/em\u003e arrays. Finally, we talked a little bit about the\nconcept of mutability. Armed with this knowledge, we are now ready to tackle\nJavaScript \u003ccode\u003eArray\u003c/code\u003e methods.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eMDN: Array reference\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "arrays"
          },
          {
            "id": 432847,
            "title": "Array Methods",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-methods\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd elements to an \u003ccode\u003eArray\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eRemove elements from an \u003ccode\u003eArray\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eReplace elements in an \u003ccode\u003eArray\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the last lesson, we learned about JavaScript \u003ccode\u003eArray\u003c/code\u003es, including how to\ncreate them and access their elements. In this lab, we will dive into\nJavaScript's \u003ccode\u003eArray\u003c/code\u003e methods, which enable us to add, remove, and change\nelements.\u003c/p\u003e\n\n\u003cp\u003eWe discussed the fact that it's important to pay attention to whether the method\nis \u003cem\u003edestructive\u003c/em\u003e (i.e., it \u003cem\u003emutates\u003c/em\u003e the array) or \u003cem\u003enondestructive\u003c/em\u003e. Another\nfactor to pay attention to is what the \u003cem\u003ereturn value\u003c/em\u003e of each of these methods\nis. Be sure to follow along and experiment with each method in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e until\nyou understand how it works, what it does to the original array, and what it\nreturns.\u003c/p\u003e\n\n\u003ch2\u003eAdd Elements to an Array\u003c/h2\u003e\n\n\u003cp\u003eWe'll start with the JavaScript methods we can use to add elements to an array:\n\u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, which are \u003cem\u003edestructive\u003c/em\u003e methods, and the spread\noperator, which is \u003cem\u003enondestructive\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThese two methods work in the same way:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThey take one or more arguments (the element or elements you want to add)\u003c/li\u003e\n\u003cli\u003eThey \u003cem\u003ereturn\u003c/em\u003e the length of the modified array\u003c/li\u003e\n\u003cli\u003eThey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe difference is that the \u003ccode\u003e.push()\u003c/code\u003e method adds elements to the end of an\n\u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e adds them to the beginning of the array:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esuperheroes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCatwoman\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eStorm\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJessica Jones\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003esuperheroes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWonder Woman\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 4\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003esuperheroes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Catwoman\", \"Storm\", \"Jessica Jones\", \"Wonder Woman\"]\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecities\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSan Francisco\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecities\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eunshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBoston\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eChicago\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 4\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecities\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Boston\", \"Chicago\", \"New York\", \"San Francisco\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBefore moving on, try out the examples above as well as some examples of your\nown in the REPL.\u003c/p\u003e\n\n\u003ch3\u003eSpread Operator\u003c/h3\u003e\n\n\u003cp\u003eThe \u003cem\u003espread operator\u003c/em\u003e, which looks like an ellipsis: \u003ccode\u003e...\u003c/code\u003e, allows us to \"spread\nout\" the elements of an existing \u003ccode\u003eArray\u003c/code\u003e into a new \u003ccode\u003eArray\u003c/code\u003e, creating a copy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecoolCities\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSan Francisco\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecopyOfCoolCities\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003ecoolCities\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecopyOfCoolCities\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"New York\", \"San Francisco\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou might wonder why we would do this rather than just\n\u003ccode\u003ecopyOfCoolCities = coolCities\u003c/code\u003e. The answer is that \u003ccode\u003ecoolCities\u003c/code\u003e \u003cem\u003epoints to a\nlocation in memory\u003c/em\u003e and when you use the assignment operator to create a copy,\nyou create a second variable that points to the \u003cem\u003esame\u003c/em\u003e location. What this means\nis that, if you change \u003ccode\u003ecopyOfCoolCities\u003c/code\u003e, \u003ccode\u003ecoolCities\u003c/code\u003e is changed as well (and\nvice versa).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eA note about copying arrays in JavaScript\u003c/strong\u003e Copying arrays in\nJavaScript is complicated! Some methods of copying create \u003cem\u003edeep\u003c/em\u003e copies and\nsome create \u003cem\u003eshallow\u003c/em\u003e copies. Using the spread operator to copy an array\ncreates a shallow copy. What this means is that, if you use it to copy a\nnested array, the inner array (or arrays) \u003cem\u003estill points to the same location\nin memory\u003c/em\u003e as in the original array. So if you modify the \u003cem\u003einner\u003c/em\u003e array in the\ncopy, it changes the inner array in the original array as well (and vice\nversa). Don't worry too much about shallow and deep copies at this point: just\nknow that you can safely use the spread operator to clone \u003cem\u003enon-nested\u003c/em\u003e arrays.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eBecause the spread operator is an operator rather than a method, it\nworks differently than \u003ccode\u003epush()\u003c/code\u003e and \u003ccode\u003eunshift()\u003c/code\u003e: in the example above, we're\nconstructing an \u003ccode\u003eArray\u003c/code\u003e using \u003cem\u003eliteral\u003c/em\u003e notation (i.e., typing the square\nbrackets) and populating it by using the spread operator on the \u003ccode\u003eArray\u003c/code\u003e we want\nto copy.\u003c/p\u003e\n\n\u003cp\u003eWhere the spread operator comes in especially handy is when we want to add one\nor more new elements either before or after the elements in the original array\n(or both) without mutating the original array. To add an element to the front of\nthe new array, we simply type in the new element before spreading the elements\nin the original array:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecoolCities\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSan Francisco\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eallCities\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eLos Angeles\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"nx\"\u003ecoolCities\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecoolCities\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"New York\", \"San Francisco\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eallCities\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Los Angeles\", \"New York\", \"San Francisco\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd, as you might expect, to add a new item to the end of an \u003ccode\u003eArray\u003c/code\u003e, we type in\nthe new element \u003cem\u003eafter\u003c/em\u003e spreading the elements in the original array:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecoolCats\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHobbes\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFelix\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTom\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eallCats\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003ecoolCats\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eGarfield\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecoolCats\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eallCats\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Hobbes\", \"Felix\", \"Tom\", \"Garfield\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that, in both cases, we created a new \u003ccode\u003eArray\u003c/code\u003e instead of modifying the\noriginal one — our \u003ccode\u003ecoolCities\u003c/code\u003e and \u003ccode\u003ecoolCats\u003c/code\u003e \u003ccode\u003eArray\u003c/code\u003es were untouched. Because\nwe didn't modify the original array, in order to save the results of our work we\nhad to assign it to a variable.\u003c/p\u003e\n\n\u003cp\u003eBe sure to experiment with the spread operator in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e until you're\ncomfortable with how it works — it will come in handy later!\u003c/p\u003e\n\n\u003ch2\u003eRemove Elements from an Array\u003c/h2\u003e\n\n\u003cp\u003eAs complements for \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, respectively, we have \u003ccode\u003e.pop()\u003c/code\u003e\nand \u003ccode\u003e.shift()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e.pop()\u003c/code\u003e and \u003ccode\u003e.shift()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAs with \u003ccode\u003e.push()\u003c/code\u003e and \u003ccode\u003e.unshift()\u003c/code\u003e, these two methods work in the same way:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethey don't take any arguments\u003c/li\u003e\n\u003cli\u003ethey remove a single element\u003c/li\u003e\n\u003cli\u003ethey \u003cem\u003ereturn\u003c/em\u003e the element that is removed\u003c/li\u003e\n\u003cli\u003ethey are \u003cem\u003edestructive\u003c/em\u003e methods\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe \u003ccode\u003e.pop()\u003c/code\u003e method removes the last element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Sun\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003e.shift()\u003c/code\u003e method removes the first element in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eshift\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Mon\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice above that both methods returned the removed element and mutated the\noriginal array.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eTo remove elements from an \u003ccode\u003eArray\u003c/code\u003e nondestructively (without mutating the\noriginal \u003ccode\u003eArray\u003c/code\u003e), we can use the \u003ccode\u003e.slice()\u003c/code\u003e method. Just as the name implies,\n\u003ccode\u003e.slice()\u003c/code\u003e returns a portion, or \u003cstrong\u003eslice\u003c/strong\u003e, of an \u003ccode\u003eArray\u003c/code\u003e. The method takes 0,\n1, or 2 arguments and returns a new array containing the sliced elements.\u003c/p\u003e\n\n\u003ch4\u003eWith No Arguments\u003c/h4\u003e\n\n\u003cp\u003eIf we don't provide any arguments, \u003ccode\u003e.slice()\u003c/code\u003e will return a copy of the original\n\u003ccode\u003eArray\u003c/code\u003e with all elements intact:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecopyOfPrimes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [2, 3, 5, 7]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecopyOfPrimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [2, 3, 5, 7]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that creating a copy using \u003ccode\u003e.slice()\u003c/code\u003e works the same way as if you use the\nspread operator: they both create a \u003cem\u003eshallow\u003c/em\u003e copy, and with both the copy\npoints to a different object in memory than the original. If you add an element\nto one of the arrays, it does \u003cstrong\u003enot\u003c/strong\u003e get added to the others:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecopyOfPrimesUsingSlice\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecopyOfPrimesUsingSpreadOperator\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; 5\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [2, 3, 5, 7, 11]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecopyOfPrimesUsingSlice\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [2, 3, 5, 7]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecopyOfPrimesUsingSpreadOperator\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [2, 3, 5, 7]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003eWith Arguments\u003c/h4\u003e\n\n\u003cp\u003eWe can also provide one or two arguments to \u003ccode\u003e.slice()\u003c/code\u003e: the first is the index\nwhere the slice should begin and the second is the index \u003cstrong\u003ebefore which\u003c/strong\u003e it\nshould end:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf no second argument is provided, the slice will run from the index specified\nby the first argument to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Sat\", \"Sun\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo return a new \u003ccode\u003eArray\u003c/code\u003e with the first element removed, we call \u003ccode\u003e.slice(1)\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd we can return an array with the last element removed in a way that will look\nfamiliar from the previous lesson:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, \u003ccode\u003e.slice()\u003c/code\u003e provides an easier syntax for referencing the last element\n(or elements) in an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Sun\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Fri\", \"Sat\", \"Sun\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we provide a negative index, the JavaScript engine knows to start counting\nfrom the last element in the \u003ccode\u003eArray\u003c/code\u003e instead of the first.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eUnlike \u003ccode\u003e.slice()\u003c/code\u003e, which is nondestructive, \u003ccode\u003e.splice()\u003c/code\u003e performs destructive\nactions. Depending on how many arguments we give it, \u003ccode\u003e.splice()\u003c/code\u003e allows us to\nremove elements, add elements, or replace elements (or any combination of the\nthree).\u003c/p\u003e\n\n\u003ch4\u003eWith a Single Argument\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe first argument expected by \u003ccode\u003e.splice()\u003c/code\u003e is the index at which to begin the\nsplice. If we only provide the one argument, \u003ccode\u003e.splice()\u003c/code\u003e will destructively\nremove a chunk of the original \u003ccode\u003eArray\u003c/code\u003e beginning at the provided index and\ncontinuing to the end of the \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Mon\", \"Tue\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e \u003cstrong\u003eboth\u003c/strong\u003e mutated the original array (by removing a\nchunk, leaving just \u003ccode\u003e[\"Mon\", \"Tue\"]\u003c/code\u003e) \u003cstrong\u003eand\u003c/strong\u003e returned a new array containing\nthe removed chunk.\u003c/p\u003e\n\n\u003cp\u003eWe can use a negative 'start' index with \u003ccode\u003esplice()\u003c/code\u003e, the same as with \u003ccode\u003eslice()\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Sat\", \"Sun\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003eWith Two Arguments\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edeleteCount\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we provide two arguments to \u003ccode\u003e.splice()\u003c/code\u003e, the first is still the index at\nwhich to begin splicing, and the second dictates how many elements we want to\nremove from the \u003ccode\u003eArray\u003c/code\u003e. For example, to remove \u003ccode\u003e3\u003c/code\u003e elements, starting with the\nelement at index \u003ccode\u003e2\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMon\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTue\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFri\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSun\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Wed\", \"Thu\", \"Fri\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edays\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Mon\", \"Tue\", \"Sat\", \"Sun\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere again, we see that \u003ccode\u003esplice()\u003c/code\u003e removed elements from the original array,\nmutating that array, and returned the removed elements in a new array.\u003c/p\u003e\n\n\u003ch2\u003eReplace Elements in an Array\u003c/h2\u003e\n\n\u003ch3\u003e\u003ccode\u003e.splice()\u003c/code\u003e with 3+ arguments\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edeleteCount\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eitem1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eitem2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter the first two, every additional argument passed to \u003ccode\u003e.splice()\u003c/code\u003e will be\ninserted into the \u003ccode\u003eArray\u003c/code\u003e at the position indicated by the first argument. We\ncan replace a single element in an \u003ccode\u003eArray\u003c/code\u003e as follows, discarding a card and\ndrawing a new one:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecards\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAce of Spades\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJack of Clubs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNine of Clubs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNine of Diamonds\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThree of Hearts\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecards\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAce of Clubs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Nine of Clubs\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecards\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe have deleted \"Nine of Clubs\" and inserted \"Ace of Clubs\" in place,\neffectively \u003cem\u003ereplacing\u003c/em\u003e the original card.\u003c/p\u003e\n\n\u003cp\u003eOr we can remove two elements and insert three new ones as our restaurant\nexpands its vegetarian options:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJalapeno Poppers\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCheeseburger\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFish and Chips\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFrench Fries\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eOnion Rings\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eVeggie Burger\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHouse Salad\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTeriyaki Tofu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Cheeseburger\", \"Fish and Chips\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe aren't required to remove anything with \u003ccode\u003e.splice()\u003c/code\u003e — we can use it to insert\nany number of elements anywhere within an \u003ccode\u003eArray\u003c/code\u003e by passing 0 as the second\nargument. Here we're adding new books to our library in alphabetical order:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ebooks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBeloved\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eGiovanni’s Room\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe Color Purple\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe Grass Dancer\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ebooks\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eKindred\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eLove Medicine\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; []\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ebooks\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; ['Beloved', 'Giovanni’s Room', 'Kindred', 'Love Medicine', 'The Color Purple', 'The Grass Dancer']\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that \u003ccode\u003e.splice()\u003c/code\u003e returns an empty \u003ccode\u003eArray\u003c/code\u003e when we provide a second\nargument of \u003ccode\u003e0\u003c/code\u003e. This makes sense because the return value is the set of\nelements that were removed, and we're telling it to remove \u003ccode\u003e0\u003c/code\u003e elements.\u003c/p\u003e\n\n\u003cp\u003eKeep playing around with \u003ccode\u003e.splice()\u003c/code\u003e in the REPL to get comfortable with it.\u003c/p\u003e\n\n\u003ch3\u003eUsing Bracket Notation to Replace Elements\u003c/h3\u003e\n\n\u003cp\u003eRecall from the previous lesson that we can also use bracket notation to replace\na single element in an \u003ccode\u003eArray\u003c/code\u003e. If we only need to replace one element, this is\na simpler approach:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecards\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAce of Spades\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJack of Clubs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNine of Clubs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNine of Diamonds\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThree of Hearts\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecards\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAce of Clubs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Ace of Clubs\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecards\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Ace of Spades\", \"Jack of Clubs\", \"Ace of Clubs\", \"Nine of Diamonds\", \"Three of Hearts\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBoth this approach and \u003ccode\u003esplice()\u003c/code\u003e are destructive — they modify the original\n\u003ccode\u003eArray\u003c/code\u003e. There's a \u003cem\u003enondestructive\u003c/em\u003e way to replace or add items at arbitrary\npoints within an \u003ccode\u003eArray\u003c/code\u003e; to do it we need to combine the \u003ccode\u003eslice()\u003c/code\u003e method and\nthe spread operator.\u003c/p\u003e\n\n\u003ch3\u003eSlicing and Spreading\u003c/h3\u003e\n\n\u003cp\u003eCombining \u003ccode\u003e.slice()\u003c/code\u003e and the spread operator allows us to replace elements\n\u003cem\u003enondestructively\u003c/em\u003e, leaving the original \u003ccode\u003eArray\u003c/code\u003e unharmed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJalapeno Poppers\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCheeseburger\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFish and Chips\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFrench Fries\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eOnion Rings\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enewMenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"nx\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eVeggie Burger\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHouse Salad\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTeriyaki Tofu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"nx\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Cheeseburger\", \"Fish and Chips\", \"French Fries\", \"Onion Rings\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003enewMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"Jalapeno Poppers\", \"Veggie Burger\", \"House Salad\", \"Teriyaki Tofu\", \"French Fries\", \"Onion Rings\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's unpack this a little bit. We're assigning an array to \u003ccode\u003enewMenu\u003c/code\u003e using\nliteral notation. Inside the brackets, we are spreading the result of calling\nslice on \u003ccode\u003emenu\u003c/code\u003e with the arguments \u003ccode\u003e0\u003c/code\u003e and \u003ccode\u003e1\u003c/code\u003e, then typing in three new\nelements, then spreading the result of calling slice on \u003ccode\u003emenu\u003c/code\u003e with the argument\n\u003ccode\u003e3\u003c/code\u003e. Here, we are taking advantage of the fact that the \u003ccode\u003eslice()\u003c/code\u003e method\n\u003cstrong\u003ereturns a new array\u003c/strong\u003e. We can spread the elements in \u003cstrong\u003ethat\u003c/strong\u003e array just as we\ncan with any other array.\u003c/p\u003e\n\n\u003cp\u003ePlay around with this in the REPL until it makes sense; break it down into its\ncomponent parts and try each piece on its own. It's the trickiest thing that\nwe've encountered in this lesson, so don't sweat it if it takes a little while\nto sink in!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we've learned a variety of methods we can use to remove, add,\nand replace the elements in \u003ccode\u003eArray\u003c/code\u003es. We've learned that some methods are\n\u003cem\u003edestructive\u003c/em\u003e and some are \u003cem\u003enondestructive\u003c/em\u003e. With this knowledge, you have the\ntools you need to manipulate \u003ccode\u003eArray\u003c/code\u003es in very complex ways.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/array-methods/javascript-array-methods.jpg\" alt=\"JavaScript Array Methods\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\"\u003eArray\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\"\u003e\u003ccode\u003e.slice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"\u003e\u003ccode\u003e.splice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "array-methods"
          },
          {
            "id": 432849,
            "title": "Arrays Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-array-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice writing arrays\u003c/li\u003e\n\u003cli\u003ePractice using \u003cem\u003edestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e\n\u003cli\u003ePractice using \u003cem\u003enondestructive\u003c/em\u003e methods to manipulate arrays\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've learned about how arrays work and about the array methods built in to\nJavaScript that we can use to manipulate them. Now it's time to practice what\nwe've learned.\u003c/p\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eOpen up the \u003ccode\u003etest\u003c/code\u003e folder and take a look at \u003ccode\u003eindexTest.js\u003c/code\u003e. Note that some of\nthe names of the functions you will be writing begin with \u003ccode\u003edestructively\u003c/code\u003e and\nsome don't. This is a clue as to which \u003ccode\u003eArray\u003c/code\u003e method you will need to use for\neach function.\u003c/p\u003e\n\n\u003cp\u003eNote also that the first test asks for an array called \u003ccode\u003ecats\u003c/code\u003e, set to an\ninitial value of \u003ccode\u003e[\"Milo\", \"Otis\", \"Garfield\"]\u003c/code\u003e. In your functions, you will be\naccessing and manipulating this array.\u003c/p\u003e\n\n\u003cp\u003eNear the top of \u003ccode\u003eindexTest.js\u003c/code\u003e you will see the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ebeforeEach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecats\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003ecats\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eMilo\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eOtis\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eGarfield\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat this code does is \u003cem\u003ereset\u003c/em\u003e the array to its original contents before each\ntest is run. The reason we need to do this is because some of your functions\nwill be \u003cem\u003edestructive\u003c/em\u003e — they will change the original \u003ccode\u003ecats\u003c/code\u003e array. This\nis a problem because it means the input to the remaining functions will be\ndependent on the outcome of other functions. It also means that the expected\nreturn value of a function might change if the tests are run in a different\norder. This makes it more difficult both to write tests in the first place and\nto figure out how to get the tests to pass. Resetting the array returns us to a\nblank slate between tests.\u003c/p\u003e\n\n\u003cp\u003eThis is also a good illustration of why it's generally good practice to avoid\nmutating a program's state whenever possible. If we use only \u003cem\u003enondestructive\u003c/em\u003e\nmethods, we have complete control over what's going into and coming out of the\nfunction. This makes our programs more robust, easier to maintain, and less\nprone to bugs.\u003c/p\u003e\n\n\u003cp\u003eRemember the workflow:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRun the tests using \u003ccode\u003elearn test\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRead the errors; vocalize what they're asking you to do.\u003c/li\u003e\n\u003cli\u003eWrite code; repeat steps 1 and 2 often until a test passes.\u003c/li\u003e\n\u003cli\u003eRepeat as needed for the remaining tests.\u003c/li\u003e\n\u003c/ol\u003e",
            "exportId": "g0e7d4167781e74380fa6fa207dbc8238"
          },
          {
            "id": 432851,
            "title": "Objects",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-readme\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-readme/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify JavaScript \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e\n\u003cli\u003eAccess a value stored in an \u003ccode\u003eObject\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLearn about JavaScript's Object methods\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhile \u003ccode\u003eArray\u003c/code\u003es are great for representing simple, ordered data sets, they're\ngenerally not so great at modeling a more complex structure. For that, we need\n\u003ccode\u003eObject\u003c/code\u003es. In this lesson, we'll begin to learn about \u003ccode\u003eObject\u003c/code\u003es, specifically,\nwhat they are, how to create them, and how to access values stored in them. In\nthe next lesson, we'll learn how to modify \u003ccode\u003eObject\u003c/code\u003es, both destructively and\nnondestructively.\u003c/p\u003e\n\n\u003cp\u003eBe sure to follow along with the examples in this lesson in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: You may have heard about or be familiar with the concept of\n\u003cem\u003eobject-oriented programming\u003c/em\u003e. Un-helpfully JavaScript called this thing with\ncurly braces (\u003ccode\u003e{}\u003c/code\u003e) an \u003ccode\u003eObject\u003c/code\u003e, but it is not related to object orientation.\nThere was initially no thought that JavaScript would ever need to accommodate\nobject-oriented programming but as it grew in popularity, the ability to use\nobject orientation was added to the language. A JavaScript \u003ccode\u003eObject\u003c/code\u003e, however,\nis a \u003cem\u003edata structure\u003c/em\u003e consisting of \u003ccode\u003ekey\u003c/code\u003es and \u003ccode\u003evalue\u003c/code\u003es, similar to Ruby's\n\u003ccode\u003eHash\u003c/code\u003e, Python's \u003ccode\u003eDictionary\u003c/code\u003e or C-like languages' \u003ccode\u003estruct\u003c/code\u003e(ure). It is\nimportant not to confuse the two.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eIdentify JavaScript Objects\u003c/h2\u003e\n\n\u003cp\u003eLet's think about how we could represent a company's address in JavaScript.\nAddresses are made up of words and numbers, so at first it might make sense to\nstore the address as a string:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e11 Broadway, 2nd Floor, New York, NY 10004\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat looks decent enough, but what happens if the company moves to a different\nfloor in the same building? We just need to modify one piece of the address, but\nwith a string we'd have to involve some pretty complicated find-and-replace\npattern matching or replace the entire thing. Instead, let's throw the different\npieces of the address into an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e11 Broadway\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e2nd Floor\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNY\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e10004\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, we can just grab the small piece that we want to update and leave the rest\nas is:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e3rd Floor\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"11 Broadway\", \"3rd Floor\", \"New York\", \"NY\", \"10004\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis seems like a better solution, but it still has its drawbacks. Namely,\n\u003ccode\u003eaddress[1]\u003c/code\u003e is a \u003cstrong\u003eterrible\u003c/strong\u003e way to refer to the second line of an address.\nWhat if there is no second line, e.g.,\n\u003ccode\u003e['11 Broadway', 'New York', 'NY', '10004']\u003c/code\u003e? Then \u003ccode\u003eaddress[1]\u003c/code\u003e will contain the\ncity name instead of the floor number.\u003c/p\u003e\n\n\u003cp\u003eWe could standardize it, putting an empty string in \u003ccode\u003eaddress[1]\u003c/code\u003e if there's no\nsecond line in the address, but it's still poorly named. \u003ccode\u003eaddress[1]\u003c/code\u003e offers\nvery little insight into what data we should expect to find in there. It's a\npart of an address, sure, but which part?\u003c/p\u003e\n\n\u003cp\u003eTo get around this, we could store the individual pieces of the address in\nseparate, appropriately-named variables:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estreet1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e11 Broadway\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estreet2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e2nd Floor\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNY\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ezipCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e10004\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat's solved one issue but reintroduced the same problem we tackled in the\nlesson on \u003ccode\u003eArray\u003c/code\u003es: storing pieces of related data in a bunch of unrelated\nvariables is not a great idea! If only there were a best-of-both-worlds solution\n—\u0026nbsp;a way to store all of our address information in a single data structure\nwhile also maintaining a descriptive naming scheme. The data structure we're\nafter here is the \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWhat Is an Object?\u003c/h3\u003e\n\n\u003cp\u003eLike \u003ccode\u003eArray\u003c/code\u003es, JavaScript \u003ccode\u003eObject\u003c/code\u003es are collections of data. They consist of a\nlist of \u003cem\u003eproperties\u003c/em\u003e (\u003cem\u003ekey-value pairs\u003c/em\u003e) bounded by curly braces (\u003ccode\u003e{ }\u003c/code\u003e). The\nproperties can point to values of any data type —\u0026nbsp;even other \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eWe can have empty \u003ccode\u003eObject\u003c/code\u003es:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr \u003ccode\u003eObject\u003c/code\u003es with a single property:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"na\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we have to represent multiple properties in the same \u003ccode\u003eObject\u003c/code\u003e (which is\nmost of the time), we use commas to separate them:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ekey1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ekey2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can also have nested \u003ccode\u003eObject\u003c/code\u003es, in which the values associated with one or\nmore of the keys is another \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ekey1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ekey2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003einnerKey1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003einnerValue1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003einnerKey2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003einnerValue2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere is no limit to how deeply nested our \u003ccode\u003eObject\u003c/code\u003es can be.\u003c/p\u003e\n\n\u003cp\u003eFor a real example, let's define our address as an \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estreet\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eline1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e11 Broadway\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003eline2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e2nd Floor\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecity\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNY\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ezipCode\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e10004\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere we're defining \u003ccode\u003eaddress\u003c/code\u003e using \u003ccode\u003eObject\u003c/code\u003e literal syntax: literally typing\nout the \u003ccode\u003eObject\u003c/code\u003e inside the \u003ccode\u003e{}\u003c/code\u003e. Our address \u003ccode\u003eObject\u003c/code\u003e has four keys: street,\ncity, state, and zipCode. The first key points to another \u003ccode\u003eObject\u003c/code\u003e which itself\nhas two keys: line1 and line2. Note that there's a comma between each key-value\npair in both the top-level \u003ccode\u003eObject\u003c/code\u003e and the nested \u003ccode\u003eObject\u003c/code\u003e. Practice creating an\nobject in the REPL; then try leaving out a comma to see what happens.\u003c/p\u003e\n\n\u003cp\u003eMultiple properties can have the same value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emeals\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ebreakfast\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAvocado toast\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elunch\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAvocado toast\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003edinner\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAvocado toast\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emeals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebreakfast\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Avocado toast\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emeals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003edinner\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Avocado toast\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut keys must be unique. If the same key is used for multiple properties, only\nthe final value will be retained.\u0026nbsp;The rest will be overwritten:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emeals\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ebreakfast\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAvocado toast\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ebreakfast\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eOatmeal\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ebreakfast\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eScrambled eggs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emeals\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; { breakfast: \"Scrambled eggs\" }\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe real data in an \u003ccode\u003eObject\u003c/code\u003e is stored in the \u003cem\u003evalue\u003c/em\u003e half of the key-value\npairings. The \u003cem\u003ekey\u003c/em\u003e is what lets us access that value. In the same way we use\n\u003cem\u003eidentifiers\u003c/em\u003e to name variables and functions, inside an \u003ccode\u003eObject\u003c/code\u003e we assign each\nvalue a key. We can then refer to that key and the JavaScript engine knows\nexactly which value we're trying to access.\u003c/p\u003e\n\n\u003ch2\u003eAccess a Value Stored in an Object\u003c/h2\u003e\n\n\u003cp\u003eWe access an \u003ccode\u003eObject\u003c/code\u003e stored in a variable in the same way we access any\nvariable's value: by typing the variable name. Then, to access one of the values\n\u003cem\u003einside\u003c/em\u003e our \u003ccode\u003eObject\u003c/code\u003e, we add a reference to the key associated with the value we\nwant; we can do that using either \u003cem\u003edot notation\u003c/em\u003e or \u003cem\u003ebracket notation\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eDot Notation\u003c/h3\u003e\n\n\u003cp\u003eWith \u003cem\u003edot notation\u003c/em\u003e, we use the \u003cem\u003emember access operator\u003c/em\u003e (a single period) to\naccess values in an \u003ccode\u003eObject\u003c/code\u003e. For example, we can grab the individual pieces of\nour address, above, as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estreet\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecity\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"New York\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"NY\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ezipCode\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"10004\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen to access a value inside \u003ccode\u003eaddress.street\u003c/code\u003e, we simply append the inner key,\nagain using dot notation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estreet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eline1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"11 Broadway\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estreet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eline2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"2nd Floor\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You might initially think we should use \u003ccode\u003eaddress.line1\u003c/code\u003e to access\nthe value associated with the \u003ccode\u003eline1\u003c/code\u003e key, but \u003ccode\u003eaddress\u003c/code\u003e and \u003ccode\u003eaddress.street\u003c/code\u003e\nare \u003cem\u003eseparate\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003es. \u003ccode\u003eaddress.street\u003c/code\u003e is the \u003cem\u003eidentifier\u003c/em\u003e for the nested\n\u003ccode\u003eObject\u003c/code\u003e — the one that contains the \u003ccode\u003eline1\u003c/code\u003e key — and we can use dot notation\non that just the same as on the top-level \u003ccode\u003eObject\u003c/code\u003e, \u003ccode\u003eaddress\u003c/code\u003e. Experiment in\nthe REPL to make sure you understand how it works.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eDot notation is fantastic for readability, as we can just reference the bare key\nname (e.g., \u003ccode\u003estreet\u003c/code\u003e or \u003ccode\u003ezipCode\u003c/code\u003e). Because of this simple syntax, it should be\nyour go-to strategy for accessing the properties of an \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: Most people just call it \u003cem\u003edot notation\u003c/em\u003e or the \u003cem\u003edot operator\u003c/em\u003e, so\ndon't worry too much about remembering the term \u003cem\u003emember access operator\u003c/em\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003eAccessing Nonexistent Properties\u003c/h4\u003e\n\n\u003cp\u003eIf we try to access the \u003ccode\u003ecountry\u003c/code\u003e property of our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, what will\nhappen?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountry\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt returns \u003ccode\u003eundefined\u003c/code\u003e because there is no matching key on the \u003ccode\u003eObject\u003c/code\u003e.\nJavaScript is too nice to throw an error, so it lets us down gently. Keep one\nthing in mind, though: if you're seeing \u003ccode\u003eundefined\u003c/code\u003e when trying to access an\n\u003ccode\u003eObject\u003c/code\u003e's properties, you should recheck which properties exist on the \u003ccode\u003eObject\u003c/code\u003e\n(along with your spelling and capitalization)!\u003c/p\u003e\n\n\u003ch3\u003eBracket Notation\u003c/h3\u003e\n\n\u003cp\u003eWith \u003cem\u003ebracket notation\u003c/em\u003e, we use the \u003cem\u003ecomputed member access operator\u003c/em\u003e, which,\nrecall from the lesson on \u003ccode\u003eArray\u003c/code\u003es, is a pair of square brackets (\u003ccode\u003e[]\u003c/code\u003e). To access\nthe same properties as above, we need to represent them as strings inside the\noperator:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003estreet\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; { line1: \"11 Broadway\", line2: \"2nd Floor\" }\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003estreet\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eline1\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"11 Broadway\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003estreet\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eline2\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"2nd Floor\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ecity\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"New York\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003estate\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"NY\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ezipCode\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"10004\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBracket notation is a bit harder to read than dot notation, so we always default\nto the latter. However, there are two main situations in which we need to use\nbracket notation.\u003c/p\u003e\n\n\u003ch4\u003eNonstandard Keys\u003c/h4\u003e\n\n\u003cp\u003eIf (for whatever reason) you need to use a nonstandard string as the key in an\n\u003ccode\u003eObject\u003c/code\u003e, you'll only be able to access the properties with bracket notation. For\nexample, this is a valid \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ewildKeys\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCash rules everything around me.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWu\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eC.R.E.A.M.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eTang\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eGet the money.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFor\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e$ $ bill, y'all!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eEver\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt's impossible to access those properties with dot notation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ewildKeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eCash rules everything around me.\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ERROR: Uncaught SyntaxError: Unexpected string\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut bracket notation works just fine:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ewildKeys\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e$ $ bill, y'all!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Ever\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn order to access a property via dot notation, \u003cstrong\u003ethe key must follow the same\nnaming rules applied to variables and functions\u003c/strong\u003e. It's also important to note\nthat under the hood \u003cstrong\u003eall keys are strings\u003c/strong\u003e. Don't waste too much time\nworrying whether a key is accessible via dot notation. If you follow these rules\nwhen naming your keys, everything will work out:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ecamelCaseEverything\u003c/li\u003e\n\u003cli\u003eStart the key with a lowercase letter\u003c/li\u003e\n\u003cli\u003eNo spaces or punctuation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf you follow those three rules, you'll be able to access all of an \u003ccode\u003eObject\u003c/code\u003e's\nproperties via bracket notation \u003cstrong\u003eor\u003c/strong\u003e dot notation.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Always name your \u003ccode\u003eObject\u003c/code\u003e's keys according to the above three\nrules. Keeping everything standardized is good, and being able to access\nproperties via dot notation makes the code much more readable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch4\u003eAccessing Properties Dynamically\u003c/h4\u003e\n\n\u003cp\u003eThe other situation in which bracket notation is required is if we want to\ndynamically access properties (i.e., using variables rather than literal\nidentifiers). The reason we need to enclose the key inside quotes when we use\nthe literal key is because, when we \u003cstrong\u003edon't\u003c/strong\u003e use the quotes, JavaScript will\ninterpret what's inside the brackets as a variable.\u003c/p\u003e\n\n\u003cp\u003eFrom the lesson on \u003ccode\u003eArray\u003c/code\u003es, remember why we call it the \u003cem\u003ecomputed member access\noperator\u003c/em\u003e: we can place any expression inside the brackets and JavaScript will\n\u003cem\u003ecompute\u003c/em\u003e its value to figure out which property to access. For example, we can\naccess the \u003ccode\u003ezipCode\u003c/code\u003e property from our \u003ccode\u003eaddress\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ezip\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCode\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"10004\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePretty neat, but the real strength of bracket notation is its ability to compute\nthe value of variables on the fly. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emeals\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ebreakfast\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eOatmeal\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elunch\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCaesar salad\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003edinner\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eChimichangas\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003emealName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003elunch\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emeals\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emealName\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Caesar salad\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBy placing \u003ccode\u003emealName\u003c/code\u003e in the square brackets, we're telling the JavaScript\nengine it needs to \u003cem\u003einterpret\u003c/em\u003e the value inside those brackets. It evaluates\n\u003ccode\u003emealName\u003c/code\u003e, resolves it to \u003ccode\u003e'lunch'\u003c/code\u003e, and returns \"Caesar salad\". Note that we\ndidn't enclose the key in quotes: the keys themselves are strings, but\n\u003ccode\u003emealName\u003c/code\u003e is a variable \u003cem\u003econtaining\u003c/em\u003e a string. If we try to use the \u003ccode\u003emealName\u003c/code\u003e\nvariable with dot notation instead, it doesn't work:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emealName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edinner\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"dinner\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emeals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emealName\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith dot notation, JavaScript doesn't treat \u003ccode\u003emealName\u003c/code\u003e as a variable\n—\u0026nbsp;instead it checks whether a property exists with the literal key\n\u003ccode\u003emealName\u003c/code\u003e, only finds properties named \u003ccode\u003ebreakfast\u003c/code\u003e, \u003ccode\u003elunch\u003c/code\u003e, and \u003ccode\u003edinner\u003c/code\u003e, and\nso returns \u003ccode\u003eundefined\u003c/code\u003e. Essentially, dot notation is for when you know the exact\nname of the property in advance, and bracket notation is for when you need to\ncompute it when the program runs.\u003c/p\u003e\n\n\u003cp\u003eThe need for bracket notation doesn't stop at dynamically accessing properties\non an already-created \u003ccode\u003eObject\u003c/code\u003e. We can also use bracket notation to dynamically\nset properties \u003cem\u003eduring the creation of a new \u003ccode\u003eObject\u003c/code\u003e\u003c/em\u003e. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emorningMeal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ebreakfast\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddayMeal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003elunch\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eeveningMeal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edinner\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emeals\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emorningMeal\u003c/span\u003e\u003cspan class=\"p\"\u003e]:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFrench toast\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emiddayMeal\u003c/span\u003e\u003cspan class=\"p\"\u003e]:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ePersonal pizza\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eeveningMeal\u003c/span\u003e\u003cspan class=\"p\"\u003e]:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFish and chips\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emeals\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; { breakfast: \"French toast\", lunch: \"Personal pizza\", dinner: \"Fish and chips\" }\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce again, by wrapping the variable names in square brackets, we're letting\nJavaScript know that it needs to interpret the contents. Let's try doing the\nsame thing without the square brackets:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emorningMeal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ebreakfast\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddayMeal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003elunch\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eeveningMeal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edinner\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emeals\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003emorningMeal\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFrench toast\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003emiddayMeal\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ePersonal pizza\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eeveningMeal\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFish and chips\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emeals\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; { morningMeal: \"French toast\", middayMeal: \"Personal pizza\", eveningMeal: \"Fish and chips\" }\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWithout the square brackets, JavaScript treated each key as a literal identifier\ninstead of a variable. Bracket notation — the \u003cem\u003ecomputed member access\noperator\u003c/em\u003e — once again shows its powers of computation!\u003c/p\u003e\n\n\u003cp\u003eBracket notation will really come in handy when we start iterating over \u003ccode\u003eObject\u003c/code\u003es\nand programmatically accessing and assigning properties.\u003c/p\u003e\n\n\u003ch2\u003eJavaScript's Object Methods\u003c/h2\u003e\n\n\u003cp\u003eJavaScript includes a number of built-in \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\"\u003estatic \u003ccode\u003eObject\u003c/code\u003e\nmethods\u003c/a\u003e (\u003cem\u003estatic\u003c/em\u003e means that these methods are called on the\n\u003ccode\u003eObject\u003c/code\u003e class itself, rather than on an instance of an \u003ccode\u003eObject\u003c/code\u003e). We will talk\nbriefly about a couple of them here and go into detail about one more in the\nnext lesson.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWe can get a list of the top-level keys in an \u003ccode\u003eObject\u003c/code\u003e by using the\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\"\u003e\u003ccode\u003eObject.keys()\u003c/code\u003e\u003c/a\u003e static method. We do that by calling \u003ccode\u003eObject.keys()\u003c/code\u003e and\npassing the \u003ccode\u003eObject\u003c/code\u003e instance as an argument. The return value is an \u003ccode\u003eArray\u003c/code\u003e\ncontaining all of the keys at the \u003cem\u003etop level\u003c/em\u003e of the \u003ccode\u003eObject\u003c/code\u003e instance.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ewednesdayMenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003echeesePlate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esoft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBrie\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esemiSoft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFontina\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ehard\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eProvolone\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efries\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSweet potato\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esalad\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSouthwestern\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ewednesdayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"cheesePlate\", \"fries\", \"salad\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that it didn't pick up the keys in the nested \u003ccode\u003echeesePlate\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e\n—\u0026nbsp;just the keys from the properties declared at the top level within\n\u003ccode\u003ewednesdayMenu\u003c/code\u003e. How do you think we could use \u003ccode\u003eObject.keys()\u003c/code\u003e to get a list of\nthe keys inside the nested \u003ccode\u003eObject\u003c/code\u003e? Try it out in the REPL.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: The sequence in which keys are ordered in the returned \u003ccode\u003eArray\u003c/code\u003e is\nnot consistent across browsers and should not be relied upon. All of the\n\u003ccode\u003eObject\u003c/code\u003e's keys will be in the \u003ccode\u003eArray\u003c/code\u003e, but you can't count on \u003ccode\u003ekeyA\u003c/code\u003e always\nbeing at index \u003ccode\u003e0\u003c/code\u003e of the \u003ccode\u003eArray\u003c/code\u003e and \u003ccode\u003ekeyB\u003c/code\u003e always being at index \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\"\u003e\u003ccode\u003eObject.values()\u003c/code\u003e\u003c/a\u003e static method behaves similarly to\n\u003ccode\u003eObject.keys()\u003c/code\u003e but, as you might expect, returns an array containing values\nrather than keys. Try this out in the REPL as well.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we identified what an \u003ccode\u003eObject\u003c/code\u003e is and how it gives us a better\nway to keep track of more complicated sets of related data. We also learned how\nto access values stored in an \u003ccode\u003eObject\u003c/code\u003e using dot notation and bracket notation,\nas well as when to use each. In the next lesson, we'll learn how to modify\n\u003ccode\u003eObject\u003c/code\u003es. We'll also explore the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eCreating and interacting with \u003ccode\u003eObject\u003c/code\u003es is an important skill in JavaScript\nprogramming. Before moving on, be sure to use \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e to practice creating\n\u003ccode\u003eObject\u003c/code\u003es (including nested \u003ccode\u003eObject\u003c/code\u003es) and accessing properties.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "objects"
          },
          {
            "id": 432853,
            "title": "Modifying Objects",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-modifying-objects\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-modifying-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e property using dot or bracket notation\u003c/li\u003e\n\u003cli\u003eModify a property using dot or bracket notation\u003c/li\u003e\n\u003cli\u003eUpdate an \u003ccode\u003eObject\u003c/code\u003e nondestructively using the spread operator\u003c/li\u003e\n\u003cli\u003eRemove a property from an \u003ccode\u003eObject\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eIdentify the relationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we learned the basics of creating \u003ccode\u003eObject\u003c/code\u003es and\naccessing their properties. In this lesson we'll learn how to modify and remove\nproperties, both destructively and nondestructively. Finally, we'll explore the\nrelationship between \u003ccode\u003eArray\u003c/code\u003es and \u003ccode\u003eObject\u003c/code\u003es.\u003c/p\u003e\n\n\u003cp\u003eAs always, don't forget to follow along in \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eAdd an \u003ccode\u003eObject\u003c/code\u003e Property Using Dot or Bracket Notation\u003c/h2\u003e\n\n\u003cp\u003eWe know how to initialize a variable by declaring it and assigning it a value\nusing the assignment operator:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe process of creating a property inside an existing object is similar; we\nspecify the key and assign it a value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Create `circle` and set it to an empty Object\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; {}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Create the key inside `circle` and set its value to 5\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; { radius: 5 }\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can do this using either dot or bracket notation, and we can use any\nexpression as the value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{};\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ediameter\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecircumference\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ediameter\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePI\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 31.41592653589793\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003earea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePI\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eradius\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 78.53981633974483\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ecircle\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; { radius: 5, diameter: 10, circumference: 31.41592653589793, area: 78.53981633974483 }\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eA Side Note\u003c/strong\u003e: Recall from the lesson on \u003ccode\u003eArray\u003c/code\u003es that we can add, modify or\ndelete elements even if we use \u003ccode\u003econst\u003c/code\u003e to initialize the \u003ccode\u003eArray\u003c/code\u003e. The same\nthing applies here: we can add, modify or delete properties, but we can't\nreassign the variable itself.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Note that the process above gives us an alternative to typing out\nour \u003ccode\u003eObject\u003c/code\u003e using literal syntax: we can initialize an empty object and then\nuse dot notation or bracket notation to create the properties\nprogrammatically. This approach is less error-prone than using literal syntax\nsince JavaScript creates the correct \u003ccode\u003eObject\u003c/code\u003e syntax for us. Try it out in the\nREPL.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eModify a Property Using Dot or Bracket Notation\u003c/h3\u003e\n\n\u003cp\u003eWe can update or overwrite existing properties simply by assigning a new value\nto an existing key:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emondayMenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003echeesePlate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esoft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eChèvre\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esemiSoft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eGruyère\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ehard\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eManchego\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efries\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCurly\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esalad\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCobb\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emondayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efries\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSweet potato\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emondayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Cobb\" }\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that modifying an \u003ccode\u003eObject\u003c/code\u003e's properties in the way we did above is\n\u003cem\u003edestructive\u003c/em\u003e. This means that we're making changes directly to the original\n\u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at an example. We'll start by creating a function to\nencapsulate this modification process:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edestructivelyUpdateObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e//Why are we using bracket notation here?\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOur function takes three arguments: the original menu \u003ccode\u003eObject\u003c/code\u003e, the \u003ccode\u003ekey\u003c/code\u003e\nidentifying the property we want to update, and the \u003ccode\u003evalue\u003c/code\u003e we want to change\nits value to.\u003c/p\u003e\n\n\u003cp\u003eAt our restaurant, we've finished serving for the day. It's time to update our\n\u003ccode\u003emondayMenu\u003c/code\u003e to the \u003ccode\u003etuesdayMenu\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emondayMenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003echeesePlate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esoft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eChèvre\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esemiSoft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eGruyère\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ehard\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eManchego\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efries\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSweet potato\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esalad\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCobb\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etuesdayMenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003edestructivelyUpdateObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emondayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003esalad\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCaesar\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003etuesdayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; { cheesePlate: { soft: \"Chèvre\", semiSoft: \"Gruyère\", hard: \"Manchego\" }, fries: \"Sweet potato\", salad: \"Caesar\" }\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003etuesdayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esalad\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Caesar\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLooks like our \u003ccode\u003etuesdayMenu\u003c/code\u003e came out perfectly. But what about \u003ccode\u003emondayMenu\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emondayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esalad\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Caesar\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDang! We don't serve Caesar salad on Mondays. Instead of destructively updating\nthe original menu, is there a way to nondestructively merge the change(s) into a\nnew \u003ccode\u003eObject\u003c/code\u003e, leaving the original intact?\u003c/p\u003e\n\n\u003ch2\u003eUpdate an Object Nondestructively Using the Spread Operator\u003c/h2\u003e\n\n\u003cp\u003eLet's create a new method; it will take the same three arguments as the previous\nmethod:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003enondestructivelyUpdateObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Code to return new, updated menu object\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRecall from the lessons on \u003ccode\u003eArray\u003c/code\u003es that we can use the\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals\"\u003e\u003cstrong\u003espread operator\u003c/strong\u003e\u003c/a\u003e to copy all the elements of an existing array into\na new array. We can do the same thing with \u003ccode\u003eObject\u003c/code\u003es. Let's use the spread\noperator to copy all of the old menu \u003ccode\u003eObject\u003c/code\u003e's properties into a new \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003enondestructivelyUpdateObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enewObj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Code to return new, updated menu object goes here\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis will create a clone of the original object and save it into a new variable.\nWe can then update the newly-created \u003ccode\u003enewObj\u003c/code\u003e with the desired change and return\nthat updated menu, leaving the original menu \u003ccode\u003eObject\u003c/code\u003e unchanged:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003enondestructivelyUpdateObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enewObj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003enewObj\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enewObj\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esundayMenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003enondestructivelyUpdateObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003etuesdayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003efries\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eShoestring\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003etuesdayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efries\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Sweet potato\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003esundayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efries\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Shoestring\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo review, we are calling our \u003ccode\u003enondestructivelyUpdateObject()\u003c/code\u003e function, passing\nas our arguments the original menu (\u003ccode\u003etuesdayMenu\u003c/code\u003e) and the key and value\nrepresenting the desired change. The function first makes a copy of\n\u003ccode\u003etuesdayMenu\u003c/code\u003e, then changes the value associated with the \u003ccode\u003efries\u003c/code\u003e key to\n\u003ccode\u003e\"Shoestring\"\u003c/code\u003e. Finally, it returns the updated menu, which is stored into the\nvariable \u003ccode\u003esundayMenu\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe can refactor the function to be a bit more concise and still achieve the\nsame outcome:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003enondestructivelyUpdateObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]:\u003c/span\u003e \u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esundayMenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003enondestructivelyUpdateObject\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003etuesdayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003efries\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eShoestring\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003etuesdayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efries\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Sweet potato\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003esundayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efries\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Shoestring\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere, we're still returning a new object that has all the key-value pairs from\nthe original object copied into it. We're also using bracket notation (\u003ccode\u003e[]\u003c/code\u003e) to\ndynamically assign a key on the object being returned with the value passed as\nan argument.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The spread operator has been around for a while, but there's still a\nchance you'll encounter similar code written using another method,\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e. Like the spread operator, \u003ccode\u003eObject.assign\u003c/code\u003e allows\nus to combine properties from multiple \u003ccode\u003eObject\u003c/code\u003es into a single \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn other languages (like Ruby), this behavior is called \"merging.\" You take an\noriginal base \u003ccode\u003eObject\u003c/code\u003e (maybe with some typical \"standard\" attribute / value\npairs already set), and then you \"merge\" in additional \u003ccode\u003eObject\u003c/code\u003e(s).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e Doing nondestructive updates (i.e. \"creating new things and merging\non top\") is a really important pattern. It turns out that, in many places,\nnondestructive updates are more performant. The main reason for this is when\nyou add something to an existing \u003ccode\u003eObject\u003c/code\u003e, the computer has to make sure that\nthe \u003ccode\u003eObject\u003c/code\u003e has enough room to add what you're saying to add. If it doesn't,\nthe computer needs to do cleanup work, find some more space, copy the old\nthing over, add the new thing, and then resume work. That \"accounting\" process\nis actually quite slow.\u003c/p\u003e\n\n\u003ch2\u003eRemove a Property from an Object\u003c/h2\u003e\n\n\u003cp\u003eUh oh, we ran out of Southwestern dressing, so we have to take the salad off the\nmenu. In JavaScript, that's as easy as:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ewednesdayMenu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003echeesePlate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esoft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBrie\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003esemiSoft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFontina\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ehard\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eProvolone\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efries\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSweet potato\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esalad\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSouthwestern\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edelete\u003c/span\u003e \u003cspan class=\"nx\"\u003ewednesdayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esalad\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; true\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ewednesdayMenu\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; { cheesePlate: { soft: \"Brie\", semiSoft: \"Fontina\", hard: \"Provolone\" }, fries: \"Sweet potato\" }\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe pass the property that we'd like to remove to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\noperator, and JavaScript takes care of the rest. Poof! No more \u003ccode\u003esalad\u003c/code\u003e property\non the \u003ccode\u003ewednesdayMenu\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Relationship Between Arrays and Objects\u003c/h2\u003e\n\n\u003cp\u003eThink back to the early lesson on data types in JavaScript. We listed off seven\ntypes into which all data falls: numbers, strings, booleans, symbols, \u003ccode\u003eObject\u003c/code\u003es,\n\u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e. Notice anything missing? Arrays!\u003c/p\u003e\n\n\u003cp\u003eWhy isn't an \u003ccode\u003eArray\u003c/code\u003e a fundamental data type in JavaScript? The answer is that\n\u003cstrong\u003eit's actually a special type of \u003ccode\u003eObject\u003c/code\u003e\u003c/strong\u003e. Yes, that's right: \u003cstrong\u003e\u003cem\u003e\u003ccode\u003eArray\u003c/code\u003es are\n\u003ccode\u003eObject\u003c/code\u003es\u003c/em\u003e\u003c/strong\u003e. To underscore this point, check out what the \u003ccode\u003etypeof\u003c/code\u003e operator\nreturns when we use it on an \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"object\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can set properties on an \u003ccode\u003eArray\u003c/code\u003e just like a regular \u003ccode\u003eObject\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esummary\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eEmpty array!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [summary: \"Empty array!\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd we can modify and access those properties, too:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003esummary\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThis array is totally empty.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [summary: \"This array is totally empty.\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esummary\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"This array is totally empty.\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn fact, \u003cem\u003eeverything\u003c/em\u003e we just learned how to do to \u003ccode\u003eObject\u003c/code\u003es can also be done to\n\u003ccode\u003eArray\u003c/code\u003es because \u003ccode\u003eArray\u003c/code\u003es \u003cstrong\u003eare\u003c/strong\u003e \u003ccode\u003eObject\u003c/code\u003es. Just special ones. To see the special\nstuff, let's \u003ccode\u003e.push()\u003c/code\u003e some values into our \u003ccode\u003eArray\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 4\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [2, 3, 5, 7, summary: \"This array is totally empty.\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCool, looks like everything's still in there. What's your guess about the\n\u003ccode\u003eArray\u003c/code\u003e's \u003ccode\u003e.length\u003c/code\u003e?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHuh, that's interesting. Surely our \u003ccode\u003esummary\u003c/code\u003e must be the first element in the\n\u003ccode\u003eArray\u003c/code\u003e, no? After all, we did add it before we \u003ccode\u003e.push()\u003c/code\u003eed all those values in.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 2\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHm, then maybe it's the last element?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 7\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat the heck? Where is it?\u003c/p\u003e\n\n\u003cp\u003eYou see, one of the 'special' features of an \u003ccode\u003eArray\u003c/code\u003e is that \u003cstrong\u003eits \u003ccode\u003eArray\u003c/code\u003e-style\nelements are stored separately from its \u003ccode\u003eObject\u003c/code\u003e-style properties\u003c/strong\u003e. The\n\u003ccode\u003e.length\u003c/code\u003e property of an \u003ccode\u003eArray\u003c/code\u003e describes how many items exist in its special\nlist of elements. Its \u003ccode\u003eObject\u003c/code\u003e-style properties are not included in that\ncalculation.\u003c/p\u003e\n\n\u003cp\u003eThis brings up an interesting question: if we add a new property to an \u003ccode\u003eArray\u003c/code\u003e\nthat has a key of \u003ccode\u003e0\u003c/code\u003e, how does the JavaScript engine know whether it should be\nan \u003ccode\u003eObject\u003c/code\u003e-style property or an \u003ccode\u003eArray\u003c/code\u003e-style element?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWill this be an `Object` property or an `Array` element?\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Will this be an `Object` property or an `Array` element?\"\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Moment of truth...\u003c/span\u003e\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 1\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"Will this be an `Object` property or an `Array` element?\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo JavaScript used that assignment operation to add a new \u003ccode\u003eArray\u003c/code\u003e-style element.\nWhat happens if we enclose the integer in quotation marks, turning it into a\nstring?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e0\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWhat about this one?\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"What about this one?\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 1\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"What about this one?\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is hitting on a fundamental truth: \u003cstrong\u003eall keys in \u003ccode\u003eObject\u003c/code\u003es and all indexes\nin \u003ccode\u003eArray\u003c/code\u003es are actually strings\u003c/strong\u003e. In \u003ccode\u003emyArray[0]\u003c/code\u003e we're using the integer \u003ccode\u003e0\u003c/code\u003e,\nbut under the hood the JavaScript engine automatically converts that to the\nstring \u003ccode\u003e\"0\"\u003c/code\u003e. When we access elements or properties of an \u003ccode\u003eArray\u003c/code\u003e, the engine\nroutes all integers and integers masquerading as strings (e.g., \u003ccode\u003e'14'\u003c/code\u003e, \u003ccode\u003e\"953\"\u003c/code\u003e,\netc.) to the \u003ccode\u003eArray\u003c/code\u003e's special list of elements, and it treats everything else\nas a simple \u003ccode\u003eObject\u003c/code\u003e property. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e1\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHi\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Hi\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [2, \"Hi\", 5, 7]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e01\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHo\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Ho\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [2, \"Hi\", 5, 7, 01: \"Ho\"]\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e01\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Hi\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e01\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Ho\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter adding our weird \u003ccode\u003e'01'\u003c/code\u003e property, the \u003ccode\u003e.length\u003c/code\u003e property still returns\n\u003ccode\u003e4\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; 4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo it would stand to reason that \u003ccode\u003eObject.keys()\u003c/code\u003e would only return \u003ccode\u003e'01'\u003c/code\u003e,\nright?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"0\", \"1\", \"2\", \"3\", \"01\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUnfortunately not. The reason why \u003ccode\u003eArray\u003c/code\u003es have this behavior would take us deep\ninside the JavaScript source code, and it's frankly not that important. Just\nremember these simple guidelines, and you'll be just fine:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFor accessing elements in an \u003ccode\u003eArray\u003c/code\u003e, always use integers\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBe wary of setting \u003ccode\u003eObject\u003c/code\u003e-style properties on an \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e. There's rarely\nany reason to, and it's usually more trouble than it's worth.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRemember that all \u003ccode\u003eObject\u003c/code\u003e keys, including \u003ccode\u003eArray\u003c/code\u003e indexes, are strings\u003c/strong\u003e.\nThis will really come into play when we learn how to iterate over \u003ccode\u003eObject\u003c/code\u003es,\nso keep it in the back of your mind.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this and the previous lesson, we dug deep into \u003ccode\u003eObject\u003c/code\u003es in JavaScript. We\nidentified what an \u003ccode\u003eObject\u003c/code\u003e is and how to access values stored in it. We also\ncovered how to add and remove properties and how to use some of JavaScript's\nconvenience methods (\u003ccode\u003eObject.keys()\u003c/code\u003e, \u003ccode\u003eObject.values()\u003c/code\u003e, and the spread\noperator). We also explored the relationship between \u003ccode\u003eObject\u003c/code\u003es and \u003ccode\u003eArray\u003c/code\u003es.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\"\u003eObject basics\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\u003e\u003ccode\u003eObject.assign()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\"\u003e\u003ccode\u003edelete\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#spread_in_object_literals\"\u003eSpread Syntax in Object Literals\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "modifying-objects"
          },
          {
            "id": 432855,
            "title": "Objects Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-objects-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003ePerform operations on an \u003ccode\u003eObject\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe covered the concepts of \u003ccode\u003eObject\u003c/code\u003es in JavaScript. Now it's time to put the\nconcepts into practice.\u003c/p\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code.\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFollow the steps below, running \u003ccode\u003elearn test\u003c/code\u003e as you go to get additional\ninformation from the tests.\u003c/p\u003e\n\n\u003cp\u003eLet's say we are working on a program that will keep track of a company's\nemployees. We want to store each \u003ccode\u003eemployee\u003c/code\u003e as an \u003ccode\u003eObject\u003c/code\u003e. We're starting\nsmall, so to begin with we'll only keep track of the employee's name and street\naddress.\u003c/p\u003e\n\n\u003cp\u003eTo start, assign an \u003ccode\u003eemployee\u003c/code\u003e variable to an \u003ccode\u003eObject\u003c/code\u003e containing\n\u003ccode\u003ename\u003c/code\u003e and \u003ccode\u003estreetAddress\u003c/code\u003e keys; you can use whatever values you like. Use\nliteral syntax to create your \u003ccode\u003eObject\u003c/code\u003e. Various updates will be applied to this\nvariable (destructively and non-destructively) in this lab.\u003c/p\u003e\n\n\u003cp\u003eOnce you've initialized the \u003ccode\u003eemployee\u003c/code\u003e Object, you'll need to create the\nfollowing four functions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should take in three\narguments: an \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e, a \u003ccode\u003ekey\u003c/code\u003e and a \u003ccode\u003evalue\u003c/code\u003e. This function should\nnot mutate the \u003ccode\u003eemployee\u003c/code\u003e; it should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that has an\nupdated \u003ccode\u003evalue\u003c/code\u003e for the \u003ccode\u003ekey\u003c/code\u003e passed in. \u003cstrong\u003eHint\u003c/strong\u003e: use the spread operator!\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edestructivelyUpdateEmployeeWithKeyAndValue()\u003c/code\u003e: this function should work the\nsame as \u003ccode\u003eupdateEmployeeWithKeyAndValue()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the\n\u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e passed in.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e: this function should take in a \u003ccode\u003eemployee\u003c/code\u003e\n\u003ccode\u003eObject\u003c/code\u003e and a \u003ccode\u003ekey\u003c/code\u003e. It should delete the property with that \u003ccode\u003ekey\u003c/code\u003e from the\n\u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e. This should not mutate the original \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e;\nit should return a \u003cem\u003enew\u003c/em\u003e \u003ccode\u003eObject\u003c/code\u003e that doesn't include the identified\nkey-value pair. \u003cstrong\u003eHint\u003c/strong\u003e: use the spread operator!\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003edestructivelyDeleteFromEmployeeByKey()\u003c/code\u003e: this function should work the same\nas \u003ccode\u003edeleteFromEmployeeByKey()\u003c/code\u003e but it \u003cem\u003eshould\u003c/em\u003e mutate the \u003ccode\u003eemployee\u003c/code\u003e \u003ccode\u003eObject\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs you work on your functions, be sure to think about when to use dot notation\nvs. bracket notation.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we practiced creating an \u003ccode\u003eObject\u003c/code\u003e and performing operations on it.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\"\u003eMDN: Object\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "g58a311626ddca781a941c94fed8771d6"
          },
          {
            "id": 432857,
            "title": "Debugging in Node",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-debugging-in-node\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-debugging-in-node\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-debugging-in-node/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the Node.js debugger\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhile \u003ccode\u003econsole.log()\u003c/code\u003e is a valuable debugging tool, it only gets us so far. When\nwe start running JavaScript code in the browser, we will have access to the\nbrowser's debugger. The debugger allows you to set \u003ca href=\"https://en.wikipedia.org/wiki/Breakpoint\"\u003ebreakpoints\u003c/a\u003e in your code\nthat will stop the execution of the code at that point. You can then inspect the\nvalues of your variables at that point in your code.\u003c/p\u003e\n\n\u003cp\u003eWe will start running JavaScript in the browser a bit later in the course. In\nthe meantime, Node.js (which is the \u003cem\u003eruntime environment\u003c/em\u003e that enables us to run\nour JavaScript outside the browser) includes a similar debugging tool. In this\nlesson, we will walk through how to use the \u003ca href=\"https://nodejs.org/api/debugger.html\"\u003eNode.js debugger\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. To do this, click\nthe GitHub \"octocat\" button at the top of the page to open the lesson's\nGitHub repo, then click \"Fork.\" Once you've cloned it down to your machine,\nnavigate into the lesson's directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to\nopen the files in Visual Studio Code.\u003c/p\u003e\n\n\u003ch2\u003eThe Node.js Debugger\u003c/h2\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eindex.js\u003c/code\u003e and take a look. You will see we have created a simple \u003ccode\u003ewhile\u003c/code\u003e\nloop that \u003ccode\u003econsole.log()\u003c/code\u003es a message. Run \u003ccode\u003enode index.js\u003c/code\u003e to see it in action.\u003c/p\u003e\n\n\u003cp\u003eUsing the debugger is a simple matter of adding the \u003ccode\u003edebugger\u003c/code\u003e keyword at the\npoint in our code where we want to place a breakpoint (i.e., where we want to\npause execution). Modify the code in \u003ccode\u003eindex.js\u003c/code\u003e as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edebugger\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`This loop has executed \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e time.`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`This loop has executed \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e times.`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo start the debugger, run \u003ccode\u003enode inspect index.js\u003c/code\u003e. You should see this in your\nterminal:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/enter-debugger.png\" alt=\"enter debugger\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNext, enter \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start executing the code. You will\nsee a \u003ccode\u003e\u0026gt;\u003c/code\u003e pointing to line 3, indicating that the execution of the code has been\nstopped at that point:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/start-execution.png\" alt=\"start execution\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNow say we want to check the value of our \u003ccode\u003ecount\u003c/code\u003e variable. To do that, we need\nto enter the debugger's REPL by running \u003ccode\u003erepl\u003c/code\u003e. You will now have a \u003ccode\u003e\u0026gt;\u003c/code\u003e prompt\nin place of the \u003ccode\u003edebug\u0026gt;\u003c/code\u003e prompt. Type in \u003ccode\u003ecount\u003c/code\u003e to see the current value of the\nvariable:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/enter-repl.png\" alt=\"enter repl\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThen to continue executing the code, we first need to exit the REPL by typing\n\u003ccode\u003eCtrl-c\u003c/code\u003e, then run \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/debugging-in-node/second-loop.png\" alt=\"second loop\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNote that our logged message shows at the top of the screenshot above. When we\nran \u003ccode\u003econt\u003c/code\u003e, the execution of the code resumed so the \u003ccode\u003econsole.log()\u003c/code\u003e was run,\nthe \u003ccode\u003ecount\u003c/code\u003e variable was incremented, and the execution continued to the next\nloop. If you enter the REPL and check the value of \u003ccode\u003ecount\u003c/code\u003e, you will see that\nit's now equal to \u003ccode\u003e2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut what if we wanted to check the value  of \u003ccode\u003ecount\u003c/code\u003e both before \u003cem\u003eand\u003c/em\u003e after the\nincrementation? We can simply add a second breakpoint:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edebugger\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`This loop has executed \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e time.`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`This loop has executed \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e times.`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edebugger\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn order for the debugger to recognize the change to our code, we'll need to\nexit and restart it. If you're in the REPL, type \u003ccode\u003ectrl-c\u003c/code\u003e to exit that, then\ntype \u003ccode\u003e.exit\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt or \u003ccode\u003ectrl-c\u003c/code\u003e twice to exit the debugger.\nFinally, run \u003ccode\u003enode inspect index.js\u003c/code\u003e to relaunch the debugger.\u003c/p\u003e\n\n\u003cp\u003eNow if you run \u003ccode\u003econt\u003c/code\u003e, the code will begin executing and will pause at the\nfirst breakpoint. To continue executing the code and advance to the second\nbreakpoint, simply enter \u003ccode\u003econt\u003c/code\u003e again. At any point, you can enter the\ndebugger's REPL to check the value of \u003ccode\u003ecount\u003c/code\u003e, then exit the REPL and continue\nexecution of the code.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson we've learned about using the debugger built in to Node.js. To\nreview, the process is as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ePlace one or more breakpoints in your code using the \u003ccode\u003edebugger\u003c/code\u003e keyword\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003enode inspect \u0026lt;filename\u0026gt;\u003c/code\u003e in the terminal to launch the debugger\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start execution of the code and advance to\nthe first breakpoint\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003erepl\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to enter the debugger's REPL\u003c/li\u003e\n\u003cli\u003eCheck the value of any variables by entering the variable name at the \u003ccode\u003e\u0026gt;\u003c/code\u003e prompt\u003c/li\u003e\n\u003cli\u003eExit the REPL using \u003ccode\u003ectrl-c\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eContinue stepping through the code using \u003ccode\u003econt\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003e.exit\u003c/code\u003e or type \u003ccode\u003ectrl-c\u003c/code\u003e twice to exit the debugger\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDebugging tools will get more and more useful to you as you progress through the\ncurriculum and your programs get more complex. The time you spend now getting\ncomfortable with debugging will pay off in the long run.\u003c/p\u003e\n\n\u003cp\u003eWe will get more practice using the debugger in an upcoming lesson.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/js/js_debugging.asp\"\u003eW3schools - JavaScript Debugging\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.geeksforgeeks.org/difference-between-node-js-and-javascript/\"\u003eDifference between Node.js and Javascript\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "debugging-in-node"
          },
          {
            "id": 432858,
            "title": "Errors and Stack Traces",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-errors-and-stack-traces\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-errors-and-stack-traces\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-errors-and-stack-traces/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize common JavaScript errors.\u003c/li\u003e\n\u003cli\u003eRead a stack trace to discern where an error originated.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNo one writes perfect code the first time. Or the second time. Or the third time.\u003c/p\u003e\n\n\u003cp\u003eWe all make mistakes. One of the biggest advantages an experienced programmer\nhas is knowing how to quickly troubleshoot and fix errors they encounter. You\n\u003cstrong\u003ewill\u003c/strong\u003e reach this point —\u0026nbsp;it's just a matter of practice. To get\nstarted, let's look at some of the common types of error messages you'll\nencounter when writing JavaScript code.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003eUncaught ReferenceError: _____ is not defined\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThis is one of the simplest and most common errors, and it's pretty explicitly\ntelling us what went wrong. We tried to reference a variable or function that\ndoesn't exist in the current scope. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003emyVar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ERROR: Uncaught ReferenceError: myVar is not defined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt can also arise if you forget to put quotation marks around a string:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eHello\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eworld\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ERROR: Uncaught ReferenceError: Hello is not defined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you meant to declare the variable in the current scope and simply forgot,\ndeclaring the variable should solve the issue:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emyVar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyVar\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Hello, world!\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003e\u003ccode\u003eUncaught TypeError: _____ is not a function\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThis one usually indicates that you tried to invoke something that isn't\nactually a function. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emyVar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyVar\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ERROR: Uncaught TypeError: myVar is not a function\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA common variant of this error that you'll run into later in the course is\n\u003ccode\u003eUncaught TypeError: undefined is not a function\u003c/code\u003e. The JavaScript engine is\ntelling us that we tried to invoke \u003ccode\u003eundefined\u003c/code\u003e, which is obviously not\ninvocable. This happens when we've tried to store a function in a variable but\nthe variable is undefined for some reason.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eAside:\u003c/strong\u003e Wait? We can store functions in variables? Yes we can! In\nJavaScript, functions are objects, which means we can do anything with them\nthat we can do with any other object: assign it properties, store it in a\nvariable, pass it as an argument, etc.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003e\u003ccode\u003eUncaught SyntaxError: missing ) after argument list\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eWhen you see this error, it means you tried to invoke a function but forgot the\nclosing parenthesis:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello,\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eworld!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ERROR: Uncaught SyntaxError: missing ) after argument list\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003emyAdder\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enum1\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003enum2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003emyAdder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ERROR: Uncaught SyntaxError: missing ) after argument list\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003e\u003ccode\u003eUncaught TypeError: Assignment to constant variable.\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eYou're probably familiar with this one by now —\u0026nbsp;it means we accidentally\ntried to assign a new value to a variable declared with the \u003ccode\u003econst\u003c/code\u003e keyword,\nwhich prevents reassignment. However, sometimes you rightfully feel that you\ndidn't try to reassign anything, and it boils down to a small typo:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esnackSelection\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ePretzels\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esnackSelection\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ePretzels\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThat'll be $1, please!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ERROR: Uncaught TypeError: Assignment to constant variable.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this case, we accidentally used the \u003cem\u003eassignment operator\u003c/em\u003e, a single \u003ccode\u003e=\u003c/code\u003e sign,\ninstead of a comparison operator, such as the \u003cem\u003estrict equality operator\u003c/em\u003e\n(\u003ccode\u003e===\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eThis is just a selection of some of the many types of errors you might encounter\nwhile writing JavaScript code. The main point is to use the information you're\ngiven. The JavaScript engine isn't trying to trick you —\u0026nbsp;on the contrary,\nit's trying to \u003cstrong\u003ehelp\u003c/strong\u003e you debug.\u003c/p\u003e\n\n\u003ch2\u003eStack traces\u003c/h2\u003e\n\n\u003cp\u003eOne of the really neat pieces of information provided with the error messages is\nwhat's called a \u003cem\u003estack trace\u003c/em\u003e. Let's take a look at an example. Fork and clone\nthis lesson into your local environment. Navigate into its directory in the\nterminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio Code. Finally,\nexecute the code in \u003ccode\u003eerrors.js\u003c/code\u003e by running \u003ccode\u003enode errors.js\u003c/code\u003e. You should see\nsomething like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/type-error.png\" alt=\"assignment to constant variable\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhoa — there's a lot going on there! Let's break it down a bit.\u003c/p\u003e\n\n\u003cp\u003eNear the top, you'll see JavaScript showing us the exact piece of code that's\nthrowing the error. It's even pointing to the exact character it thinks is the\nproblem! (Warning: JavaScript isn't always right.) Below that is the error\nitself: \u003ccode\u003eTypeError: Assignment to constant variable.\u003c/code\u003e. Hopefully you recognize\nwhat's causing the error and how to fix it.\u003c/p\u003e\n\n\u003cp\u003eUnder the identification of the error is the stack trace. For this example, most\nof the information we're seeing in the stack trace is related to what's going on\nunder the hood in Node.js and, therefore, isn't especially helpful for debugging\n(we'll look at a more helpful example shortly). But let's look at a couple of\nthings before we move on.\u003c/p\u003e\n\n\u003cp\u003eFirst, you'll see \u003ccode\u003eat Object.\u0026lt;anonymous\u0026gt;\u003c/code\u003e followed by the file path for the\n\u003ccode\u003eerrors.js\u003c/code\u003e file. The \u003ccode\u003eat Object.\u0026lt;anonymous\u0026gt;\u003c/code\u003e is under-the-hood info: basically,\nit means that an object is being created by Node when our code runs and that\nobject is not assigned a name. But the file path does contain some helpful\ninformation. Notice that it ends with \u003ccode\u003eerrors.js:5:20\u003c/code\u003e. Those numbers at the end\nare telling us that JavaScript thinks the error is on line 5 of our file, at\ncharacter 20.\u003c/p\u003e\n\n\u003cp\u003eLet's go ahead and fix our error and run \u003ccode\u003enode errors.js\u003c/code\u003e again. Now you should\nsee something like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/reference-error.png\" alt=\"third is not defined\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLooks like we're making some progress! First you'll see the message that was\nlogged by the \u003ccode\u003eif\u003c/code\u003e statement, so we know it's now working. This is followed by\nthe information about the current error: the code that's throwing the error and\nthe error itself. The next three lines give us the stack trace. Note that it's\nidentifying three lines of code: \u003ccode\u003e17\u003c/code\u003e, \u003ccode\u003e13\u003c/code\u003e, and \u003ccode\u003e20\u003c/code\u003e. Let's take a look at\nthose lines:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Line 13\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ethird\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Line 17\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Line 20\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow that we're dealing with a series of function invocations, we can really see\nthe power of the stack trace: it traces the error up through the stack of\nfunction calls that led to it. Let's read it backwards and reconstruct the\nevents that led to the error:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThe JavaScript engine reaches line \u003ccode\u003e20\u003c/code\u003e and invokes \u003ccode\u003efirst()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eInside \u003ccode\u003efirst()\u003c/code\u003e: the engine reaches line \u003ccode\u003e13\u003c/code\u003e and invokes \u003ccode\u003esecond()\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eInside \u003ccode\u003esecond()\u003c/code\u003e: the engine reaches line \u003ccode\u003e17\u003c/code\u003e and sees the identifier \u003ccode\u003ethird\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe engine can't find a declared variable or function with that name so it\nthrows an error inside \u003ccode\u003esecond()\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTo fix the \u003ccode\u003ethird is not defined\u003c/code\u003e error, let's first try declaring \u003ccode\u003ethird\u003c/code\u003e as\nthe simplest thing we know, a variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ethird\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ethird\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eDeclaring a new variable.\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRemember what we learned earlier in the section on common JavaScript errors. If\nour understanding is correct, this should fix the \u003ccode\u003ethird is not defined\u003c/code\u003e error\nand, in its place, throw a new error. Can you guess what the new error will be?\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/errors-and-stack-traces/type-error-2.png\" alt=\"third is not a function\"\u003e\u003c/p\u003e\n\n\u003cp\u003eDid you correctly deduce what the new error would be?\u003c/p\u003e\n\n\u003cp\u003eThe new error is telling us that \u003ccode\u003ethird is not a function\u003c/code\u003e. It may have been\npretty easy to figure out that our initial solution would just result in another\nerror, but intentionally breaking your code and seeing whether it breaks in the\nexact way you predicted is a great technique for improving your debugging and\ngeneral JavaScript skills. The more you understand the errors and their causes,\nthe easier debugging will become.\u003c/p\u003e\n\n\u003cp\u003eWe'll fix this by declaring \u003ccode\u003ethird()\u003c/code\u003e as a function instead of a simple\nvariable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ethird\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003ethird\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNow I'm a function!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we save the file and run the code again, all of the errors should be gone\nand we should see our two messages logged to the terminal.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eArguably the biggest difference between being a novice and an expert developer\nis how comfortable you feel with reading and debugging error messages.\nJavaScript —\u0026nbsp;and, indeed, every programming language —\u0026nbsp;is designed\n\u003cstrong\u003eby\u003c/strong\u003e programmers \u003cstrong\u003efor\u003c/strong\u003e programmers. The language doesn't intentionally make\nthings more difficult for you. On the contrary, every time you write code that\nresults in some sort of error, JavaScript goes out of its way to provide you\nwith the information you need to find and fix the error. When you see one of\nthose error messages pop up, don't freak out! It's the JavaScript engine\nstarting a friendly dialog with you: \"Hey, I tried to do what you asked of me,\nbut I ran into a problem. Here's where the problem occurred, and here's what\nhappened.\"\u003c/p\u003e\n\n\u003cp\u003eAs you become more comfortable diagnosing and solving error messages, you'll\nbecome a faster, better programmer, and writing JavaScript code will become more\nand more enjoyable!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors\"\u003eMDN —\u0026nbsp;Errors\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_defined\"\u003e\u003ccode\u003eUncaught ReferenceError: _____ is not defined\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Not_a_function\"\u003e\u003ccode\u003eUncaught TypeError: _____ is not a function\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Missing_parenthesis_after_argument_list\"\u003e\u003ccode\u003eUncaught SyntaxError: missing ) after argument list\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_const_assignment\"\u003e\u003ccode\u003eUncaught TypeError: Assignment to constant variable.\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "errors-and-stack-traces"
          },
          {
            "id": 432859,
            "title": "Looping Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-looping-code-along\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a \u003ccode\u003efor\u003c/code\u003e loop.\u003c/li\u003e\n\u003cli\u003eBuild a \u003ccode\u003ewhile\u003c/code\u003e loop.\u003c/li\u003e\n\u003cli\u003eExplain the purpose of a loop.\u003c/li\u003e\n\u003cli\u003eUnderstand when to use each type of loop.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn an earlier lesson, we learned about \u003cem\u003erepetition statements\u003c/em\u003e —\nstatements that allow us to break out of the default sequence and repeat a\nsection of code multiple times. We also learned about two of JavaScript's\nrepetition constructs: the \u003cem\u003ewhile\u003c/em\u003e loop and the \u003cem\u003edo...while\u003c/em\u003e loop. In this lesson\nwe will learn about a third: the \u003cem\u003efor\u003c/em\u003e loop.\u003c/p\u003e\n\n\u003cp\u003eLet's say we have a bunch of gifts to wrap. They all happen to be the same size\nand shape, so for every gift, we need to cut a similarly sized piece of wrapping\npaper, fold it up over the edges of the gift, tape it together, and add a nice\nlittle card. Then we set the wrapped gift aside and move on to the next gift.\u003c/p\u003e\n\n\u003cp\u003eIn programming terms, we can think of our \u003cstrong\u003ecollection\u003c/strong\u003e of gifts as an\n\u003cstrong\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e and the act of wrapping them as a function. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egifts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eteddy bear\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edrone\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edoll\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003ewrapGift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egift\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`Wrapped \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003egift\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e and added a bow!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe could then call \u003ccode\u003ewrapGift()\u003c/code\u003e on each gift individually:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ewrapGift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003ewrapGift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003ewrapGift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, this isn't very efficient or extensible. It's a lot of repetitive code\nto write out, and if we had more gifts we'd have to write a whole new line for\neach.\u003c/p\u003e\n\n\u003cp\u003eThis is where loops come in handy! With a loop, we can just write the repeated\naction \u003cstrong\u003eonce\u003c/strong\u003e and perform the action on \u003cstrong\u003eevery item in the collection\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis is a code-along, so follow along with the instructions in each section.\nThere are tests to make sure you're coding your solutions correctly. If you\nhaven't already, fork and clone this lab into your local environment. Navigate\ninto its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in\nVisual Studio Code.\u003c/p\u003e\n\n\u003ch2\u003eThe \u003ccode\u003efor\u003c/code\u003e loop\u003c/h2\u003e\n\n\u003cp\u003eOf the loops in JavaScript, the \u003ccode\u003efor\u003c/code\u003e loop is the most common. The \u003ccode\u003efor\u003c/code\u003e loop is\nmade up of four statements in the following structure:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"nx\"\u003einitialization\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003econdition\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eiteration\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eloop\u003c/span\u003e \u003cspan class=\"nx\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003eInitialization\n\n\u003cul\u003e\n\u003cli\u003eTypically used to initialize a \u003cstrong\u003ecounter\u003c/strong\u003e variable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCondition\n\n\u003cul\u003e\n\u003cli\u003eAn expression evaluated before each pass through the loop. If this expression\nevaluates to \u003ccode\u003etrue\u003c/code\u003e, the statements in the loop body are executed. If the\nexpression evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop exits.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIteration\n\n\u003cul\u003e\n\u003cli\u003eAn expression executed at the end of each iteration. Typically, this will involve\nincrementing or decrementing a counter, bringing the loop ever closer to\ncompletion.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eLoop body\n\n\u003cul\u003e\n\u003cli\u003eCode that runs on each pass through the loop.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eUsage\u003c/em\u003e\u003c/strong\u003e: Use a \u003ccode\u003efor\u003c/code\u003e loop when you know how many times you want the loop to\nrun (for example, when you're looping through elements in an array).\u003c/p\u003e\n\n\u003ch3\u003eExamples\u003c/h3\u003e\n\n\u003cp\u003eLet's take a look at an example and get some practice using the Node debugger.\nEnter the code below into the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can, of course, copy/paste the code rather than typing it in\nyourself, but we recommend typing it in for now. The act of typing code\ndevelops muscle memory and helps your brain understand and internalize the\nsyntax.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e40\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`I'm \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e years old. Happy birthday to me!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edebugger\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the above code, \u003ccode\u003elet age = 30\u003c/code\u003e is the \u003cstrong\u003einitialization\u003c/strong\u003e: we're creating a\nvariable, \u003ccode\u003eage\u003c/code\u003e, that we'll use in the next three phases of the loop. Notice\nthat we use \u003ccode\u003elet\u003c/code\u003e instead of \u003ccode\u003econst\u003c/code\u003e because we need to increment the value of\n\u003ccode\u003eage\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003econdition\u003c/strong\u003e for the above loop is \u003ccode\u003eage \u0026lt; 40\u003c/code\u003e, or, in other words, \"Run the\ncode in the loop body until \u003ccode\u003eage\u003c/code\u003e is NOT less than \u003ccode\u003e40\u003c/code\u003e.\" As long as the\ncondition evaluates to \u003ccode\u003etrue\u003c/code\u003e, the code in the loop body is executed, the value\nof \u003ccode\u003eage\u003c/code\u003e is incremented, and the condition is reevaluated. As soon as the\ncondition evaluates to \u003ccode\u003efalse\u003c/code\u003e, the loop ends.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eiteration\u003c/strong\u003e is \u003ccode\u003eage++\u003c/code\u003e, which increments the value of \u003ccode\u003eage\u003c/code\u003e by \u003ccode\u003e1\u003c/code\u003e after\nevery pass through the loop. We initialized \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e30\u003c/code\u003e, and it retains that\nvalue during the first pass through the loop. At the end of the first pass, we\nincrement \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e31\u003c/code\u003e, check whether the condition still holds \u003ccode\u003etrue\u003c/code\u003e, and,\nsince it does, run the loop body again with \u003ccode\u003eage\u003c/code\u003e as \u003ccode\u003e31\u003c/code\u003e. After that second\nloop, we increment \u003ccode\u003eage\u003c/code\u003e to \u003ccode\u003e32\u003c/code\u003e, and so on.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eloop body\u003c/strong\u003e is the set of statements that we want to run when the\ncondition evaluates to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at what's happening in our loop using debugger. Run\n\u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to start the debugger. You should see\nthe following:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_1.png\" alt=\"Debugger Output 1\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNow run \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to start executing the loop and advance to\nthe breakpoint. It should look like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_2.png\" alt=\"Debugger Output 2\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNote, in the first line, that the message has been logged and that \u003ccode\u003eage\u003c/code\u003e is\nequal to 30. To verify that, enter \u003ccode\u003erepl\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to open the\nREPL, then enter \u003ccode\u003eage\u003c/code\u003e. You should see \u003ccode\u003e30\u003c/code\u003e output. Now type \u003ccode\u003eCtrl-C\u003c/code\u003e to exit\nthe repl, and enter \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the next\niteration of the loop. You should see the following:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/debugger_3.png\" alt=\"Debugger Output 3\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNote that the logged output now shows that age is 31. You can continue to step\nthrough the iterations by running \u003ccode\u003econt\u003c/code\u003e at the \u003ccode\u003edebug\u003c/code\u003e prompt. At any point you\ncan verify the value of \u003ccode\u003eage\u003c/code\u003e by entering the REPL and typing \u003ccode\u003eage\u003c/code\u003e at the\nprompt, then exit the REPL to continue stepping through. When you're done, enter\n\u003ccode\u003e.exit\u003c/code\u003e or \u003ccode\u003eCtrl-C\u003c/code\u003e twice to exit the debugger.\u003c/p\u003e\n\n\u003cp\u003eNow let's remove \u003ccode\u003edebugger;\u003c/code\u003e from our code and execute it by running\n\u003ccode\u003enode index.js\u003c/code\u003e. You should see the following:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/looping-code-along/happy-birthday-to-me.png\" alt=\"Happy Birthday logged\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eUsing \u003ccode\u003efor\u003c/code\u003e with Arrays\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003efor\u003c/code\u003e loop is often used to iterate over every element in an array. Let's\nrewrite our gift-wrapping action above as a \u003ccode\u003efor\u003c/code\u003e loop. Enter the following code\ninto \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egifts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eteddy bear\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edrone\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edoll\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003ewrapGifts\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`Wrapped \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]}\u003c/span\u003e\u003cspan class=\"s2\"\u003e and added a bow!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edebugger\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ewrapGifts\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe started our counter, \u003ccode\u003ei\u003c/code\u003e, at \u003ccode\u003e0\u003c/code\u003e because arrays have zero-based indexes. Our\ncondition states that we should run the code in the loop body while \u003ccode\u003ei\u003c/code\u003e is less\nthan \u003ccode\u003egifts.length\u003c/code\u003e (\u003ccode\u003e3\u003c/code\u003e in the above example). Our iteration, \u003ccode\u003ei++\u003c/code\u003e, increments\nour counter by \u003ccode\u003e1\u003c/code\u003e at the end of each pass through the loop.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003enode inspect index.js\u003c/code\u003e in the terminal to enter the debugger, and \u003ccode\u003econt\u003c/code\u003e at\nthe \u003ccode\u003edebug\u003c/code\u003e prompt to advance to the breakpoint. You should see\n\u003ccode\u003eWrapped teddy bear and added a bow!\u003c/code\u003e logged. In our loop body, we reference\n\u003ccode\u003egifts[i]\u003c/code\u003e. Since \u003ccode\u003ei\u003c/code\u003e starts out as \u003ccode\u003e0\u003c/code\u003e, during the first pass through the loop\n\u003ccode\u003egifts[i]\u003c/code\u003e is \u003ccode\u003egifts[0]\u003c/code\u003e, which is \u003ccode\u003e'teddy bear'\u003c/code\u003e. Continue stepping through the\nloop by entering \u003ccode\u003econt\u003c/code\u003e at the\u003ccode\u003edebug\u003c/code\u003e prompt and remember you can enter the REPL\nat any point to check the values of our variables, \u003ccode\u003ei\u003c/code\u003e and \u003ccode\u003egifts[i]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen you're done, remove the \u003ccode\u003edebugger\u003c/code\u003e and execute the code by running\n\u003ccode\u003enode index.js\u003c/code\u003e. You should see the following logged to the terminal:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eWrapped teddy bear and added a bow!\nWrapped drone and added a bow!\nWrapped doll and added a bow!\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eAssignment\u003c/h3\u003e\n\n\u003cp\u003eIn the previous section, the \u003ccode\u003ewrapGifts()\u003c/code\u003e function allowed us to take any array\nof gifts and loop over them, logging our own message. Let's practice that with a\nslightly different idea. To complement our gift wrapping function, your task is\nto create a thank you card creator.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: Recall the difference between logging and returning values from a\nfunction. When we log information we are simply outputting text to a terminal\nor console. When we return data from a function we will be able to reference\nand use that information elsewhere because the data is being passed out of the\nfunction.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn \u003ccode\u003eindex.js\u003c/code\u003e, build a function named \u003ccode\u003ewriteCards()\u003c/code\u003e that accepts two arguments:\nan array of string names, and an event name. Create a \u003ccode\u003efor\u003c/code\u003e loop with a counter\nthat starts at \u003ccode\u003e0\u003c/code\u003e and increments at the end of each loop. The \u003ccode\u003efor\u003c/code\u003e loop should\nstop once it has iterated over the length of the array.\u003c/p\u003e\n\n\u003cp\u003eAs with our previous \u003ccode\u003ewrapGifts()\u003c/code\u003e function, you will create a custom message\nfor each name inside the loop. Unlike that example, however, instead of simply\nlogging the messages to the console, you will collect them in a \u003cem\u003enew\u003c/em\u003e array and\n\u003cstrong\u003ereturn\u003c/strong\u003e this array at the end of the function. (Refer back to the Array\nMethods lesson if you need a refresher on how we can add an element to an\narray.) The overall process should be:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ecreate a new, empty array to hold the messages;\u003c/li\u003e\n\u003cli\u003eiterate through the input array and, inside the loop, build out the 'thank\nyou' message for each name using string interpolation, then add that message\nto the new array you created;\u003c/li\u003e\n\u003cli\u003eafter the loop finishes and all of the messages have been added to the new\narray, return the new array.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eHere is an example of what a call to the \u003ccode\u003ewriteCards()\u003c/code\u003e function might look like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ewriteCards\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCharlie\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSamip\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAli\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ebirthday\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we were to call the function using this function call, it should produce the\nfollowing array as the return value:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThank you, Charlie, for the wonderful birthday gift!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThank you, Samip, for the wonderful birthday gift!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThank you, Ali, for the wonderful birthday gift!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: The debugger isn't just for debugging code — you can also use it\nto help you write your function! Try building the structure of the loop,\nputting the \u003ccode\u003edebugger\u003c/code\u003e inside the loop body. Even before you start writing the\ncode, you can enter the debugger's REPL and try out code until you figure out\nhow to create the message and add it to an array. Once it's working in the\nREPL, transfer the code to \u003ccode\u003eindex.js\u003c/code\u003e, exit the debugger, and run the tests.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eThe \u003ccode\u003ewhile\u003c/code\u003e loop\u003c/h2\u003e\n\n\u003cp\u003eRecall from the earlier lesson that the \u003ccode\u003ewhile\u003c/code\u003e loop is similar to a \u003ccode\u003efor\u003c/code\u003e loop,\nrepeating an action in a loop based on a condition. Both will continue to loop\nuntil that condition evaluates to \u003ccode\u003efalse\u003c/code\u003e. Unlike \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e only requires\ncondition and loop statements:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"nx\"\u003econdition\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eloop\u003c/span\u003e \u003cspan class=\"nx\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe initialization and iteration statements of the \u003ccode\u003efor\u003c/code\u003e loop have not\ndisappeared, though. In fact, we could rewrite our original \u003ccode\u003efor\u003c/code\u003e loop gift\nwrapping example using a \u003ccode\u003ewhile\u003c/code\u003e loop and achieve the exact same result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egifts\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eteddy bear\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edrone\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edoll\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003ewrapGifts\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// the initialization moves OUTSIDE the body of the loop!\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e`Wrapped \u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]}\u003c/span\u003e\u003cspan class=\"s2\"\u003e and added a bow!`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c1\"\u003e// the iteration moves INSIDE the body of the loop!\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003ewrapGifts\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egifts\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Wrapped teddy bear and added a bow!\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Wrapped drone and added a bow!\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Wrapped doll and added a bow!\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; [\"teddy bear\", \"drone\", \"doll\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that we've just moved the initialization and iteration statements —\ndeclaring the \u003ccode\u003ei\u003c/code\u003e variable \u003cem\u003eoutside\u003c/em\u003e the loop, and incrementing it \u003cem\u003einside\u003c/em\u003e the\nloop.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eCAUTION\u003c/strong\u003e: When using \u003ccode\u003ewhile\u003c/code\u003e loops, it is easy to forget to involve iteration. Leaving iteration out can result in a condition that \u003cem\u003ealways\u003c/em\u003e evaluates to \u003ccode\u003etrue\u003c/code\u003e, causing an infinite loop!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eUsing a \u003ccode\u003ewhile\u003c/code\u003e loop enables us to check conditions that aren't based on a\ncounter. Take a look at the following \u003cem\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Pseudocode\"\u003epseudocode\u003c/a\u003e\u003c/em\u003e for an example of how\nwe could use \u003ccode\u003ewhile\u003c/code\u003e in a program for planting a garden:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eplantGarden\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ekeepWorking\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeepWorking\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003echooseSeedLocation\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eplantSeed\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ewaterSeed\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003ekeepWorking\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003echeckForMoreSeeds\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can imagine that \u003cem\u003ewhile\u003c/em\u003e we have seeds, we take the same steps over and over:\nchoose a location for a seed; plant it; water it. Then, check if there are more\nseeds. If \u003cem\u003enot\u003c/em\u003e, do not keep working.\u003c/p\u003e\n\n\u003ch2\u003eWhen to Use \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eJavaScript, like many programming languages, provides a variety of looping\noptions. Loops like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e are actually just slight variations of the\nsame process. By providing a variety, we as programmers have a larger vocabulary\nto work with.\u003c/p\u003e\n\n\u003cp\u003eOften, you will see \u003ccode\u003ewhile\u003c/code\u003e loops simply being used as an alternative to \u003ccode\u003efor\u003c/code\u003e\nloops:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountup\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountup\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountup\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is perfectly fine as an alternative way to describe:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountup\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountup\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountup\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountup\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you're feeling a bit lost about when to use a \u003ccode\u003efor\u003c/code\u003e vs. a \u003ccode\u003ewhile\u003c/code\u003e loop, take\na deep breath. Most of the time, a regular \u003ccode\u003efor\u003c/code\u003e loop will suffice. It's by far\nthe most common looping construct in JavaScript. A general heuristic for\nchoosing which loop to use is to first try a \u003ccode\u003efor\u003c/code\u003e loop. If that doesn't serve\nyour purposes, then go ahead and try a \u003ccode\u003ewhile\u003c/code\u003e loop. Also, remember that you can\nalways refer to the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003edocumentation on these loops\u003c/a\u003e at any\ntime.\u003c/p\u003e\n\n\u003cp\u003eJust don't forget: with \u003ccode\u003ewhile\u003c/code\u003e, make sure you are updating the condition\non each loop so that the loop eventually terminates!\u003c/p\u003e\n\n\u003ch2\u003eAssignment\u003c/h2\u003e\n\n\u003cp\u003eTo get more acquainted with \u003ccode\u003ewhile\u003c/code\u003e, your task is to write a function,\n\u003ccode\u003ecountDown\u003c/code\u003e, that takes in any positive integer and, starting from that number,\ncounts down to zero using \u003ccode\u003econsole.log()\u003c/code\u003e. Note that this means that running\n\u003ccode\u003ecountDown(10);\u003c/code\u003e would actually log \u003cem\u003e11\u003c/em\u003e times:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRemember the workflow:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRun the tests using \u003ccode\u003elearn test\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eRead the errors; vocalize what they're asking you to do.\u003c/li\u003e\n\u003cli\u003eWrite code; repeat steps 1 and 2 often until a test passes.\u003c/li\u003e\n\u003cli\u003eRepeat as needed for the remaining tests.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAfter some time programming in JavaScript, writing a \u003ccode\u003efor\u003c/code\u003e loop will come as\nnaturally to you as wrapping one gift after another. Just as you slowly become\ncomfortable using different words and vocabulary to better express yourself,\nyou will become more acquainted with concepts like \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e until you\nare able to discern the nuanced differences in usage between them.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCodecademy\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#for-loops\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.codecademy.com/glossary/javascript/loops#while-loops\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMDN\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003e\u003ccode\u003efor\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\"\u003e\u003ccode\u003ewhile\u003c/code\u003e loop\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\"\u003eLoops and iteration\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "g6aa1b1f9d818dcb9f45ac800e2cbbe6d"
          },
          {
            "id": 432861,
            "title": "Object Iteration",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-object-iteration\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-object-iteration/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExplain the difference between looping and iteration.\u003c/li\u003e\n\u003cli\u003eIterate over arrays with the \u003ccode\u003efor...of\u003c/code\u003e statement.\u003c/li\u003e\n\u003cli\u003eEnumerate an object's properties with the \u003ccode\u003efor...in\u003c/code\u003e statement.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen we create a \u003ccode\u003efor\u003c/code\u003e loop to loop over an array, we base the loop's condition\noff of the \u003ccode\u003e.length\u003c/code\u003e of the array. This works, but it's a lot of syntactic cruft\nto remember:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Loop body\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe problem is that we're using a \u003cem\u003elooping\u003c/em\u003e construct to perform \u003cem\u003eiteration\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch2\u003eLooping vs. Iteration\u003c/h2\u003e\n\n\u003cp\u003eThere's a pretty fine line separating the concepts of \u003cem\u003elooping\u003c/em\u003e and \u003cem\u003eiteration\u003c/em\u003e,\nand only the truly pedantic will call you out if you use one in place of the\nother.\u003c/p\u003e\n\n\u003cp\u003eLooping is the process of executing a set of statements \u003cstrong\u003erepeatedly until a\ncondition is met\u003c/strong\u003e. It's great for when we want to do something a specific\nnumber of times (\u003ccode\u003efor\u003c/code\u003e loop) or unlimited times until the condition is met\n(\u003ccode\u003ewhile\u003c/code\u003e or \u003ccode\u003edo while\u003c/code\u003e loop).\u003c/p\u003e\n\n\u003cp\u003eIteration is the process of executing a set of statements \u003cstrong\u003eonce for each\nelement in a collection\u003c/strong\u003e. We can accomplish this with a \u003ccode\u003efor\u003c/code\u003e loop:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eb\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ec\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ed\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ee\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ef\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eg\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eor with a \u003ccode\u003ewhile\u003c/code\u003e loop:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eb\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ec\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ed\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ee\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ef\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eg\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ebut neither is very pretty. The \u003ccode\u003efor...of\u003c/code\u003e statement gives us a better way.\u003c/p\u003e\n\n\u003ch2\u003e\u003ccode\u003efor...of\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eUsing \u003ccode\u003efor...of\u003c/code\u003e, the code above becomes:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ea\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eb\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ec\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ed\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ee\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ef\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eg\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eelement\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUsing a construct that is specifically meant for iteration results in much\ncleaner code: there's\u0026nbsp;no initialization of a counter, no condition, no\nincrementing the counter, and no bracket notation to access elements in the\narray (\u003ccode\u003emyArray[i]\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003econst\u003c/code\u003e vs. \u003ccode\u003elet\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAs you might've noticed, \u003ccode\u003efor...of\u003c/code\u003e allows us to use \u003ccode\u003econst\u003c/code\u003e instead of \u003ccode\u003elet\u003c/code\u003e.\nIn \u003ccode\u003efor\u003c/code\u003e and \u003ccode\u003ewhile\u003c/code\u003e statements, \u003ccode\u003elet\u003c/code\u003e is required because we are incrementing a\ncounter variable. The incrementing process involves taking the counter's current\nvalue, adding \u003ccode\u003e1\u003c/code\u003e to it, and then assigning that new value to the variable. That\nreassignment precludes us from using our beloved \u003ccode\u003econst\u003c/code\u003e, which cannot be\nreassigned.\u003c/p\u003e\n\n\u003cp\u003eDelightfully, the \u003ccode\u003efor...of\u003c/code\u003e statement involves no such reassignment. On each\ntrip into the loop body (which is a \u003cem\u003eblock\u003c/em\u003e — note the curly braces), we assign\nthe next element in the collection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable. Upon\nreaching the end of the block, the block-scoped variable vanishes, and we return\nto the top. Then we repeat the process, assigning the next element in the\ncollection to a \u003cstrong\u003enew\u003c/strong\u003e \u003ccode\u003eelement\u003c/code\u003e variable.\u003c/p\u003e\n\n\u003ch3\u003eIterating over... strings?\u003c/h3\u003e\n\n\u003cp\u003eA string is effectively an ordered collection (like an array) of characters,\nwhich \u003ccode\u003efor...of\u003c/code\u003e is more than happy to iterate over:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eHello, world!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// LOG: H\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: l\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: l\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: o\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: ,\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG:\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: w\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: o\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: r\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: l\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: d\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: !\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eUsage\u003c/h3\u003e\n\n\u003cp\u003eUse a \u003ccode\u003efor...of\u003c/code\u003e statement anytime you want to iterate over an array.\u003c/p\u003e\n\n\u003ch2\u003eIterating over objects\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement is similar to \u003ccode\u003efor...of\u003c/code\u003e; it's generally used for\niterating over the properties in an object. The statement follows this syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eKEY\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eOBJECT\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// Code in the statement body\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the properties in an object, but it\ndoesn't pass the entire property into the block. Instead, it only passes in the\n\u003cem\u003ekeys\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estreet1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e11 Broadway\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estreet2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e2nd Floor\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecity\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eNY\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ezipCode\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e10004\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// LOG: street1\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: street2\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: city\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: state\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: zipCode\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAccessing the object's values is as simple as combining the passed-in key with\nthe \u003cem\u003ebracket operator\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estreet1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e11 Broadway\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estreet2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e2nd Floor\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecity\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eNY\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ezipCode\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e10004\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// LOG: 11 Broadway\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 2nd Floor\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: New York\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: NY\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 10004\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eBut... but I want to use the dot operator!\u003c/h3\u003e\n\n\u003cp\u003eCan you think of why the bracket operator is required? Let's see what happens\nwhen we use the \u003cem\u003edot operator\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estreet1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e11 Broadway\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estreet2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e2nd Floor\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecity\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eNew York\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003estate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eNY\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ezipCode\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003e10004\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// LOG: undefined\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: undefined\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: undefined\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: undefined\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: undefined\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003efor...in\u003c/code\u003e statement iterates over the five properties in \u003ccode\u003eaddress\u003c/code\u003e,\nsuccessively passing in the object's keys. However, inside the statement body\nwe're trying to access \u003ccode\u003eaddress.key\u003c/code\u003e. If you recall from the lesson on objects,\nvariables don't work with the dot operator because it treats the variable name\nas a literal key —\u0026nbsp;that is, \u003ccode\u003eaddress.key\u003c/code\u003e is trying to access the property\non \u003ccode\u003eaddress\u003c/code\u003e with a key of \u003ccode\u003ekey\u003c/code\u003e. Since there is no \u003ccode\u003ekey\u003c/code\u003e property in \u003ccode\u003eaddress\u003c/code\u003e,\nit returns \u003ccode\u003eundefined\u003c/code\u003e. To prove this, let's add a \u003ccode\u003ekey\u003c/code\u003e property to \u003ccode\u003eaddress\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eLet's have a 'key' key!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddress\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// LOG: Let's have a 'key' key!\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Let's have a 'key' key!\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Let's have a 'key' key!\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Let's have a 'key' key!\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Let's have a 'key' key!\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Let's have a 'key' key!\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eUsage\u003c/h3\u003e\n\n\u003cp\u003eUse a \u003ccode\u003efor...in\u003c/code\u003e statement whenever you want to enumerate the properties of an\nobject.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003efor...in\u003c/code\u003e and order\u003c/h3\u003e\n\n\u003cp\u003eBecause \u003cstrong\u003earrays are objects\u003c/strong\u003e, \u003ccode\u003efor...in\u003c/code\u003e \u003cem\u003ewill work\u003c/em\u003e with arrays. In fact,\nbecause \u003ccode\u003efor...of\u003c/code\u003e was added to JavaScript later than \u003ccode\u003efor...in\u003c/code\u003e, you might see\nolder code that uses \u003ccode\u003efor...in\u003c/code\u003e to iterate over arrays. However, as a general\nrule, \u003cstrong\u003edon't use \u003ccode\u003efor...in\u003c/code\u003e with arrays\u003c/strong\u003e. When iterating over an array, an\n\u003cstrong\u003eordered\u003c/strong\u003e collection, we would expect the elements in the array to be dealt\nwith \u003cstrong\u003ein order\u003c/strong\u003e. However, because of how \u003ccode\u003efor...in\u003c/code\u003e works under the hood,\nthere's no guarantee of order. From the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN documentation\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA \u003ccode\u003efor...in\u003c/code\u003e loop iterates over the properties of an object in an \u003cstrong\u003earbitrary\norder\u003c/strong\u003e ... one cannot depend on the seeming orderliness of iteration, at\nleast in a cross-browser setting.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhat this means is that, with \u003ccode\u003efor...in\u003c/code\u003e, different browsers might iterate over\nthe same object's properties in different orders. That's not cool! Cross-browser\nconsistency is very important. A lot of progress has been made towards\nstandardizing the behavior of \u003ccode\u003efor...in\u003c/code\u003e across all major browsers, but there's\nstill no reason to use \u003ccode\u003efor...in\u003c/code\u003e with arrays when we have the wonderfully\nconsistent \u003ccode\u003efor...of\u003c/code\u003e tailor-made for the job.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...of\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003eMDN —\u0026nbsp;\u003ccode\u003efor...in\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "object-iteration"
          },
          {
            "id": 432863,
            "title": "Traversing Nested Objects",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-js-2-traversing-nested-objects\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-traversing-nested-objects/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRevisit why nested objects are useful\u003c/li\u003e\n\u003cli\u003ePractice accessing inner properties\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBonus\u003c/strong\u003e: Use recursion to iterate over nested objects and arrays\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've just been onboarded to the dev team working on Flatbook, the world's\npremier Flatiron School-based social network. Here at Flatbook, we have some\npretty complex data-modeling needs. For instance, think about the breadth of\ninformation we might want to display on each user's profile page:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eFirst name\u003c/li\u003e\n\u003cli\u003eLast name\u003c/li\u003e\n\u003cli\u003eEmployer\n\n\u003cul\u003e\n\u003cli\u003eCompany name\u003c/li\u003e\n\u003cli\u003eJob title\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eFriends\n\n\u003cul\u003e\n\u003cli\u003eFirst name\u003c/li\u003e\n\u003cli\u003eLast name\u003c/li\u003e\n\u003cli\u003eEmployer\u003c/li\u003e\n\u003cli\u003eCompany name\u003c/li\u003e\n\u003cli\u003eJob title\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003eProjects\n\n\u003cul\u003e\n\u003cli\u003eTitle\u003c/li\u003e\n\u003cli\u003eDescription\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe can already start to see some problems with trying to fit all of this into a\n\u003cem\u003eshallow\u003c/em\u003e (non-nested) JavaScript object:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAvi\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlombaum\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecompanyName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ejobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDeveloper Apprentice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend1firstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNancy\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend1lastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBurgess\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend1companyName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend1jobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDeveloper Apprentice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend2firstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCorinna\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend2lastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJackson\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend2companyName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend2jobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSenior Developer\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eproject1title\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eproject1description\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe premier Flatiron School-based social network in the world.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eproject2title\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eScuber\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eproject2description\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eA burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGoodness, that's messy. It would be a nightmare to keep the object updated. If\nAvi un-friends Nancy, do we shift Corinna's info into the \u003ccode\u003efriend1...\u003c/code\u003e slots and\ndelete the \u003ccode\u003efriend2...\u003c/code\u003e properties, or do we leave Corinna as \u003ccode\u003efriend2...\u003c/code\u003e and\ndelete the \u003ccode\u003efriend1...\u003c/code\u003e properties? There are no good answers. Except...\u003c/p\u003e\n\n\u003ch2\u003eObjects in Objects\u003c/h2\u003e\n\n\u003cp\u003eRecall from the lesson on objects that the values in an object can be\n\u003cem\u003eanything\u003c/em\u003e, including another object. If we reorganize the above object a bit,\nit becomes significantly easier to read and update:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAvi\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlombaum\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecompany\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ejobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDeveloper Apprentice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriends\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNancy\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBurgess\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ecompany\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ejobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDeveloper Apprentice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCorinna\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJackson\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ecompany\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ejobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eLead Developer\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eprojects\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe premier Flatiron School-based social network in the world.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eScuber\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eA burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe've pared the sixteen messy properties in our first attempt down to a svelte\nfive: \u003ccode\u003efirstName\u003c/code\u003e, \u003ccode\u003elastName\u003c/code\u003e, \u003ccode\u003ecompany\u003c/code\u003e, \u003ccode\u003efriends\u003c/code\u003e, and \u003ccode\u003eprojects\u003c/code\u003e. \u003ccode\u003ecompany\u003c/code\u003e\npoints at another object, and both \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e point to arrays of\nobjects. Let's practice accessing some of those beautifully nested data points.\nCopy \u003ccode\u003euserInfo\u003c/code\u003e into the \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e code window and follow along. Once you click\nrun, you can check the values of the variable's properties in the console\nwindow.\u003c/p\u003e\n\n\u003cp\u003eTo review, for a property at the top level of our object, we can grab a value\nusing dot notation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Flombaum\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf the property we're accessing is nested inside another object, we just append\nthe additional key(s):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecompany\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Developer Apprentice\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf the property is nested inside an array, we need to specify the index in the\narray for the object that we want. To get the first name of Avi's first friend\nand the title of his second project:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efriends\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Nancy\"\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eprojects\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"Scuber\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt's worth spending some time getting comfortable with nested data structures —\nyou will see a lot of them as you proceed through the curriculum and in your\ncareer as a developer. Create your own in the REPL and practice accessing\nvarious pieces of data.\u003c/p\u003e\n\n\u003ch2\u003eArrays in arrays\u003c/h2\u003e\n\n\u003cp\u003eWorking with nested arrays isn't all that different from nested objects. Simply\nreplace the named properties of nested objects with indexes of nested arrays.\nLet's review with an example. Be sure to follow along in the REPL.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e You may have discovered that, when you're working in the embedded \nterminal in VS Code or the terminal application on your computer, you can repeat\nthe last command you ran by pressing the \"up\" arrow key. The same is true in the\nREPL console! Give it a try.\u003c/p\u003e\n\n\u003cp\u003eCopy the following code into the REPL's code window:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eletters\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eb\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ec\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ed\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ee\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ef\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e]]];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGiven the above nested array, how would we get the letter \u003ccode\u003e'e'\u003c/code\u003e? First, we'd\nneed the second element in \u003ccode\u003eletters\u003c/code\u003e, \u003ccode\u003eletters[1]\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eletters\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"b\", [\"c\", [\"d\", [\"e\"]], \"f\"]]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen we'd need the second element of that element, so \u003ccode\u003eletters[1][1]\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eletters\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"c\", [\"d\", [\"e\"]], \"f\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen the second element of \u003cstrong\u003ethat\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1]\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eletters\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"d\", [\"e\"]]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd the second element of \u003cstrong\u003e\u003cem\u003ethat\u003c/em\u003e\u003c/strong\u003e element, \u003ccode\u003eletters[1][1][1][1]\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eletters\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; [\"e\"]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, we want the first element in that final nested array,\n\u003ccode\u003eletters[1][1][1][1][0]\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eletters\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \"e\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhew! That's a lot to keep track of. Just remember that each lookup (each set of\nsquare brackets) \"drills down\" into each successive nested array.\u003c/p\u003e\n\n\u003ch2\u003eBonus: Iterating over nested objects and arrays\u003c/h2\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: From here on out, this lesson gets pretty abstract! If you're\nfeeling confident with arrays and objects and are curious how to write some\nabstract code to iterate over nested objects, continue on; otherwise, feel\nfree to continue to the next lesson.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOur initial shallow object had a lot of drawbacks, but one advantage of it is\nthat it was very easy to iterate over all of the information:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAvi\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlombaum\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecompanyName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ejobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDeveloper Apprentice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend1firstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNancy\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend1lastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBurgess\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend1companyName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend1jobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDeveloper Apprentice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend2firstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCorinna\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend2lastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJackson\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend2companyName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriend2jobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eSenior Developer\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eproject1title\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eproject1description\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe premier Flatiron School-based social network in the world.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eproject2title\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eScuber\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eproject2description\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eA burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eshallowIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eshallowIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Avi\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flombaum\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Developer Apprentice\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Nancy\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Burgess\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Developer Apprentice\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Corinna\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Jackson\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Senior Developer\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: The premier Flatiron School-based social network in the world.\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Scuber\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can also use it with arrays:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eshallowIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 2\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 3\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 5\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 7\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 11\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: our \u003ccode\u003eshallowIterator()\u003c/code\u003e function uses \u003ccode\u003efor...in\u003c/code\u003e to iterate through\nthe object that's passed to it. We learned in the previous lesson that\n\u003ccode\u003efor...in\u003c/code\u003e is not the best iterator to use with arrays. Because we're not\ncurrently working in the browser (and therefore cross-browser consistency\nisn't an issue), we can safely ignore that problem for the moment. Since this\nexample is fairly complicated, we'll work through the process using \u003ccode\u003efor...in\u003c/code\u003e\nfirst then, once we've got that working, build a modification that will handle\narrays appropriately.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eUnfortunately, as you may be able to guess from its name, our \u003ccode\u003eshallowIterator()\u003c/code\u003e\nfunction can't handle nested collections:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]]];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eshallowIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 1\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: [2, [4, [5, [6]], 3]]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt's trained to iterate over the passed-in array's elements or object's\nproperties, but our function has no concept of \u003cem\u003edepth\u003c/em\u003e. When it tries to iterate\nover the above nested \u003ccode\u003enumbers\u003c/code\u003e array, it sees only two elements at the top\nlevel of the array: the number \u003ccode\u003e1\u003c/code\u003e and \u003cstrong\u003eanother\u003c/strong\u003e array,\n\u003ccode\u003e[2, [4, [5, [6]], 3]]\u003c/code\u003e. It \u003ccode\u003econsole.log()\u003c/code\u003es out both of those elements and\ncalls it a day, never realizing that we also want it to print out the elements\ninside the nested array.\u003c/p\u003e\n\n\u003cp\u003eIt behaves similarly with objects. If we passed the nested version of \u003ccode\u003euserInfo\u003c/code\u003e\nto it, the values at the top level of the object (\"Avi\" and \"Flombaum\") would be\nlogged correctly, but for the \u003ccode\u003ecompany\u003c/code\u003e key, the object it points to would be\nlogged, and, for \u003ccode\u003efriends\u003c/code\u003e and \u003ccode\u003eprojects\u003c/code\u003e, arrays of objects would be logged.\nTry it out for yourself in the REPL.\u003c/p\u003e\n\n\u003cp\u003eLet's modify our function so that if it encounters a nested object or array, it\nwill additionally print out all of the data contained therein. We can do this\nusing an \u003ccode\u003eif\u003c/code\u003e condition and the \u003ccode\u003etypeof\u003c/code\u003e operator:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eshallowIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enestedKey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"nx\"\u003enestedKey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eshallowIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 1\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 2\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: [4, [5, [6]], 3]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we've gone two levels deep, which gets us a bit closer to our goal. However,\nthere are two pretty clear drawbacks to this strategy:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWe'll have to add a new \u003ccode\u003efor...in\u003c/code\u003e statement for every level of nesting,\nquickly ballooning our function out to an unmanageable size.\u003c/li\u003e\n\u003cli\u003eSince we need to add a separate \u003ccode\u003efor...in\u003c/code\u003e statement for each additional\nlevel, we'll have to know exactly what the target structure looks like ahead\nof time and update our function accordingly. That's a lot of repetitive,\nerror-prone work, and it results in a function that can only be used for data\nwith that particular structure.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThere has to be another way!\u003c/p\u003e\n\n\u003ch3\u003eRecursion\u003c/h3\u003e\n\n\u003cp\u003eLucky for us, there \u003cstrong\u003eis\u003c/strong\u003e another way: recursion. It's one of the more powerful\nconcepts in programming, but it's also pretty hard to grasp at first. \u003cstrong\u003eDon't\nsweat it if it doesn't click immediately\u003c/strong\u003e. We'll introduce the concept here but\ncome back to it periodically throughout the rest of the JavaScript material.\nEssentially, \u003cstrong\u003ea recursive function is a function that calls itself\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at a better way to write our \u003ccode\u003eshallowIterator()\u003c/code\u003e to take\nadvantage of recursion:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we invoke \u003ccode\u003edeepIterator()\u003c/code\u003e with an argument, the function first checks if\nthe argument is an object (recall that the \u003ccode\u003etypeof\u003c/code\u003e operator returns \u003ccode\u003e\"object\"\u003c/code\u003e\nfor arrays as well). If the argument \u003cstrong\u003eisn't\u003c/strong\u003e an object, \u003ccode\u003edeepIterator()\u003c/code\u003e\nsimply \u003ccode\u003econsole.log()\u003c/code\u003es out the argument and exits. However, if the argument\n\u003cstrong\u003eis\u003c/strong\u003e an object, we iterate over the properties (or elements) in the object,\npassing each to \u003ccode\u003edeepIterator()\u003c/code\u003e and \u003cstrong\u003ere-invoking the function\u003c/strong\u003e. That's\nrecursion!\u003c/p\u003e\n\n\u003cp\u003eLet's see it in action:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]]];\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 1\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 2\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 4\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 5\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 6\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: 3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo help us see what's going on here let's use a REPL. Go ahead and copy the\nfollowing code into \u003ca href=\"https://replit.com/languages/javascript\"\u003ereplit\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eArgument: \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eLogged value: \u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]]];\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that we've added a \u003ccode\u003econsole.log()\u003c/code\u003e at the top of the function that will\nlog whatever argument was passed to our function. We've also added a label to\nthe second \u003ccode\u003econsole.log()\u003c/code\u003e so you can see the values that are getting logged\nfrom the \u003ccode\u003eelse\u003c/code\u003e statement. If you run the code, you will see an \"Argument\"\nlogged for each time the function is called. You will also see a \"Logged value\"\nfor each time the code in the \u003ccode\u003eelse\u003c/code\u003e executes. Referring to the output of the\n\u003ccode\u003econsole.log()\u003c/code\u003es, step through the function for each element to trace what's\nhappening.\u003c/p\u003e\n\n\u003cp\u003eOur function also works with combinations of nested objects and arrays. Replace\nthe existing code in replit with the following and run it (we've gone back to a\nsingle \u003ccode\u003econsole.log()\u003c/code\u003e inside our function to make the output easier to read):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eAvi\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlombaum\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ecompany\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"na\"\u003ejobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDeveloper Apprentice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"na\"\u003efriends\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eNancy\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eBurgess\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ecompany\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ejobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eDeveloper Apprentice\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003efirstName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eCorinna\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003elastName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eJackson\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ecompany\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook Labs\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ejobTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eLead Developer\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eprojects\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eFlatbook\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThe premier Flatiron School-based social network in the world.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"na\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eScuber\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"na\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eA burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Avi\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flombaum\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Developer Apprentice\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Nancy\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Burgess\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Developer Apprentice\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Corinna\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Jackson\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Lead Developer\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: The premier Flatiron School-based social network in the world.\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Scuber\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo keep track of how many times our function is recursively invoking itself, it\nmight be helpful to use a counter variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecounter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ecounter\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Avi\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flombaum\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Developer Apprentice\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Nancy\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Burgess\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Developer Apprentice\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Corinna\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Jackson\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Lead Developer\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: The premier Flatiron School-based social network in the world.\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Scuber\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you check the value of \u003ccode\u003ecounter\u003c/code\u003e after running the code, you should see that\n\u003ccode\u003edeepIterator()\u003c/code\u003e was called a total of 26 times: we invoked it once, and it\ninvoked itself 25 additional times! If we look closely at our nested \u003ccode\u003euserInfo\u003c/code\u003e\nobject, we can see that it contains two arrays, seven nested objects, and\nsixteen key-value pairs where the value is a string. Add those all up (2 + 7 +\n16), and you get our 25 recursive invocations!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReminder\u003c/strong\u003e: You can check the value of \u003ccode\u003ecounter\u003c/code\u003e by either wrapping it in a\n\u003ccode\u003econsole.log()\u003c/code\u003e in the code window or checking it in the console window after\nrunning the code.\u003c/p\u003e\n\n\u003ch3\u003eModifying our Program to Better Handle Arrays\u003c/h3\u003e\n\n\u003cp\u003eIn our \u003ccode\u003edeepIterator()\u003c/code\u003e function, we're using an \u003ccode\u003eif\u003c/code\u003e statement to evaluate the\nargument that's passed in. We do one thing if \u003ccode\u003etarget\u003c/code\u003e is an object and\nsomething else if it's not. Now we want to modify our function to handle one\nmore situation: when \u003ccode\u003etarget\u003c/code\u003e is an array. Doing this is a simple matter of\nadding an \u003ccode\u003eelse if\u003c/code\u003e to our \u003ccode\u003eif\u003c/code\u003e statement; its code block will execute \u003cstrong\u003eif\u003c/strong\u003e\n\u003ccode\u003etarget\u003c/code\u003e is an array.\u003c/p\u003e\n\n\u003cp\u003eWe can determine whether a variable is an array using an \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#static_methods\"\u003eArray Static\nMethod\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\"\u003e\u003ccode\u003eArray.isArray()\u003c/code\u003e\u003c/a\u003e. Let's use that in our new\ncondition. We'll also add a new \u003ccode\u003econsole.log()\u003c/code\u003e to verify that our code is\ncorrectly detecting the arrays (we've commented out the final \u003ccode\u003econsole.log()\u003c/code\u003e\nfor now):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eisArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWe found an array\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// iterate through the array\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// console.log(target);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow if we run the code, we see ...nothing. For some reason, our code isn't\ndetecting the arrays. Remember that \u003cstrong\u003earrays are objects\u003c/strong\u003e, so our \u003ccode\u003eif\u003c/code\u003e\ncondition returns true for arrays as well as objects and the \u003ccode\u003eelse if\u003c/code\u003e never\nexecutes. We can fix this by reversing the order of our conditions. Let's also\nput the second \u003ccode\u003econsole.log()\u003c/code\u003e back in, and try running the code again.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eisArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// iterate through the array\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eWe found an array\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Avi\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flombaum\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Developer Apprentice\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: We found an array\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: We found an array\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMuch better! The logs are working for the primitive values and the non-array\nobject, so now we just need to code the body of our new \u003ccode\u003eif\u003c/code\u003e statement, using\n\u003ccode\u003efor...of\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eisArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eelement\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eobject\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003edeepIterator\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003euserInfo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Avi\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flombaum\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Developer Apprentice\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Nancy\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Burgess\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Developer Apprentice\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Corinna\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Jackson\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook Labs\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Lead Developer\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Flatbook\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: The premier Flatiron School-based social network in the world.\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: Scuber\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// LOG: A burgeoning startup helping busy parents transport their children to and from all of their activities on scooters.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhew!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThis is very advanced stuff, and you should absolutely not get discouraged if it\ndoesn't click at first. Create some other nested data structures and traverse\nover them with \u003ccode\u003eshallowIterator()\u003c/code\u003e and \u003ccode\u003edeepIterator()\u003c/code\u003e, noting the limitations\nof the former. Use the debugging tools available to you to get a handle on\nwhat's happening at each step of the process.\u003c/p\u003e\n\n\u003cp\u003eYou got this!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/scripting/javascript/advanced/recursion-javascript\"\u003eMDN: Recursion (JavaScript)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f\"\u003efreeCodeCamp: Recursion in JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://javascript.info/debugging-chrome\"\u003eJavaScript.info: Debugging in Chrome\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "traversing-nested-objects"
          },
          {
            "id": 432865,
            "title": "Survey - Working with Data Structures",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Working with Data Structures module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "g3140989668d2ba4a85e31f52151c918a"
          }
        ]
      },
      {
        "id": 44866,
        "name": "HTML",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g14a185da351a42862d9227ff4f1e8ab2",
        "items": [
          {
            "id": 432869,
            "title": "A Quick Tour Of The Web",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-quick-tour-of-the-web\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-quick-tour-of-the-web\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-quick-tour-of-the-web/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine \"internet\"\u003c/li\u003e\n\u003cli\u003eDefine \"server\" role\u003c/li\u003e\n\u003cli\u003eDefine \"client\" role\u003c/li\u003e\n\u003cli\u003eIdentify which role possesses the data that browsers display\u003c/li\u003e\n\u003cli\u003eIdentify what type of content defines what's seen in browsers\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWelcome to the web, the largest canvas in the world. Over half of the world's\npopulation has access to the web. Never before has it been possible to reach so\nmany across such vast distances!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10A.png\" alt=\"Welcome to the Web!\"\u003e\u003c/p\u003e\n\n\u003cp\u003eTo orient you in these first steps of your study of HTML and web programming we\nwant to give a broad overview of the web and how it works in the broadest terms.\nWhile you might have heard \"web,\" and \"internet\" and \"server\" in many different\ncontexts and places over the years, it's possible that you've never built a\ncohesive model in your mind that connects those concepts.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we'll go over the essential steps in how the web works.\u003c/p\u003e\n\n\u003ch2\u003eDefine \"internet\"\u003c/h2\u003e\n\n\u003cp\u003eWhen people share information, great things can happen. Politics can change. Our\nplace in the universe can change. Disease can be conquered. The ability to share\nknowledge is \u003cem\u003epower\u003c/em\u003e. In the earliest days of computing, engineers looked for\nways to have computers share information. Technical limits meant networked\ncomputers had to be within the same office.\u003c/p\u003e\n\n\u003cp\u003eEventually, improvements allowed small networks to \"inter\"-\"network\" with each\nother. This discipline was called \"internetworking.\" By the technology and\nknowledge of \"internetworking,\" these small local networks (or, \"local area\nnetworks\" or LANs) became \"internetworked\" into \"Wide Area Networks\" or WANs.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_18_VisualInternet.png\" alt=\"Visual Internet\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe natural next dream was to \"internetwork\" WANs into some sort of \"larger\"\ninter-network, something city-scale, country-scale, or global scale. Technology\nfor \"inter-networking\" WANs was difficult and slow to develop, but eventually\nproduced a backbone internetwork, \"\u003cstrong\u003eThe Internet\u003c/strong\u003ework\" which encompassed all\nof its constituent WANs and their constituent LANs. Eventually, in common usage,\nit became called \"The Internet.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10B.png\" alt=\"The internet\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIt was upon \u003cem\u003ethis\u003c/em\u003e \"The Internet\" that \"The Web\" was built.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e For many reasons, style guides no longer capitalize \"internet\" or\n\"web.\" The global network linking computers globally is \"the internet.\"\u003c/p\u003e\n\n\u003ch2\u003eDefine \"server\" Role\u003c/h2\u003e\n\n\u003cp\u003eAll machines on the internet are computers. For ease of discussion, we're going\nto discuss them in two \"roles:\" client and server. Historically a \"server\" would\nbe a larger, more powerful computer with more memory, bigger hard drives, and\nmore computer chips. But today, \"server\" roles can be handled quite well by\nArduino devices no bigger than a credit card! Nevertheless, in diagrams and on\nwhiteboards they tend to be drawn as large \"tower-style\" computers.\u003c/p\u003e\n\n\u003cp\u003eRegardless of its size, a \"server\" has the responsibility of arranging the data\nthat is presented to the \"client.\" It's because of this \"arranging\" being\ncomputationally demanding that servers have tended to have extra resources.\u003c/p\u003e\n\n\u003cp\u003eHistorically, computers were very expensive and well-appointed servers were\nvery, very expensive. As such, when possible, it was more economical for servers\nto do heavy processing and for the clients to request updates.\u003c/p\u003e\n\n\u003ch2\u003eDefine \"client\" Role\u003c/h2\u003e\n\n\u003cp\u003eA computer fulfilling a client role has the responsibility of presenting the\ndata that is sent from the server. Historically, these machines could be more\nlightly equipped (and thus cheaper). You'll generally see them drawn in diagrams\nor on whiteboards as laptops.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003eclient\u003c/em\u003e displays data that is provided to it by the \u003cem\u003eserver\u003c/em\u003e. A verb that's\ncommonly used is \"render\" as in, \"The client \u003cem\u003erenders\u003c/em\u003e data provided by the\nserver.\" That is, it only displays the server's data and any change to the data\nhas to be done \u003cem\u003eby the server\u003c/em\u003e, caused by a \u003cem\u003erequest\u003c/em\u003e from the \u003cem\u003eclient\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_19_BasicClientServer.png\" alt=\"Client/Server Role\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eClient/Server Example\u003c/h2\u003e\n\n\u003cp\u003eLet's take a moment to consider client/server in a common scenario: the\nsupermarket.\u003c/p\u003e\n\n\u003cp\u003eIf you ask the cashier for the price of a bottle of water, they can look it up\nfor you. But their client computer's \"source of truth\" on the price lives on the\nserver. The \u003cem\u003eclient\u003c/em\u003e must request this information by \"asking\" or \"sending a\nrequest\" to the \u003cem\u003eserver\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eSimilarly, when you buy that bottle of water, the (lightweight) client says\n\"Sold a bottle of water!\" to a server. The server, in turn, updates its\ninventory record to show \u003ccode\u003e-1\u003c/code\u003e water bottle.\u003c/p\u003e\n\n\u003cp\u003eNow, at the end of the sales day, the management team would like to do some\nanalytics about how profitable they were that day. They \u003cem\u003ecould\u003c/em\u003e go to each\nclient computer, determine its revenue for the day and which departments\ncontributed to that number, but on a cheap client machine that process would be\ns..l...o.....w — like trying to play a PS5 game on an iPhone!\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eHowever\u003c/em\u003e, if each client computer merely logged its actions to the server by\nsending requests, the management could ask that high-power machine to print out\nanalytics in an economical and efficient fashion. Many businesses still have\ntheir IT architecture on this model, known as \"the client/server\" model.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10C_ClientServerExample.png\" alt=\"Client/Server Illustration\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eIdentify Which Role Possesses the Data That Browsers Display\u003c/h2\u003e\n\n\u003cp\u003eThe web was developed with a client/server model. Home PCs were relatively\nunderpowered \u003cem\u003eclients\u003c/em\u003e and web content sharing programs were installed on\nhigh-power \u003cem\u003eservers\u003c/em\u003e. Thus web \u003cem\u003eclients\u003c/em\u003e running \u003cem\u003ebrowser\u003c/em\u003e software were created\nthat would send a \u003cem\u003erequest\u003c/em\u003e for a web page and the server would return the web\npage.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_81_WebAppStack.png\" alt=\"Web Application Stack\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe specification on how \u003cem\u003eclients\u003c/em\u003e and \u003cem\u003eservers\u003c/em\u003e interact is called HTTP\n(HyperText Transfer Protocol). This is why URLs start with \u003ccode\u003ehttp://\u003c/code\u003e: you're\ntelling the browser: \"Browser, act as a client and use the HTTP standard to talk\nto \u003ccode\u003eflatironschool.com\u003c/code\u003e and find a file called \u003ccode\u003eindex.html\u003c/code\u003e.\" The browser\nexpresses this wish by transmitting a message that looks like:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eGET flatironschool.com /index.html\u003c/code\u003e\n\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/tour-of-the-web/Image_10D_BrowserClientInteraction.png\" alt=\"Browser as Client Illustration\"\u003e\u003c/p\u003e\n\n\u003cp\u003eHere it asks \u003ccode\u003eflatironschool.com\u003c/code\u003e for an HTML file called \u003ccode\u003eindex\u003c/code\u003e. We'll explore\nthis \u003cem\u003emuch\u003c/em\u003e more in subsequent lessons!\u003c/p\u003e\n\n\u003cp\u003eIn return, the \u003cem\u003eserver\u003c/em\u003e returns... HTML that's contained in the \u003ccode\u003eindex.html\u003c/code\u003e\nfile.\u003c/p\u003e\n\n\u003ch2\u003eIdentify What Type of Content Defines What's Seen in Browsers\u003c/h2\u003e\n\n\u003cp\u003eHaving been told which file on \u003cem\u003eits\u003c/em\u003e hard drive to consult, the web \u003cem\u003eserver\u003c/em\u003e\ntakes the contents of a file, pushes them across the internet \u003cem\u003eback\u003c/em\u003e to the\n\u003cem\u003eclient\u003c/em\u003e. The client then receives the raw HTML. It looks something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u003c/span\u003e \u003cspan class=\"na\"\u003elang=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eHome | The Metropolitan Museum of Art\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003echarset=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"UTF-8\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003ename=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"na\"\u003econtent=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"width=device-width, initial-scale=1.0\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003ename=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"title\"\u003c/span\u003e \u003cspan class=\"na\"\u003econtent=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Home\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e\n      \u003cspan class=\"na\"\u003ename=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"keywords\"\u003c/span\u003e\n      \u003cspan class=\"na\"\u003econtent=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Metropolitan Museum, Met, Metropolitan Museum of Art, Met Museum, Metropolitan\"\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003ename=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"description\"\u003c/span\u003e \u003cspan class=\"na\"\u003econtent=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"The Metropolitan Museum of Art is a...\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    ...\n  \u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eObviously, this is \u003cem\u003enot\u003c/em\u003e what you see when you visit\n\u003ca href=\"http://www.metmuseum.org\"\u003ehttp://www.metmuseum.org\u003c/a\u003e. The difference hinges on\nthat special verb \u003cem\u003erender\u003c/em\u003e. Your \u003cem\u003eclient's\u003c/em\u003e browser \u003cem\u003erenders\u003c/em\u003e the \"raw\" HTML and\nturns it into something \u003cem\u003ehumans\u003c/em\u003e find nice to read.\u003c/p\u003e\n\n\u003cp\u003eAnd this is the essence of how the web works!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn conclusion, we've talked about the history of the word \u003cem\u003einternet\u003c/em\u003e and how it\nconnects computers fulfilling \u003cem\u003eclient\u003c/em\u003e and \u003cem\u003eserver\u003c/em\u003e roles. We've identified that\n\u003cem\u003eclient\u003c/em\u003e machines use web browsers to make \u003cem\u003erequests\u003c/em\u003e of the \u003cem\u003eserver\u003c/em\u003e, according\nto the HTTP standard, and the \u003cem\u003eserver\u003c/em\u003e returns HTML data, stored on their hard\ndrives in files \u003cem\u003eback\u003c/em\u003e to the requesting \u003cem\u003eclient\u003c/em\u003e. The \u003cem\u003eclient\u003c/em\u003e machine, running\nbrowser software, then converts that raw HTML data into a \u003cem\u003erendered\u003c/em\u003e format\nwhich is what you experience as a web page.\u003c/p\u003e\n\n\u003cp\u003eAs a summary, we've provided the following video that gives an introduction to\nthe web. If you are only interested in building web pages, you can stop at 3:48;\nif you are studying a web programming technology e.g. Ruby or JavaScript, we\nrecommend watching the entire video.\u003c/p\u003e\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7AS96jRnquI?rel=0\u0026amp;modestbranding=1\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=7AS96jRnquI\"\u003eThe Web in a Nutshell\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.google.com/presentation/d/1m6SPR13MdfF7YRhfx7HtvkOmFnrRyVQOEFgWhI8Bc0I/edit?usp=sharing\"\u003eSlides\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/World_Wide_Web\"\u003eWorld Wide Web - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\"\u003eHTML basics - Mozilla Developer Network\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\"\u003eAn overview of HTTP - Mozilla Developer Network\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://noahveltman.com/static-dynamic/\"\u003eStatic vs Dynamic\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Client%E2%80%93server_model\"\u003eClient Server Model - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "a-quick-tour-of-the-web"
          },
          {
            "id": 432871,
            "title": "Welcome to HTML",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-welcome-to-html\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-welcome-to-html\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-welcome-to-html/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003ePreview\u003c/h2\u003e\n\n\u003cp\u003eIn the next few lessons, we'll be introducing you to HTML (HyperText\nMarkup Language).\u003c/p\u003e\n\n\u003cp\u003eHTML is a \u003cem\u003edocumentation-based\u003c/em\u003e technology. The word \u003cem\u003edocumentation\u003c/em\u003e probably\ninspires a mental image of someone carrying heaps of papers, folders, files.\nBut what is a \u003cem\u003edocument\u003c/em\u003e in the digital realm?\u003c/p\u003e\n\n\u003cp\u003eWe'll start our exploration of HTML by thinking about files and learning the\nvocabulary technologists use to discuss them in the process of creating HTML\ndocuments. This will assist your searches for help and your ability to interact\nwith professionals on the topic.\u003c/p\u003e\n\n\u003cp\u003eWe'll then proceed to a collaborative lab where you'll be guided in editing a\nsimple HTML document. The point here is not to memorize the full detail of\nHTML's vocabulary, but to experience the joy and excitement of being able to\nadjust and customize HTML.\u003c/p\u003e\n\n\u003cp\u003eAfter that, we'll learn a core set of HTML features that will enable you to create\nsimple HTML documents with less-explicit guidance. Around this time, you'll then\nbegin tying these discoveries together and will start creating your first\nHTML documents.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/welcome-to-html/Image_48_HTMLBannerGraphic.png\" alt=\"Welcome to HTML\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eRepetition \u0026amp; Getting Stuck\u003c/h2\u003e\n\n\u003cp\u003eIn the lessons ahead, many of the ideas are deliberately repeated. You might not \nget \"attributes\" the first time you see them, but, after some hands-on experience,\nthey'll make sense the second time you see them.\u003c/p\u003e\n\n\u003ch2\u003eBeyond\u003c/h2\u003e\n\n\u003cp\u003eAt the close of the unit, you'll be ready to learn a series of HTML expressions\nthat will allow you to create a meaningful web page. \u003c/p\u003e",
            "exportId": "welcome-to-html"
          },
          {
            "id": 432872,
            "title": "Files and File Types",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-files-extensions-and-filetypes\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-files-extensions-and-filetypes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-files-extensions-and-filetypes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a file\u003c/li\u003e\n\u003cli\u003eContrast \u003cem\u003etext files\u003c/em\u003e and \u003cem\u003ebinary files\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003eIdentify the function of file extensions\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHave you tried to memorize a phone number \"for a second\" as you tried to write\nit down? Maybe you kept repeating it over and over? Have you ever felt a little\noverwhelmed when someone was giving you too much information at once and you\nwere trying to keep up--but felt relief when you finally \"got it\"? As humans, we\ncan only hold a few things in our heads before they start to, well, vanish or\nget mixed up. Our \u003cem\u003eworking memory\u003c/em\u003e is not too reliable!\u003c/p\u003e\n\n\u003cp\u003eComputers also have limited working memory. Just like us, they keep things in\nworking memory that they're, well, working with.\u003c/p\u003e\n\n\u003cp\u003eWhen computers or people run out of space, they write down information stored in\ntheir \u003cem\u003eworking memory\u003c/em\u003e. Humans sometimes use a napkin, Post-It Notes or the back\nof their hands. Computers use \u003cem\u003efiles\u003c/em\u003e. The stuff computers write into their\nfiles fits into two main categories:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eInformation humans can read (\"text files\")\u003c/li\u003e\n\u003cli\u003eInformation only computers can read (\"binary files\")\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eDevelopers create \u003cem\u003elots\u003c/em\u003e of files. This README will help us all get on the same\npage with how to talk about them.\u003c/p\u003e\n\n\u003ch2\u003eDefine a File\u003c/h2\u003e\n\n\u003cp\u003eA file is a thing computers use to store facts (\"data\") or processes\n(\"programs\") for later use.\u003c/p\u003e\n\n\u003ch2\u003eContrast \u003cem\u003eText Files\u003c/em\u003e and \u003cem\u003eBinary Files\u003c/em\u003e\u003c/h2\u003e\n\n\u003cp\u003eComputers think in electricity.\u003c/p\u003e\n\n\u003cp\u003eWhoa!\u003c/p\u003e\n\n\u003cp\u003eComputers' thoughts are usually shown as 1's and 0's. This is called \u003cem\u003ebinary\ncode\u003c/em\u003e. When computers write things down, they often write them down in files in\n\u003cem\u003etheir\u003c/em\u003e language, \u003cem\u003ebinary\u003c/em\u003e. These files are \u003cem\u003ebinary files\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTypes of \u003cem\u003ebinary\u003c/em\u003e files are images, music, and software programs. We can create\nthese files with Adobe Photoshop, the C programming language, or Ableton.\u003c/p\u003e\n\n\u003cp\u003eNobody is exactly sure how humans think. That's a question for science or\nphilosophy. When we write our ideas down, we write them in files in \u003cem\u003eour\u003c/em\u003e\nlanguage, \u003cem\u003etext\u003c/em\u003e. These files are \u003cem\u003etext files\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTypes of \u003cem\u003etext\u003c/em\u003e files are HTML, letters to grandma, a list of student grades for\na grade book program, directions to Carnegie Hall, etc. We create these \u003cem\u003etext\u003c/em\u003e\nfiles with \u003cem\u003etext editors\u003c/em\u003e like Visual Studio Code, Atom, Sublime Text, vim, or\nemacs.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE:\u003c/strong\u003e You might hear some developers call text files\n\"\u003ca href=\"https://en.wikipedia.org/wiki/Plain_text\"\u003eplaintext\u003c/a\u003e\" or \"\u003ca href=\"https://en.wikipedia.org/wiki/Plain_text\"\u003eplain text\u003c/a\u003e files\" They all mean the\nsame thing.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eThe Curious Case of Word Processing Files\u003c/h3\u003e\n\n\u003cp\u003eWhat about files made by word processors Microsoft Word or MacOSX's TextEdit?\nWhile you're typing text, those programs store the text \u003cem\u003eas well as information\u003c/em\u003e\nabout the text (which font to use, which words are in bold, whether these next\nfive lines are part of a bullet-list, etc.) in the \u003cem\u003esame\u003c/em\u003e file.  To make the\nloading and saving fast, these programs save the file in \u003cem\u003ebinary\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWord Processors and HTML, Code\u003c/h3\u003e\n\n\u003cp\u003eSince word processing programs store their output in \u003cem\u003ebinary\u003c/em\u003e files and programs\nthat read HTML (like browsers) or run code (like Ruby, Python, JavaScript, or\nJava) need \u003cem\u003etext\u003c/em\u003e, \u003cstrong\u003eWord Processors should not be used to create HTML or code.\nDevelopers do their work in \u003cem\u003etext editors\u003c/em\u003e, not \u003cem\u003eword processors\u003c/em\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Function of File Extensions\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/files-filetypes/Image_49_FileTypeAssets.png\" alt=\"Common Filetypes and File Extensions\"\u003e\u003c/p\u003e\n\n\u003cp\u003eMany file names have an \"extension\" that comes after a \u003ccode\u003e.\u003c/code\u003e. It is not a\nrequirement, but it's a best practice. The extension is a \"hint\" to the\noperating system of which program should be used to work with the file.  For\nexample, \u003ccode\u003eLetterToGrandma.docx\u003c/code\u003e has a \u003cem\u003edocx\u003c/em\u003e \u003cem\u003eextension\u003c/em\u003e which \u003cem\u003ehints\u003c/em\u003e to the OS\nthat it should open the file with the Word word processing program by Microsoft.\nThe file \u003ccode\u003ejob_offer.pdf\u003c/code\u003e \u003cem\u003ehints\u003c/em\u003e to the OS that it could open the file with\neither Acrobat or MacOSX's Preview application. When the OS finds many good\noptions, it will ask for the user's help in selecting the right program.\u003c/p\u003e\n\n\u003cp\u003eChanging an extension \u003cstrong\u003edoes not\u003c/strong\u003e change the type of file you have. A text file\ncalled \u003ccode\u003egroceries.txt\u003c/code\u003e could be renamed \u003ccode\u003egroceries.mp3\u003c/code\u003e \u003cstrong\u003ebut it would still be\na text file\u003c/strong\u003e. A Toyota with a BMW medallion does not suddenly become a BMW. Our\n\u003ccode\u003egroceries\u003c/code\u003e did not suddenly become music because we changed the extension.\u003c/p\u003e\n\n\u003cp\u003eSome operating systems, like MacOSX, \u003cem\u003ehide\u003c/em\u003e the file extension by default.  They\nreckon that most users \"no longer care about it.\" Since we're developers,\nthough, we will frequently dig below the \"end-user\" layer. When in a terminal,\nwe will see full file names - including extensions.\u003c/p\u003e\n\n\u003cp\u003eHere's a table to help train your instincts in seeing text-files versus\nbinary-files:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html-basics/files-filetypes/Image_49B_FileTypeChart.png\" alt=\"Table of file types\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we have taken some time to get to know files. Files are things\nin which computers store data that needs to last a while or which their users\nmight want to refer to again later. We've noted that files generally come in\nbinary and text formats. And we saw that many files also have an extension that\nprovides hints about which program should be used to work with the file.\u003c/p\u003e",
            "exportId": "files-and-file-types"
          },
          {
            "id": 432874,
            "title": "Experiencing HTML Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-experiencing-html-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate an ordered HTML list\u003c/li\u003e\n\u003cli\u003eCreate an unordered HTML list\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHow do we go about writing text for the web? How is that different from the text\nthat we write in a text file? We're going to experience for ourselves how these\nthings are different in this lab.\u003c/p\u003e\n\n\u003cp\u003eYou don't need any prior knowledge of HTML for this lab. We're going to tell you\nwhat to type. Don't focus on specific commands or taking notes. Everything will\nbe covered thoroughly later. Instead, the goal of this exercise is to feel the\njoy of editing a file and seeing the change \"out there.\"\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e We don't expect you to know \u003cem\u003emarkup\u003c/em\u003e, \u003cem\u003econtent\u003c/em\u003e, \u003cem\u003esource text\u003c/em\u003e, or\n\u003cem\u003erendered text\u003c/em\u003e yet. We'll be defining them in this lab.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code.\u003c/p\u003e\n\n\u003ch2\u003eCreate an Ordered HTML List\u003c/h2\u003e\n\n\u003cp\u003eThink of a collection of things united by theme: Pokémon, Old-school MC's, Prime\nMinisters of New Zealand, Magical Beasts and Where to Find Them, etc. We're\ngoing to walk through how to create a list of things marked up with HTML.\u003c/p\u003e\n\n\u003ch3\u003eCreate a Text File with Content\u003c/h3\u003e\n\n\u003cp\u003eIn your terminal, while still inside of this labs directory, create a new file\ncalled \u003ccode\u003emy_list.txt\u003c/code\u003e by running \u003ccode\u003etouch my_list.txt\u003c/code\u003e. The file extension suggests\nto humans and operating systems that it contains text. Open the file in VS Code\nby typing \u003ccode\u003ecode my_list.txt\u003c/code\u003e; you will do all editing for this lesson in VS\nCode.\u003c/p\u003e\n\n\u003cp\u003eBelow is a collection of plant names.\nCopy and paste the plants into your \u003ccode\u003emy_list.txt\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\"Monstera Deliciosa\"\n\"Fiddle Leaf Fig\"\n\"Pilea\"\n\"Golden Pothos\"\n\"Peace Lily\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe material we typed into the file is called the \u003cem\u003econtent\u003c/em\u003e. It's the thing\nwe're trying to communicate.\u003c/p\u003e\n\n\u003ch3\u003eContent as a List in a Text File\u003c/h3\u003e\n\n\u003cp\u003eA problem with our \u003cem\u003econtent\u003c/em\u003e is that it doesn't explicitly state anywhere that\nit's a list. In the example, we see a list of plants. But a browser doesn't know\nwhat a \"list\" is.\u003c/p\u003e\n\n\u003cp\u003eWe need to help the browser \u003cstrong\u003eknow\u003c/strong\u003e what a list is. The secret is to add\n\"notes\" or \"breadcrumbs\" to the content that tell the browser that it has list\nitems and that these items \"go together\" in a list. To add these \"notes\" we\nsurround the \u003cem\u003econtent\u003c/em\u003e with bits of \u003cem\u003emarkup\u003c/em\u003e, with bits of HTML.\u003c/p\u003e\n\n\u003cp\u003eWe will take the text content from our text file, paste it into a new HTML file\nand then we will add \u003cem\u003emarkup\u003c/em\u003e so that a browser \"sees\" a list. Let's write an\nHTML file!\u003c/p\u003e\n\n\u003ch3\u003eText Inside an HTML File\u003c/h3\u003e\n\n\u003cp\u003eNow we're going to create an HTML list together.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a new file called \u003ccode\u003emy_list.html\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCopy the contents of \u003ccode\u003emy_list.txt\u003c/code\u003e and paste them into \u003ccode\u003emy_list.html\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSave the \u003ccode\u003emy_list.html\u003c/code\u003e file.\u003c/li\u003e\n\u003cli\u003eOpen the \u003ccode\u003emy_list.html\u003c/code\u003e file in the browser. For Mac users, you can do this\nwith \u003ccode\u003eopen my_list.html\u003c/code\u003e. For Windows users, you can do this in your Ubuntu\napp with \u003ccode\u003eexplorer.exe my_list.html\u003c/code\u003e. Make sure you've\n\u003ca href=\"https://support.google.com/chrome/answer/95417?co=GENIE.Platform%3DDesktop\u0026amp;hl=en\"\u003eset Chrome as your default browser\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eHit enter to run the command.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOnce you've opened the file in the browser, you should see:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/non_marked_up_list.png\" alt=\"HTML file with non-marked-up content displays on one line\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAs noted above, the browser doesn't know that items on new lines means \"items in\na list.\" Browsers ignore when HTML is split onto new lines. We cover why a\nlittle later in this README. Since the browser doesn't know we intend this to be\na list \u003cstrong\u003eand\u003c/strong\u003e since browsers ignore when \u003cem\u003econtent\u003c/em\u003e is split onto different\nlines, it displays all the \u003cem\u003econtent\u003c/em\u003e on one line. Not what we wanted.\u003c/p\u003e\n\n\u003ch3\u003eA Text Not-Really-A-List Into a Real-HTML-List\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003eREMEMBER\u003c/strong\u003e: This lab will provide you what to type. Subsequent labs will\ndeeply examine details of HTML markup. However, our goal here is to show how\nslight changes to markup can quickly alter the browser's display of content. If\nyou're fuzzy on a detail that's fine.\u003c/p\u003e\n\n\u003ch4\u003eMarking-Up List Items\u003c/h4\u003e\n\n\u003cp\u003eOK, we've reached the critical moment. We're going to tell the browser that\nthese bits of letters represent \u003cstrong\u003elist items\u003c/strong\u003e. To do so we \"wrap\" each line\nwith \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/li\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Monstera deliciosa\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Fiddle Leaf Fig\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Pilea\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Golden Pothos\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Peace Lily\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFlip back to the \u003cstrong\u003eviewing tab\u003c/strong\u003e and refresh the page. You should see something\nlike the following:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/unordered_list.png\" alt=\"HTML file with content displayed as unordered list\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAWESOME\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn this step we added some HTML \u003cem\u003emarkup\u003c/em\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e is an HTML \u003cstrong\u003elist item\u003c/strong\u003e \u003cem\u003eopening tag\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003e\u0026lt;/li\u0026gt;\u003c/code\u003e is an HTML \u003cem\u003eclosing tag\u003c/em\u003e\n\u003c/li\u003e\n\u003cli\u003eWe would call this pair of opening and closing tags an \"\u003ccode\u003eli\u003c/code\u003e tag\"\u003c/li\u003e\n\u003cli\u003eThe whole length of text of \u003cem\u003eopening markup\u003c/em\u003e plus \"wrapped\" content plus\n\u003cem\u003eclosing markup\u003c/em\u003e (\u003ccode\u003e\u0026lt;li\u0026gt;...content...\u0026lt;/li\u0026gt;\u003c/code\u003e) is called \"an HTML element;\" or,\nmore exactly, an \u003ccode\u003eli element\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAgain, you don't need to memorize these terms yet, but we want to help you\ndevelop an intuition for how these words are used. You will be using these terms\nwhen speaking with other developers and HTML authors.\u003c/p\u003e\n\n\u003cp\u003eIt may not seem like we did much work, but the idea of a method for \"marking up\"\n\u003cem\u003econtent\u003c/em\u003e and linking it is the foundation of the web. It's what made Tim\nBerners-Lee's reputation. And \u003cstrong\u003eyou\u003c/strong\u003e just experienced Sir Tim's great insight.\n\u003cstrong\u003eAWESOME\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's work with additional HTML tags to see how we tweak our HTML a bit more.\nLet's tell the browser \"Hey! These list items, they go together!\"\u003c/p\u003e\n\n\u003ch3\u003eIndicating that List Items Are Connected\u003c/h3\u003e\n\n\u003cp\u003eWrap the entire set of \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e items with an \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;/ol\u0026gt;\u003c/code\u003e like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;ol\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Monstera deliciosa\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Fiddle Leaf Fig\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Pilea\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Golden Pothos\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Peace Lily\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ol\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSave the file and refresh the \u003cstrong\u003eviewing tab\u003c/strong\u003e. It should display:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/ol_list.png\" alt=\"List displayed as an ordered list\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe told the browser that this set of list items that we \"wrapped\" in the\n\u003cstrong\u003eordered list\u003c/strong\u003e tag go together \u003cstrong\u003eas a list\u003c/strong\u003e. Because we told the browser that\nthe list is \u003cstrong\u003eordered\u003c/strong\u003e it decided to be helpful and put numbers next to the\nlist items \u003cem\u003efor us\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3\u003eWrapping and Indentation\u003c/h3\u003e\n\n\u003cp\u003eWith all these angle-brackets of \u003cem\u003emarkup\u003c/em\u003e and \u003cem\u003econtent\u003c/em\u003e mixed together, HTML\nauthors like to use indentation to make HTML easier to read. Here's how most\nHTML authors would expect our code from the previous section to be arranged:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;ol\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Monstera deliciosa\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Fiddle Leaf Fig\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Pilea\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Golden Pothos\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Peace Lily\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ol\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUpdate your document. Save it and refresh your \u003cstrong\u003eviewing tab\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eRemember earlier when the browser ignored that \u003cem\u003econtent\u003c/em\u003e was on separate lines?\nCleaning up your code requires splitting lines, adding spaces, and adding tabs.\nBrowsers ignore those characters that \u003cem\u003ehumans\u003c/em\u003e use to make their HTML\nreader-friendly.\u003c/p\u003e\n\n\u003ch2\u003eCreate an Unordered HTML List\u003c/h2\u003e\n\n\u003cp\u003eLet's change our ordered list to be \u003cstrong\u003eunordered\u003c/strong\u003e. If \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e means \u003cstrong\u003eordered\nlist\u003c/strong\u003e, you might guess that \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e means \u003cstrong\u003eunordered list\u003c/strong\u003e. Make the change\nand refresh your \u003cstrong\u003eviewing tab\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/unordered_list.png\" alt=\"List displayed as an unordered list\"\u003e\u003c/p\u003e\n\n\u003cp\u003eHere we return to a \"bulleted\" unordered list.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e: If you've been following along closely, you might be wondering, if we\ndidn't have a \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tag around our \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e items earlier, how did the browser\nknow to treat those \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e as if they were in a \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e? When browsers detect\nproblematic HTML they guess! This can lead to some very strange results when you\nmake an error, but if you write \u003cem\u003einvalid\u003c/em\u003e HTML, they try to recover. HTML\nvalidity will be discussed further soon!\u003c/p\u003e\n\n\u003ch3\u003eAdd a Description Paragraph\u003c/h3\u003e\n\n\u003cp\u003eLet's introduce our list by adding some background:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eSome of my favorite plants!\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Monstera deliciosa\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Fiddle Leaf Fig\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Pilea\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Golden Pothos\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Peace Lily\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTake a look at your \"rendered page\" and verify the result is to your liking.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/ul_list.png\" alt=\"List displayed as an unordered list with title\"\u003e\u003c/p\u003e\n\n\u003ch3\u003ePut a Header on It\u003c/h3\u003e\n\n\u003cp\u003eLastly, let's put a \"heading\" on the top of our document. Add an \u003ccode\u003eh1\u003c/code\u003e element\nwith an appropriate title inside.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eMy Plant List\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere's the full example code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eMy Plant List\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eSome of my favorite plants!\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Monstera deliciosa\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Fiddle Leaf Fig\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Pilea\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Golden Pothos\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\"Peace Lily\"\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-experiencing-html-lab/final_list.png\" alt=\"Final Document - unordered list with Header and title \"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you're done, it is time to run this assignment's tests. Make sure that you\nhave your HTML content in a file called \u003ccode\u003emy_list.html\u003c/code\u003e in order to pass the\ncheck. Type \u003ccode\u003elearn test\u003c/code\u003e and verify that your tests pass.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, you have done the job of an HTML author. You receive raw \u003cem\u003econtent\u003c/em\u003e,\nyou \u003cem\u003emark it up\u003c/em\u003e to create \u003cem\u003esource text\u003c/em\u003e. You test, tweak and adjust your\n\u003cem\u003esource text\u003c/em\u003e until the \u003cem\u003erendered text\u003c/em\u003e displayed in the browser is to your\nliking.\u003c/p\u003e\n\n\u003cp\u003eIn upcoming lessons, we will learn additional tags which provide us more ways to\ndescribe our content. We might be starting with lists today, but soon we'll be\nusing HTML in even more exciting ways!\u003c/p\u003e\n\n\u003cp\u003eWelcome to the community of web page creators!\u003c/p\u003e",
            "exportId": "gae7128c88805dcbc4ac8c3fbdb1a892f"
          },
          {
            "id": 432876,
            "title": "Document Structure Continued",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-document-structure-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize basic HTML document structure\u003c/li\u003e\n\u003cli\u003eRecognize HTML comments\u003c/li\u003e\n\u003cli\u003eDescribe the \u003ccode\u003ehead\u003c/code\u003e section and its contents\u003c/li\u003e\n\u003cli\u003eCreate an HTML document\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eEvery HTML document has a specific set of required tags. Because these are\nrequired \u003cem\u003eevery\u003c/em\u003e time we create a web page, it is valuable to gain a more\nin-depth understanding of what these tags do, why they are useful, and how they\nwork in context to the modern web.\u003c/p\u003e\n\n\u003cp\u003eWe will be both reviewing setting up well-formed HTML documents and expanding a\nbit on the \u003ccode\u003eDOCTYPE\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e and \u003ccode\u003ehead\u003c/code\u003e tags, as well as introducing how to add\ncomments within our HTML code.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lesson into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code.\u003c/p\u003e\n\n\u003ch2\u003eRecognize Basic HTML Document Structure\u003c/h2\u003e\n\n\u003cp\u003eLet's start by adding the bare essentials of an HTML document to the provided\n\u003ccode\u003eindex.html\u003c/code\u003e file:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA \u003ccode\u003eDOCTYPE\u003c/code\u003e tag, which looks like this: \u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eOpening and closing \u003ccode\u003ehtml\u003c/code\u003e tags\u003c/li\u003e\n\u003cli\u003eOpening and closing \u003ccode\u003ehead\u003c/code\u003e tags nested inside the \u003ccode\u003ehtml\u003c/code\u003e tags\u003c/li\u003e\n\u003cli\u003eOpening and closing \u003ccode\u003ebody\u003c/code\u003e tags nested inside the \u003ccode\u003ehtml\u003c/code\u003e tags\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote: Recall that best practice indicates that any HTML elements that are\nnested inside other HTML elements (i.e., between the opening and closing tags\nof another element) should be indented. It is not \u003cem\u003enecessary\u003c/em\u003e to use\nindenting, either for the HTML to render properly or to pass the tests, but\nit's a good habit to get into. Go ahead and indent the \u003ccode\u003ehead\u003c/code\u003e and \u003ccode\u003ebody\u003c/code\u003e tags\ninside the \u003ccode\u003ehtml\u003c/code\u003e tags, if you haven't already.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIf written correctly, running \u003ccode\u003elearn test\u003c/code\u003e now will pass three of the seven\ntests:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ehas a DOCTYPE tag\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehas opening and closing HTML tags\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehas \u0026lt;head\u0026gt; and \u0026lt;body\u0026gt; tags nested in the \u0026lt;html\u0026gt; tag\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHowever you will not be done yet! We have to make \u003cstrong\u003eall\u003c/strong\u003e the tests pass in\norder to make the test code happy! Let's get to it!\u003c/p\u003e\n\n\u003cp\u003eLet's take a closer look at these tags.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eAt the top of every HTML document, you're always going to start off with the\nsame element, \u003ccode\u003eDOCTYPE\u003c/code\u003e. In the early days of the internet, there were fewer\nstandards, and it was important to declare the specific way we wanted browsers\nto interpret the file at the top of each file. Netscape and Internet Explorer\nwould look for this declaration and handle the content differently depending on\nwhat it found. These days, every current browser is compatible with HTML5, and\n\u003ccode\u003eDOCTYPE\u003c/code\u003e is mainly used to tell the browser to render the page in standards\ncompliant mode.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eDOCTYPE\u003c/code\u003e element, as with all HTML, starts with a \u003ccode\u003e\u0026lt;\u003c/code\u003e and ends with a \u003ccode\u003e\u0026gt;\u003c/code\u003e.\nUniquely, the \u003ccode\u003eDOCTYPE\u003c/code\u003e tag starts with an exclamation point, \u003ccode\u003e!\u003c/code\u003e, followed by\n\u003ccode\u003eDOCTYPE\u003c/code\u003e, then specifies which version of HTML we want to use. In HTML5, we\njust write \u003ccode\u003ehtml\u003c/code\u003e and the browser interprets the rest of the document as HTML5.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe next element is also always required: \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e. This tells the browser that\neverything that falls between the opening and closing \u003ccode\u003ehtml\u003c/code\u003e tags is to be\ninterpreted as HTML code.\u003c/p\u003e\n\n\u003cp\u003eOne attribute that is important to include in the \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e tag is \u003ccode\u003elang\u003c/code\u003e, which\ndeclares what language the webpage is written in. In our case, writing in\nEnglish, we will use \u003ccode\u003elang=\"en\"\u003c/code\u003e. This helps search engines to know what\nlanguage a page is written in. Google, for instance, can use the \u003ccode\u003elang\u003c/code\u003e\nattribute to know when to prompt users about translating web content.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;html\u003c/span\u003e \u003cspan class=\"na\"\u003elang=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"en\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGo ahead and add the language attribute to the \u003ccode\u003ehtml\u003c/code\u003e element. Now, if you run\nthe tests again, there should be four passing.\u003c/p\u003e\n\n\u003ch2\u003eRecognize HTML Comments\u003c/h2\u003e\n\n\u003cp\u003eSometimes we want to leave notes either for ourselves or for other developers\ninside of our HTML files. An example might be a brief explanation of what some\npart of the code is doing, or an important message or reminder. We can write\ncomments by wrapping the text we want like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\u0026lt;!-- This is a comment! --\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eText included in a comment will not be visible on the webpage, but will be\nvisible in the browser console and \u003ccode\u003e.html\u003c/code\u003e file.\u003c/p\u003e\n\n\u003ch2\u003eDescribe the \u003ccode\u003ehead\u003c/code\u003e Section and its Contents\u003c/h2\u003e\n\n\u003cp\u003eInside our \u003ccode\u003ehtml\u003c/code\u003e tags, we divide the page into two main sections, \u003ccode\u003ehead\u003c/code\u003e, and\n\u003ccode\u003ebody\u003c/code\u003e, which both play unique roles. The remainder of our HTML lessons will\ncover everything within the \u003ccode\u003ebody\u003c/code\u003e section, but before we get there, there are\nsome additional bits of information we need to understand regarding the \u003ccode\u003ehead\u003c/code\u003e.\nThe \u003ccode\u003ehead\u003c/code\u003e section is not visible to a website visitor, but it contains a lot of\nuseful info about our webpage.\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ccode\u003ehead\u003c/code\u003e section, we place a number of specific tags, most notably:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet's look at each of them in turn:\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003elink\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag is for importing files.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCAREFUL\u003c/strong\u003e: It's easy to get confused here because web pages are full of links,\nbut also use a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag. \"Links\" that you click on are located within the\n\u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element. The \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tags are located in the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\n\u003cp\u003eMost commonly, we'll use \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e to import CSS files. Go ahead and add the\nfollowing inside your \u003ccode\u003ehead\u003c/code\u003e element (don't forget to indent!):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"style.css\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith a simple website, linking a single style sheet might work just fine. Often,\nhowever, on fully developed websites, multiple style sheets are linked in the\n\u003ccode\u003ehead\u003c/code\u003e. For example, when doing the final polishing of a web site you might see\na series of \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e definitions like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e\n  \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\"\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"company.css\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"engineering-department.css\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"project-x-launch.css\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"typography.css\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this example we're getting some CSS information from the\n\u003ca href=\"https://getbootstrap.com/\"\u003eBootstrap\u003c/a\u003e project, we're integrating a company\nstyle standard, an engineering style standard, a style motif for the launch of\n\"Project X\" and then we're adding some specific rules about font display. You\ncan bring in a \u003cstrong\u003elot\u003c/strong\u003e of information with the \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag!\u003c/p\u003e\n\n\u003cp\u003eThis specific example aside, you'll be learning a lot more about linking files\nto create stylistic effect in later lessons.\u003c/p\u003e\n\n\u003cp\u003eRun the test again; you should now have five passing. Only two more to go!\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003etitle\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eOne more common tag we find in the \u003ccode\u003ehead\u003c/code\u003e is \u003ccode\u003etitle\u003c/code\u003e. The \u003ccode\u003etitle\u003c/code\u003e, as its name\nimplies, is where the title of the webpage should be entered. Text added inside\nthe \u003ccode\u003etitle\u003c/code\u003e tags will appear up on your browser tab. Add the following title for\nour \u003ccode\u003eindex.html\u003c/code\u003e page:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eMy Site Title\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that unlike the previous tags we've discussed, \u003ccode\u003etitle\u003c/code\u003e has an opening and\nclosing tag. In most modern browsers, tabs are fairly small, so it is often best\nto keep the title brief, or it will not be fully visible.\u003c/p\u003e\n\n\u003cp\u003eAdding the title should get the last two tests passing! Run the tests one last\ntime to verify.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we've reviewed the basics of document structure, as well as what\nis typically contained within the \u003ccode\u003ehead\u003c/code\u003e. Using the \u003ccode\u003ehead\u003c/code\u003e section, we are able\nto add relevant data about our webpage as a whole. As a bonus surprise, by\nlearning how to make our web pages \u003cem\u003esearch engine friendly\u003c/em\u003e, we've also dabbled\na bit into the basics of Search Engine Optimization! We are now ready to take a\ndeeper dive into the visual content of HTML pages.\u003c/p\u003e",
            "exportId": "g0446a41dc5084735d828693bc74d221b"
          },
          {
            "id": 432878,
            "title": "Your First HTML Tag Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-tag-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tag-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCode an \u003ccode\u003eh1\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eSet the inner text of the \u003ccode\u003eh1\u003c/code\u003e to \u003ccode\u003eHello, World!\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eSo far, we've seen how to markup content with HTML, how to structure an HTML\ndocument and what HTML tags look like. Now let's focus on writing a single HTML\ntag from scratch and examining each of its parts.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode. Run \u003ccode\u003elearn test\u003c/code\u003e as you go to see your test progress.\u003c/p\u003e\n\n\u003ch2\u003eCode an \u003ccode\u003eh1\u003c/code\u003e Tag\u003c/h2\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your text editor. Add the \u003ccode\u003eh1\u003c/code\u003e opening and closing tags.\u003c/p\u003e\n\n\u003ch2\u003eSet the Inner Text\u003c/h2\u003e\n\n\u003cp\u003eInside of the opening and closing \u003ccode\u003eh1\u003c/code\u003e tags, insert the text: \u003ccode\u003eHello, World!\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCheck your progress by running \u003ccode\u003elearn test\u003c/code\u003e. Failing tests will provide helpful\nerror messages that you can use to debug your code — read them closely for\nhints!\u003c/p\u003e\n\n\u003ch3\u003eViewing Your Work in the Browser\u003c/h3\u003e\n\n\u003cp\u003eWhile working through these assignments, your general workflow should center on\nwriting code in the text editor and periodically running the test suite in the\nterminal to check your work.\u003c/p\u003e\n\n\u003cp\u003eAnother great way to track your progress is to open up the HTML document in your\nbrowser and watch how each change you make in the text editor affects the visual\nlayout in the browser.\u003c/p\u003e\n\n\u003cp\u003eYou can open \u003ccode\u003eindex.html\u003c/code\u003e a few ways, depending on the environment you are in:\u003c/p\u003e\n\n\u003cp\u003eFor Mac users:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOpen from the Terminal by running \u003ccode\u003eopen index.html\u003c/code\u003e in the root directory of\nthis lab\u003c/li\u003e\n\u003cli\u003eUse Finder to navigate to this lab's local folder and click the \u003ccode\u003eindex.html\u003c/code\u003e\nfile\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor WSL users:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOpen from Ubuntu by running \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e in the root directory of\nthis lab\u003c/li\u003e\n\u003cli\u003eOpen a new Explorer window. There is a bar that says \"Quick Access\" along the\ntop of the window (similar to a URL bar in a browser). Click this and type\n\u003ccode\u003e\\\\wsl$\u003c/code\u003e to access files and folders on Ubuntu. Navigate to\n\u003ccode\u003e/home/\u0026lt;your-user-name\u0026gt;/\u003c/code\u003e to get to your home directory, then locate this\nlab's local folder and click the \u003ccode\u003eindex.html\u003c/code\u003e file.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOnce you have the HTML document open in your browser, you can make changes to it\nin a text editor, save the file, refresh the page in the browser, and see the\nchanges.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCongratulations! You wrote your first HTML tag. Now you can use your knowledge\nof this basic building block to learn more HTML tags and see how they work with\neach other to create an entire HTML document structure.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/tags/tag_hn.asp\"\u003eh1-h6 Tags\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ca href=\"https://www.youtube.com/watch?v=Jc0HIoTLxe4\"\u003eSolving the First HTML Lab\u003c/a\u003e (If\nyou're stuck, here's a video walk-through of the lab to help you out.)\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "g86fcf09aaa6a5027cc10f5ef9f2b9328"
          },
          {
            "id": 432880,
            "title": "Nested HTML Tags And Attributes",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-nested-html-tags-and-attributes\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-nested-html-tags-and-attributes\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-nested-html-tags-and-attributes/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAssess HTML document structure\u003c/li\u003e\n\u003cli\u003eIdentify HTML tag attributes and their purposes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen you take a look at an entire HTML document, it's sometimes challenging to\nkeep track of where tags begin and end. But understanding more about HTML tag\nnesting and attributes can help everything fall into place.\u003c/p\u003e\n\n\u003ch2\u003eAssess HTML Document Structure\u003c/h2\u003e\n\n\u003cp\u003eWhenever we nest an HTML tag inside of another tag, we indent the inner tag so\nthat the overall tag hierarchy is clear. Take a look at the following example of\na well-structured HTML document.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eWeb development course\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;header\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e\u0026lt;!-- header element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header --\u0026gt;\u003c/span\u003e\n\n      \u003cspan class=\"nt\"\u003e\u0026lt;nav\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"main-navigation\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"c\"\u003e\u0026lt;!-- nav element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav --\u0026gt;\u003c/span\u003e\n\n        \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"c\"\u003e\u0026lt;!-- ul element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul --\u0026gt;\u003c/span\u003e\n\n          \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"/web\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eIntroduction to the web\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"c\"\u003e\u0026lt;!-- li element documentation: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li --\u0026gt;\u003c/span\u003e\n\n          \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"/html\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eLearn HTML\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;/nav\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/header\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eKeeping your HTML well indented so that every tag and \"level\" of nesting is\naligned will make your code easier to read and maintain.\u003c/p\u003e\n\n\u003ch2\u003eIdentify HTML Tag Attributes and Their Purposes\u003c/h2\u003e\n\n\u003cp\u003eAn HTML attribute is extra information we can add to a tag to identify,\nclassify, style or modify the default behavior of the element the tag contains.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;element\u003c/span\u003e \u003cspan class=\"na\"\u003eattribute_name=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"attribute_value\"\u003c/span\u003e \u003cspan class=\"na\"\u003eanother_attribute_name=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"another_attribute_value\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/element\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA common use case for HTML attributes is element identification (\u003ccode\u003eid\u003c/code\u003e\nattribute) and/or classification (\u003ccode\u003eclass\u003c/code\u003e attribute). The \u003ccode\u003eid\u003c/code\u003e attribute is used\nto uniquely identify an element within the whole document. The \u003ccode\u003eclass\u003c/code\u003e attribute\nis used to group together similar elements.\u003c/p\u003e\n\n\u003cp\u003eBoth \u003ccode\u003e\u0026lt;id\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;class\u0026gt;\u003c/code\u003e attributes are often used for styling purposes since\nthey allow us to find a specific element or style similar elements with a\nsingle style declaration.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;p\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e'main_paragraph'\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eThis element can be uniquely identified  using the 'main_paragraph' id HTML attribute\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e'other_paragraphs'\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eThis element belongs to a group of elements who share the 'other_paragraphs' HTML class attribute\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e'other_paragraphs'\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eThis element also belongs to a group of elements who share the 'other_paragraphs' HTML class attribute\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAttributes that identify or classify are not necessary for the HTML\ntag to work as intended, but other attributes \u003cem\u003eare\u003c/em\u003e — for example, an \u003ccode\u003ea\u003c/code\u003e tag,\nwhich links a piece of text to another location on our own web page or another\nweb page.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://flatironschool.com/\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eFlatiron School\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere we use the \u003ccode\u003ehref\u003c/code\u003e attribute to tell the HTML tag where the destination of\nthe linked text should be. Without this information, our link won't work and we\nwon't be able to send more people to the Flatiron School website. Certain\nattributes go hand in hand with certain HTML tags, and as you learn the tags,\nyou'll learn their attributes.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe use nesting to keep the elements of our HTML document organized, and we use\nattributes to give our elements more power. With these strategies, we can\nconstruct a solid HTML structure that serves as a foundation for anything else\nwe want to build.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.thoughtco.com/nesting-html-tags-3466475\"\u003eNested Tags\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.iraqtimeline.com/maxdesign/basicdesign/principles/prinnest.html\"\u003eBest Practices Web Design\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/html/html_attributes.asp\"\u003eHTML Attributes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.tutorialspoint.com/html/html_attributes.htm\"\u003eAttributes\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "nested-html-tags-and-attributes"
          },
          {
            "id": 432882,
            "title": "Create a Link Using the href Attribute",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-link-tag-with-href\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eWrite an \u003ccode\u003ea\u003c/code\u003e tag to create a link\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've got our HTML tags, and we've got our HTML tag attributes. How do we use\nthem together? We can figure it out by exploring the \u003ccode\u003ea\u003c/code\u003e tag and creating a\nlink.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode.\u003c/p\u003e\n\n\u003ch2\u003eWrite an \u003ccode\u003ea\u003c/code\u003e Tag to Create a Link\u003c/h2\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your text editor. Add an \u003ccode\u003ea\u003c/code\u003e tag with the inner text (the\ntext between the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag and the \u003ccode\u003e\u0026lt;/a\u0026gt;\u003c/code\u003e tag) of \u003ccode\u003eFlatiron School\u003c/code\u003e anywhere in\nthe file. Then set the \u003ccode\u003ehref\u003c/code\u003e attribute of your new link element to\n\u003ccode\u003ehttps://flatironschool.com\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCheck your progress by running \u003ccode\u003elearn test\u003c/code\u003e. Failing tests will provide helpful\nerror messages that you can use to debug your code — read them closely for\nhints!\u003c/p\u003e\n\n\u003cp\u003eDon't forget to open the \u003ccode\u003eindex.html\u003c/code\u003e file in your browser so you can see the\nchanges as you go.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eHere we saw how an attribute helps the \u003ccode\u003ea\u003c/code\u003e tag do its job, which is to link to\nanother location. Now we can go on to explore some additional HTML tags.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"\u003eMozilla Developer Network: HTML \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e Tag\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "g3c3c269d77c1ec2803430d948491bd29"
          },
          {
            "id": 432884,
            "title": "HTML Elements",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-lists-images-and-links\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-images-and-links\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-images-and-links/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify ordered, unordered and definition lists\u003c/li\u003e\n\u003cli\u003eIdentify images\u003c/li\u003e\n\u003cli\u003eIdentify links\u003c/li\u003e\n\u003cli\u003eIdentify HTML validation tools\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou might be wondering what else is available to use to build out full webpages\nnow that you are more familiar with the basics of HTML. How do you display an\nimage? How do you add a formatted list of topics? How do you link page elements\nbeyond text? Now you're ready to explore these fundamental tools. Here's a\nhigh-level overview before you dive into practicing with the labs.\u003c/p\u003e\n\n\u003ch3\u003eIdentify Ordered, Unordered and Definition Lists\u003c/h3\u003e\n\n\u003cp\u003eWhen we want to present a list of items in a clear, readable format, we turn to\nthe HTML unordered list, represented by the \u003ccode\u003eul\u003c/code\u003e tag.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eOne item\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eAnother item\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is how the HTML above looks when rendered in the browser:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOne item\u003c/li\u003e\n  \u003cli\u003eAnother item\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf it's important to distinguish a particular order of the items (as for a\nrecipe or ranking), we use an ordered list, or the \u003ccode\u003eol\u003c/code\u003e tag.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;ol\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eFirst item\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eSecond item\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ol\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is how the HTML above looks when rendered in the browser:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eFirst item\u003c/li\u003e\n  \u003cli\u003eSecond item\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNotice the nesting of our items within the lists. Each \u003ccode\u003eli\u003c/code\u003e is a list item\ncontained in the larger \u003ccode\u003eul\u003c/code\u003e or \u003ccode\u003eol\u003c/code\u003e container.\u003c/p\u003e\n\n\u003cp\u003eAnother type of list we can use is a definition list, which defines specific\ntypes of items.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;dl\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dt\u0026gt;\u003c/span\u003eFirst term\u003cspan class=\"nt\"\u003e\u0026lt;/dt\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dd\u0026gt;\u003c/span\u003eTerm definition\u003cspan class=\"nt\"\u003e\u0026lt;/dd\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/dl\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is how the HTML above looks when rendered in the browser:\u003c/p\u003e\n\n\u003cdl\u003e\n  \u003cdt\u003eFirst term\u003c/dt\u003e\n  \u003cdd\u003eTerm definition\u003c/dd\u003e\n\u003c/dl\u003e\n\n\u003ch3\u003eIdentify Images\u003c/h3\u003e\n\n\u003cp\u003eTo include an image in our page, we use an \u003ccode\u003eimg\u003c/code\u003e tag.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://via.placeholder.com/800x600.png\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ealt=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Alternative Text\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etitle=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Display Title\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"800\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"600\"\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere are two notable things about the \u003ccode\u003eimg\u003c/code\u003e tag: The first is that it does not\nhave a closing tag. The image tag closes itself. Secondly, it handles a lot of\n\u003cem\u003eattributes\u003c/em\u003e. Attributes are special keywords used on the tag to control the\nelement's behavior, or provide additional information about the HTML element.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ealt\u003c/code\u003e attribute provides descriptive text the browser can display if it\ncan't find the image file. The browser can also display the \u003ccode\u003etitle\u003c/code\u003e text to give\nthe user more information about the image. The \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e attributes\ndefine the size of the image that shows up in the browser.\u003c/p\u003e\n\n\u003cp\u003eHere is how the image element above looks when rendered in the browser:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://via.placeholder.com/800x600.png\" alt=\"Alternative Text\" title=\"Display Title\" width=\"800\" height=\"600\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eIdentify Links\u003c/h3\u003e\n\n\u003cp\u003eYou might be familiar with basic link structure already, but here are other ways\nwe can use them.\u003c/p\u003e\n\n\u003cp\u003eBeginning with a standard text hyperlink, we can wrap other elements inside of them.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"http://example.com/\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eThis is a link\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is how the HTML above looks when rendered in the browser:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://example.com/\"\u003eThis is a link\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat if we want to link an image instead of text? We can replace the text within\nthe \u003ccode\u003ea\u003c/code\u003e tags with our image tag.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"http://example.com/\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://via.placeholder.com/800x600.png\"\u003c/span\u003e \u003cspan class=\"na\"\u003ealt=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Alternative Text\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is how the HTML above looks when rendered in the browser:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://example.com/\"\u003e\n  \u003cimg src=\"https://via.placeholder.com/800x600.png\" alt=\"Alternative Text\"\u003e\n\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWhat about a link that will direct to an email address?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"mailto:webmaster@example.com\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eSend an email\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is how the HTML above looks when rendered in the browser:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"mailto:webmaster@example.com\"\u003eSend an email\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSometimes we might want to link to a specific location on the same\nwebpage. We can then target an element that we identified or classified earlier.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;p\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"tips\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eUseful Tips Section\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"#tips\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eJump to the Useful Tips Section\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is how the HTML above looks when rendered in the browser:\u003c/p\u003e\n\n\u003cp id=\"tips\"\u003eUseful Tips Section\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"#tips\"\u003eJump to the Useful Tips Section\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen considering what location links point to, you will choose between relative\nor absolute links. A relative link directs to content within the same website.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"about.html\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eThis is a relative URL link\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is how the HTML above looks when rendered in the browser:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"about.html\"\u003eThis is a relative URL link\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAn absolute link, on the other hand, links to external content and requires a\nfully defined URL path. This is likely the type of link you see most often.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"http://example.com/\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eThis is an absolute URL link\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is how the HTML above looks when rendered in the browser:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"http://example.com/\"\u003eThis is an absolute URL link\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3\u003eIdentify HTML validation tools\u003c/h3\u003e\n\n\u003cp\u003eAn HTML validator is used to check HTML markup elements for syntax errors.\nSyntax errors, such as open tags, extra spaces, or forgotten quotation marks,\ncan cause a web page to look drastically different than the creator intended, or\nrender correctly in one browser, but not in another.\u003c/p\u003e\n\n\u003cp\u003eIt's easy to forget a closing HTML tag or miss a piece of punctuation when\nwriting HTML. Fortunately, we have a tool that will check our markup for us and\npoint out any errors. To validate our HTML, we can use the\n\u003ca href=\"http://validator.w3.org\"\u003eW3 HTML validator\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNow that you've taken a first look at these new HTML elements, you'll be better\nprepared to practice them in labs, where you'll learn more about each one and\nhow to use it effectively.\u003c/p\u003e",
            "exportId": "html-elements"
          },
          {
            "id": 432886,
            "title": "HTML Lists",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-lists-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-lists-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize unordered and ordered HTML Lists\u003c/li\u003e\n\u003cli\u003eCreate unordered lists\u003c/li\u003e\n\u003cli\u003eIdentify the ordered list tag\u003c/li\u003e\n\u003cli\u003eCreate ordered lists\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMany HTML tags behave in unique ways. Some apply automatic styling, like \u003ccode\u003ep\u003c/code\u003e\ntags that create margins around text. Some, like the header tags, increase the\nfont size. Using these tags delineates our content. When reading HTML, using the\ncorrect tags informs us of what the content's purpose is. If we see an \u003ccode\u003eh1\u003c/code\u003e tag,\nwe know that we're looking at a \u003cem\u003ebig\u003c/em\u003e page header. In this lesson, we're going\nto be looking at a few new tags that help us organize \u003cem\u003elists\u003c/em\u003e of related\ncontent.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode.\u003c/p\u003e\n\n\u003ch2\u003eRecognize Unordered And Ordered HTML Lists\u003c/h2\u003e\n\n\u003cp\u003eLet's say, for instance, we were building a personal website and wanted to list\nout our favorite foods. We \u003cem\u003ecould\u003c/em\u003e write this like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eBahn Mi\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eGrilled Cheese\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eBaba Ghanoush\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eTomato soup\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eCheese and crackers\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eSushi\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe above would create a new line on the page for each food, but doesn't really\nindicate that these things are related. Using the built in \u003ccode\u003eul\u003c/code\u003e, \u003ccode\u003eol\u003c/code\u003e and \u003ccode\u003eli\u003c/code\u003e\nHTML tags however, we can group related list content together. We call such a\ngrouping a \"list.\"\u003c/p\u003e\n\n\u003cp\u003eIn HTML, we create lists using the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tag, which stands for \u003cem\u003eunordered\nlist\u003c/em\u003e, along with the \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tag for each \u003cem\u003elist item\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo make a list, we write out the opening and closing \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tags, and inside\nthem, we'll add \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags, each listing a single item. Going back to our\nfavorite foods example, if we wanted to convert it to a list, it would look like\nthis:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eBahn Mi\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eGrilled Cheese\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eBaba Ghanoush\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eTomato soup\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eZa’atar Bread\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eSushi\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, instead of just having each item show up on a new line, the content will\nalso be slightly indented and a bullet will appear next to each of them.\u003c/p\u003e\n\n\u003cp\u003eLists are very flexible and we can even nest lists \u003cem\u003einside\u003c/em\u003e of lists. Say we\nwanted to break down our favorite foods by category. We may have multiple\ncategories and one or more items in \u003cem\u003eeach\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n    Sandwiches\n    \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eBahn Mi\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eGrilled Cheese\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n    Snacks\n    \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eBaba Ghanoush\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eZa’atar Bread\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n    Soups\n    \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eTomato soup\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n    Sushi\n    \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eSashimi\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eUramaki\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this example, the nested lists will now be \u003cem\u003efurther\u003c/em\u003e indented and instead of\na solid bullet, they will appear with hollow bullets, indicating a sub-list.\nAdding a nested list one level deeper will make \u003cem\u003esquare\u003c/em\u003e bullets appear,\nallowing us to easily display related and nested content in a readable format.\u003c/p\u003e\n\n\u003ch2\u003eCreate Unordered Lists\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/html_lists_lab.png\" alt=\"recipe list\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe first part of this challenge is to make the first 2 tests pass by:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreating an unordered list\u003c/li\u003e\n\u003cli\u003eNesting each grilled cheese ingredient as a list item wrapped in \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in your browser.\u003c/p\u003e\n\n\u003cp\u003eLet's say we wanted to list out the ingredients required for making a grilled\ncheese sandwich. The ingredients are: \u003ccode\u003e2 slices of bread\u003c/code\u003e, \u003ccode\u003e4 slices of cheese\u003c/code\u003e,\n\u003ccode\u003e1 tbsp of butter\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor the first part of this challenge, in \u003ccode\u003eindex.html\u003c/code\u003e, create an unordered list\nthat displays these ingredients. Run \u003ccode\u003elearn test\u003c/code\u003e to see if you can pass the first\ntest. If you've done things correctly, you'll now be passing the first test, but\nthere are more tests to pass! We now need to turn our attention to the next\ntest.\u003c/p\u003e\n\n\u003cp\u003eOkay, now, let's say we wanted to make our grilled cheese a little more exciting\nand add a couple of cheeses, \u003ccode\u003echeddar\u003c/code\u003e, \u003ccode\u003emozzarella\u003c/code\u003e, and \u003ccode\u003epepper jack\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo pass the second test, \u003cstrong\u003einside\u003c/strong\u003e the \u003ccode\u003eli\u003c/code\u003e with \u003ccode\u003e4 slices of cheese\u003c/code\u003e, add a\n\u003cstrong\u003enested\u003c/strong\u003e unordered list that lists out the three types of cheese.\u003c/p\u003e\n\n\u003cp\u003eAfter editing your \u003ccode\u003eindex.html\u003c/code\u003e file, go back to the browser and refresh the\npage you opened earlier. You should see something like this if you've set up\nyour lists correctly:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e2 slices of bread\u003c/li\u003e\n\u003cli\u003e4 slices of cheese\n\n\u003cul\u003e\n\u003cli\u003echeddar\u003c/li\u003e\n\u003cli\u003emozzarella\u003c/li\u003e\n\u003cli\u003epepper jack\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e1 tbsp of butter\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e again. If your first two tests are passing, great! It's time to\ntalk about another type of list!\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Ordered List Tag\u003c/h2\u003e\n\n\u003cp\u003eUnordered lists are great for organizing related content where it doesn't matter\nwhat goes first, like in our grilled cheese ingredients. In situations where we\n\u003cem\u003ewant\u003c/em\u003e items to be displayed in a specific, numbered order, we will want to use\nthe \u003cem\u003eordered list\u003c/em\u003e tag, which is written as \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e instead of \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e. Both use\n\u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags inside, but this time, \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e will display a numbered list instead\nof bullets. If say, we wanted to write a \u003cem\u003eranked\u003c/em\u003e list of favorite foods, it\nmight look like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h3\u0026gt;\u003c/span\u003eTop 5 Favorite Foods\u003cspan class=\"nt\"\u003e\u0026lt;/h3\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;ol\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eGrilled Cheese\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eSushi\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eBahn Mi\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eTomato soup\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003eBaba Ghanoush\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ol\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e Feel free to test this out by adding it to \u003ccode\u003eindex.html\u003c/code\u003e, saving and\nrefreshing the tab where the file is open. Now, \u003ccode\u003eGrilled Cheese\u003c/code\u003e will be\ndisplayed as \u003ccode\u003e1. Grilled Cheese\u003c/code\u003e as the #1 food (where it belongs).\u003c/p\u003e\n\n\u003cp\u003eOnce you've got a feel for how this ordered list looks in HTML and how it's\ndisplayed in the browser, delete the example code from your \u003ccode\u003eindex.html\u003c/code\u003e file so\nyou can create a new one from scratch for the next deliverable.\u003c/p\u003e\n\n\u003cp\u003eNested ordered lists work the same as unordered, but instead of hollow and\nsquare bullets, each nested list will still display numbers.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e To create a nested list, you \u003cem\u003emust\u003c/em\u003e provide the \u003ccode\u003eol\u003c/code\u003e or \u003ccode\u003eul\u003c/code\u003e wrapper.\nOtherwise, an \u003ccode\u003eli\u003c/code\u003e inside another \u003ccode\u003eli\u003c/code\u003e will just be displayed as two items at\nthe same level.\u003c/p\u003e\n\n\u003ch2\u003eCreate Ordered Lists\u003c/h2\u003e\n\n\u003cp\u003eTo complete the challenge write the necessary HTML to pass the final test:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate an ordered list with each step for creating grilled cheese as a list\nitem wrapped in \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOkay, so we've got our grilled cheese ingredients, but what about the steps\nrequired to make a grilled cheese? Steps to a recipe need to be in order,\notherwise we may end up with burnt cheese covered in bread and topped with a\nsquare of butter. The steps to making a basic grilled cheese would be:\n\u003ccode\u003eSpread butter on bread and frying pan\u003c/code\u003e, \u003ccode\u003ePlace bread in frying pan and fry\u003c/code\u003e,\n\u003ccode\u003eAdd cheese on top of bread\u003c/code\u003e, \u003ccode\u003eCover with second slice of bread\u003c/code\u003e,\n\u003ccode\u003eTurn over and fry for 2 minutes\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter editing your \u003ccode\u003eindex.html\u003c/code\u003e file, go back to the browser and refresh the\npage you opened earlier. Your newly added list should look like this:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eSpread butter on bread and frying pan\u003c/li\u003e\n\u003cli\u003ePlace bread in frying pan and fry\u003c/li\u003e\n\u003cli\u003eAdd cheese on top of bread\u003c/li\u003e\n\u003cli\u003eCover with second slice of bread\u003c/li\u003e\n\u003cli\u003eTurn over and fry for 2 minutes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOnce you've written an ordered list that displays these 5 steps correctly, run\n\u003ccode\u003elearn test\u003c/code\u003e to see the tests pass.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eLists in HTML are very useful for organizing related content, and are really the\nonly way to indicate that content is related with basic HTML. Using unordered\nlists ends up being very useful for more than just listing favorite foods and\ningredients. It's possible, for instance, to use list elements to organize\nnavigation links. With styling, we make the content look however we want —\nremove the bullets, make them line up horizontally — but in our HTML they will\nstill be organized and easy to read.\u003c/p\u003e",
            "exportId": "g72e9496391e474d41ed6c0ba60d8939b"
          },
          {
            "id": 432888,
            "title": "HTML Tables",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-tables-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-tables-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize basic HTML table elements\u003c/li\u003e\n\u003cli\u003eCreate HTML tables\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn HTML, we can create lists of related content using unordered and ordered\nlists, and they will display line by line in the order we put them in. Sometimes\nas web developers, though, we need to display more complex data. For instance,\nimagine you are working with a financial company and need to display a\ncollection of transactions, each with a title, value, time, and category. Or,\nimagine that you've been hired by a marketing company and need to display a list\nof the \u003ca href=\"https://en.wikipedia.org/wiki/List_of_most-followed_Instagram_accounts\"\u003emost popular Instagram accounts\u003c/a\u003e, each with their username, the\nowner of the account, and the number of followers. For sets of data like this,\nwith many separate components, the best way to display would be to put the data\ninto a \u003cem\u003etable\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eHTML has a built in way to display tables! In this lesson, we will be reviewing\nhow tables work and how to make our own.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode.\u003c/p\u003e\n\n\u003ch2\u003eRecognize Basic HTML Table Elements\u003c/h2\u003e\n\n\u003ch3\u003eThe Table Tag: \u003ccode\u003e\u0026lt;table\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eThe first thing we need in order to create a table is to write opening and\nclosing \u003ccode\u003e\u0026lt;table\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;table\u0026gt;\u0026lt;/table\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis tells our browser to interpret anything inside as part of the table. What\nmakes up a table, exactly? A table has rows and columns, which together create\nindividual cells, as well as headers to label what each column is for.\u003c/p\u003e\n\n\u003cp\u003eIn HTML, we define these table components using individual elements that we nest\ninside our \u003ccode\u003etable\u003c/code\u003e tags.\u003c/p\u003e\n\n\u003ch3\u003eThe Table Row Tag: \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eIt's important to note: order really matters when building a table in HTML!\nWe're trying to display a two-dimensional table, but browsers interpret HTML\n\u003cem\u003eline by line\u003c/em\u003e. For this reason, HTML tables were designed so that there is no\ntag for \u003cem\u003ecolumns\u003c/em\u003e, only \u003cem\u003erows\u003c/em\u003e. If you were creating a table with 5 rows and 5\ncolumns, in designing the table, we would actually have to create 5 \u003cem\u003erows\u003c/em\u003e, each\nwith 5 individual \u003cem\u003ecells\u003c/em\u003e inside. When displayed, the cells in each row will\nline up to \u003cem\u003elook\u003c/em\u003e like columns.\u003c/p\u003e\n\n\u003cp\u003eTable rows always come first. To make a row inside our table, we use the \u003cem\u003etable\nrow\u003c/em\u003e tag, \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e. So if we wanted to have four rows in our table, including a\nrow of headers, setting up the rows it would look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;table\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/table\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAny content we want in a row would go inside that particular \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eThe Table Header Tag: \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eTables generally start with a row of headers to label each column, so the first\n\u003ccode\u003etr\u003c/code\u003e tag we write will be dedicated to these headers.\u003c/p\u003e\n\n\u003cp\u003eTo create headers, we use \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e, the \u003cem\u003etable header\u003c/em\u003e tag. Let's say we were\ncreating a list of guests to a party. The first column might have a header\ncalled 'Name' for the guest's name, the second, the guest's 'Phone Number', and\nthe third, what the guest is 'Bringing' to the party.\u003c/p\u003e\n\n\u003cp\u003eThese headers need to go in the first row, so that may look something like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;table\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;th\u0026gt;\u003c/span\u003eName\u003cspan class=\"nt\"\u003e\u0026lt;/th\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;th\u0026gt;\u003c/span\u003ePhone Number\u003cspan class=\"nt\"\u003e\u0026lt;/th\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;th\u0026gt;\u003c/span\u003eBringing\u003cspan class=\"nt\"\u003e\u0026lt;/th\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/table\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEven though we write the HTML from top down, we would see these headers in bold\nand lined up \u003cem\u003eleft to right\u003c/em\u003e. We can open up \u003ccode\u003eindex.html\u003c/code\u003e right now to take a\nlook to confirm.\u003c/p\u003e\n\n\u003cp\u003eThis first row is almost always the only place where we use the \u003ccode\u003eth\u003c/code\u003e tag.\u003c/p\u003e\n\n\u003ch3\u003eThe Table Data Tag: \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e\n\u003c/h3\u003e\n\n\u003cp\u003eIn the second row, we can start putting in our data. Here, we want to use the\n\u003cem\u003etable data\u003c/em\u003e tag, \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e instead of using the \u003cem\u003etable header\u003c/em\u003e tag. The \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e tag\nrepresents one table cell. So, for our party table, we can add in some names,\nphone numbers and items for guests to bring. An example row would look like the\nfollowing:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eDaniel\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003e845-282-4000\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eGuacamole\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs long as each bit of data in a \u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e is in the \u003cem\u003esame position\u003c/em\u003e as the\ncorresponding \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e in the first row, it will show up in that column.\u003c/p\u003e\n\n\u003cp\u003eRepeating this structure, if we wanted to include 3 guests for our party, our\nentire table would look like the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;table\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;th\u0026gt;\u003c/span\u003eName\u003cspan class=\"nt\"\u003e\u0026lt;/th\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;th\u0026gt;\u003c/span\u003ePhone Number\u003cspan class=\"nt\"\u003e\u0026lt;/th\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;th\u0026gt;\u003c/span\u003eBringing\u003cspan class=\"nt\"\u003e\u0026lt;/th\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eDaniel\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003e718-555-1212\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eGuacamole\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eRachel\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003e718-555-1212\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eChips\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eTerrance\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003e914-555-1212\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eSalsa\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/table\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePaste this into \u003ccode\u003eindex.html\u003c/code\u003e and take a look at how it is displayed in browser.\nYou'll see we've got a table with 4 rows and 3 columns! Each \"column\" of content\nexpands to fit the width of the content. It should look something like this:\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eName\u003c/th\u003e\n\u003cth\u003ePhone Number\u003c/th\u003e\n\u003cth\u003eBringing\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eDaniel\u003c/td\u003e\n\u003ctd\u003e718-555-1212\u003c/td\u003e\n\u003ctd\u003eGuacamole\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRachel\u003c/td\u003e\n\u003ctd\u003e718-555-1212\u003c/td\u003e\n\u003ctd\u003eChips\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTerrance\u003c/td\u003e\n\u003ctd\u003e914-555-1212\u003c/td\u003e\n\u003ctd\u003eSalsa\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eCreate HTML Tables\u003c/h2\u003e\n\n\u003cp\u003eOkay, now it's time to put what we've learned to the test. For this challenge,\nyour task is to recreate a table using the following data:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/ironboard-learn/us_cities_by_population.png\" alt=\"cities by population\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe above table shows total population of the 4 biggest cities in the US. We can\nsee there are 3 headers, \"City\", \"State\", and \"2017 estimate\", and data for each\nof the four cities.\u003c/p\u003e\n\n\u003cp\u003eTo complete this task, follow the order of table creation we discussed earlier:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a \u003ccode\u003etable\u003c/code\u003e, and place rows inside,\u003c/li\u003e\n\u003cli\u003eDedicate the first row to just headers\u003c/li\u003e\n\u003cli\u003eAdd in the data in the appropriate order so that each city name falls under\nthe \"City\" column, each state is under \"State\", etc...\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e to test your work and see your progress. The tests also include\nthe exact population numbers, so feel free to copy them from the errors!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith \u003ccode\u003etable\u003c/code\u003e, \u003ccode\u003etr\u003c/code\u003e, \u003ccode\u003eth\u003c/code\u003e and \u003ccode\u003etd\u003c/code\u003e, we are able to turn line by line HTML into a\ntable with rows and columns! It may seem counterintuitive at first to list out\nrow content separately, but with this, you can represent all sorts of data!\u003c/p\u003e",
            "exportId": "g49c68fcd4731da0705b5a708f0122682"
          },
          {
            "id": 432890,
            "title": "HTML Images",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-images-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-images-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eRecognize the \u003ccode\u003eimg\u003c/code\u003e tag\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eimg\u003c/code\u003e tag attributes\u003c/li\u003e\n\u003cli\u003eCreate images\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eImages are absolutely critical to making appealing and engaging websites. Can\nyou imagine the web without them? No cat memes. No animated dancing bananas! No\n\u003cem\u003eInstagram\u003c/em\u003e, at all. The internet would be a pretty boring and sad place!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/ironboard-learn/sad_meme.jpg\" alt=\"sad meme\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we will be discussing how to include images in your HTML, along\nwith some important attributes of the tag. With images, you can make your web\npages much more engaging and visually appealing.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode.\u003c/p\u003e\n\n\u003ch2\u003eRecognize the \u003ccode\u003eimg\u003c/code\u003e Tag\u003c/h2\u003e\n\n\u003cp\u003eImages are inserted into HTML using the \u003ccode\u003eimg\u003c/code\u003e tag. The tag can display a variety\nof image types, including animated GIFs, bitmaps and vector graphics, though\nmost often, the images we see on the internet are JPEG and PNG files.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eimg\u003c/code\u003e tag is \u003cem\u003eself closing\u003c/em\u003e, meaning it doesn't wrap around content or text.\nInstead, the relevant information is stored in attributes within the tag itself.\u003c/p\u003e\n\n\u003cp\u003eThere are two main attributes, \u003ccode\u003esrc\u003c/code\u003e, the \u003cem\u003esource\u003c/em\u003e of the image, and \u003ccode\u003ealt\u003c/code\u003e, the\n\u003cem\u003ealternate\u003c/em\u003e text.\u003c/p\u003e\n\n\u003ch2\u003eUse the \u003ccode\u003eimg\u003c/code\u003e Tag Attributes\u003c/h2\u003e\n\n\u003ch3\u003eThe Image Source Attribute\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003esrc\u003c/code\u003e attribute provides the relative path or URL to the image file we want\nto display. The image file can be local; for example, if you're publishing a\nwebsite and have your images stored in a folder within your file structure, your\nsource may look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"../images/my_company_logo.png\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, it's very common, even when publishing your own websites, to have\nimages hosted somewhere else on the internet. In these situations, we need to\nprovide a full URL as the source:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://i.imgur.com/H1qsYEl.png\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003esrc\u003c/code\u003e attribute is always necessary, as without it, the \u003ccode\u003eimg\u003c/code\u003e tag would have\nnothing to display.\u003c/p\u003e\n\n\u003ch3\u003eThe Image Alt Attribute\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003ealt\u003c/code\u003e attribute contains text relevant to the image we're displaying, and\nwill appear in its place if the image fails to load.\u003c/p\u003e\n\n\u003cp\u003eWhile it isn't required, it is \u003cstrong\u003ehighly recommended\u003c/strong\u003e that every image includes\nan \u003ccode\u003ealt\u003c/code\u003e attribute. The \u003ccode\u003ealt\u003c/code\u003e text is important for screen readers for the\nvisually impaired, as the text will be read out loud to the site visitor. It is\nalso nice to provide some sort of message to a website visitor if the image\nfails to load, especially if the image is relevant to the rest of the content.\nAlt text on a failed image will appear along with a small 'broken image' icon:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"broken-image.png\" alt=\"Flatiron Logo\"\u003e\u003c/p\u003e\n\n\u003cp\u003eTo include an \u003ccode\u003ealt\u003c/code\u003e attribute, add it in along with the \u003ccode\u003esrc\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://i.imgur.com/H1qsYEl.png\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ealt=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"comedic crow gets wholesome support\"\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: When an HTML element gets too long for one line in your text editor,\nit's appropriate to separate out each attribute on its own line as we've done\nabove. This helps make your HTML code more readable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003eThe Image Title Attribute\u003c/h3\u003e\n\n\u003cp\u003eOne additional attribute that can be useful is the \u003ccode\u003etitle\u003c/code\u003e. Content added to\nthis attribute will display when we hover over the image with our mouse. If we\nwere creating an \u003ccode\u003eimg\u003c/code\u003e tag with \u003ccode\u003esrc\u003c/code\u003e, \u003ccode\u003ealt\u003c/code\u003e and \u003ccode\u003etitle\u003c/code\u003e for a company logo, it\nmight look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"../images/my_company_logo.png\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ealt=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"my company name\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003etitle=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"We're here to help you!\"\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen a visitor to your company site hovers over the logo, they'll see a message\nappear saying 'We're here to help you!'\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003etitle\u003c/code\u003e attribute isn't necessary and is often left out, but can be a nice\ndetail to include.\u003c/p\u003e\n\n\u003ch2\u003eCreate Images\u003c/h2\u003e\n\n\u003cp\u003eIts time to practice creating some images! For this challenge, feel free to use\nany images you'd like — the tests are looking for the correct tag and\nattributes, not the content. If you're not sure what to use, feel free to use\nthe following URL as your source:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehttps://s3.amazonaws.com/ironboard-learn/lion.jpg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/ironboard-learn/lion.jpg\" alt=\"lion\"\u003e\u003c/p\u003e\n\n\u003cp\u003eYour challenge is to write \u003cem\u003ethree\u003c/em\u003e image tags:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe first should have \u003cem\u003ejust\u003c/em\u003e a \u003cem\u003esource\u003c/em\u003e attribute\u003c/li\u003e\n\u003cli\u003eThe second should include an alt attribute, in addition to a source\u003c/li\u003e\n\u003cli\u003eThe third should have both an alt and source attribute, as well as a \u003cem\u003etitle\u003c/em\u003e\nattribute\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e and read the tests as you go.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith images, we can fill our web pages with visual content in addition to text.\nBrand logos, animated instructional guides, personal artwork and photography, or\npictures of you and your friends — you now have the ability to create visually\nappealing content of \u003cem\u003eany type!\u003c/em\u003e\u003c/p\u003e",
            "exportId": "g2b87ac8df425112ac2971a57525ce3ed"
          },
          {
            "id": 432892,
            "title": "HTML Validation",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-validation\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-validation\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-validation/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify W3C organization\u003c/li\u003e\n\u003cli\u003eValidate sample HTML\u003c/li\u003e\n\u003cli\u003eIdentify HTML errors\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou have written a few HTML pages by now. Did you accidentally break nesting and\nput emphasis on a whole page? Or did you type \u003ccode\u003e\u0026lt;he\u0026gt;\u003c/code\u003e instead of \u003ccode\u003e\u0026lt;h3\u0026gt;\u003c/code\u003e? How can\nwe guard HTML? Many editors try to catch errors for us, and most browsers are\npretty good at guessing what you meant. But what happens when Windows Edge\nguesses differently than Google Chrome? How can we be certain that our HTML\nmeets standards and is error free? Luckily, the W3C – the people who define the\ntags of HTML – have a validation service we can use. We'll explain the W3C and\ntheir validator in this lesson.\u003c/p\u003e\n\n\u003ch2\u003eIdentify W3C organization\u003c/h2\u003e\n\n\u003cp\u003eThe World Wide Web Consortium (W3C) is an international community that develops\nopen standards to ensure the long-term growth of the web. It operates under a\nstrict \u003ca href=\"https://www.w3.org/Consortium/cepc/\"\u003ecode of ethics and professional\nconduct\u003c/a\u003e and provides many \u003ca href=\"https://www.w3.org/developers/tools/\"\u003efree\ntools\u003c/a\u003e for developers.\u003c/p\u003e\n\n\u003ch2\u003eValidate sample HTML\u003c/h2\u003e\n\n\u003cp\u003eTake a look at this file: \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/html-validation/example_code.html\"\u003e\u003ccode\u003eexample_code.html\u003c/code\u003e\u003c/a\u003e in a new tab. We'll\ncall this the \u003cstrong\u003eviewing tab\u003c/strong\u003e. It looks relatively OK, right? There's some\noddness happening with the list at the bottom (we might not have wanted\neverything hyperlinked), and there's an odd bullet point with no content, but\neverything else looks pretty good.\u003c/p\u003e\n\n\u003cp\u003eNow let's try validating the code to identify where we went wrong.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eIn your \u003cstrong\u003eviewing tab\u003c/strong\u003e, navigate to View → Developer → View Source\n\u003cem\u003eor\u003c/em\u003e press Command-Option-U. This will give you the \"Source View\" of the\ndocument\u003c/li\u003e\n\u003cli\u003eSelect the whole of the HTML contents in the file, and copy them\u003c/li\u003e\n\u003cli\u003eIn your web browser, open a new tab to \u003ca href=\"https://validator.w3.org/#validate_by_input\"\u003eW3C's HTML Validator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIf not already selected, select the tab that says \"Validate by Direct Input\"\u003c/li\u003e\n\u003cli\u003ePaste all of your copied HTML in the text box labeled \"Enter the Markup to\nvalidate:\"\u003c/li\u003e\n\u003cli\u003eClick the button labeled \"Check\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAs you scroll down the page, you should see a list of errors, or invalid HTML.\u003c/p\u003e\n\n\u003ch3\u003eWhat is HTML Validation?\u003c/h3\u003e\n\n\u003cp\u003eLike all other programming languages, HTML can contain all kinds of different\nerrors. These can range from missing angle brackets to wrong or missing opening\nor closing tags, unnecessary or missing attributes, and many other issues. Our\nweb browsers are pretty good at filling in the missing pieces but we can't\nalways count on it being the same experience with every one. Tools like W3C's\nHTML Validator can catch these errors and prevent our user from having a poor\nexperience.\u003c/p\u003e\n\n\u003ch2\u003eIdentifying HTML Errors\u003c/h2\u003e\n\n\u003cp\u003eNow that we have a page full of HTML validation errors, how do we start fixing\nthem? There are several parts of the error message that will help us parse the\nerror, and figure out exactly where it is and what we can do to fix it.\u003c/p\u003e\n\n\u003ch3\u003eError Description\u003c/h3\u003e\n\n\u003cp\u003eThe first line of the error is our error description. This is a narrative that\ngives us a little bit more information about our error.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/html-error-description.png\" alt=\"HTMLValidationErrors\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this case, it's saying that there was an ending \u003ccode\u003e\u0026lt;/h2\u0026gt;\u003c/code\u003e tag, but there was a\ndifferent opening tag that came before it.\u003c/p\u003e\n\n\u003ch3\u003eError Location\u003c/h3\u003e\n\n\u003cp\u003eThe second and third lines of this error give us the exact location of the\nerror, as well as a highlighted snippet of our HTML to help us exactly locate\nwhere the error is.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/html-error-location.png\" alt=\"HTMLValidationErrorLocation\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn this case, it's letting us know that our error is on line 10, from column\n34-38. Line numbers will become very important in troubleshooting errors, in\nJavaScript and CSS as well as HTML. These error messages can serve as a road map\nto us, and help us troubleshoot much more efficiently.\u003c/p\u003e\n\n\u003ch3\u003eA Valid HTML Experience\u003c/h3\u003e\n\n\u003cp\u003eNow, let's see what a valid HTML file returns.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/html-validation/example_code_passing_validation.html\"\u003e\u003ccode\u003eexample_code_passing_validation.html\u003c/code\u003e\u003c/a\u003e file in a new\ntab. This will now be our new \u003cstrong\u003eviewing tab\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eIn your \u003cstrong\u003eviewing tab\u003c/strong\u003e, navigate View → Developer → View Source\n\u003cem\u003eor\u003c/em\u003e press Command-Option-U. This will give you the \"Source View\" of the\ndocument\u003c/li\u003e\n\u003cli\u003eSelect the whole of the HTML contents in the file, and copy them\u003c/li\u003e\n\u003cli\u003eIn your web browser, navigate to \u003ca href=\"https://validator.w3.org/#validate_by_input\"\u003eW3C's HTML Validator\u003c/a\u003e in a new\ntab\u003c/li\u003e\n\u003cli\u003eIf not already selected, select the tab that says \"Validate by Direct\nInput\"\u003c/li\u003e\n\u003cli\u003ePaste all of your copied HTML in the text box labeled \"Enter the Markup to\nvalidate:\"\u003c/li\u003e\n\u003cli\u003eClick the button labeled \"Check\"\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eYou should see a green bar denoting that there are no errors or warnings to\nshow.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/learn-verified/html-passing-validation.png\" alt=\"HTMLValidationPassed\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3.org/\"\u003eW3C\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://validator.w3.org/\"\u003eHTML Validation Tool\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://validator.w3.org/docs/why.html\"\u003eWhy Validate?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "html-validation"
          },
          {
            "id": 432894,
            "title": "Expanding Your HTML Vocabulary via MDN",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-expanding-your-html-vocabulary\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-expanding-your-html-vocabulary\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-expanding-your-html-vocabulary/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the Mozilla Foundation and MDN\u003c/li\u003e\n\u003cli\u003eNavigate the MDN Reference Guide\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBecause of the pace of change in web technologies, it often feels like as soon\nas you learn something it's already obsolete. How can a developer stay\nup-to-date? Developers need to be able to reference the latest documentation in\na just-in-time fashion.\u003c/p\u003e\n\n\u003cp\u003eWhen you have a question, you should consult the best source, take what you\nneed, and use it. The purpose of this README is to help you get oriented with a\npopular source of HTML documentation, the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\"\u003eMozilla Developer Network\n(MDN)\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Mozilla Foundation and MDN\u003c/h2\u003e\n\n\u003cp\u003eThe Mozilla Foundation is an open-source company that has a long history with\nbrowsers and browser technology.\u003c/p\u003e\n\n\u003cp\u003eMozilla is a reliable reference for the latest HTML tags. There are many other\nsites online that exist to discuss these tags, but when you want a thorough\nexplanation of a tag, Mozilla is often a great choice.\u003c/p\u003e\n\n\u003cp\u003eThere are some drawbacks in using MDN. Because Mozilla is so trusted, their\ninformation tends to be ... \u003cem\u003eexhaustive\u003c/em\u003e. Because it's so \u003cem\u003eahem\u003c/em\u003e thorough, it\ncan sometimes be hard to digest. Their information tends to be for \u003cem\u003ereference\u003c/em\u003e,\nnot \u003cem\u003etutorial\u003c/em\u003e purposes.\u003c/p\u003e\n\n\u003cp\u003eDrawbacks aside, MDN is a good solid starting place for research and it can take\nyou from \"Does something like this exist?\" to \"Now I know that this thing\nexists, maybe I can find a tutorial!\"\u003c/p\u003e\n\n\u003ch2\u003eNavigate the MDN Reference Guide\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\"\u003eMDN HTML Reference Guide\u003c/a\u003e is a list of HTML tags\ngrouped together by their functions. These sections are not entirely \"human\nreadable,\" which makes it a bit difficult to understand where to start looking.\nSome of the headings are very technical-sounding.\u003c/p\u003e\n\n\u003cp\u003eTo help you find what you need in this listing, we've created this helpful table\nto help you convert \u003cstrong\u003ebetween\u003c/strong\u003e MDN-ese and the HTML terms you have learned. We've\nalso listed only the MDN content sections that you're most likely to use:\u003c/p\u003e\n\n\u003ctable\u003e\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eMDN Section Title\u003c/th\u003e\n\u003cth\u003eHuman-Friendly Section Title\u003c/th\u003e\n\u003cth\u003eSummary\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eMain Root\u003c/td\u003e\n\u003ctd\u003eThe \u003ccode\u003ehtml\u003c/code\u003e tag\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eThe \u003ccode\u003ehtml\u003c/code\u003e tag and that's it!\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eDocument metadata\u003c/td\u003e\n\u003ctd\u003eWebsite data that goes in the \u003ccode\u003ehead\u003c/code\u003e tag\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eMetadata contains information about the page. Information about styles, scripts and data to help software (search engines, browsers, etc.) use and render the page.\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSectioning Root\u003c/td\u003e\n\u003ctd\u003eThe \u003ccode\u003ebody\u003c/code\u003e tag\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eThe \u003ccode\u003ebody\u003c/code\u003e tag and that's it!\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eContent sectioning\u003c/td\u003e\n\u003ctd\u003eHeadings, titles, divs, sections, footers, etc.\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eContent sectioning elements allow you to organize the document content into logical pieces.\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eText content\u003c/td\u003e\n\u003ctd\u003eFormatting/structure for text: paragraphs, list items, horizontal rules, blockquotes, etc.\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eUse HTML text content elements to organize blocks or sections of content placed between the opening and closing \u003ccode\u003ebody\u003c/code\u003e tags ... [to] identify the purpose or structure of that content.\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eInline text semantics\u003c/td\u003e\n\u003ctd\u003eCitation, emphasis, underlines, etc.\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eUse the HTML inline text semantics to define the meaning, structure, or style of a word, line, or any arbitrary piece of text.\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eImage and multimedia\u003c/td\u003e\n\u003ctd\u003eAdding pictures and media!\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eHTML supports various multimedia resources such as images, audio, and video.\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eEmbedded content\u003c/td\u003e\n\u003ctd\u003eAdvanced: Using material hosted elsewhere on other servers, \u003ccode\u003eiframe\u003c/code\u003e is the biggie here\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eIn addition to regular multimedia content, HTML can include a variety of other content, even if it's not always easy to interact with.\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eScripting\u003c/td\u003e\n\u003ctd\u003eAdvanced: JavaScript and Drawing Support (Vector Graphics)\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eIn order to create dynamic content and Web applications, HTML supports the use of scripting languages, most prominently JavaScript. Certain elements support this capability.\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eTable content\u003c/td\u003e\n\u003ctd\u003eTables\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eTables\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eForms\u003c/td\u003e\n\u003ctd\u003eAdvanced: Tags for building forms for sign-up or login, for example\u003c/td\u003e\n\u003ctd\u003e\u003cem\u003eHTML provides a number of elements that can be used together to create forms which the user can fill out and submit to the Web site or application. There's a great deal of further information about this available in the HTML forms guide.\u003c/em\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAs developers, we will often feel uncomfortable with the fact that the\ntechnologies we depend on are always growing and changing. With authoritative\nguides like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\"\u003eMDN\u003c/a\u003e, we have found out that we can learn just\nthe little bit we need as we need it.\u003c/p\u003e",
            "exportId": "expanding-your-html-vocabulary-via-mdn"
          },
          {
            "id": 432896,
            "title": "Researching HTML Elements",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-researching-html-elements\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-researching-html-elements\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-researching-html-elements/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse search engines as a resource to find information\u003c/li\u003e\n\u003cli\u003eIdentify relevant resources\u003c/li\u003e\n\u003cli\u003eCompare multiple resources to find the best source\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWhen writing HTML you might encounter tags that are new to you. How are we going\nto level-up? When searching for technical help, we have to be careful about\nwhich sources we trust. This is a skill you will build over time, but we'll\nmodel some good practices in this README.\u003c/p\u003e\n\n\u003ch2\u003eUse Search Engines as a Resource to Find Information\u003c/h2\u003e\n\n\u003cp\u003eLet's say in your research, you come across an unfamiliar HTML element like\n\u003ccode\u003e\u0026lt;samp\u0026gt;\u003c/code\u003e. We can google \u003ccode\u003esamp html element,\u003c/code\u003e and we will find an endless list of\nresults to choose from. Sometimes resources can be outdated, biased, or\ninaccurate. It's important to filter through the results to find the best fit.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/html-element-search.png\" alt=\"html element search\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eIdentify Relevant Resources\u003c/h2\u003e\n\n\u003cp\u003eYour instinct might be to open the first result. You should be pickier.\nSometimes the result has \"gamed\" the search engine and unfairly influenced the\nranking. We recommend that you open the top \u003cstrong\u003efive\u003c/strong\u003e results and review them\ncritically.\u003c/p\u003e\n\n\u003cp\u003eWe also recommend that you trust sites that are affiliated with building or\ndefining the technologies more than blogs or other resources. In the HTML world,\nthe Mozilla Developer Network (MDN) is an extremely trustworthy site. In fact,\nit's likely the best HTML, JS and CSS documentation source on the internet.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/samp-mdn-page.png\" alt=\"mdn samp page\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eCompare Multiple Resources to Find the Best Source\u003c/h2\u003e\n\n\u003cp\u003eIf we go back to the search results, you'll see that the first result, in this\ncase, is \u003ccode\u003eW3schools\u003c/code\u003e. A site, like W3schools, for example, can be used as an\nadditional resource for garnering understanding. It even includes interactive\nexamples, creating a sandbox environment for experimentation.\u003c/p\u003e\n\n\u003cp\u003eIn this case, between MDN and W3schools, you should get a good sense of how to\nuse the \u003ccode\u003e\u0026lt;samp\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe web is a constantly evolving entity. As we build more ambitious products or\nlearn from our collective needs and mistakes, the industry will continually\nupdate the HTML specifications.\u003c/p\u003e\n\n\u003cp\u003eResearching referencing documentation can be scary at first, but it's a primary\nskill for developers. Don't be afraid to practice technical searches. It's a\n\u003cem\u003eskill\u003c/em\u003e that you will get better at with practice.\u003c/p\u003e\n\n\u003cp\u003eMost importantly, don't feel like \u003cem\u003enot knowing everything by heart\u003c/em\u003e means you\ncan't be a developer. The greatest developers we know are constantly admitting\nwhat they don't know, finding the latest news, using the answer they found and\nmoving on.\u003c/p\u003e",
            "exportId": "researching-html-elements"
          },
          {
            "id": 432898,
            "title": "HTML Issue Bot 9000",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-issue-bot-9000-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-issue-bot-9000-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDemonstrate writing valid HTML\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLet's practice using the W3C's HTML Validator!\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate Writing Valid HTML\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we'll use the W3C Validator to make our invalid HTML happy! You\nmight need to change how you work this problem depending on your work\nenvironment. Either way you'll learn to fix invalid HTML.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode.\u003c/p\u003e\n\n\u003ch3\u003eSteps\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen index.html in a browser. See how it, well, doesn't look \u003cem\u003equite\u003c/em\u003e right?\u003c/li\u003e\n\u003cli\u003eOpen index.html in your text editor\u003c/li\u003e\n\u003cli\u003eVisit the W3C validator at:\n\u003ca href=\"http://validator.w3.org/#validate_by_input\"\u003ehttp://validator.w3.org/#validate_by_input\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eCopy the code from index.html and paste it into the text area\u003c/li\u003e\n\u003cli\u003eClick the large \"Check\" button\u003c/li\u003e\n\u003cli\u003eUse the error messages to correct the code your copy of \u003ccode\u003eindex.html\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRepeat steps 3-6 until the Html Validator reports: \"Document checking\ncompleted. No errors or warnings to show.\"\u003c/li\u003e\n\u003cli\u003eNot only is the document now W3C-valid, it no longer looks weird\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eWrapping Up\u003c/h3\u003e\n\n\u003cp\u003eWhen your document is valid, go to the terminal and type \u003ccode\u003elearn test\u003c/code\u003e. Since the\ngoal of this assignment is to practice verifying the HTML structure via W3C, the\ntest in this lab is only checking that an \u003ccode\u003eindex.html\u003c/code\u003e file exists.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://validator.w3.org/#validate_by_input\"\u003eW3C HTML Validator - Validate Direct Input\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "g47174083b532aca4fd8b7f32b3811f2b"
          },
          {
            "id": 432899,
            "title": "Using Your Browser's Developer Tools",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-using-browser-dev-tools\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-using-browser-dev-tools/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExamine the developer tools\u003c/li\u003e\n\u003cli\u003eUse the developer tools to locate and inspect elements\u003c/li\u003e\n\u003cli\u003eUse the developer tools to edit HTML\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBy now, you're pretty familiar with HTML structural elements, and how they\nrelate to each other on the page. You might even feel pretty comfortable writing\nyour own valid HTML. But much of the time as developers, we'll be jumping in on\nprojects that are already in progress. We'll need a way to view existing HTML\nand CSS, and potentially a way to play around with elements on live pages to see\nhow we might potentially adjust things. Luckily for us, most browsers have those\nkinds of tools already built in, called \u003ccode\u003edeveloper tools\u003c/code\u003e, or \u003ccode\u003edev tools\u003c/code\u003e for\nshort. In this lesson, we'll look at the \u003ccode\u003edev tools\u003c/code\u003e on \u003ca href=\"https://www.google.com/chrome/\"\u003eGoogle\nChrome\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eExamine the Developer Tools\u003c/h2\u003e\n\n\u003cp\u003eThe Developer tools that browsers provide you are a great way to experiment with\nHTML and CSS, and immediately see how those changes are rendered in the browser.\u003c/p\u003e\n\n\u003cp\u003eFor this lesson, please open the\n\u003ca href=\"https://en.wikipedia.org/wiki/Alan_Turing\"\u003eWikipedia page for Alan Turing\u003c/a\u003e in\nChrome.\u003c/p\u003e\n\n\u003cp\u003eOnce the page is open, right click on the title of the page — the header\ncontaining his name. You should get a list of options. We want to click on the\none that says \u003ccode\u003eInspect\u003c/code\u003e. This is going to bring up a window at the bottom of the\npage that contains all of the HTML that makes up the Wikipedia page.\u003c/p\u003e\n\n\u003ch2\u003eUse the Developer Tools to Locate and Inspect Elements\u003c/h2\u003e\n\n\u003cp\u003eIf you hover over elements, you should see different colored boxes appear over\ndifferent parts of the page. We're going to hover over the HTML until we find\nthe section that contains the title of the page (\"Alan Turing\"). It should look\nsomething like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h1\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"firstHeading\"\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"firstHeading\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e...\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eUse the Developer Tools to Edit HTML\u003c/h2\u003e\n\n\u003cp\u003eThere should be a drop down arrow next to the first \u003ccode\u003e\u0026lt;h1 ...\u0026gt;\u003c/code\u003e If you don't\nalready see the text nested under that \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e, click on the arrow to expose it.\nRight click that text and select \u003ccode\u003eEdit as HTML\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eA new window will pop up in Dev Tools where we can actually go in and type. Try\ndeleting \"Alan Turing\" and replacing it with \"Puppies Puppies Puppies.\" Once\nyou're done, just click outside of the text window, and take a look back at the\nheader in the browser. It should now say \"Puppies Puppies Puppies.\"\u003c/p\u003e\n\n\u003cp\u003eIf you refresh the page, your text will disappear. We're just editing HTML in\nour own web browser, not on Wikipedia's web server. Feel free to scroll around\non the page and play with all sorts of different HTML elements and see what\nhappens.\u003c/p\u003e\n\n\u003ch3\u003eEditing Images\u003c/h3\u003e\n\n\u003cp\u003eNow, right click on Alan Turing's picture and choose \"Inspect\". Right click on\nthe image tag in the HTML and again select \u003ccode\u003eEdit as HTML\u003c/code\u003e. Let's replace the\nentire \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag with another image from a website. For example, you might\nchange it to this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"http://images2.fanpop.com/image/photos/9400000/Aaaaaawwwwwwwwww-Sweet-puppies-9415255-1600-1200.jpg\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ealt=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Puppies\"\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYour puppy image should now be displaying on the page, but it's pretty big.\nLet's add an attribute to our \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e tag to set the image's size. It should\nlook like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"http://images2.fanpop.com/image/photos/9400000/Aaaaaawwwwwwwwww-Sweet-puppies-9415255-1600-1200.jpg\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"200\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ealt=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"Puppies\"\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis attribute sets the width of the image to 200px and adjusts the height\naccordingly. Much better!\u003c/p\u003e\n\n\u003cp\u003eFeel free to play with other HTML elements and watch things change on the page.\u003c/p\u003e\n\n\u003ch3\u003eBonus\u003c/h3\u003e\n\n\u003cp\u003eIf you want to attempt to change any of the styles of the page, take a look at\nthe right-hand column. CSS, which stands for Cascading Style Sheets, manages all\nthe styles of your page (think background color, font size, placement of\ndifferent items on the page, etc).\u003c/p\u003e\n\n\u003cp\u003eFeel free to play around, check and uncheck boxes, change colors, change pixels.\nIt's okay if you \"mess things up\". Just refresh the browser and it will all go\nback to how it was!\u003c/p\u003e",
            "exportId": "using-your-browsers-developer-tools"
          },
          {
            "id": 432900,
            "title": "HTML Album Cover",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-album-cover-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse common HTML tags to produce a webpage based on a mock-up\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eLearning all the individual pieces that make up a web page is a necessary first\nstep in the process of learning HTML, but one of the best ways to solidify the\nconcepts we've learned is to apply concepts together. In this lab, your task\nwill be to update \u003ccode\u003eindex.html\u003c/code\u003e based on commented notes in the file, using what\nwe've learned about text formatting and displaying images.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode.\u003c/p\u003e\n\n\u003ch2\u003eApply Header, Paragraph, Image and Span Tags\u003c/h2\u003e\n\n\u003cp\u003ePharrell isn't quite happy, he needs some help coding the album cover for his\nhit song \"Happy.\" His dev chops aren't quite as skilled as yours, so he's hired\nyou to take care of business.\u003c/p\u003e\n\n\u003cp\u003ePharrell did provide us with a mock-up of what he would like to see for the\ndesign of the album cover:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/html-album-cover-lab/album-cover-mockup.png\" alt=\"Happy Album Cover\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the industry, front-end developers are typically given specs just like this\nfrom the product team and then asked to write the code to make a website look\njust like the spec. Today, you're the developer and Pharrell is the product\nteam.\u003c/p\u003e\n\n\u003ch3\u003eUse SOURCE.md\u003c/h3\u003e\n\n\u003cp\u003ePharrell has provided us with the text for the album and all the legal\nmumbo-jumbo to give credit where credit is due. You can find that text in\n\u003ccode\u003eSOURCE.md\u003c/code\u003e. Again, this is a typical industry standard workflow, where the\ndevelopers are given a copy for the site from the product team.\u003c/p\u003e\n\n\u003cp\u003eEach line of text in this file corresponds to a note in \u003ccode\u003eindex.html\u003c/code\u003e that will\nindicate where you'll need to add this information. It will be up to you to pick\nwhich HTML tags to use.\u003c/p\u003e\n\n\u003ch3\u003eDeliverables\u003c/h3\u003e\n\n\u003cp\u003eWrite your code in \u003ccode\u003eindex.html\u003c/code\u003e. Your job is to make sure the text from\n\u003ccode\u003eSOURCE.md\u003c/code\u003e makes it into \u003ccode\u003eindex.html\u003c/code\u003e surrounded by the appropriate HTML tags.\u003c/p\u003e\n\n\u003cp\u003eThe files you need are provided in the 'images' folder, but you'll have to write\nthe correct URL paths (like \u003ccode\u003ehttp://..../image-name\u003c/code\u003e) in order for them to\ndisplay correctly.\u003c/p\u003e\n\n\u003cp\u003eYou may not have encountered the \u003ccode\u003espan\u003c/code\u003e tag before, so if you are curious, take\na moment to \u003ca href=\"https://www.w3schools.com/tags/tag_span.asp\"\u003eread up on some reference material\u003c/a\u003e to better understand its use.\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in a separate browser tab to see your progress on the Album\nCover as you build it.\u003c/p\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e to make sure you've met all the deliverables and passed the\ntests.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eA lot of the formatting in this lab is done using CSS, or Cascading Style\nSheets, a language that defines styling for HTML. Before we can get to more\nelaborate styling, though, it is important to have a strong understanding of\nHTML fundamentals.\u003c/p\u003e\n\n\u003cp\u003eIn this lab, we've tested that understanding by having you practice applying\nheaders, image, and paragraphs. Completing this lab means that you have a solid\nfoundation that we can build upon as we continue to learn about web development.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eClap along if you feel\u003c/em\u003e you're getting the hang of HTML!\u003c/p\u003e",
            "exportId": "ga0ce3866e98d9741d783f9ca59f4b9aa"
          },
          {
            "id": 432902,
            "title": "BONUS: Riyadh Blog",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-html-riyadh-blog-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-html-riyadh-blog-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate an HTML structure for an existing mockup\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWeb developers are often asked to work from a mockup of a potential webpage,\ngenerally referred to as either a \u003ccode\u003emockup\u003c/code\u003e or \u003ccode\u003ecomp\u003c/code\u003e. In this lab, you'll be\nasked to use a mockup image, source text and images, and create an HTML\nstructure that mirrors the mockup image.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode.\u003c/p\u003e\n\n\u003ch2\u003eCreate an HTML Structure for an Existing Mockup\u003c/h2\u003e\n\n\u003ch3\u003eProcess\u003c/h3\u003e\n\n\u003cp\u003eIn the \u003ccode\u003eindex.html\u003c/code\u003e file, use the comments in the code to place the content from\n\u003ccode\u003eSOURCE.md\u003c/code\u003e in the proper locations. The image file\n\u003ca href=\"https://s3.amazonaws.com/learn-verified/RIYADH-MOCKUP.jpg\"\u003e\u003ccode\u003eMOCKUP.jpg\u003c/code\u003e\u003c/a\u003e can be\nused as a reference to build the \u003ccode\u003eindex.html\u003c/code\u003e page as it appears.\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in a separate browser tab to see your progress as you work.\nRun \u003ccode\u003elearn test\u003c/code\u003e as you go to see test results.\u003c/p\u003e\n\n\u003ch3\u003eBonus\u003c/h3\u003e\n\n\u003cp\u003eUse CSS in the \u003ccode\u003estyle.css\u003c/code\u003e file in the \u003ccode\u003ecss\u003c/code\u003e folder to change different aspects\nabout your page such as:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003efont color\u003c/li\u003e\n\u003cli\u003efont size\u003c/li\u003e\n\u003cli\u003efont family\u003c/li\u003e\n\u003cli\u003echange the background image to a color\u003c/li\u003e\n\u003cli\u003echange the background color to a gradient\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can also try modifying these styles on-the-fly by modifying them with the\n[developer tools] of your [browser].\u003c/p\u003e\n\n\u003cp\u003eYou might think: \"BUT I DON'T KNOW CSS\" (\u003cem\u003every well\u003c/em\u003e or \u003cem\u003eat all\u003c/em\u003e). Developers\n\u003cem\u003econstantly\u003c/em\u003e encounter this feeling. Since developers are constantly learning,\nwe try to keep the commands as simple as possible. You might know more than you\nthink! What happens if you change \u003ccode\u003ered\u003c/code\u003e to \u003ccode\u003egreen\u003c/code\u003e? What do you expect? How\nwould you validate your guess? Developers usually call this process \"trying\nstuff\" or \"messing around\" or \"playing with stuff.\" While all those phrases\nsound like a joke, what they mean to say is that they're using the Scientific\nMethod to validate their guesses into building a model.\u003c/p\u003e\n\n\u003cp\u003eIt's possibly the most powerful learning technique possible. Toddlers and\npuppies are amazing at it!\u003c/p\u003e",
            "exportId": "g06f42d4401061ddecee3501412dcaaa7"
          },
          {
            "id": 432904,
            "title": "Survey - HTML",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the HTML module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "g42ba24334f7ddde89ffc57e049dffa81"
          }
        ]
      },
      {
        "id": 44868,
        "name": "CSS",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g6aac711d841931de4a9378012dc7eec4",
        "items": [
          {
            "id": 432908,
            "title": "Intro to CSS",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-intro-to-css\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-css\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-intro-to-css/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the differences between HTML and CSS\u003c/li\u003e\n\u003cli\u003eList the basic characteristics of CSS\u003c/li\u003e\n\u003cli\u003eDeclare CSS properties and values\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eBrowsers combine the content (HTML) and presentation (CSS) layers to display web\npages. CSS — Cascading Style Sheets — is the language we use for styling web\npages.\u003c/p\u003e\n\n\u003cp\u003eCSS instructions live apart from the HTML elements and have a different look and\nfeel (\"syntax\"). CSS directives give web pages their specific appearance. If you\nhave ever been impressed by how a website can be displayed on a desktop browser\nwhile the same content looks great on a mobile device, you have CSS to thank for\nit!\u003c/p\u003e\n\n\u003cp\u003eOne of the most amazing displays of the power of CSS is\n\u003ca href=\"https://stylestage.dev/styles/\"\u003eStyle Stage\u003c/a\u003e where people take the \u003cem\u003eexact\nsame\u003c/em\u003e HTML page and use CSS to create \u003cem\u003ewildly\u003c/em\u003e different pages. Take a look!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-css/style-stage-1.png\" alt=\"Style Stage 1\" title=\"Abandoned Stage by Andrey Kudryavtsev\"\u003e\n\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-css/style-stage-2.png\" alt=\"Style Stage 2\" title=\"A Scottish Landscape by Alistair Shepherd\"\u003e\n\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-css/style-stage-3.png\" alt=\"Style Stage 3\" title=\"Bulletin by Paulo Nunes\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLike we said: all the difference between these images is created by CSS!\nAstounding, right!?\u003c/p\u003e\n\n\u003cp\u003eWe know now what CSS is and its purpose, so how does it differ from HTML and\nhow can we use it?\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Differences Between HTML and CSS\u003c/h2\u003e\n\n\u003cp\u003eHTML and CSS play two different roles. When we write HTML, we focus on\nstructure, hierarchy, and meaning — the \"marking-up\" of content.\nQuestions in the mind of an HTML author are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIs it best to list these members' names with numbers, or bullets?\u003c/li\u003e\n\u003cli\u003eDoes this menu belong in the navigation in the header?\u003c/li\u003e\n\u003cli\u003eShould this additional reference be an aside, or a separate section?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese questions deal with structure, hierarchy, and meaning, which\nare concerns of the content layer (HTML).\u003c/p\u003e\n\n\u003cp\u003eWhen defining the presentation layer (CSS), here are the questions we ask\nourselves:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDo we want the header menu to be stationary, or does it scroll with the\nbrowser window?\u003c/li\u003e\n\u003cli\u003eHow do we want the content to display inside of a container? For example,\ndoes it fill the whole area, edge-to-edge? Is there white space around\nthe content and/or the container?\u003c/li\u003e\n\u003cli\u003eHow large should an \u003ccode\u003eH1\u003c/code\u003e be relative to an \u003ccode\u003eH2\u003c/code\u003e? What about an \u003ccode\u003eH3\u003c/code\u003e?\u003c/li\u003e\n\u003cli\u003eWhat properties should links have? Underline or no underline?\nWhich color for the normal state versus the hover state? Should the\nvisited link state be different?\u003c/li\u003e\n\u003cli\u003eHow should the content appear when on a desktop machine versus a\nmobile device?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs you ask yourself these questions, your focus is on the \u003cem\u003eaesthetic\u003c/em\u003e quality of\nthe page. For each bit of \u003cem\u003econtent\u003c/em\u003e we can define a \u003cem\u003epresentation rule\u003c/em\u003e that\nwill change the way the HTML is displayed.\u003c/p\u003e\n\n\u003ch2\u003eList the Basic Characteristics of CSS\u003c/h2\u003e\n\n\u003cp\u003eFor each \u003cem\u003epresentation rule\u003c/em\u003e, there are 3 things to keep in mind:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWhat is the specific HTML we want to style?\u003c/li\u003e\n\u003cli\u003eWhat are the qualities we want to modify (e.g. the properties of text in a\nparagraph)?\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eHow\u003c/em\u003e do we want to modify the qualities of the element (e.g. font family,\nfont color, font size, line height, letter spacing etc.)?\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOnce you've decided what to modify and how, we can start writing CSS rules.\u003c/p\u003e\n\n\u003cp\u003eCSS selectors are a way of declaring which HTML elements you wish to style.\nSelectors can appear a few different ways:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe type of HTML element(\u003ccode\u003eh1\u003c/code\u003e, \u003ccode\u003ep\u003c/code\u003e, \u003ccode\u003ediv\u003c/code\u003e, etc.)\u003c/li\u003e\n\u003cli\u003eThe value of an element's \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e (\u003ccode\u003e\u0026lt;p id='idvalue'\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e,\n\u003ccode\u003e\u0026lt;p class='classname'\u0026gt;\u0026lt;/p\u0026gt;\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eThe value of an element's attributes (\u003ccode\u003evalue=\"hello\"\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eThe element's relationship with surrounding elements (a \u003ccode\u003ep\u003c/code\u003e within an element\nwith class of \u003ccode\u003e.infobox\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor example if you want the body of the page to have a black background, your\nselector syntax may be \u003ccode\u003ehtml\u003c/code\u003e or \u003ccode\u003ebody\u003c/code\u003e. For anchors, your selector would be\n\u003ccode\u003ea\u003c/code\u003e. A few more examples are listed below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e/*\nThe CSS comment syntax is text between \"slash-star\" and \"star-slash\"\n*/\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e/*\nselects all anchor tag elements in the document (e.g. \u0026lt;a href=\"page-link.html\"\u0026gt;Page Link\u0026lt;/a\u0026gt;)\n*/\u003c/span\u003e\n\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e/*\nselects all headers of type h3 in the document (e.g. \u0026lt;h3\u0026gt;Type selectors\u0026lt;/h3\u0026gt;)\n*/\u003c/span\u003e\n\u003cspan class=\"nt\"\u003eh3\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e/*\nselects all paragraph elements in the document (e.g. \u0026lt;p\u0026gt;Type selectors are used\nto...\u0026lt;/p\u0026gt;)\n*/\u003c/span\u003e\n\u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\"\u003eType selectors documentation\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe element type \u003ccode\u003eclass\u003c/code\u003e is a commonly used selector. Class selectors are used\nto \u003cstrong\u003eselect all elements that share a given class name\u003c/strong\u003e. The class selector\nsyntax is: \u003ccode\u003e.classname\u003c/code\u003e. Prefix the class name with a \u003ccode\u003e.\u003c/code\u003e (period).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e/*\nselect all elements that have the 'important-topic' classname (e.g. \u0026lt;h2 class='important-topic'\u0026gt;\nand \u0026lt;p class='important-topic'\u0026gt;)\n*/\u003c/span\u003e\n\u003cspan class=\"nc\"\u003e.important-topic\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e/*\nselect all elements that have the 'helpful-hint' classname (e.g. \u0026lt;h2 class='helpful-hint'\u0026gt;\nand \u0026lt;p class='helpful-hint'\u0026gt;)\n*/\u003c/span\u003e\n\u003cspan class=\"nc\"\u003e.helpful-hint\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can also use the \u003ccode\u003eid\u003c/code\u003e selector to style elements. However, \u003cstrong\u003ethere should\nbe only one element with a given id\u003c/strong\u003e in an HTML document. This can make\nstyling with the ID selector ideal for one-off styles. The \u003ccode\u003eid\u003c/code\u003e selector syntax\nis: \u003ccode\u003e#idvalue\u003c/code\u003e. Prefix the id attribute of an element with a \u003ccode\u003e#\u003c/code\u003e (which is\ncalled \"octothorp,\" \"pound sign\", or \"hashtag\").\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e/*\nselects the HTML element with the id 'main-header' (e.g. \u0026lt;h1 id='main-header'\u0026gt;)\n*/\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e#main-header\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e/*\nselects the HTML element with the id 'welcome-message' (e.g. \u0026lt;p id='welcome-message'\u0026gt;)\n*/\u003c/span\u003e\n\u003cspan class=\"nf\"\u003e#welcome-message\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors\"\u003eid selectors documentation\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eDeclare CSS Properties and Values\u003c/h2\u003e\n\n\u003cp\u003eEach element has a list of qualities that can be styled. CSS \"property\" names\nidentify those qualities. For text styling, examples of property names include\ntext \u003ccode\u003ecolor\u003c/code\u003e, \u003ccode\u003etext-align\u003c/code\u003e and \u003ccode\u003eline-height\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eCSS Property Values are directly related to property names. If we are working\nwith the \u003ccode\u003ecolor\u003c/code\u003e property, the value could be a named color such as \u003ccode\u003ered\u003c/code\u003e, or\n\u003ccode\u003e#660000\u003c/code\u003e. Some properties have their values set with words, others with\nnumbers, and some can take both.\u003c/p\u003e\n\n\u003cp\u003eA CSS property name with a CSS property value is a \u003cstrong\u003eCSS declaration\u003c/strong\u003e. To apply\na CSS declaration like \u003ccode\u003ecolor: blue\u003c/code\u003e to a specific HTML element, you need to\ncombine your CSS declaration with a CSS selector. The association between one or\nmore CSS declarations and a CSS selector is called a \u003cstrong\u003eCSS declaration block\u003c/strong\u003e.\nCSS declarations (one or more) that are to be applied to a specific selector are\nwrapped by curly braces (\u003ccode\u003e{ }\u003c/code\u003e). Each declaration inside a declaration block\n\u003cstrong\u003emust\u003c/strong\u003e be separated by a semi-colon (\u003ccode\u003e;\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eBelow is a sample CSS declaration block.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003eselector\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"c\"\u003e/*\nThis is a css declaration for a selector\n'color' is a property name and 'blue' is a css property value\n!!!!! CSS declarations must end with a semi-colon (;) !!!!!\n*/\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's write a more complete example declaration block.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e/*\nThe CSS declaration block below:\n* Will apply to all `h1` elements\n* Will change the text color to blue\n* Will set the font family to Georgia\n*/\u003c/span\u003e\n\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003efont-family\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eGeorgia\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith the combination of HTML and CSS, you are able to define content, structure,\nand style to websites. Using a CSS selector like \u003ccode\u003eh1\u003c/code\u003e or \u003ccode\u003ep\u003c/code\u003e paired with a\ndeclaration block, you will change the display of that element. Declaration\nblocks are collections of CSS properties and values.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS\"\u003eMozilla Developer Network: Introduction to CSS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "intro-to-css"
          },
          {
            "id": 432910,
            "title": "Introduction to CSS Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-intro-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-intro-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eImport a CSS file in our HTML\u003c/li\u003e\n\u003cli\u003eImplement CSS declarations\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eHTML's role in our websites is to provide structure, content, and link resources\n(e.g. CSS files). Its role in describing the style (\"presentation\") of content\nis minimal. HTML's ability to style is pretty much limited to \"pretty good\"\ndefaults.\u003c/p\u003e\n\n\u003cp\u003eIn order to further customize the style, appearance, and interactive behavior of\nour websites, we turn to Cascading Style Sheets, or CSS. In this lab, we will\nwork on implementing CSS declarations in our HTML.\u003c/p\u003e\n\n\u003ch2\u003eWriting HTML vs. Writing CSS\u003c/h2\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eHTML\u003c/th\u003e\n\u003cth\u003eCSS\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eDeals with:\u003c/td\u003e\n\u003ctd\u003eContent layer\u003c/td\u003e\n\u003ctd\u003ePresentation layer\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eConcerns:\u003c/td\u003e\n\u003ctd\u003eStructure, hierarchy \u0026amp; meaning\u003c/td\u003e\n\u003ctd\u003eAesthetic \u0026amp; display\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eQuestions:\u003c/td\u003e\n\u003ctd\u003e- Should the order of items within a list matter?\u003c/td\u003e\n\u003ctd\u003e- Should the layout of the text be in a single or double column?\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e- Should we wrap a list of links inside a navigation tag?\u003c/td\u003e\n\u003ctd\u003e- Should we use a different font color for the header?\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e- Is this the most important header in the HTML document?\u003c/td\u003e\n\u003ctd\u003e- How should the content appear on a desktop vs. a mobile device?\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode.\u003c/p\u003e\n\n\u003ch2\u003eImport a CSS File in Our HTML\u003c/h2\u003e\n\n\u003cp\u003eFirst things first: we need to make sure our HTML is loading our style sheet.\u003c/p\u003e\n\n\u003cp\u003eWe have two options:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite CSS rules inside of a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag (\"internal CSS\"), which tells HTML\n\"Hey, I want to define some CSS styling here.\"\u003c/li\u003e\n\u003cli\u003eWrite CSS rules in an external file that is specified with the \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag\n(\"external CSS\").\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn our case, we want to provide a link to our style sheet, instead of writing\nall of our CSS code directly in the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag. This allows us to only have\nto write styles for the entire site once, instead of repeating every \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e\nelement on every page. A common workflow is to see developers work on CSS inside\nof the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag until their styling is done. At that point they move it to\ntheir external file and remove the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element from the HTML page. Feel\nfree to try it out!\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003eindex.html\u003c/code\u003e, provide a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag which correctly sources the CSS file\nlocated in this directory. The \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag will link to our file with an \u003ccode\u003ehref\u003c/code\u003e\nattribute, like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"relative path to CSS file\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003ehref\u003c/code\u003e attribute should point to the file \u003ccode\u003estyle.css\u003c/code\u003e which is located in\nthis directory using a \u003cem\u003erelative path\u003c/em\u003e. The \u003ccode\u003erel\u003c/code\u003e attribute is used to note that\nthe file which is being linked has a \u003cstrong\u003erel\u003c/strong\u003eation of being a \"stylesheet.\"\u003c/p\u003e\n\n\u003cp\u003eNow, what is a relative path? You could write \u003ccode\u003ehref=\"style.css\"\u003c/code\u003e and the content\nof \u003ccode\u003estyle.css\u003c/code\u003e would change your \u003ccode\u003eindex.html\u003c/code\u003e file. But we want to teach you to\nrequire external resources (like CSS or JavaScript) by using \u003cem\u003erelative paths\u003c/em\u003e.\nRelative paths make it \u003cem\u003ecrystal clear\u003c/em\u003e which file is being used. Relative paths\nstart with \u003ccode\u003e./\u003c/code\u003e which means \"from the directory I am currently in.\" So, when we\nuse \u003ccode\u003elink\u003c/code\u003e to associate with a style sheet and we write \u003ccode\u003ehref=\"./style.css\"\u003c/code\u003e\nwe're saying: \"From the directory in which I, the \u003ccode\u003eindex.html\u003c/code\u003e file live, look\nfor a file called \u003ccode\u003estyle.css\u003c/code\u003e and use it. This pattern will help you and other\ndevelopers remove any possible confusion.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"relative path to CSS file\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLinks to style sheets should go at the end of the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section! Make sure\nyou provide a \u003cem\u003erelative\u003c/em\u003e path to the style sheet. Hint: Open \u003ccode\u003eindex.html\u003c/code\u003e in the\nbrowser. You can test whether your link is working or not by the color of your\nheadline. If it's red, it's working! If it's black, keep going - you'll get it.\u003c/p\u003e\n\n\u003ch2\u003eImplement CSS Declarations\u003c/h2\u003e\n\n\u003cp\u003eNow, we are going to create some CSS declarations and add styling to our\ndocument! First, open \u003ccode\u003eindex.html\u003c/code\u003e in the browser to get a good idea of what\n\u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/unstyled-codepen.jpeg\"\u003eour un-styled page\u003c/a\u003e page looks like.\u003c/p\u003e\n\n\u003cp\u003eWhat we would really like is \u003ca href=\"https://curriculum-content.s3.amazonaws.com/web-development/styled-intro-to-css.png\"\u003esomething a little more jazzed up\u003c/a\u003e! Let's\nwork towards that. Set the following \u003cem\u003eproperties\u003c/em\u003e to specific \u003cem\u003evalues\u003c/em\u003e. Make\nsure to, after each update, look at \u003ccode\u003eindex.html\u003c/code\u003e in the browser to see how it\nhas changed:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSet the \u003ccode\u003ebackground\u003c/code\u003e of the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element (whole document) to \u003ccode\u003e#00b3e6\u003c/code\u003e\n(light blue)\u003c/li\u003e\n\u003cli\u003eSet the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e elements:\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003ewidth\u003c/code\u003e to \u003ccode\u003e700px\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003emargin\u003c/code\u003e to \u003ccode\u003eauto\u003c/code\u003e (centers our element)\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003efont-family\u003c/code\u003e to \u003ccode\u003e\"Helvetica Neue\"\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebackground\u003c/code\u003e to \u003ccode\u003ewhite\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003epadding\u003c/code\u003e to \u003ccode\u003e30px\u003c/code\u003e (creates an invisible space around the element)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSet the element with the id of \u003ccode\u003e#main-header\u003c/code\u003e to a \u003ccode\u003efont-size\u003c/code\u003e of \u003ccode\u003e22px\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eSet the elements with the class of \u003ccode\u003e.perspective-questions\u003c/code\u003e to a \u003ccode\u003efont-style\u003c/code\u003e\nof \u003ccode\u003eitalic\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRun \u003ccode\u003elearn test\u003c/code\u003e to test your work.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCSS allows us to easily separate our 'styling' logic into separate files that\nfollow the 'cascading' rule set. This enables us to keep our HTML clean and\nsimple to read, without sacrificing the customization that we have come to\nexpect on websites.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/Css/css_intro.asp\"\u003eW3 Introduction to CSS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "ga057468a3f51ed6be60fc2db98240193"
          },
          {
            "id": 432912,
            "title": "CSS Fundamentals",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-fundamentals\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify CSS syntax\u003c/li\u003e\n\u003cli\u003eIdentify CSS use formats\u003c/li\u003e\n\u003cli\u003eImplement various types of CSS selectors\u003c/li\u003e\n\u003cli\u003eImplement various types of color values in CSS\u003c/li\u003e\n\u003cli\u003eIdentify and implement CSS comments\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we'll build on the basics we've learned. We'll learn to select\nelements based on HTML attributes, we'll learn to apply colors, and we'll learn\nhow to comment our CSS.\u003c/p\u003e\n\n\u003ch2\u003eIdentify CSS Syntax\u003c/h2\u003e\n\n\u003cp\u003eBefore we turn to the various ways we can extend CSS rules, let's go over the\nfoundational syntax CSS uses.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/css-essentials/css-fundamentals/Image_43_ReCreateGraphic.png\" alt=\"image showing selector, property, and values in CSS code\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe create a CSS rule by defining the selector, which matches the HTML element we\nwant to style. Inside the curly braces we declare the properties we want to\nchange and, after the colon, we set the value we want to change that property\nto. Each property is written in the following form: property name, colon, the\nvalue for that property and a semicolon.\u003c/p\u003e\n\n\u003cp\u003eIn the example above, we are selecting the \u003ccode\u003ep\u003c/code\u003e element and displaying its color\nas blue.\u003c/p\u003e\n\n\u003ch2\u003eIdentify CSS Use Formats\u003c/h2\u003e\n\n\u003cp\u003eHow do we \"apply\" CSS to an HTML page? By using one of three CSS use formats:\ninline, internal (or embedded) and external.\u003c/p\u003e\n\n\u003cp\u003eInline includes the styles directly into the HTML element with the \u003ccode\u003estyle\u003c/code\u003e\nattribute.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;p\u003c/span\u003e \u003cspan class=\"na\"\u003estyle=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"color: blue;\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhile you might see this sort of styling in something like the code for an HTML\nemail, this is generally not the best practice for two reasons. The primary reason\nis because it only affects that single element. If we want all paragraph\nelements on our page to appear blue, we would have to add that attribute to\nevery element individually, which is inefficient and difficult to maintain into\nthe future. That brings us to the second reason to avoid inline CSS: it breaks\nour principle of separation of content and presentation.\u003c/p\u003e\n\n\u003cp\u003eInternal CSS is inside of \u003ccode\u003estyle\u003c/code\u003e tags in the HTML document's \u003ccode\u003ehead\u003c/code\u003e section.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;style\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/style\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eThis is a paragraph.\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis rule will display all paragraphs in this document as blue, which is a step\nup in scope from the inline styles that only apply to single elements. But this\nCSS will only apply to the single document. Other paragraph elements on other\npages in the same website will be unaffected.\u003c/p\u003e\n\n\u003cp\u003eIf we want our CSS to carry across various pages, we can use an external\nstyle sheet. This is a separate CSS file that we link in the \u003ccode\u003ehead\u003c/code\u003e of HTML\ndocuments.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"./styles.css\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eThis is a paragraph.\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith the \u003ccode\u003elink\u003c/code\u003e tag, we can use the relation attribute to define the target as a\nstyle sheet, and the link source to be our CSS file that contains all the CSS we\nwant to use on our site. This is by far the easiest way to link CSS to HTML and\napply styles across all of our pages.\u003c/p\u003e\n\n\u003ch2\u003eImplement Various Types of CSS Selectors\u003c/h2\u003e\n\n\u003cp\u003eCSS gives us a wide range of ways that we can select elements on the page. Some\nof these you will use more than others, but it's a good idea to know them all so\nyou can choose the right one when you need it.\u003c/p\u003e\n\n\u003ch3\u003eID and Class Selectors\u003c/h3\u003e\n\n\u003cp\u003eID selectors target all elements with a specific ID attribute value. The way we\nspecify an ID selector in a CSS rule is to follow the element name with a hash\nsymbol and then the ID attribute value we want to match. In this case, the\nbrowser will look for a \u003ccode\u003ep\u003c/code\u003e element with the ID attribute \"introduction\" and\napply the CSS to that element.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"nf\"\u003e#introduction\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;p\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"introduction\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eI'm blue\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eID selectors are useful when you want to give a single element on the page a\nunique identity and set it apart from everything else.\u003c/p\u003e\n\n\u003cp\u003eClass selectors target all elements with a class attribute value matching the\nselector name. We specify a class selector using the period symbol followed by\nthe name value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"nc\"\u003e.alert\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;p\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"alert\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eI'm red\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe difference between IDs and classes is that IDs are meant for one element on\nthe page that has a unique identity where class selectors are meant to be spread\nthroughout the page across multiple elements.\u003c/p\u003e\n\n\u003ch3\u003eCompound Selectors\u003c/h3\u003e\n\n\u003cp\u003eCompound selectors let us apply the same CSS rules to multiple elements at once.\nIf we want to make both \u003ccode\u003eh2\u003c/code\u003e and \u003ccode\u003eh3\u003c/code\u003e elements display green, we use both as\nselectors, separated with a comma.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n\u003cspan class=\"nt\"\u003eh3\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003egreen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h2\u0026gt;\u003c/span\u003eI'm green\u003cspan class=\"nt\"\u003e\u0026lt;/h2\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;h3\u0026gt;\u003c/span\u003eI'm green too\u003cspan class=\"nt\"\u003e\u0026lt;/h3\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;h4\u0026gt;\u003c/span\u003eI'm not green\u003cspan class=\"nt\"\u003e\u0026lt;/h4\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis eliminates the need to rewrite a new CSS rule containing the same styles\nfor different elements.\u003c/p\u003e\n\n\u003ch3\u003eDescendant Selectors\u003c/h3\u003e\n\n\u003cp\u003eDescendant selectors target elements that are descendants of the matching\nselector name. A descendant selector is indicated by a space in between one\nselector and another selector.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003earticle\u003c/span\u003e \u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this case, \u003cem\u003eonly\u003c/em\u003e \u003ccode\u003ep\u003c/code\u003e elements within the \u003ccode\u003earticle\u003c/code\u003e element will receive the\nstyling.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;article\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI'm blue\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/article\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI'm not blue\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eID, class, compound and descendant selectors are the kind of selectors you will\nprobably use in your CSS on a regular basis. From this point on, we get into\nmore advanced selectors. They are often not as necessary as the previous ones,\nbut they can accomplish some powerful operations.\u003c/p\u003e\n\n\u003ch3\u003eChild Selectors\u003c/h3\u003e\n\n\u003cp\u003eThe child selector targets all elements that are the immediate children of a\nspecified element.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003earticle\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnly \u003ccode\u003ep\u003c/code\u003e tags exactly one level down from \u003ccode\u003earticle\u003c/code\u003e will display as blue. If\nthere are \u003ccode\u003ep\u003c/code\u003e tags within an \u003ccode\u003easide\u003c/code\u003e element within the \u003ccode\u003earticle\u003c/code\u003e element, they\nwill not receive the same instructions.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;article\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI'm blue\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/article\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"nt\"\u003e\u0026lt;article\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;aside\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI'm not blue\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/aside\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/article\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eAdjacent Sibling Selector\u003c/h3\u003e\n\n\u003cp\u003eThe adjacent sibling selector targets elements that appear directly after the matching\nselector name. We indicate it using a plus symbol.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003eh3\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere the adjacent sibling selector will style the paragraph directly following\nan \u003ccode\u003eh3\u003c/code\u003e element but not paragraphs that come after the first.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h3\u0026gt;\u003c/span\u003eHeader\u003cspan class=\"nt\"\u003e\u0026lt;/h3\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI'm blue\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI'm not blue\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eGeneral Sibling Selector\u003c/h3\u003e\n\n\u003cp\u003eThe general sibling selector (sometimes called the preceded selector) will style\nall matched elements after the preceding selector name.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003eh3\u003c/span\u003e \u003cspan class=\"o\"\u003e~\u003c/span\u003e \u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith this general sibling selector, all paragraph elements that come after the\n\u003ccode\u003eh3\u003c/code\u003e will receive the styling.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h3\u0026gt;\u003c/span\u003eHeader\u003cspan class=\"nt\"\u003e\u0026lt;/h3\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI'm red\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI'm red\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eUniversal\u003c/h3\u003e\n\n\u003cp\u003eThe universal selector matches any elements and will apply to elements that are\nnot targeted by other rules. It's indicated by the star symbol.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eyellow\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this case, this is going to set the color of the text yellow for any element\nthat hasn't had its color property specified elsewhere.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h2\u0026gt;\u003c/span\u003eI'm yellow\u003cspan class=\"nt\"\u003e\u0026lt;/h2\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI'm yellow\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003eI'm yellow\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eAttribute Selectors\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003eattribute\u003c/code\u003e selector can target elements with a particular attribute. We can\nalso define exactly which attribute we want to match.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003einput\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"nt\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e\"text\"\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e200px\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere we want to find \u003ccode\u003einput\u003c/code\u003e elements, but only those with a \u003ccode\u003etype\u003c/code\u003e value that\nmatches \"text.\" For those elements that fit the requirements, the browser will\nthen apply the width we want. There are many different ways to use this type of\nselector with various combinations of operations and attribute values so you\ncan refer to the resources to explore them all.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;input\u003c/span\u003e \u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text\"\u003c/span\u003e \u003cspan class=\"na\"\u003evalue=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"I'm 200px\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;input\u003c/span\u003e \u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"submit\"\u003c/span\u003e \u003cspan class=\"na\"\u003evalue=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"I'm not 200px\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003ePseudo-class Selectors\u003c/h3\u003e\n\n\u003cp\u003ePseudo-class selectors target elements based on a particular state of an element\nor relationship to other elements. The way we signify a pseudo class selector is\nwith the colon symbol.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"nd\"\u003e:link\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"nd\"\u003e:visited\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003epurple\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese two link examples reflect the difference in the way visited vs. unvisited\nlinks will be displayed. If the link is unvisited, it will show as blue. If it\nhas been visited, it will show up purple. Pseudo-class selectors, like attribute\nselectors, have a lot of aspects so you can explore them more in other resources.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  I'm blue before you click, and purple after\n\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eImplement Various Types of Color Values in CSS\u003c/h2\u003e\n\n\u003cp\u003eWe've been using color names in our examples to keep it simple, but only a\nhandful of color names are recognized by all browsers. When writing CSS, we'll\nbe better off to use different ways of defining our colors.\u003c/p\u003e\n\n\u003ch3\u003eHexadecimal Color Values\u003c/h3\u003e\n\n\u003cp\u003eMost often developers use a set of numbers called hexadecimal, which represents\na wide range of colors. Hex colors begin with \u003ccode\u003e#\u003c/code\u003e and are followed by,\ngenerally, 6 numbers, but some of these numbers are actually letters. The lowest\nsingle digit number in hex is 0 and the highest single digit number is f. This\ntable might help to visualize what we mean by this.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eDecimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\nHexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHex colors work by creating Red, Green, Blue (RGB) values. Traditional RGB\ncolors are on a scale of 0 to 255 for each of the three colors in the spectrum.\n\u003ccode\u003e#000000\u003c/code\u003e translates to black since 0 reds, 0 green, 0 blues represents the\nabsence of all colors and \u003ccode\u003e#ffffff\u003c/code\u003e makes white since 255 reds, 255 greens, and\n255 blues equal the maximum of each of the colors.\u003c/p\u003e\n\n\u003cp\u003eHex colors can be shortened to just three numbers when each RGB value is the\nsame for each digit. So \u003ccode\u003e#111111\u003c/code\u003e can be written as \u003ccode\u003e#111\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eRGB Color Values\u003c/h3\u003e\n\n\u003cp\u003eWe can also work directly with RGB values.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003ergb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e255\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e255\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e255\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere we've set our \u003ccode\u003ep\u003c/code\u003e elements to the color white, the maximum of all RGB\nvalues (255).\u003c/p\u003e\n\n\u003cp\u003eYou can also add an extra channel to your RGB color by setting an \"a\" value,\nwhich represents opacity.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ergba\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e255\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0.5\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis example will show up as blue, with 50% opacity so the element will have a\nsomewhat transparent color.\u003c/p\u003e\n\n\u003ch2\u003eIdentify and Implement CSS Comments\u003c/h2\u003e\n\n\u003cp\u003eSometimes developers want to put into their code information that helps other\nhumans understand what the code is doing but without bothering the browser. We\ndo this with comments, and CSS has its own way to mark up comments.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"nc\"\u003e.alert\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e#ff0000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c\"\u003e/* Alert text displays red */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEverything in between the \u003ccode\u003e/* */\u003c/code\u003e is a CSS comment. The browser will not pay\nattention to these comments, but they can be useful for us to add explanations\nor reminders alongside our CSS code.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWe reviewed the specifics of CSS syntax and covered the different ways we can\nconnect CSS to HTML. We ran through the various types of CSS selectors,\nincluding IDs, classes, compound, child, adjacent sibling, general sibling,\nuniversal, attribute and pseudo-classes. We also took a look at the various ways\nto express colors, from standard color names to hexadecimal and RGB values.\nLastly, we identified how to read and write CSS comments.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started\"\u003eMDN: CSS Tutorials for Beginners\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\"\u003eMDN: CSS Property Reference\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/inheritance\"\u003eMDN: CSS Inheritance\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048\"\u003eTuts Plus: 30 CSS selectors to Memorize\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://css-tricks.com/pseudo-class-selectors/\"\u003eCSS Tricks: Learn More Pseudo Selectors\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts\"\u003eMDN: Using Web Fonts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://learn.shayhowe.com/advanced-html-css/performance-organization/\"\u003eShay Howe: CSS Performance \u0026amp; Organization, Best Practices\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://color.adobe.com/create/color-wheel/\"\u003eAdobe Color Tool\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://jigsaw.w3.org/css-validator/\"\u003eCSS Validator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://flukeout.github.io/\"\u003eCSS Diner Game\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/yay-for-hsla/\"\u003eCSS Tricks: Hue, Saturation and Lightness\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "css-fundamentals"
          },
          {
            "id": 432914,
            "title": "CSS Fundamentals Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-fundamentals-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-fundamentals-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eLink an external CSS file\u003c/li\u003e\n\u003cli\u003eWrite CSS rules to style HTML\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we will be adding style to our \u003ccode\u003eindex.html\u003c/code\u003e page by linking an\nexternal CSS file. If you open \u003ccode\u003eindex.html\u003c/code\u003e in the browser, you will see basic\nHTML that has been provided. The website emulates a basic Real Estate website\n(the links on it have been disabled, we will be working with only the basic\n\u003ccode\u003eindex.html\u003c/code\u003e landing page).\u003c/p\u003e\n\n\u003cp\u003eAs you can see, our basic page is rather lackluster. This is where you come in!\nYou will be adding CSS, using selectors, to jazz the page up. All of our CSS\nshould be written in \u003ccode\u003estyle.css\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode. Run \u003ccode\u003elearn test\u003c/code\u003e as you work through this assignment to see your progress.\u003c/p\u003e\n\n\u003ch2\u003eLink an External CSS File\u003c/h2\u003e\n\n\u003cp\u003eAs usual, we need to make sure our HTML is loading our style sheet.\u003c/p\u003e\n\n\u003cp\u003eWe have two options:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWrite CSS rules inside of a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag (\"internal CSS\"), which tells HTML\n\"Hey, I want to define some CSS styling here\"\u003c/li\u003e\n\u003cli\u003eWrite CSS rules in an external file that is specified with the \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag\n(\"external CSS\").\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn our case, we want to provide a link to our style sheet, instead of writing\nall of our CSS code directly in the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag. This allows us to only have\nto write styles for the entire site once, instead of repeating every \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e\nelement on every page. A common workflow is to see developers work on CSS inside\nof the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag until their styling is done. At that point, they move it to\ntheir external file and remove the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e element from the HTML page. Feel\nfree to try it out!\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003eindex.html\u003c/code\u003e, provide a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag which correctly sources the CSS file\nlocated in this directory. The \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag will link to our file with an \u003ccode\u003ehref\u003c/code\u003e\nattribute, like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"relative path to CSS file\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLinks to style sheets should go at the end of the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e section! Make sure\nyou provide a \u003cem\u003erelative\u003c/em\u003e path to the style sheet.\u003c/p\u003e\n\n\u003cp\u003eNow, what is a relative path? You could write \u003ccode\u003ehref=\"style.css\"\u003c/code\u003e and the content\nof \u003ccode\u003estyle.css\u003c/code\u003e would change your \u003ccode\u003eindex.html\u003c/code\u003e file. But we want to teach you to\nrequire external resources (like CSS or JavaScript) by using \u003cem\u003erelative paths\u003c/em\u003e.\nRelative paths make it \u003cem\u003ecrystal clear\u003c/em\u003e which file is being used. Relative paths\nstart with \u003ccode\u003e./\u003c/code\u003e which means \"from the directory I am currently in.\" So, when we\nuse \u003ccode\u003elink\u003c/code\u003e to associate with a style sheet and we write \u003ccode\u003ehref=\"./style.css\"\u003c/code\u003e\nwe're saying: \"From the directory in which I, the \u003ccode\u003eindex.html\u003c/code\u003e file live, look\nfor a file called \u003ccode\u003estyle.css\u003c/code\u003e and use it.\" This pattern will help you and other\ndevelopers remove any possible confusion.\u003c/p\u003e\n\n\u003cp\u003eHint: Try adding the following temporarily to your \u003ccode\u003estyle.css\u003c/code\u003e file to test if\nyour linked CSS is working:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you see your \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e change to red, you've linked your style sheet correctly!\nDon't forget to delete it once you have your link working.\u003c/p\u003e\n\n\u003ch2\u003eWrite CSS Rules to Style HTML\u003c/h2\u003e\n\n\u003cp\u003eFor this exercise, we are going to be transforming our base HTML into a more\nexciting version using CSS.\u003c/p\u003e\n\n\u003cp\u003eIt is important to note that there are \u003cem\u003emany\u003c/em\u003e ways to go about transforming the\nHTML with CSS to match the end product. For this lesson, we will provide you\nwith general guidance in \u003cem\u003eone way\u003c/em\u003e of getting to the desired view by adding to\nthe \u003ccode\u003estyle.css\u003c/code\u003e. Ultimately, the goal is to have your website look like the\nfinished product whatever way works the best for you.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you are having trouble finding the specific CSS property you need\nto get a specific visual outcome, use your Google skills with queries such as:\n\"CSS center text within div\".\u003c/p\u003e\n\n\u003cp\u003eIn following the guidelines, you should be referencing the \u003ccode\u003eindex.html\u003c/code\u003e to find\nthe appropriate tags/IDs that we will use as selectors in our \u003ccode\u003estyle.css\u003c/code\u003e file.\nDon't forget: you can use the Chrome Inspector Tool (\u003ccode\u003ecmd + shift + C\u003c/code\u003e on Mac)\nto inspect specific elements of the DOM (and make trial changes to their CSS) in\nthe browser.\u003c/p\u003e\n\n\u003ch3\u003eWhat We Have\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-fundamentals-lab-incomplete.png\" alt=\"incomplete lab\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eWhat We Want\u003c/h3\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-fundamentals-lab-complete.png\" alt=\"complete lab\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eDeliverables\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eUpdate the header\u003c/strong\u003e: the text is a little wonky being aligned on the left\nlike that. Provide a property that aligns it in the center instead.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCenter our image\u003c/strong\u003e: We only have one image on the page and we would like it\ncentered!\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eJazz up our navigation links\u003c/strong\u003e: Let's center all of our nav links as well.\nGive all of the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tags within our navbar padding of 10px on their left and\nright sides. In addition, change their background color to something of your\nchoosing. We chose grey!\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eOur image caption needs work\u003c/strong\u003e: Let's shrink that font size down and make\nsure it is centered.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eUpdate the text block\u003c/strong\u003e: Wouldn't it look nicer if our text was centered as\nwell? Our image is about 900px wide, so let's give all our \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003es within\n\u003ccode\u003e#featured-property\u003c/code\u003e a hard width of 800px and center the text in there. Be\nsure to keep a little vertical space around the \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003es.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eMake our \u003ccode\u003e#details\u003c/code\u003e section horizontal\u003c/strong\u003e: The details section could go\nnicely as a footer to the page, instead of a vertical list. To do this, make\neach of the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es \u003ccode\u003efloat\u003c/code\u003e to the \u003ccode\u003eleft\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eAs a finishing touch\u003c/strong\u003e: Let's clean up the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003es at the bottom of the\npage. All of them should have the same background color, centered text, and\noccupy 25% of the \u003ccode\u003ewidth\u003c/code\u003e of the bottom row (since we have 4 divs).\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eCSS allows many avenues to the same goal. The important takeaway is to\nexperiment and become familiar with the commonly used rules. This will enable\nyou to identify what properties will get you to which end result the quickest.\u003c/p\u003e\n\n\u003cp\u003eYou will find that even years into your career as a front end developer, you\nwill be referencing basic CSS documentation. \u003cem\u003eThis is to be expected!\u003c/em\u003e To be\ncomfortable quickly finding the property/value you are looking for online is the\nmost important skill set you can develop right now. Memorization is for\nmachines, adaptation is for humans!\u003c/p\u003e",
            "exportId": "gcb89cbd53a88f64f8c297211a64b856b"
          },
          {
            "id": 432916,
            "title": "CSS Validation Lab: Issue Bot 9000",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-issue-bot-9000\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-issue-bot-9000\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-issue-bot-9000\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-issue-bot-9000/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eChange invalid CSS to valid CSS\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eAlthough today's browsers are becoming more capable of handing errors in CSS,\nsome errors are not always caught gracefully. This variable can make it\nextremely difficult to apply style or layout consistently. What can be done to\nquickly scan our CSS documents for issues? Let's practice using the W3C's CSS\nValidator!\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode. Run \u003ccode\u003elearn test\u003c/code\u003e as you go to see your test progress.\u003c/p\u003e\n\n\u003ch2\u003eChange Invalid CSS to Valid CSS\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we will be taking the invalid CSS in \u003ccode\u003ecss/style.css\u003c/code\u003e and\nchanging it to valid.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen index.html in your browser. Notice how our styles don't look quite\nright?\u003c/li\u003e\n\u003cli\u003eOpen css/style.css in your text editor.\u003c/li\u003e\n\u003cli\u003eVisit the W3C CSS validator\n\u003ca href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\"\u003ehttp://jigsaw.w3.org/css-validator/#validate_by_input\u003c/a\u003e.\nIf not already selected, click on the tab labeled \"By direct input\".\u003c/li\u003e\n\u003cli\u003eCopy the code from css/style.css and paste it into the text area. Click the\n\"Check\" button.\u003c/li\u003e\n\u003cli\u003eUse the error messages to correct the CSS.\u003c/li\u003e\n\u003cli\u003eRepeat steps 3-5 until your readout states \"Congratulations! No Error\nFound.\".\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eRemember to check your progress in \u003ccode\u003eindex.html\u003c/code\u003e in your browser!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith a CSS validator, you can work your way through cleaning up errors in a CSS\ndocument and reduce the likelihood of display errors across platforms. Using the\nW3C CSS validator will help you quickly and efficiently troubleshoot your CSS.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://jigsaw.w3.org/css-validator/#validate_by_input\"\u003eW3C CSS Validator - Validate Direct Input\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "g6a29ddf6c5f8c041e91de8ff395f79c9"
          },
          {
            "id": 432917,
            "title": "My Little Rainbow",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-rainbow-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eReview HTML basics\u003c/li\u003e\n\u003cli\u003eReview CSS basics\u003c/li\u003e\n\u003cli\u003eSpecify hexadecimal color values with CSS\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab, we're going to make a rainbow with HTML \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e elements. And while\nwe do it we're going to learn about HTML elements, CSS styling, CSS selectors,\nhow color works in CSS and importing style sheets.\u003c/p\u003e\n\n\u003cp\u003eBefore we start, here's some basic info about HTML and CSS. Skip to\n\u003ca href=\"#make-a-rainbow\"\u003eMake a CSS Rainbow\u003c/a\u003e if you feel comfortable enough with HTML\nand CSS.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode. Run \u003ccode\u003elearn test\u003c/code\u003e as you work to see your test progress.\u003c/p\u003e\n\n\u003ch2\u003eReview HTML Basics\u003c/h2\u003e\n\n\u003cp\u003eHyper Text Markup Language, or HTML, is a way to structure a document with\ndifferent parts. Each section of content is \u003cem\u003emarked\u003c/em\u003e by elements (using tags).\nEach element has its own special meaning that the browser uses to \u003cem\u003erender\u003c/em\u003e the\nHTML document. Use this \u003ca href=\"https://htmlcheatsheet.com/\"\u003echeat sheet\u003c/a\u003e on HTML\nelements for guidance.\u003c/p\u003e\n\n\u003ch3\u003eElements\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eAll begin with \u003ccode\u003e\u0026lt;\u003c/code\u003e and end with \u003ccode\u003e\u0026gt;\u003c/code\u003e, e.g., \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e (this last part is a tag).\u003c/li\u003e\n\u003cli\u003eMost have an opening tag such as \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e and a closing tag \u003ccode\u003e\u0026lt;/div\u0026gt;\u003c/code\u003e.\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003e/\u003c/code\u003e indicates to the browser that that tag is a closing tag.\u003c/li\u003e\n\u003cli\u003eThe element is everything between the tags and the tags themselves.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSome tags are self-closing like the line break element \u003ccode\u003e\u0026lt;br\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eElements can have IDs and classes to aid the browser in finding specific tags.\n\n\u003cul\u003e\n\u003cli\u003eMust begin with a letter A-Z or a-z.\u003c/li\u003e\n\u003cli\u003eCan be followed by: letters (\u003ccode\u003eA-Za-z\u003c/code\u003e), digits (\u003ccode\u003e0-9\u003c/code\u003e), hyphens (\u003ccode\u003e-\u003c/code\u003e), and\nunderscores (\u003ccode\u003e_\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eIDs \u003cstrong\u003ecan\u003c/strong\u003e only be used once per page. E.g.:\n\u003ccode\u003e\u0026lt;div id=\"this-special-div\"\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eClasses can be used as many times as you want. E.g.:\n\u003ccode\u003e\u0026lt;div class=\"a-less-special-div\"\u0026gt;\u0026lt;/div\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eElements nested inside other elements are called children.\n\n\u003cul\u003e\n\u003cli\u003eChildren inherit attributes from their parents.\u003c/li\u003e\n\u003cli\u003eDon't nest everything.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eElements next to one another are siblings.\n\n\u003cul\u003e\n\u003cli\u003eSiblings do not inherit from one another but are important for selecting in\nCSS.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHere is an example of element relations:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e\u0026lt;!-- the parent element --\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e\u0026lt;!-- the first sibling element/the first child--\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e\u0026lt;!-- the second sibling element/the second child --\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eReview CSS Basics\u003c/h2\u003e\n\n\u003cp\u003eCascading Style Sheets, or CSS, is a language created to style HTML documents by\ntelling the browser how specific elements should look. CSS does this by\nselecting elements based on their tag, ids, classes, or all of the above. The\nreason for CSS is the separation of concerns. We want HTML to focus on the\nstructure and meaning of our content. We let CSS worry about how to make that\ninformation appear clear and engaging.\u003c/p\u003e\n\n\u003ch3\u003eCSS selectors\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eThey select elements to assign them styles.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e*\u003c/code\u003e (wildcard) selects every element.\u003c/li\u003e\n\u003cli\u003eAn element, such as \u003ccode\u003ediv\u003c/code\u003e, will select all elements of that type.\u003c/li\u003e\n\u003cli\u003eThey select an id like \u003ccode\u003e#some-id\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eClasses are selected like this \u003ccode\u003e.some-class\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eTo select all children elements of a parent do something like this \u003ccode\u003ediv p\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eTo select multiple different elements separate them by commas like this\n\u003ccode\u003ediv, p, a\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHere's an example of CSS styling:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ecolor\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003ered\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"c\"\u003e/* color in CSS refers to font color */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c\"\u003e/* all elements will have red font */\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003e\n\u003ca id=\"make-a-rainbow\"\u003e\u003c/a\u003e Make a CSS Rainbow\u003c/h2\u003e\n\n\u003cp\u003eIn the directory, you'll see three files: \u003ccode\u003eindex.html\u003c/code\u003e, \u003ccode\u003emain.css\u003c/code\u003e, and this\nfile, \u003ccode\u003eREADME.md\u003c/code\u003e. Open \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf everything is working correctly, you should see a white page.\u003c/p\u003e\n\n\u003cp\u003eGood job!\u003c/p\u003e\n\n\u003ch3\u003eMaking the Divs Visible\u003c/h3\u003e\n\n\u003cp\u003eIf you look at the file in your text editor or use the inspector, you'll see\nthat the basic HTML structure is present in \u003ccode\u003eindex.html\u003c/code\u003e. So why can't we see\nanything?\u003c/p\u003e\n\n\u003cp\u003eWell, \u003ccode\u003ediv\u003c/code\u003es are \u003cem\u003estructural\u003c/em\u003e elements. They're used to \u003cem\u003einvisibly\u003c/em\u003e group other\nvisible elements together. But the style sheet that would tell our \u003ccode\u003ediv\u003c/code\u003es to do\nsomething a little different hasn't been linked yet!\u003c/p\u003e\n\n\u003cp\u003eLet's fix this by adding the style sheet to the \u003ccode\u003ehead\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eMy Little Rainbow\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text/css\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"./main.css\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003eLink\u003c/code\u003e is a self-closing tag that will create a relative path with the \u003ccode\u003ehref\u003c/code\u003e\nattribute. A relative path \u003ccode\u003e./main.css\u003c/code\u003e means the browser knows that the\n\u003ccode\u003emain.css\u003c/code\u003e file is in the same place as \u003ccode\u003eindex.html\u003c/code\u003e. The \u003ccode\u003ehead\u003c/code\u003e is a hidden\npart of the page that tells the browser where to find any other files it needs\nto display the page correctly, the \u003ccode\u003etitle\u003c/code\u003e for the tab, and any other possible\nimportant information.\u003c/p\u003e\n\n\u003cp\u003eNow if you refresh the \u003ccode\u003eindex.html\u003c/code\u003e page in your browser you should see a\nperfectly solid-black rainbow.\u003c/p\u003e\n\n\u003cp\u003eWe got the basic outline because in the \u003ccode\u003emain.css\u003c/code\u003e all the \u003ccode\u003ediv\u003c/code\u003e elements were\nselected and given a \u003ccode\u003eborder\u003c/code\u003e whose color is \u003ccode\u003e#000\u003c/code\u003e, \"black.\" While we could set\n\u003ccode\u003eborder-top-color: red;\u003c/code\u003e, we will have more colors available if we define colors\nwithout words.\u003c/p\u003e\n\n\u003cp\u003eInstead of \u003ccode\u003ered\u003c/code\u003e, \u003ccode\u003egreen\u003c/code\u003e, or the exotic \u003ccode\u003etomato\u003c/code\u003e, professionals prefer a set of\nnumbers with a base pair of 16 rather than a base pair of 10 like we use every\nday. These numbers are called \"hexadecimal\" and we can use them to make a wide\nrange of colors.\u003c/p\u003e\n\n\u003ch3\u003eSome Stuff You Should Know About Hex Colors (and Web Colors in General)\u003c/h3\u003e\n\n\u003cp\u003eHex colors begin with \u003ccode\u003e#\u003c/code\u003e and are followed by, generally, 6 numbers, but some of\nthese numbers are actually letters. The lowest single digit number in hex is \u003ccode\u003e0\u003c/code\u003e\nand the highest single digit number is \u003ccode\u003ef\u003c/code\u003e. This table might help to visualize\nwhat we mean by this.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eDecimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\nHexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHex colors work by creating Red, Green, Blue (RGB) values. Traditional RGB\ncolors are on a scale of 0 to 255 for each of the three colors in the spectrum.\nHex colors are considered true colors since they can represent ~16 million\ncolors—but your eye can only see 10 million of those. So \u003ccode\u003e#000000\u003c/code\u003e translates to\nblack since 0 reds, 0 green, 0 blues represents the absence of all colors, and\n\u003ccode\u003e#ffffff\u003c/code\u003e makes white since 255 reds, 255 greens, and 255 blues is the maximum\nof each of the colors.\u003c/p\u003e\n\n\u003cp\u003eHex colors can be shortened to just three numbers when each RGB value is the\nsame for each digit. So \u003ccode\u003e#11dd99\u003c/code\u003e can be written as \u003ccode\u003e#1d9\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eColoring the Rainbow\u003c/h3\u003e\n\n\u003cp\u003eTo get ROYGBIV onto our rainbow we'll need seven hex colors. Red: \u003ccode\u003e#f00\u003c/code\u003e;\nOrange: \u003ccode\u003e#ffa500\u003c/code\u003e; Yellow: \u003ccode\u003e#ff0\u003c/code\u003e; Green: \u003ccode\u003e#00bc3f\u003c/code\u003e; Blue: \u003ccode\u003e#06f\u003c/code\u003e; Indigo:\n\u003ccode\u003e#8a2be2\u003c/code\u003e; Violet: \u003ccode\u003e#d300c9\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eAll we have to do next is select each div individually and apply each of those\ncolors. That is a perfect use for ids since they're meant to style one specific\nelement only. We need to add an id for each div so a logical name for each div\nwould be the color that they have to be. It could be something random, but good\nnames make for semantic code. So let's give the outermost div the id red.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;div\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"red\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e...\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo give that id some CSS attributes we'll go into \u003ccode\u003emain.css\u003c/code\u003e, select the id, and\nmark its color as red.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nf\"\u003e#red\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e/* this selects any elements with the red id */\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003eborder-top-color\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e#f00\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo make sure the rainbow isn't so monochromatic you now need to repeat the above\nsteps with the final six colors, and when you do you should have a complete,\ncolorful rainbow.\u003c/p\u003e\n\n\u003ch2\u003eMoving On\u003c/h2\u003e\n\n\u003cp\u003eWhen you're done with this lab type \u003ccode\u003elearn test\u003c/code\u003e to confirm you've passed all the\ntests.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAfter we reviewed HTML and CSS basics, we moved on to create an HTML rainbow. We\nlinked our style sheet to our HTML page and added ids to our HTML elements. We\nthen created CSS rules, using hexadecimal color values, for those elements to\ndisplay all the colors on our completed HTML page.\u003c/p\u003e",
            "exportId": "g04141266d21ca0d0eee0abab24edbbd2"
          },
          {
            "id": 432919,
            "title": "BONUS: CSS Kitten Wheelbarrow",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-kitten-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-kitten-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePosition elements absolutely\u003c/li\u003e\n\u003cli\u003ePractice using CSS selectors\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eOh no! All of our kittens have escaped from the wheelbarrow and we need to get\nthem back in. Help collect all the kittens and put them into the wheelbarrow\nusing CSS selectors and absolute positioning.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode.\u003c/p\u003e\n\n\u003ch2\u003ePosition Elements Absolutely\u003c/h2\u003e\n\n\u003cp\u003eThere are a few different ways we can use CSS to position elements in our web\npages. \u003cem\u003eAbsolute\u003c/em\u003e positioning means placing the element in its containing\nelement in a certain location that will stay the same no matter where other\nelements are placed. We can use absolute positioning to specify \u003cem\u003eexactly\u003c/em\u003e where\nin the document layout we want an element to be placed:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/phase-0-css-kitten-lab/absolute-position.png\" alt=\"absolute positioning diagram\"\u003e\u003c/p\u003e\n\n\u003cp\u003eHere's an example of what absolute positioning looks like in CSS:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nc\"\u003e.parent-element\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003erelative\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nc\"\u003e.child-element\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eabsolute\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003etop\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e50px\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e50px\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e When using \u003ccode\u003eposition: absolute\u003c/code\u003e, the browser calculates the position\nusing top/left from the closest parent element that has a position specified —\nthat's why in the example, we're specifying \u003ccode\u003eposition: relative\u003c/code\u003e for the\nparent element. Check out the resources on positioning for more info on this\nif you're interested!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFor this lab, we've done the work of calculating the absolute positions and\ncreating CSS rules for a bunch of different kitten image elements. It's your job\nto use CSS selectors to apply the correct positioning to each of these elements.\u003c/p\u003e\n\n\u003cp\u003eTo get started with this lab, open the \u003ccode\u003eindex.html\u003c/code\u003e file in the browser. Use the\ncomments in \u003ccode\u003ecss/place-kitty.css\u003c/code\u003e to write the correct selectors to move each\nkitty into the wheelbarrow.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eNice work getting practice with more CSS selectors, and learning about absolute\npositioning along the way! Now that you've seen absolute positioning in action,\nyou'll have a better sense of when you might need to use it to build more\ncomplex CSS layouts in the future.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors\"\u003eMozilla Developer Network: CSS Selectors\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/cssref/css_selectors.asp\"\u003eW3 CSS Selector Reference\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning\"\u003eMozilla Developer Network: Positioning\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "g4ba8bc4e4c772b74196b10d5fcb8b845"
          },
          {
            "id": 432921,
            "title": "BONUS: CSS Graffiti Override Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-css-graffiti-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-css-graffiti-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse the browser developer tools\u003c/li\u003e\n\u003cli\u003eOverride existing styles\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eImagine that you are walking down the street, and you notice that there's a\nmural that has been painted over with various graffiti tags. In reality,\ncleaning this up could be a challenging feat; however, in CSS, you have the\npower to manipulate the DOM with just a line or two of code and to restore the\nmural to its original look! In this lab, we've created a virtual wall. Using\nonly CSS, how can you remove the tags?\u003c/p\u003e\n\n\u003ch2\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eFork and clone this lesson into your local environment. Navigate into its\ndirectory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files in Visual Studio\nCode. Run \u003ccode\u003elearn test\u003c/code\u003e as you go to see your test progress.\u003c/p\u003e\n\n\u003ch2\u003eUse the Browser Developer Tools\u003c/h2\u003e\n\n\u003cp\u003eAssuming you have opened the index file in Chrome, open the \u003ca href=\"http://discover-devtools.codeschool.com/\"\u003edev tools\u003c/a\u003e.\nYou can quickly access Chrome dev tools with the keyboard shortcut\n\u003ccode\u003eCmd+Option+i\u003c/code\u003e on a Mac, or by right/control-clicking anywhere in the window and\nselecting \u003ccode\u003einspect\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-graffiti-override/inspect1.png\" alt=\"Chrome Dev Tools\" title=\"Open the Chrome dev tools\"\u003e\u003c/p\u003e\n\n\u003cp\u003eInspect the elements of the graffiti wall in the dev tools by hovering over and\nclicking on nested elements. Take a close look at what's made available to you\nin the dev tools pane. You can see which style sheets specific style\ndeclarations live in, as well as create new styles on the fly. Now, make note of\nthe CSS styles used to add graffiti tags (as background images) to the wall.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewds-css/css-graffiti-override/inspect2.png\" alt=\"Chrome Dev Tools\" title=\"Inspect the styles on each element\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eOverride Existing Styles\u003c/h2\u003e\n\n\u003cp\u003eIn the file \u003ccode\u003ecss/cleanup.css\u003c/code\u003e, write selectors that have more specificity\n(authority) than those that are showing the graffiti tags. You can test out\nwriting classes in dev tools by clicking the \u003ccode\u003e+\u003c/code\u003e in the top right-hand corner of\nthe pane. You can also click the \u003ccode\u003esources\u003c/code\u003e tab and select \u003ccode\u003ecss/cleanup.css\u003c/code\u003e in\nthe dev tools pane. This allows you to edit the CSS file directly. It \u003cem\u003ewon't\u003c/em\u003e\nsave your edits, but it will give a live update of changes so that it's easier\nto manipulate the DOM without refreshing the page. From there, you can copy and\npaste your working changes into the file.\u003c/p\u003e\n\n\u003cp\u003eTo remove the tags, use the CSS declaration \u003ccode\u003edisplay:none;\u003c/code\u003e. It will change the\nelements' previous display property value from \u003ccode\u003edisplay: block\u003c/code\u003e to\n\u003ccode\u003edisplay: none\u003c/code\u003e, which will hide that graffiti.\u003c/p\u003e\n\n\u003cp\u003eFor example, for \"tag-1\" the developer tools reveal that the style applying the\ngraffiti here is:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nc\"\u003e.tag-1\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ebackground\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"sx\"\u003eurl(../images/tag-1.png)\u003c/span\u003e \u003cspan class=\"nb\"\u003eno-repeat\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ez-index\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003edisplay\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eblock\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou'll need to override this by setting its display to \u003ccode\u003edisplay: none;\u003c/code\u003e instead.\nWe can do this by writing a selector statement that is more specific such as:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nf\"\u003e#wall\u003c/span\u003e \u003cspan class=\"nc\"\u003e.tag-1\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003edisplay\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003enone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis selects elements with a class of \"tag-1\" that happen to also be inside an\nelement with an id of \"wall\". This is more specific, and therefore will override\nthe previous statement and hide the graffiti. For more info on how specificity\nin CSS works take a look at: \u003ca href=\"http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\"\u003eSmashing Magazines What You Need to Know About CSS\nSpecificity\u003c/a\u003e. You can also take advantage of a \u003ca href=\"https://specificity.keegan.st/\"\u003eSpecificity\nCalculator\u003c/a\u003e to assist with finding and understanding options for\noverriding styles.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDo not use the CSS \u003ccode\u003e!important\u003c/code\u003e value\u003c/strong\u003e! It is considered a bad practice and\nshould be used sparingly, in very specific edge-cases. For this lab, avoid\nadding inline or embedded CSS to the index.html file, or any additional class or\nid attributes to the index.html file either. This will make it more challenging\nas you will have to write CSS that is more specific based on the existing\nmarkup.\u003c/p\u003e\n\n\u003ch2\u003eMoving On\u003c/h2\u003e\n\n\u003cp\u003eWhen you're done, run \u003ccode\u003elearn test\u003c/code\u003e from the command line to confirm you've\npassed all tests.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWith the dev tools and resources on CSS specificity rules, work your way through\nall seven graffiti pictures until the wall is fully clean. In your\nexperimentation, you will find that there are many ways to manipulate and\noverride the DOM. This will become a common practice as you build out more\ncomplex websites or work with cloud-hosted third-party resources where you may\nnot have direct access to the style sheet.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://www.smashingmagazine.com/2007/07/27/css-specificity-things-you-should-know/\"\u003eSmashing Magazine - CSS Specificity\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://css-tricks.com/specifics-on-css-specificity/\"\u003eCSS Tricks - CSS Specificity\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://specificity.keegan.st/\"\u003eSpecificity Calculator\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "g533bd33fb5cbac3ee762bd7ddc8dc634"
          },
          {
            "id": 432923,
            "title": "Survey - CSS",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the CSS module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "gf1a05cf22952cc3dd055f523a407b1c1"
          }
        ]
      },
      {
        "id": 44870,
        "name": "Manipulating the DOM",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "ga7418a2d6676f3ce3a0c35cde217bceb",
        "items": [
          {
            "id": 432927,
            "title": "Introduction to the DOM",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-introduction\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify the Document Object Model (DOM)\u003c/li\u003e\n\u003cli\u003eExplain how the DOM is created\u003c/li\u003e\n\u003cli\u003eIdentify the DOM as accessed by JavaScript objects\u003c/li\u003e\n\u003cli\u003eIntroduce the Console and Chrome DevTools\u003c/li\u003e\n\u003cli\u003eLearn how to open HTML files in the browser\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe have learned how to write HTML and style it with CSS. We have also built our\nJavaScript programming skills. With this knowledge, we're now ready to learn\n\u003cstrong\u003eDocument Object Model (DOM) programming\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eDOM programming consists of using JavaScript to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAsk the DOM to find or select an HTML element or elements in the rendered\npage\u003c/li\u003e\n\u003cli\u003eRemove and/or insert one or more elements\u003c/li\u003e\n\u003cli\u003eAdjust a property of selected element(s)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn other words, we can use DOM programming to create and modify content that\nusers see in their browsers and add interactivity to our web pages.\u003c/p\u003e\n\n\u003ch2\u003eIdentify the Document Object Model\u003c/h2\u003e\n\n\u003cp\u003eLet's start with a biology metaphor. Your DNA represents a code-based version of\n\u003cem\u003eyou\u003c/em\u003e. The DOM represents a code-based version of \u003cem\u003ea web page\u003c/em\u003e. If something\nedits your DNA, changes will be made in your body (perhaps giving you mutant\npowers). Similarly, when you change something in the DOM, you change what's\ndisplayed in the browser.\u003c/p\u003e\n\n\u003cp\u003eBut what exactly \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e the DOM? You can think of it as a \"middle layer\"\nbetween the user and the underlying HTML, CSS, and JavaScript that makes up the\npage. What the user is actually seeing on the page is the DOM. When the page\ninitially loads, the DOM represents the underlying HTML, CSS and JavaScript.\nWhen we use JavaScript and DOM programming to modify the DOM and change what the\nuser sees, the underlying code is not modified: if we refresh the page, it goes\nback to its original state.\u003c/p\u003e\n\n\u003ch3\u003eExplain How the DOM Is Created\u003c/h3\u003e\n\n\u003cp\u003eThe DOM is created when the page loads from the HTML/CSS/JavaScript that the web\nserver provides to the browser. Let's examine this process step-by-step:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: To ensure that instructions and screenshots match up with your\nexperience, be sure to use the \u003ca href=\"https://www.google.com/chrome/browser/desktop/index.html\"\u003eGoogle Chrome\u003c/a\u003e browser.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003col\u003e\n\u003cli\u003eIn Google Chrome, open a tab and navigate to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eTo see the HTML of this page, add \u003ccode\u003eview-source:\u003c/code\u003e to the front of the URL in\nthe URL bar. Using the \u003ccode\u003eview-source\u003c/code\u003e URL prefix will display all the page's\nsource HTML. It will look something like this:\n\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/intro-to-the-dom/html-source.png\" alt=\"html-source\"\u003e\u003c/li\u003e\n\u003cli\u003eThe browser reads this HTML, along with CSS and JavaScript defined in\n\u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tags, to create the DOM inside the browser. At this\npoint, nothing is displayed on the screen. This time when nothing is\ndisplayed is very brief so our human eyes never really catch it.\u003c/li\u003e\n\u003cli\u003eThe browser then uses the DOM object to create the rendered page. While we\noften learn that browsers \"display HTML,\" that's not exactly accurate.\nBrowsers use the HTML to create a \"middleman\" that they, in turn, use to\ndisplay the structured and styled content.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3\u003eIdentify the DOM as Accessed by JavaScript Objects\u003c/h3\u003e\n\n\u003cp\u003eWe can access the DOM, using JavaScript and DOM programming, through two\n\u003cem\u003evariables\u003c/em\u003e: \u003ccode\u003ewindow\u003c/code\u003e and \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ewindow\u003c/code\u003e variable points to an \u003cem\u003eobject\u003c/em\u003e that represents Chrome's information\nabout the browser, well, \"window.\" It has many functions, but the main one is\n\"it's a place where everything is.\" Not to be Zen here, but a browser without a\n\u003ccode\u003ewindow\u003c/code\u003e is like the universe before the Big Bang; there's just... \u003cem\u003enothing\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eLike all objects, the \u003ccode\u003ewindow\u003c/code\u003e has properties and methods. For example, we can\naccess operating system browser information like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003ewindow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003einnerHeight\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// returns the inner height of the browser window.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFor the most part, we won't interact with \u003ccode\u003ewindow\u003c/code\u003e: we don't want to mess with\nthe container of everything or with operating system stuff. We want, rather, to\nchange content. To do that, we'll focus on an object called \u003ccode\u003edocument\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e has \u003cem\u003eproperties\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eURL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; https://en.wikipedia.org/wiki/Ada_Lovelace\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs an \u003cem\u003eobject\u003c/em\u003e, \u003ccode\u003edocument\u003c/code\u003e also has \u003cem\u003emethods\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eh1\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; Returns the element on the page with an id attribute equal to \"firstHeading\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003cem\u003emethods\u003c/em\u003e and \u003cem\u003eproperties\u003c/em\u003e that the DOM provides via its objects is called\nthe DOM's \"Application Programming Interface,\" or \"API.\" It's just a programming\nword that you're likely to see online. But it just means \"the things that these\nobjects know how to do.\"\u003c/p\u003e\n\n\u003ch2\u003eThe Browser Console and Chrome Developer Tools\u003c/h2\u003e\n\n\u003cp\u003eEvery major browser comes with a built-in set of developer tools that you can\nuse to inspect, modify, and debug the content of a web page. To \u003ca href=\"https://developers.google.com/web/tools/chrome-devtools/console/#open_as_panel\"\u003eopen the dev\ntools in Chrome\u003c/a\u003e, press \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e (Windows / Linux) or\n\u003ccode\u003eCmd+Opt+J\u003c/code\u003e (Mac). Chrome ships with a whole suite of useful developer tools,\nbut the only one we care about for now is the JavaScript console.\u003c/p\u003e\n\n\u003cp\u003eThe console is an environment in the browser where we can type and run\nJavaScript code in the context of the current browser window. The console is\n\u003cem\u003esandboxed\u003c/em\u003e, meaning the only resources it has access to are those loaded on the\ncurrent page. Once we start declaring variables and functions in separate\nJavaScript files, we'll be able to access and play around with them in the\nconsole. The console is the single best tool for debugging JavaScript in the\nbrowser, so start familiarizing yourself with it now.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003eCtrl+Shift+J\u003c/code\u003e / \u003ccode\u003eCmd+Opt+J\u003c/code\u003e command should open up straight into the\nconsole. If for whatever reason, it doesn't, you can always click on \u003ccode\u003eConsole\u003c/code\u003e\nin the dropdown (when the DevTools are collapsed) or in the list of tabs:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/opening_the_console.gif\" alt=\"Opening the console\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIf at any point the console becomes cluttered with errors, warnings, or anything\nelse, click the \u003ccode\u003eClear console\u003c/code\u003e button:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/clearing_the_console.gif\" alt=\"Clearing the console\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOkay, okay, enough background and setup. Let's write some code!\u003c/p\u003e\n\n\u003ch3\u003eCoding in the Console\u003c/h3\u003e\n\n\u003cp\u003eYou can write and test out JavaScript code in the console. We'll start off with\nsome simple math. In the console, type \u003ccode\u003e1 + 1\u003c/code\u003e and press enter. You should see\nthe number \u003ccode\u003e2\u003c/code\u003e appear.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/math_in_console.gif\" alt=\"Math in the console\"\u003e\u003c/p\u003e\n\n\u003cp\u003eTry out some other mathematical expressions and see what they return.\u003c/p\u003e\n\n\u003cp\u003eNext up, let's write some text. To make sure the JavaScript engine knows that\nwe're trying to write some literal text, we need to wrap it in quotation marks,\nlike so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThis is some literal text in JavaScript!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGo ahead and type that classic phrase, \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e, into the console and\npress enter. It returned \u003ccode\u003e\"Hello, world!\"\u003c/code\u003e right back to us. Try typing some\nmore literal text into the console, such as your name. Don't forget the\nquotation marks!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/web-development/js/basics/intro-to-javascript/text_in_console_300.gif\" alt=\"Text in the console\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can go far beyond simple literal expressions: we can create variables, loops,\nor if statements in the console. We can even define and run functions!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It's impossible to overstate how important practice is when you're\nlearning a new programming language. As you continue moving through the\nJavaScript curriculum, you should almost always have a browser console open.\nCode along with every example. Get used to the syntax and familiarize yourself\nwith the errors that arise when you mistype something. Clear the console or\nsimply refresh the page whenever you need a clean slate. Code, code, code,\n\u003cstrong\u003ecode\u003c/strong\u003e, \u003cstrong\u003e\u003cem\u003ecode\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eOpening Files in the Browser\u003c/h2\u003e\n\n\u003cp\u003eIn this section, you will begin working with HTML files (most often,\n\u003ccode\u003eindex.html\u003c/code\u003e). In order to view the results of the coding you'll be doing,\nyou'll need to open the file in the browser. Instructions for each programming\nenvironment are as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLocal environment on Mac\u003c/strong\u003e: Run \u003ccode\u003eopen index.html\u003c/code\u003e in the terminal.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLocal environment using WSL/Ubuntu\u003c/strong\u003e: Run \u003ccode\u003eexplorer.exe index.html\u003c/code\u003e in the\nterminal.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eKeep these instructions handy — you will be doing this often.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e In order for these instructions to work, you will need to have\nGoogle Chrome set as your default browser. You can find\n\u003ca href=\"https://support.google.com/chrome/answer/95417?hl=en\u0026amp;co=GENIE.Platform=Desktop\"\u003einstructions for Mac and Windows here\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson we learned about the DOM, which is a \"middle layer\" that presents\nthe HTML, CSS and JavaScript loaded by the browser when we visit a page. We\nnormally interact with it through the \u003ccode\u003edocument\u003c/code\u003e object. Because it is the\n\"source of truth\" for what browsers display, changes to the DOM create changes\nin the browser screen. We also learned how to access the Chrome Developer Tools\nand use the Console to try out code as we're building our programs.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/dom/\"\u003eCSS Tricks - What is the DOM?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\"\u003eMDN - The DOM\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "introduction-to-the-dom"
          },
          {
            "id": 432929,
            "title": "DOM Editing Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-editing-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIdentify that DOM nodes are written as HTML\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've started looking at the DOM and how it's created. Now it's time to see its\nstructure.\u003c/p\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code.\u003c/p\u003e\n\n\u003ch2\u003eIdentify That DOM Nodes Are Written As HTML\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson, we learned that, when we load a web page in a browser,\nthe content we see in the DOM is a representation of the underlying HTML, CSS\nand JavaScript. If we were to view the DOM in Chrome Dev Tools (we'll learn how\nto do that shortly), we would see HTML that is a clone of the HTML found in the\nsource HTML file. As we learned earlier in the course, that HTML consists of\n\u003cem\u003eelements\u003c/em\u003e that in turn consist of HTML \u003cem\u003etags\u003c/em\u003e and their content.\u003c/p\u003e\n\n\u003cp\u003eWhen we're working in the DOM, the structure is the same. We can access objects\nin the DOM (called \u003cem\u003enodes\u003c/em\u003e) that consist of tags, just like the HTML elements\nthat make up the base HTML. Nodes and elements are not the same thing —\nall elements in the DOM are nodes but not all nodes are HTML elements. However,\nwhen we're working in the DOM, the nodes we access and modify are virtually\nalways HTML elements.\u003c/p\u003e\n\n\u003ch3\u003eThe Structure of DOM Content\u003c/h3\u003e\n\n\u003cp\u003eWe'll start by going over how content in the DOM is structured using nodes. The\ninformation below should be familiar from what you've learned about HTML\nelements.\u003c/p\u003e\n\n\u003cp\u003eDOM nodes most often have a starting tag and an ending tag. Examples include a\nparagraph:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI am a paragraph.\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eor a \u003ccode\u003emain\u003c/code\u003e section:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;main\u0026gt;\u0026lt;/main\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBecause they have both starting and ending tags, we can nest other nodes inside\nthem. The inner node is called a child node, and the outer node is called a\nparent node. To nest items, we simply add the child node and its content between\nits parent's starting and ending tags:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;main\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eI am a nested paragraph, inside the main element, inside the body!\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/main\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSome nodes only have a starting tag. Those are called \u003cem\u003eself-closing elements\u003c/em\u003e or\n\u003cem\u003evoid elements\u003c/em\u003e. Void elements do not have any content nested inside of them and\ncannot be parent nodes.\u003c/p\u003e\n\n\u003cp\u003eAn example of a self-closing tag is an image:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ealt=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"A cartoon gif\"\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn self-closing tags, the trailing \u003ccode\u003e/\u003c/code\u003e is optional. This is valid too:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e\n  \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\"\u003c/span\u003e\n  \u003cspan class=\"na\"\u003ealt=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"A cartoon gif\"\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEnough review, let's write some HTML!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eStart by running the tests and taking a look through the errors. You'll see that\nthe tests are looking for certain content to be present in the HTML file.\u003c/p\u003e\n\n\u003cp\u003eNext, open the \u003ccode\u003eindex.html\u003c/code\u003e file in the browser using the instructions in the\nprevious lesson for your development environment.\u003c/p\u003e\n\n\u003cp\u003eJust to speed things up a bit, paste the following code into \u003ccode\u003eindex.html\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u003c/span\u003e \u003cspan class=\"na\"\u003elang=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"en\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003echarset=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"UTF-8\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003ename=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"viewport\"\u003c/span\u003e \u003cspan class=\"na\"\u003econtent=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"width=device-width, initial-scale=1.0\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;meta\u003c/span\u003e \u003cspan class=\"na\"\u003ehttp-equiv=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"X-UA-Compatible\"\u003c/span\u003e \u003cspan class=\"na\"\u003econtent=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"ie=edge\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eIntroduction to the DOM Lab\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e\u0026lt;!--All our work for this lesson will go here--\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRefresh the browser page to see the changes.\u003c/p\u003e\n\n\u003cp\u003eOpen the Google Developer Tools by clicking on the \"View\" menu and selecting\nDeveloper -\u0026gt; Developer Tools. The Elements tab should be selected but, if it\nisn't, click on it. Here we have the DOM representation of the HTML source\nloaded by the browser. You should see the \u003ccode\u003ehead\u003c/code\u003e and \u003ccode\u003ebody\u003c/code\u003e elements nested\ninside the \u003ccode\u003ehtml\u003c/code\u003e element. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the\ndisclosure triangle to expand it. You should see that the \u003ccode\u003ebody\u003c/code\u003e element is,\ntemporarily, child-less. Let's go ahead and start adding some content in\n\u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: the\n\u003ca href=\"https://en.wikipedia.org/wiki/Disclosure_widget\"\u003edisclosure triangle\u003c/a\u003e is the\ntriangle to the left of the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e tag. When you first open the Elements tab,\nthe nodes are generally collapsed, hiding their contents. You can click the\ntriangle to expand the node and see its contents. Disclosure triangles are\nstandard for hiding information throughout Chrome DevTools. If you want to see\nmore, feel free to click on the triangle! You're not going to break anything.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-1/dom-editing-lab/disclosure-triangle.png\" alt=\"Disclosure Triangle\"\u003e\u003c/p\u003e\n\n\u003cp\u003eFirst, let's add a title to our page:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eMy HTML adventure\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRefresh the page to see the changes displayed in the browser. If you view the\nElements tab again, you should see that a new child node is nested inside the\n\u003ccode\u003ebody\u003c/code\u003e. Finally, run the tests again; the first test should now be passing.\u003c/p\u003e\n\n\u003cp\u003eNext, we'll add a paragraph below the title. We'll also add some highlighted\nbits of text to the paragraph to make it stand out a little.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003e\n  We're writing HTML markup to display in our \u003cspan class=\"nt\"\u003e\u0026lt;strong\u0026gt;\u003c/span\u003ebrowser\u003cspan class=\"nt\"\u003e\u0026lt;/strong\u0026gt;\u003c/span\u003e. We're\n  basically telling computers what to do. \u003cspan class=\"nt\"\u003e\u0026lt;em\u0026gt;\u003c/span\u003eNeat!\u003cspan class=\"nt\"\u003e\u0026lt;/em\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSave the file and check out the page in the 'Elements' tab. What's happening\nabove is that we added some inline elements, \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e to our\nparagraph to style things a little. The \u003ccode\u003e\u0026lt;strong\u0026gt;\u003c/code\u003e tag makes any text within\nlook \u003cstrong\u003eimportant\u003c/strong\u003e. It's usually bold in browsers by default. The \u003ccode\u003e\u0026lt;em\u0026gt;\u003c/code\u003e tag\nallows us to \u003cem\u003eemphasize\u003c/em\u003e certain text. This text is typically rendered as italic\nin browsers.\u003c/p\u003e\n\n\u003cp\u003eRun the tests again; you should now have all but two of the tests passing.\u003c/p\u003e\n\n\u003cp\u003eIn our paragraph, let's make \"HTML\" a hyperlink and link to the MDN definition.\nWe'll use the\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag for this. Add this to our existing \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003eWe're writing\n\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"https://developer.mozilla.org/en-US/docs/Web/HTML\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eHTML\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e markup to\ndisplay in our \u003cspan class=\"nt\"\u003e\u0026lt;strong\u0026gt;\u003c/span\u003ebrowser\u003cspan class=\"nt\"\u003e\u0026lt;/strong\u0026gt;\u003c/span\u003e.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that HTML attributes (in this case, the \u003ccode\u003ehref\u003c/code\u003e attribute) are shown\nalongside their opening tag.\u003c/p\u003e\n\n\u003cp\u003eLastly, we'll add a table below the paragraph to recap some of the stuff in\nthis lesson:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;table\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;thead\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;th\u0026gt;\u003c/span\u003eElement name\u003cspan class=\"nt\"\u003e\u0026lt;/th\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;th\u0026gt;\u003c/span\u003eDisplay value\u003cspan class=\"nt\"\u003e\u0026lt;/th\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/thead\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;tbody\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eh1\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eblock\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003ep\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eblock\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003estrong\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003einline\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;tr\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003eem\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;td\u0026gt;\u003c/span\u003einline\u003cspan class=\"nt\"\u003e\u0026lt;/td\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/tr\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/tbody\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/table\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWoah. That's a \u003cstrong\u003elot\u003c/strong\u003e of markup! If you take a look at the result, though,\nyou'll see that it's a fairly complex visual — it's a table! Our table\nconsists of a header and a body. The header allows us to give the columns a\nname, and the table body contains the rows of content. Both \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e and\n\u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e tags contains rows, which are represented as \u003ccode\u003e\u0026lt;tr\u0026gt;\u003c/code\u003e (table row). These\nrows then contain cells which form the table's columns. In the \u003ccode\u003e\u0026lt;thead\u0026gt;\u003c/code\u003e row,\ncells are represented as \u003ccode\u003e\u0026lt;th\u0026gt;\u003c/code\u003e, while cells in \u003ccode\u003e\u0026lt;tbody\u0026gt;\u003c/code\u003e have their content in\n\u003ccode\u003e\u0026lt;td\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e\n\n\u003cp\u003eThat's a \u003cem\u003elot\u003c/em\u003e of nesting.\u003c/p\u003e\n\n\u003cp\u003eLook again at the Elements tab. Expand out all the children of the \u003ccode\u003etable\u003c/code\u003e.\nThis is the DOM tree!\u003c/p\u003e\n\n\u003cp\u003eWhen you're done, go ahead and run the tests. They should now all be passing.\u003c/p\u003e",
            "exportId": "g9353e302b64c1b533c82aa8fd5242d3a"
          },
          {
            "id": 432930,
            "title": "Changing The DOM with DevTools and JavaScript",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-dev-tools\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-dev-tools/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDemonstrate viewing the DOM through Chrome DevTools\u003c/li\u003e\n\u003cli\u003eSelect an element with Chrome DevTools\u003c/li\u003e\n\u003cli\u003eDelete an element with Chrome DevTools\u003c/li\u003e\n\u003cli\u003eDemonstrate that the source is not changed when the DOM is\u003c/li\u003e\n\u003cli\u003eDemonstrate opening the DevTools' JavaScript console\u003c/li\u003e\n\u003cli\u003eSelect an element with JavaScript\u003c/li\u003e\n\u003cli\u003eDelete an element with JavaScript\u003c/li\u003e\n\u003cli\u003eStoring node references in variables\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've read that updating the DOM will update the browser's rendered page. Let's\ntry this out. We're going to change the DOM in two ways. First, we'll use\nChrome's Developer Tools (\"DevTools\") and our mouse to remove an element from\nthe DOM. Then we'll use the DevTools' JavaScript console to run JavaScript that\ndoes the same thing.\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate Viewing the DOM Through Chrome DevTools\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/ada-wiki.png\" alt=\"ada-wiki\"\u003e\u003c/p\u003e\n\n\u003cp\u003eLet's head back to the \u003ca href=\"https://en.wikipedia.org/wiki/Ada_Lovelace\"\u003eWikipedia page for Ada Lovelace\u003c/a\u003e. From this\nweb page, look at the Chrome menu bar at the top of the page. Click on \"View\",\nthen select \"Developer\", then \"Developer Tools.\" This will open the Google\nDeveloper Tools. Click on the \"Elements\" tab. Here we see the DOM representation\nof the HTML source that was loaded into the browser.\u003c/p\u003e\n\n\u003ch3\u003eSelect an Element With Chrome DevTools\u003c/h3\u003e\n\n\u003cp\u003eScroll through the Elements panel. You will see some HTML: \u003ccode\u003ehead\u003c/code\u003e tags, \u003ccode\u003ebody\u003c/code\u003e\ntags, \u003ccode\u003ediv\u003c/code\u003es, etc. If the \u003ccode\u003ebody\u003c/code\u003e element is collapsed, use the disclosure\ntriangle to expand it. Notice that you can mouse over different elements in the\nElements panel and see them highlighted in the browser window. Locate the \u003ccode\u003ediv\u003c/code\u003e\nnested inside \u003ccode\u003ebody\u003c/code\u003e that has an \u003ccode\u003eid\u003c/code\u003e attribute of \"content\" and expand that as\nwell.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/content-element.png\" alt=\"content-element\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNext, locate the \u003ccode\u003eh1\u003c/code\u003e element nested inside the \"content\" div. It should look\nsomething like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/h1-element.png\" alt=\"h1-element\"\u003e\u003c/p\u003e\n\n\u003cp\u003eClick on the \u003ccode\u003eh1\u003c/code\u003e element; you'll see that it's highlighted in the Elements\npanel. You've now selected an element with the DevTools.\u003c/p\u003e\n\n\u003ch3\u003eDelete an Element With Chrome DevTools\u003c/h3\u003e\n\n\u003cp\u003ePress the delete button on your keyboard. The element will vanish from the\nbrowser's rendered page.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/deleted-header.png\" alt=\"deleted-header\"\u003e\u003c/p\u003e\n\n\u003ch3\u003eDemonstrate That the Source is Not Changed When the DOM Is\u003c/h3\u003e\n\n\u003cp\u003eView the page source. In the Chrome menu bar, click on \"View\", then select\n\"Developer\", then \"View Source.\" You will see that the HTML is just as it\nalways was, with the deleted element still present.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/the-dom-dev-tools/html-source.png\" alt=\"html-source\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe changes in the DOM do not affect the HTML file on the server. When you think\nabout it, that makes sense. If that were true then anyone could be changing\ncarefully-written HTML. (Of course, in the case of Wikipedia, people \u003cem\u003ecan\u003c/em\u003e edit\nthe content using Wikipedia's editor, but they aren't directly accessing the\nunderlying HTML.)\u003c/p\u003e\n\n\u003cp\u003eThe HTML, which lives on the server, \u003cstrong\u003eis unchanged\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eRefresh the page by going to \"View\" and choosing \"Reload this Page.\" You will be\nreloading the DOM \u003cem\u003efrom the source\u003c/em\u003e. The page content will come back.\u003c/p\u003e\n\n\u003ch3\u003eDemonstrate Opening the DevTools' JavaScript Console\u003c/h3\u003e\n\n\u003cp\u003eAbove, we deleted an element by selecting it in the DevTools and pressing the\ndelete key. We can accomplish the same thing using JavaScript.\u003c/p\u003e\n\n\u003cp\u003eIn DevTools, click the \u003cstrong\u003eConsole\u003c/strong\u003e tab. At the prompt, type the word \u003ccode\u003edocument\u003c/code\u003e\nand press \"Enter.\" You'll get a \u003ccode\u003e#document\u003c/code\u003e returned. If you hover your mouse\nover the element, you'll see the entire page highlighted in the browser window.\nIf you expand it, you'll see that it's the exact HTML that you saw in the\n\u003cstrong\u003eElements\u003c/strong\u003e tab.\u003c/p\u003e\n\n\u003cp\u003eRecall that \u003ccode\u003edocument\u003c/code\u003e is an \u003ccode\u003eobject\u003c/code\u003e; as such, it has properties and \u003ccode\u003emethods\u003c/code\u003e,\nincluding a number of different methods that can be used to return elements.\nLet's find or \u003ccode\u003eselect\u003c/code\u003e an element by speaking JavaScript with the DOM.\u003c/p\u003e\n\n\u003ch3\u003eSelect an Element With JavaScript\u003c/h3\u003e\n\n\u003cp\u003eIn the \u003cstrong\u003eConsole\u003c/strong\u003e type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e  \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eh1\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis will return something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eh1\u003c/span\u003e \u003cspan class=\"nx\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003efirstHeading\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003efirstHeading\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e \u003cspan class=\"nx\"\u003elang\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003een\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"sr\"\u003e/h1\u003c/span\u003e\u003cspan class=\"err\"\u003e\u0026gt;\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGo ahead and click on that disclosure triangle to see more.\u003c/p\u003e\n\n\u003cp\u003eWhen we run \u003ccode\u003edocument.querySelector('h1');\u003c/code\u003e, it returns the DOM node, which is\nalso a JavaScript \u003ccode\u003eobject\u003c/code\u003e. This means that it, in turn, can have methods called\non it! This is called \u003cem\u003emethod chaining\u003c/em\u003e. Let's use \u003cem\u003emethod chaining\u003c/em\u003e to remove\nour node from the DOM.\u003c/p\u003e\n\n\u003ch3\u003eDelete an Element with JavaScript\u003c/h3\u003e\n\n\u003cp\u003eNow type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e  \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eh1\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe heading is gone! We called \u003ccode\u003edocument.querySelector('h1')\u003c/code\u003e to get the node;\nwe then used \u003cem\u003emethod chaining\u003c/em\u003e to call the \u003ccode\u003eremove()\u003c/code\u003e method on the node object.\nWe use dot notation to \u003cem\u003echain\u003c/em\u003e the calls.\u003c/p\u003e\n\n\u003cp\u003eFollow the same process we used earlier to verify that the source has not\nchanged. To restore it, simply refresh the page (i.e. reload the DOM).\u003c/p\u003e\n\n\u003ch3\u003eStoring Node References in Variables\u003c/h3\u003e\n\n\u003cp\u003eQuery methods like \u003ccode\u003equerySelector()\u003c/code\u003e and the other methods we'll be learning\nabout are expressions: they return a value (specifically, a DOM node). As such,\nwe can save the results of the query into a variable. For example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eheader\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eh1\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe now have a reference to that node with a meaningful name; we can simply use\n\u003ccode\u003eheader\u003c/code\u003e any time we need to refer to our node, rather than always having to\nlook it up with \u003ccode\u003edocument.querySelector()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can perhaps imagine how, if we have a program that selects, creates,\nmodifies, or removes a large number of nodes, using this approach will result in\ncode that's easier to read, debug and maintain.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAsk the DOM to find or \u003ccode\u003eselect\u003c/code\u003e an HTML element or elements in the rendered page\u003c/li\u003e\n\u003cli\u003eRemove the selected element(s) and/or insert new element(s)\u003c/li\u003e\n\u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn this lesson you just did all that stuff! Learning to duplicate what you can\ndo in DevTools with JavaScript \u003cstrong\u003e\u003cem\u003eis\u003c/em\u003e\u003c/strong\u003e DOM programming. The next lessons are\ngoing to give you more methods for selecting elements and changing them, but you\njust changed the DOM. High fives are in order.\u003c/p\u003e",
            "exportId": "changing-the-dom-with-devtools-and-javascript"
          },
          {
            "id": 432931,
            "title": "The DOM Is a Tree",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-is-a-tree\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-is-a-tree/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDescribe how the DOM works as a tree\u003c/li\u003e\n\u003cli\u003eDefine the computer science version of \"Tree\"\u003c/li\u003e\n\u003cli\u003eAsk the DOM to find or \"select\" an HTML element or elements in the rendered\npage\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eDOM programming is using JavaScript to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAsk the DOM to find an HTML element or elements in the rendered page\u003c/li\u003e\n\u003cli\u003eRemove the selected element(s) or add a new element next to the selected\nelement\u003c/li\u003e\n\u003cli\u003eAdjust a property of the selected element(s)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn previous lessons we were given the command to find the HTML element we\nwanted:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eselector\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003cem\u003eselector\u003c/em\u003e is like a query string that lets us find things within an HTML\npage. What is the syntax of this \u003cem\u003eselector\u003c/em\u003e? How does the \u003cem\u003eselector\u003c/em\u003e navigate\nthrough our document to find the DOM nodes that we want to work with (update,\nmove, even delete!)?\u003c/p\u003e\n\n\u003cp\u003eTo understand those queries or \u003cem\u003eselectors\u003c/em\u003e, we first need to talk about how the\nDOM tree (i.e. what we see in the 'Elements' panel of our DevTools) is used to\nhelp the DOM's \u003ccode\u003emethods\u003c/code\u003e find the right nodes.\u003c/p\u003e\n\n\u003ch3\u003eDefine the Computer Science Version of \"Tree\"\u003c/h3\u003e\n\n\u003cp\u003eWhat do we mean when we say that the DOM is a tree? Trees make a good metaphor\nfor the DOM because almost everyone has seen a tree. Starting at the bottom, you\ncan climb up the tree and out to the farthest — and smallest —\nbranches. The thicker a branch is, the stronger its connections are and the more\nit holds within it. Likewise, the thinner a branch is, the less it holds inside.\u003c/p\u003e\n\n\u003cp\u003eThe DOM works basically the same way, except we usually talk about the root as\nbeing at the top of the DOM and the leaves being the most deeply nested HTML\nelements. So basically, we can imagine a tree upside down.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-the-dom-tree/Image_6_DomTree.png\" alt=\"DOM Tree Graphic\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe HTML for this \"tree\" would be:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eMy Title\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eA heading\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"http://example.com\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eLink text\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eDescribe How the DOM Works as a Tree\u003c/h3\u003e\n\n\u003cp\u003eEvery tree can contain subtrees, which we can treat independently of their\nparent trees. They repeat the pattern and appearance of the full tree, despite\nbeing a smaller part of a tree, like branches. Every child has experienced this\nsense of wonder when they take a fallen branch and stick it in the ground and\nthink that they've planted their own tree.\u003c/p\u003e\n\n\u003cp\u003ePractically speaking, the DOM begins at \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e, but for now we should avoid\nchanging what's between the \u003ccode\u003e\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;\u003c/code\u003e tags. Most of the time, we will look\nat the DOM subtree with its root at \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e and only change things that will be\nvisible on the page. We might also deal with subtrees. For example, if we have\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eHi!\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eBye!\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOur tree looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e        body\n        /  \\\n      div   div\n      /      \\\n     p        p\n    /          \\\n \"Hi!\"        \"Bye!\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSimilarly, if we had a DOM subtree that looked like\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eHello!\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;h5\u0026gt;\u003c/span\u003eSup?\u003cspan class=\"nt\"\u003e\u0026lt;/h5\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe tree would look like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e         div\n        /  \\\n      div   div\n      /      \\\n    h1        h5\n    /          \\\n \"Hello!\"     \"Sup?\"\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eFinding HTML Elements\u003c/h3\u003e\n\n\u003cp\u003eIn creating the HTML for a page, including \u003cem\u003emetadata\u003c/em\u003e for a node (e.g., a \u003ccode\u003eclass\u003c/code\u003e\nor \u003ccode\u003eid\u003c/code\u003e attribute) will not only provide useful information about that node, but\nwill also make it and its children easier to find. The more specific the\nmetadata is, the more helpful it is for finding the desired element.\u003c/p\u003e\n\n\u003cp\u003eFor the following exercises, you can experiment with any web page you like. It's\nfun to change \u003cem\u003eThe New York Times\u003c/em\u003e or Facebook.\u003c/p\u003e\n\n\u003ch4\u003eFinding a Node\u003c/h4\u003e\n\n\u003cp\u003eJavaScript exposes a few ways of finding DOM nodes, either directly or in\nstages, courtesy of the \u003ccode\u003edocument\u003c/code\u003e object. We will introduce three here, in\norder from most to least specific: \u003ccode\u003egetElementByID()\u003c/code\u003e,\n\u003ccode\u003egetElementsByClassName()\u003c/code\u003e, and \u003ccode\u003egetElementsByTagName()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch5\u003e\u003ccode\u003edocument.getElementById()\u003c/code\u003e\u003c/h5\u003e\n\n\u003cp\u003eThis method provides the quickest access to a node, but it requires that we know\na very specific piece of information — its \u003ccode\u003eid\u003c/code\u003e. This method can only\nreturn one element, since CSS \u003ccode\u003eid\u003c/code\u003es are expected to be unique.\u003c/p\u003e\n\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;h5\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"greeting\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eHello!\u003cspan class=\"nt\"\u003e\u0026lt;/h5\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe could find the \u003ccode\u003eh5\u003c/code\u003e element with \u003ccode\u003edocument.getElementById('greeting')\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNotice how the \u003ccode\u003eid\u003c/code\u003e that we pass to \u003ccode\u003egetElementById\u003c/code\u003e is identical to the \u003ccode\u003eid\u003c/code\u003e in\n\u003ccode\u003e\u0026lt;h5 id=\"greeting\"\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can use either single(\u003ccode\u003e''\u003c/code\u003e) or double(\u003ccode\u003e\"\"\u003c/code\u003e) quotes around the \u003ccode\u003eid\u003c/code\u003e\nwithin the parentheses in \u003ccode\u003edocument.getElementById('yourIDGoesHere')\u003c/code\u003e, as long\nas you use the same kind to open and close them!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eOpen up your DevTools and find an element on the page that has an \u003ccode\u003eid\u003c/code\u003e\nattribute. Then open up your console, type\n\u003ccode\u003edocument.getElementById('theIdOfTheElement')\u003c/code\u003e, and check out your handy-dandy\nDOM node.\u003c/p\u003e\n\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis one is also very commonly used in DOM programming.\u003c/p\u003e\n\n\u003cp\u003eThis method finds elements by their \u003ccode\u003eclassName\u003c/code\u003e. Unlike the previous method,\nclass names do not need to be unique, so this method returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e\nof all the elements with the given class. An \u003ccode\u003eHTMLCollection\u003c/code\u003e is an array-like\nstructure containing a list of elements. You can iterate over an\n\u003ccode\u003eHTMLCollection\u003c/code\u003e with a simple \u003ccode\u003efor\u003c/code\u003e loop.\u003c/p\u003e\n\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\u0026lt;!-- the `className` attribute is called `class` in HTML  --\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"banner\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eHello!\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"banner\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eSup?\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"banner\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;h5\u0026gt;\u003c/span\u003eTinier heading\u003cspan class=\"nt\"\u003e\u0026lt;/h5\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe could find all of the elements with the class name \"banner\" by calling\n\u003ccode\u003edocument.getElementsByClassName('banner')\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eInspect your web page again, this time making note of a \u003ccode\u003eclass\u003c/code\u003e. Get all\nelements with that \u003ccode\u003eclass\u003c/code\u003e and give 'em a look. On the returned object you can\nuse the \u003ccode\u003e.length\u003c/code\u003e property to find out how many came back.\u003c/p\u003e\n\n\u003cp\u003eIf you recall the \u003ccode\u003efor\u003c/code\u003e loop syntax you might try to write a loop which prints\nout the \u003ccode\u003einnerHTML\u003c/code\u003e property of every element in the collection. You might find\ndoing so much easier if you save the results of\n\u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e to a variable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eelements\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementsByClassName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eyourClassNameHere\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4\u003e\u003ccode\u003edocument.getElementsByTagName()\u003c/code\u003e\u003c/h4\u003e\n\n\u003cp\u003eYou can use this method if you \u003cem\u003edon't\u003c/em\u003e know an element's \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e, but\nyou \u003cem\u003edo\u003c/em\u003e know its tag name (the tag name is the thing between the \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e, e.g.,\n\u003ccode\u003ediv\u003c/code\u003e, \u003ccode\u003eh1\u003c/code\u003e, \u003ccode\u003eheader\u003c/code\u003e, \u003ccode\u003earticle\u003c/code\u003e etc.). Since tag names aren't unique, this\nmethod also returns an \u003ccode\u003eHTMLCollection\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTry it out!\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eExplore the DOM in the console by typing \u003ccode\u003edocument.getElementsByTagName('div')\u003c/code\u003e.\nYou can iterate through these elements using a simple \u003ccode\u003efor\u003c/code\u003e loop as well.\u003c/p\u003e\n\n\u003ch4\u003eFinding a Node Without Knowing Anything About It\u003c/h4\u003e\n\n\u003cp\u003eWhat if we don't have an \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003eclassName\u003c/code\u003e to help us find a particular\nelement? This is where our knowledge of trees comes in handy!\u003c/p\u003e\n\n\u003cp\u003eGiven the following DOM tree:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;main\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eHello!\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eHello!\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u003c/span\u003eHello!\u003cspan class=\"nt\"\u003e\u0026lt;/p\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/main\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHow would we go about changing only the second \"Hello!\" to \"Goodbye!\"?\u003c/p\u003e\n\n\u003cp\u003eHere we're going to use a mix of different \u003ccode\u003emethods\u003c/code\u003e to accomplish the goal.\u003c/p\u003e\n\n\u003cp\u003eLet's start by getting the \u003ccode\u003e\u0026lt;main\u0026gt;\u003c/code\u003e element\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementsByTagName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003emain\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can get the children of \u003ccode\u003emain\u003c/code\u003e using \u003ccode\u003emain.children\u003c/code\u003e. This returns an\n\u003ccode\u003eHTMLCollection\u003c/code\u003e, so we can get the second child with \u003ccode\u003emain.children[1]\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esecondChild\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNext, we can get our \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e element. To constrain the search to just the children\nof the second child, we can call \u003ccode\u003egetElementsByTagName()\u003c/code\u003e \u003cstrong\u003edirectly on\n\u003ccode\u003esecondChild\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esecondChild\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementsByTagName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ep\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd lastly we can change an attribute on the \u003ccode\u003ep\u003c/code\u003e node:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eGoodbye!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eObviously, this way of accessing that text isn't very efficient and won't work\non all pages but it does a good job of demonstrating the basic tools available\nto us for finding and manipulating HTML elements.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eUnderstanding the tree structure of the DOM helps us navigate all kinds of\ntrees. In subtrees and branches we can find the nodes we need by IDs, class\nnames or tag names, or by using element attributes like \u003ccode\u003echildren\u003c/code\u003e. Once we've\nselected our elements, we can use JavaScript to manipulate them. By using these\ntechniques, we can start to build a richer user experience.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\"\u003eMDN - Document Object Model\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "the-dom-is-a-tree"
          },
          {
            "id": 432933,
            "title": "JavaScript Query Selector Methods",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-prework=\"true\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-query-selector-methods\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-query-selector-methods/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003equerySelector()\u003c/code\u003e and \u003ccode\u003equerySelectorAll()\u003c/code\u003e to find nested nodes\u003c/li\u003e\n\u003cli\u003eModify attributes of DOM nodes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eOne of the most essential skills in our web development toolbox is finding\nelements in the DOM.\u003c/p\u003e\n\n\u003cp\u003eWhile \u003ccode\u003edocument.getElementById()\u003c/code\u003e and \u003ccode\u003edocument.getElementsByClassName()\u003c/code\u003e are\ngood, we can improve our search when we use document structure (tag, \u003ccode\u003eid\u003c/code\u003e,\n\u003ccode\u003eclass\u003c/code\u003e) \u003cstrong\u003ealong with\u003c/strong\u003e the tree structure of the DOM. It turns out CSS is a\n\u003cem\u003egreat\u003c/em\u003e language for expressing those relationships! With the \u003ccode\u003equerySelector()\u003c/code\u003e\nand \u003ccode\u003equerySelectorAll()\u003c/code\u003e methods, we provide one or more CSS selectors as an\nargument and we get back the matching element or elements. Because they can take\na string containing multiple selectors, they allow us to create very specific,\ncomplex queries.\u003c/p\u003e\n\n\u003ch2\u003eFinding Nested Nodes\u003c/h2\u003e\n\n\u003cp\u003eIf you would like to follow along in the console, fork and clone this lesson,\nopen the files in your text editor, and open \u003ccode\u003eindex.html\u003c/code\u003e in Google Chrome. As\nyou go, copy each HTML example into \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003equerySelector()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode\u003equerySelector()\u003c/code\u003e method takes one argument, a string of one or more\nCSS-compatible \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e, and returns the \u003cem\u003efirst\u003c/em\u003e element that matches.\u003c/p\u003e\n\n\u003cp\u003eGiven a document like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003eHello!\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003eGoodbye!\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we called \u003ccode\u003edocument.querySelector('div')\u003c/code\u003e, the method would return the first\n\u003ccode\u003ediv\u003c/code\u003e. If we check its \u003ccode\u003einnerHTML\u003c/code\u003e, we should see \u003ccode\u003eHello!\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSelectors aren't limited to one tag name, though. Otherwise, why not just use\n\u003ccode\u003edocument.getElementsByTagName('div')[0]\u003c/code\u003e? We can get very specific.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;ul\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"ranked-list\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e1\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e2\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e3\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;ul\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"unranked-list\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e6\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e2\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e4\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eli2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eul.ranked-list li ul li\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eli2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ediv4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eul.unranked-list li div\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003ediv4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//=\u0026gt; \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the above example, the first query says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e (the\nobject we've called \u003ccode\u003equerySelector()\u003c/code\u003e on), find a \u003ccode\u003eul\u003c/code\u003e with a \u003ccode\u003eclassName\u003c/code\u003e of\n\u003ccode\u003eranked-list\u003c/code\u003e (recall from CSS that the \u003ccode\u003e.\u003c/code\u003e indicates that \u003ccode\u003eranked-list\u003c/code\u003e is a\n\u003ccode\u003eclassName\u003c/code\u003e). Then find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that \u003ccode\u003eul\u003c/code\u003e. Next find a\n\u003ccode\u003eul\u003c/code\u003e that is a descendant (but not necessarily a direct child) of that \u003ccode\u003eli\u003c/code\u003e.\nFinally, find an \u003ccode\u003eli\u003c/code\u003e that is a descendant of that (second) \u003ccode\u003eul\u003c/code\u003e.\"\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The HTML property \u003ccode\u003eclass\u003c/code\u003e is referred to as \u003ccode\u003eclassName\u003c/code\u003e in\nJavaScript.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhat does the second call to \u003ccode\u003equerySelector()\u003c/code\u003e say? Think about it for a\nminute, and then read on.\u003c/p\u003e\n\n\u003cp\u003eWait for it...\u003c/p\u003e\n\n\u003cp\u003eThe second call says, \"Starting from \u003ccode\u003edocument\u003c/code\u003e, find a \u003ccode\u003eul\u003c/code\u003e with a\n\u003ccode\u003eclassName\u003c/code\u003e of \u003ccode\u003eunranked-list\u003c/code\u003e. Then find an \u003ccode\u003eli\u003c/code\u003e descended from\n\u003ccode\u003eul.unranked-list\u003c/code\u003e and a \u003ccode\u003ediv\u003c/code\u003e descended from that \u003ccode\u003eli\u003c/code\u003e.\"\u003c/p\u003e\n\n\u003ch4\u003eCSS Selectors\u003c/h4\u003e\n\n\u003cp\u003eIf using CSS to target elements isn't feeling natural, now might be a good time\nto brush up on \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors\"\u003eselectors\u003c/a\u003e. Play around on the MDN page, then come\nback when you're ready.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003equerySelectorAll()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003e\u003ccode\u003equerySelectorAll()\u003c/code\u003e works a lot like \u003ccode\u003equerySelector()\u003c/code\u003e — it accepts a string\ncontaining one or more selectors as its argument, and it searches starting from\nthe object that it's called on (either \u003ccode\u003edocument\u003c/code\u003e or an element). However,\ninstead of returning the first match, it returns a \u003ccode\u003eNodeList\u003c/code\u003e collection of all\nmatching elements. A \u003ccode\u003eNodeList\u003c/code\u003e is similar to an \u003ccode\u003eHTMLCollection\u003c/code\u003e: it is an\narray-like structure containing, in this case, a list of DOM nodes.\u003c/p\u003e\n\n\u003cp\u003eGiven a document like\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;main\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"app\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;ul\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"ranked-list\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e1\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e2\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n\n    \u003cspan class=\"nt\"\u003e\u0026lt;ul\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"ranked-list\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e10\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e11\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/main\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we called:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eapp\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelectorAll\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eul.ranked-list li\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe'd get back a list of nodes corresponding to:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;10\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;11\u0026lt;/li\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThe DOM selection methods \u003ccode\u003edocument.querySelector()\u003c/code\u003e and\n\u003ccode\u003edocument.querySelectorAll()\u003c/code\u003e are powerful tools for finding the elements we\nneed to update and change. They use the familiar CSS selector syntax and allow\nus to create very specific queries that give us access to elements in complex\nDOM trees.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\"\u003edocument.querySelector()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\"\u003edocument.querySelectorAll()\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "javascript-query-selector-methods"
          },
          {
            "id": 432935,
            "title": "Creating and Inserting DOM Nodes Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-the-dom-modifying-elements-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate DOM elements programmatically\u003c/li\u003e\n\u003cli\u003eAdd elements to the DOM\u003c/li\u003e\n\u003cli\u003eUpdate elements using \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eChange properties on DOM nodes\u003c/li\u003e\n\u003cli\u003eRemove elements from the DOM\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow that you have an understanding of the DOM and powerful tools for selecting\nthe right elements, it's time to learn how to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate new nodes\u003c/li\u003e\n\u003cli\u003eDelete nodes\u003c/li\u003e\n\u003cli\u003eUpdate node properties\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code.\u003c/p\u003e\n\n\u003ch2\u003eCreate DOM Elements Programmatically\u003c/h2\u003e\n\n\u003ch3\u003e\u003ccode\u003edocument.createElement()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eCreating an element in JavaScript is an easy process. You simply call\n\u003ccode\u003edocument.createElement('tagName')\u003c/code\u003e, where \u003ccode\u003etagName\u003c/code\u003e is the name of any valid\nHTML tag (\u003ccode\u003e'p'\u003c/code\u003e, \u003ccode\u003e'div'\u003c/code\u003e, \u003ccode\u003e'span'\u003c/code\u003e, etc.).\u003c/p\u003e\n\n\u003cp\u003eOpen the \u003ccode\u003eindex.html\u003c/code\u003e file in your browser and open up the browser's console. In\nthe console, enter:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eelement\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ediv\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen take a look at the Elements tab. The element doesn't show up on the page.\nWhy not?\u003c/p\u003e\n\n\u003ch2\u003eAdd Elements to the DOM\u003c/h2\u003e\n\n\u003cp\u003eTo get an element to appear in the DOM, we have to \u003ccode\u003eappend()\u003c/code\u003e it to an existing\nDOM node. To go back to our tree metaphor, we have to glue our new leaf onto a\nbranch that's already there. We can start as high up on the tree as\n\u003ccode\u003edocument.body\u003c/code\u003e, or we can find a more specific element using any of the methods\nwe've learned for traversing the DOM.\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eappend()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eLet's append \u003ccode\u003eelement\u003c/code\u003e to \u003ccode\u003ebody\u003c/code\u003e to start:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(Recall that \u003ccode\u003eelement\u003c/code\u003e is a variable containing the \u003ccode\u003ediv\u003c/code\u003e we created above.)\u003c/p\u003e\n\n\u003cp\u003eNow if you look at the Elements tab, you'll see our new (empty) \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e nested\ninside the \u003ccode\u003ebody\u003c/code\u003e element.\u003c/p\u003e\n\n\u003cp\u003eNext, let's create an unordered list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eul\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eul\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo populate our unordered list, we'll use a \u003ccode\u003efor\u003c/code\u003e loop to create three \u003ccode\u003eli\u003c/code\u003e's,\ngive them some content, and append them to the \u003ccode\u003eul\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eli\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eli\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eli\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eul\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eli\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn each iteration of our loop, we calculate the value \u003ccode\u003ei + 1\u003c/code\u003e (an integer), turn\nit into a string using JavaScript's \u003ccode\u003etoString()\u003c/code\u003e method, and assign the result\nas the value of the \u003ccode\u003eli\u003c/code\u003e's \u003ccode\u003etextContent\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNote: although the \u003ccode\u003etextContent\u003c/code\u003e attribute must be a string, the code would\nstill work even if we didn't use the \u003ccode\u003etoString()\u003c/code\u003e method — JavaScript will\nturn the value into a string for us. However, for clarity and completeness, it\nis best to set it to a string value explicitly.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFinally, we'll append the \u003ccode\u003eul\u003c/code\u003e to the \u003ccode\u003ediv\u003c/code\u003e we created:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eul\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should now see the unordered list rendered on the page, and see the new\nelements in the \"Elements\" tab, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;div\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e1\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e2\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e3\u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that, each time we create a new element, we create a variable and save a\nreference to it. That makes it quite easy to make additional updates and to add\nit to the DOM using \u003ccode\u003eappend()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eAdd Elements to the DOM via \u003ccode\u003einnerHTML\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eCreating elements and then appending them into the DOM is a multi-step process.\nIt's also the \u003cstrong\u003e\u003cem\u003esafest and most reliable way\u003c/em\u003e\u003c/strong\u003e to add content to the DOM. Most\nrepeated code can be removed by using variables, functions and loops. It's The\nRight Way.\u003c/p\u003e\n\n\u003cp\u003eThat said, however, there's another process that will also work, using\n\u003ccode\u003eElement.innerHTML\u003c/code\u003e. Inside our loop above, we create an \u003ccode\u003eli\u003c/code\u003e element and set\nits \u003ccode\u003etextContent\u003c/code\u003e property to a simple number (expressed as a string) that\nrepresents the current iteration through the loop. Once we append the \u003ccode\u003eli\u003c/code\u003e to\nthe \u003ccode\u003eul\u003c/code\u003e and the \u003ccode\u003eul\u003c/code\u003e to the document \u003ccode\u003ebody\u003c/code\u003e, we see our unordered list in the\nbrowser window. This is a perfectly valid way to use \u003ccode\u003etextContent\u003c/code\u003e to add\ncontent to the DOM — essentially, \u003ccode\u003etextContent\u003c/code\u003e changes only what text shows up\ninside a DOM element:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eli\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eHi there!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \u0026lt;li\u0026gt;Hi there!\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eli\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// =\u0026gt; \"Hi there!\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eImagine, however, that we want to add content that's more complicated.\u003c/p\u003e\n\n\u003cp\u003eAssume our HTML includes a \u003ccode\u003emain\u003c/code\u003e element with an \u003ccode\u003eid\u003c/code\u003e of \"main.\" We can grab\nthat element and set its \u003ccode\u003einnerHTML\u003c/code\u003e attribute to any HTML we like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003emain\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003einnerHTML\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n  \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;h1\u0026gt;Poodles!\u0026lt;/h1\u0026gt;\u0026lt;h3\u0026gt;An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective\u0026lt;/h3\u0026gt;\u0026lt;p\u0026gt;\u0026lt;em\u0026gt;By: Byron Q. Poodle, Esq., BA.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere we are using one big, long string, complete with multiple HTML tags, to\ncreate the following HTML in the DOM:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;main\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"main\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003ePoodles!\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;h3\u0026gt;\u003c/span\u003e\n    An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a\n    post-Frankfurt School Appropriationist Perspective\n  \u003cspan class=\"nt\"\u003e\u0026lt;/h3\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;p\u0026gt;\u0026lt;em\u0026gt;\u003c/span\u003eBy: Byron Q. Poodle, Esq., BA.\u003cspan class=\"nt\"\u003e\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/main\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis process works but it is \u003cstrong\u003enot\u003c/strong\u003e recommended for several reasons. First,\nit's more error-prone, and the errors can be difficult to find. Second, it can\nnegatively impact site performance. Finally, if you're inserting user-derived\ndata (e.g., comments) into the DOM using \u003ccode\u003einnerHTML\u003c/code\u003e, you can expose your site\nto the risk of users \u003ca href=\"https://www.reddit.com/r/learnjavascript/comments/9502x5/is_innerhtml_still_considered_bad/e3p31go/?utm_source=share\u0026amp;utm_medium=web2x\u0026amp;context=3\"\u003einjecting malicious code\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eProgrammatically creating and appending elements is safer and more efficient,\nand it results in code that's easier to read, easier to debug, and easier to\nmaintain.\u003c/p\u003e\n\n\u003ch2\u003eChange Properties on DOM Nodes\u003c/h2\u003e\n\n\u003cp\u003eWe can change the appearance of a DOM node using its \u003ccode\u003estyle\u003c/code\u003e attribute. Try this\nout in the console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eelement\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003emain\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e300px\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e#27647B\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou've changed what's on the screen!\u003c/p\u003e\n\n\u003cp\u003eFeel free to set as many properties as you'd like — this is a good chance to\nlook around and explore different properties of DOM elements.\u003c/p\u003e\n\n\u003cp\u003eLet's adjust the display. Add some text:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eYou've changed what's on the screen!\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen change the style to see the effect:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efontSize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e24px\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emarginLeft\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e30px\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elineHeight\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePerhaps the most common way to change how things appear in the DOM is by\nchanging an element's \u003ccode\u003eclass\u003c/code\u003e attribute. As you know from CSS, we often change\nthe way a bit of rendered HTML appears by adding or removing a class.\u003c/p\u003e\n\n\u003cp\u003eFor example, we could create an \u003ccode\u003ealert\u003c/code\u003e class that turns the text red (using the\nCSS \u003ccode\u003ecolor\u003c/code\u003e attribute) and makes it big (using the CSS \u003ccode\u003efont-size\u003c/code\u003e attribute).\nWe can then use JavaScript to first grab the element and then add the class by\nupdating the element's \u003ccode\u003eclassName\u003c/code\u003e property. This has the same effect as setting\nthe \u003ccode\u003eclass\u003c/code\u003e property in the HTML. The \u003ccode\u003eclassName\u003c/code\u003e property expects a \u003ccode\u003eString\u003c/code\u003e\nwith one or more class names, separated by spaces:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eclassName\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003epet-listing dog\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCheck out the Elements tab to see the effect of this change:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;main\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"main\"\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"pet-listing dog\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/main\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnother way to accomplish the same thing is by using the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003e\u003ccode\u003eElement.classList\u003c/code\u003e\nproperty\u003c/a\u003e. This property has \u003ccode\u003e.add()\u003c/code\u003e and \u003ccode\u003e.remove()\u003c/code\u003e methods that\ncan be used as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eclassList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edog\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eclassList\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ecat\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003esale\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis approach allows you to easily add and remove classes programmatically,\nwithout having to create a long string of class names.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;main\u003c/span\u003e \u003cspan class=\"na\"\u003eid=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"main\"\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"pet-listing cat sale\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/main\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3\u003eSeparation of Concerns\u003c/h3\u003e\n\n\u003cp\u003eAn important thing to bear in mind is that we only want to use JavaScript to\nchange the appearance of an element when we need to make a change dynamically,\ni.e., in response to user actions. This goes back to a fundamental programming\nconcept about separating concerns between technologies:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHTML defines the structure of the website (not appearance or functionality)\u003c/li\u003e\n\u003cli\u003eJavaScript defines functionality of the website (not structure or styling)\u003c/li\u003e\n\u003cli\u003eCSS defines the visualization and style of the website (not structure or\nfunctionality)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDefining the base CSS should still happen in the CSS files that are loaded into\nthe DOM when the page is opened.\u003c/p\u003e\n\n\u003ch2\u003eRemove Elements from the DOM\u003c/h2\u003e\n\n\u003cp\u003eWe know how to add elements and change their attributes. What if we want to\nremove an element from a page?\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eremoveChild()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWe use \u003ccode\u003eremoveChild()\u003c/code\u003e, as you might guess, to remove a particular child of an\nelement:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003esomeElement\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eremoveChild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esomeChildElement\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's take a look at a more complex example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eul\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementsByTagName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eul\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esecondChild\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eul\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eli:nth-child(2)\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eul\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eremoveChild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esecondChild\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere you can see the power of \u003ccode\u003equerySelector()\u003c/code\u003e: we can use it to find the\nsecond \u003ccode\u003eli\u003c/code\u003e element of \u003ccode\u003eul\u003c/code\u003e. We then pass that element as the argument to our\n\u003ccode\u003eremoveChild\u003c/code\u003e method, which removes the element from our \u003ccode\u003eul\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhat if we want to remove the whole unordered list (\u003ccode\u003eul\u003c/code\u003e)?\u003c/p\u003e\n\n\u003ch3\u003e\u003ccode\u003eelement.remove()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWe can just call \u003ccode\u003eremove()\u003c/code\u003e on the element itself:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eul\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd it's gone!\u003c/p\u003e\n\n\u003ch2\u003eInstructions\u003c/h2\u003e\n\n\u003cp\u003eFrom this point forward, many of the labs will work a little differently from\nones you've done before. Specifically, the tests will mock the process of 1)\nrunning JavaScript code in the browser and 2) seeing the results of that code\nrepresented in the DOM. Take a look at \u003ccode\u003etest/indexTest.js\u003c/code\u003e to see the tests'\ndescriptions of the changes your code should be making to the DOM elements.\u003c/p\u003e\n\n\u003cp\u003eNote that you do not need to create functions for this lab. Just create the line\nor lines of JavaScript necessary to pass each test. As usual, you will write\nyour code in the \u003ccode\u003eindex.js\u003c/code\u003e file.\u003c/p\u003e\n\n\u003cp\u003eOne final note: the last test in the \u003ccode\u003etest/indexTest.js\u003c/code\u003e file is looking for the\ntext \"YOUR-NAME is the champion\" (with your name — or whatever text you choose —\nin place of YOUR-NAME) inside your newly created DOM node. While there are a\nnumber of ways you could accomplish this, you should use either the\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent\"\u003e\u003ccode\u003etextContent\u003c/code\u003e\u003c/a\u003e or \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\"\u003e\u003ccode\u003einnerHTML\u003c/code\u003e\u003c/a\u003e property to set\nthe text inside your DOM node. The \u003ccode\u003einnerText\u003c/code\u003e property would technically work\nas well; however, the tests won't pass if you use this approach, and generally\nit's not a good practice to use \u003ccode\u003einnerText\u003c/code\u003e when setting the contents of an\nelement. \u003ca href=\"https://stackoverflow.com/a/35213639\"\u003eThis StackOverflow answer\u003c/a\u003e does a good job explaining some\ndifferences between these properties.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\"\u003edocument.createElement()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/append\"\u003eappend()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild\"\u003eremoveChild()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove\"\u003eelement.remove()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\"\u003eclassList Property\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "gb7d8eafcb6fd23da5af7ec40a0b9aeaf"
          },
          {
            "id": 432937,
            "title": "Survey - Manipulating the DOM",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Manipulating the DOM module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "gf402da10bb367f1f0db91e78f3dbfe12"
          }
        ]
      },
      {
        "id": 44872,
        "name": "JavaScript Events",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "ge768fcd87081a17bbf5ab87ccb9578a7",
        "items": [
          {
            "id": 432939,
            "title": "JavaScript Events",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine a JavaScript event\u003c/li\u003e\n\u003cli\u003eIdentify different types of user events\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eWe've experimented with selecting and manipulating nodes in the DOM using\nJavaScript: deleting nodes, editing nodes, etc. But most web applications are\n\u003cem\u003enot\u003c/em\u003e used by people opening up the console and editing the DOM using Chrome's\nDevTools. Instead, people \u003cem\u003edo something\u003c/em\u003e and then \u003cem\u003ework happens\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\"Doing work\" in response to \"something happening\" is known as \u003cem\u003eevent handling\u003c/em\u003e.\n\u003cem\u003eEvents\u003c/em\u003e are the \"something the user does\" and the \"\u003cem\u003ecallback function\u003c/em\u003e\" is the\nwork that will happen in response to the event being triggered.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson we'll go over some of the most commonly-used JavaScript events.\nIn the following lessons, we'll learn how to use \u003cem\u003eevent listeners\u003c/em\u003e to tell\nJavaScript which event or events we want it to listen for. We'll also learn how\nto implement \u003cem\u003ecallback functions\u003c/em\u003e to handle the \u003cem\u003ework happens\u003c/em\u003e part of event\nhandling.\u003c/p\u003e\n\n\u003ch2\u003eDefine a JavaScript Event\u003c/h2\u003e\n\n\u003cp\u003eJavaScript has the ability to \"listen\" for things that happen inside the\nbrowser. It can listen for events like whether the browser is resized, or\nwhether someone clicked on a specific image on the screen. The event you're\nprobably most familiar with is \"click.\"\u003c/p\u003e\n\n\u003cp\u003eWe'll go over a few of the more common types of events in this lesson.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Different Types of User Events\u003c/h2\u003e\n\n\u003ch3\u003eMouse Click\u003c/h3\u003e\n\n\u003cp\u003eMouse or trackpad events are some of the most common ones you'll be handling\nusing JavaScript eventing. For example, JavaScript can recognize a single click\non an element in the page and change the styling of the element to highlight it.\nOr it can recognize a double-click on an element and open a zoomed-in view of\nthat element.\u003c/p\u003e\n\n\u003cp\u003eThere are many other mouse events you can use; take a look at the list of\nJavaScript's \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element#mouse_events\"\u003emouse events here\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003eKey Press\u003c/h3\u003e\n\n\u003cp\u003eWhile click events will likely make up the majority of events you'll use, the\nkeyboard is another important source of events. JavaScript currently includes\ntwo \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element#keyboard_events\"\u003ekeyboard events\u003c/a\u003e: \u003ccode\u003ekeydown\u003c/code\u003e and \u003ccode\u003ekeyup\u003c/code\u003e. (A third, \u003ccode\u003ekeypress\u003c/code\u003e,\nhas been deprecated.) When a key is pressed, these events provide a code to\nindicate which key it was. For example, a game program might listen for\n\u003ccode\u003ekeydown\u003c/code\u003e events and, if the space bar was pressed, make the character jump over\nthe hole.\u003c/p\u003e\n\n\u003ch3\u003eForm Submission\u003c/h3\u003e\n\n\u003cp\u003eHTML pages often use a submit button to submit a form to a server. When a user\nsubmits a form, the \u003ccode\u003esubmit\u003c/code\u003e event is fired. An event handler here might pop up\na thank you overlay or log in the user and take them to their home page.\u003c/p\u003e\n\n\u003ch3\u003eOther Events\u003c/h3\u003e\n\n\u003cp\u003eAs you seek to build more complicated applications, you'll need to handle and\ntrigger work on many more events than the few we've discussed in this lesson.\nSome other common events you are likely to encounter are \u003ccode\u003escroll\u003c/code\u003e, \u003ccode\u003emouseenter\u003c/code\u003e\nand \u003ccode\u003emouseleave\u003c/code\u003e, \u003ccode\u003efocus\u003c/code\u003e, \u003ccode\u003eblur\u003c/code\u003e,  and \u003ccode\u003eonchange\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOne important thing to keep in mind is that not all JavaScript events are\nsupported by all browsers. This \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of browser events\u003c/a\u003e includes the ones\nthat can be used in most browsers.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eJavaScript allows us to trigger work when it detects events. You set up an event\nhandler and, when JavaScript recognizes that event, it will execute the event\nhandler's work, which is stored in a \u003cem\u003ecallback function\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eTake a few minutes to look through the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events#standard_events\"\u003elist of common events\u003c/a\u003e to\nfamiliarize yourself with the many many ways you can use event handling to\nenhance your users' experience.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element#mouse_events\"\u003eMDN - Mouse Events\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element#keyboard_events\"\u003eMDN - Keyboard Events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "javascript-events"
          },
          {
            "id": 432941,
            "title": "JavaScript Event Listeners Lab",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-event-listening-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate event listeners on DOM nodes using \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn this lab we will learn how to teach nodes to \"listen\" for an event using\n\u003ccode\u003eaddEventListener()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code.\u003c/p\u003e\n\n\u003ch2\u003eCreate Event Listeners on DOM Nodes with \u003ccode\u003eaddEventListener()\u003c/code\u003e\n\u003c/h2\u003e\n\n\u003cp\u003eIn order for JavaScript to handle an event, we first need to tell it to listen\nfor that event. We do this by calling the \u003ccode\u003eaddEventListener()\u003c/code\u003e method on the\nelement we want to add the listener to, and passing it two arguments:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ethe name of the event to listen for, and\u003c/li\u003e\n\u003cli\u003ea \u003cem\u003ecallback function\u003c/em\u003e to \"handle\" the event\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOpen up \u003ccode\u003eindex.html\u003c/code\u003e in the browser. When you click in the \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e area,\nnothing happens. Let's set up some \u003cem\u003eevent handling\u003c/em\u003e. Specifically, let's add an\nevent listener for the \u003ccode\u003eclick\u003c/code\u003e event on the \u003ccode\u003einput#button\u003c/code\u003e element in\n\u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTry out the following in the Chrome DevTools console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003einput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ebutton\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddEventListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eclick\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eI was clicked!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow when you click inside of \u003ccode\u003einput#button\u003c/code\u003e, you will get an alert box.\u003c/p\u003e\n\n\u003cp\u003eLet's review what's happening in this code.\u003c/p\u003e\n\n\u003cp\u003eFirst, we grab the element that we want to add the event listener to and save a\nreference to it in the \u003ccode\u003einput\u003c/code\u003e variable.\u003c/p\u003e\n\n\u003cp\u003eNext, we call \u003ccode\u003eaddEventListener()\u003c/code\u003e on that element to tell JavaScript to listen\nfor the event. We pass two arguments to \u003ccode\u003eaddEventListener()\u003c/code\u003e: the name of the\nevent to listen for (in this case, \u003ccode\u003eclick\u003c/code\u003e) and a \u003cem\u003ecallback function\u003c/em\u003e that will\nbe executed when the event is \"heard.\"\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\"\u003eAccording to MDN\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA callback function is a function passed into another function as an argument,\nwhich is then invoked inside the outer function to complete some kind of\nroutine or action.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThat's exactly what's happening here: we're passing a callback function as the\nsecond argument to the \u003ccode\u003eaddEventListener()\u003c/code\u003e function; the callback will be\ninvoked as soon as the event occurs.\u003c/p\u003e\n\n\u003cp\u003eLet's pull out that second argument and take a look at it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eI was clicked!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis function has all the components of functions we've seen before (the\n\u003ccode\u003efunction\u003c/code\u003e keyword, a pair of parentheses, and the body of the function enclosed\nin curly braces) \u003cem\u003eexcept one\u003c/em\u003e: it doesn't have a name assigned to it. This is\nwhat's called an \u003cem\u003eanonymous\u003c/em\u003e function. Because it doesn't have a name, it can't\nbe invoked directly. But the event listener knows to execute whatever function\nis passed as the second argument when it detects the event, so it doesn't need\nto be named.\u003c/p\u003e\n\n\u003cp\u003eIf we are only calling our callback function in that one place, using an\nanonymous function makes sense. However, what if we wanted to use that same\nalert message on a bunch of elements? In that case, it would make more sense to\ncreate a separate, named function that could be called by all of our event\nlisteners. With this approach, we would pass the \u003cem\u003efunction name\u003c/em\u003e as the second\nargument to \u003ccode\u003eaddEventListener()\u003c/code\u003e rather than the function itself:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003einput\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003ebutton\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eclickAlert\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eI was clicked!\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddEventListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"s1\"\u003eclick\u003c/span\u003e\u003cspan class=\"dl\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eclickAlert\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe could then attach our \u003ccode\u003eclickAlert\u003c/code\u003e to as many elements as we'd like. Just as\nwe did for the \u003ccode\u003einput\u003c/code\u003e element, we would first use our CSS selector skills to\ngrab the desired element and save it to a variable, then add the \u003ccode\u003eclick\u003c/code\u003e event\nlistener to that element. Give it a try!\u003c/p\u003e\n\n\u003cp\u003eWith this approach, even if we're using our \u003ccode\u003eclickAlert\u003c/code\u003e with a whole bunch of\nelements, if we decide later that we want to change the text of the alert to\n\"Hee hee, that tickles!\" instead, we would only need to make that change in one\nplace: inside our \u003ccode\u003eclickAlert()\u003c/code\u003e function.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: we pass \u003ccode\u003eclickAlert\u003c/code\u003e as the argument, not \u003ccode\u003eclickAlert()\u003c/code\u003e. This is\nbecause we don't want to \u003cem\u003einvoke\u003c/em\u003e the function in this line of code. Instead, we\nwant to pass a \u003cem\u003ereference\u003c/em\u003e to the function to \u003ccode\u003eaddEventListener()\u003c/code\u003e so \u003cem\u003eit\u003c/em\u003e can\ncall the function when the time comes.\u003c/p\u003e\n\n\u003cp\u003eRefresh your browser and try out the latest version of the code in the console\nto verify that it works. Also try passing \u003ccode\u003eclickAlert()\u003c/code\u003e as the second argument\nrather than \u003ccode\u003eclickAlert\u003c/code\u003e and see what happens.\u003c/p\u003e\n\n\u003ch2\u003ePassing the Tests\u003c/h2\u003e\n\n\u003cp\u003eNow let's set up \u003ccode\u003eindex.js\u003c/code\u003e to do the same thing so we can get our test passing.\nTo do that, simply copy the code into the \u003ccode\u003eindex.js\u003c/code\u003e file's\n\u003ccode\u003eaddingEventListener()\u003c/code\u003e function and run the test. Either version should pass\nthe test — just make sure that the code creating the event listener is \u003cstrong\u003einside\u003c/strong\u003e\nthe \u003ccode\u003eaddingEventListener()\u003c/code\u003e function.\u003c/p\u003e\n\n\u003ch3\u003eChecking the Code in the Browser\u003c/h3\u003e\n\n\u003cp\u003eWe know that the code works in the console and passes the test, but we should\nalso check our changes to \u003ccode\u003eindex.js\u003c/code\u003e in the browser. Because you've added the\n\u003ccode\u003eaddEventListener()\u003c/code\u003e function \u003cem\u003einside\u003c/em\u003e the \u003ccode\u003eaddingEventListener()\u003c/code\u003e function,\nrecall that you will need to call the outer function in \u003ccode\u003eindex.js\u003c/code\u003e to execute\n\u003ccode\u003eaddEventListener()\u003c/code\u003e and activate the event listener. Be sure to refresh the\npage to load the new code in \u003ccode\u003eindex.js\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Events\"\u003eMDN - Web Events\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "gf684f31e2c11bb34687d9a1ce764fc2e"
          },
          {
            "id": 432943,
            "title": "Moving Things with JavaScript by Acting on Events",
            "type": "Assignment",
            "indent": 1,
            "locked": false,
            "submissionTypes": "a website url",
            "graded": true,
            "pointsPossible": 1.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_submit",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-javascript-events-acting-on-events-lab\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-fork-link\" id=\"fork-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab\" target=\"_blank\"\u003e\u003cimg id=\"fork-img\" title=\"Fork This Assignment\" alt=\"Fork This Assignment\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003ePractice moving elements on the page\u003c/li\u003e\n\u003cli\u003eDemonstrate how to move an element in response to a browser event\u003c/li\u003e\n\u003cli\u003eDemonstrate how to update an element's position on the page conditionally\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThink back to the first video game you played.\u003c/p\u003e\n\n\u003cp\u003eThink about the mechanics of that game. When you \u003cem\u003etilted\u003c/em\u003e a joystick or\n\u003cem\u003epressed\u003c/em\u003e a button it responded to your whims. It pulled you into its story by\ngiving you a window into its world and a way of interacting with — shaping, even\n— that world. When you performed an \u003cstrong\u003e\u003cem\u003eevent\u003c/em\u003e\u003c/strong\u003e, the computer made the world\nrespond: the little plumber from Brooklyn jumped (\u003cem\u003eSuper Mario Franchise\u003c/em\u003e), the\nundead warrior slashed at an evil foe (\u003cem\u003eDark Souls\u003c/em\u003e), or the banana-yellow guy\nate the power pellet (\u003cem\u003ePac-Man\u003c/em\u003e).\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/fewpjs/fewpjs-acting-on-events/Image_36_VideoGame.png\" alt=\"Controlling classic video game characters Mario and Pacman\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eProgramming means that you can create such a world for other people.\u003c/em\u003e Sure,\nit'll be a while before you're ready to build something like one of the classic\ngames above, but we can start with the essential steps. In this lab we'll learn\nhow to move an element on a page in response to an \u003cem\u003eevent\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf you haven't already, fork and clone this lab into your local environment.\nNavigate into its directory in the terminal, then run \u003ccode\u003ecode .\u003c/code\u003e to open the files\nin Visual Studio Code.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and run the tests. You'll see that you need to create two functions to\nget the tests passing: \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e and \u003ccode\u003emoveDodgerRight()\u003c/code\u003e. We'll write\n\u003ccode\u003emoveDodgerLeft()\u003c/code\u003e together, then you'll create \u003ccode\u003emoveDodgerRight()\u003c/code\u003e on your own.\u003c/p\u003e\n\n\u003ch2\u003ePractice Moving Elements on the Page\u003c/h2\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/rock-dodger.png\" alt=\"Rock Dodger!\"\u003e\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003eindex.html\u003c/code\u003e in the browser. You'll see a black square which represents the\ngame field and a white rectangle at the bottom of that field which is our game\npiece, the dodger. Now open DevTools and click on the Elements tab. You'll see\nthat the game field is a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of \"game.\" Expand that \u003ccode\u003ediv\u003c/code\u003e and\nyou'll see that the game piece is a second, nested \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with an \u003ccode\u003eid\u003c/code\u003e of\n\"dodger.\"\u003c/p\u003e\n\n\u003cp\u003eClick on the game \u003ccode\u003ediv\u003c/code\u003e and take a look at its CSS in the styles tab. You'll see\nthat the game field has a height and width of 400px. Now click on the dodger and\nnote that it has a height of 20px and a width of 40px. Finally, take a look at\nthe inline style on the dodger \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e: the \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties\ndefine the dodger's starting position \u003cem\u003erelative to its parent element, the game\nfield\u003c/em\u003e. In other words, the lower left corner of the game field corresponds\nto\u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003ebottom\u003c/code\u003e positions of 0px. The starting values of the dodger's\n\u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e properties are what places it at the bottom center of the\ngame field when our game launches.\u003c/p\u003e\n\n\u003cp\u003eBefore we can use JavaScript to move the dodger, we first need to grab it and\nsave a reference to it in a variable. Enter the following in the console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edodger\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edodger\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAwesome. Now let's change its color:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edodger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e#000000\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhoa, where'd it go? Well, we changed the color to \u003ccode\u003e#000000\u003c/code\u003e, another way of\nexpressing \"black.\" So it just blends in with the background.\u003c/p\u003e\n\n\u003cp\u003eLet's change it to something more visible.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edodger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebackgroundColor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e#FF69B4\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMuch better!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger.png\" alt=\"pink dodger\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAccessing the \u003ccode\u003estyle\u003c/code\u003e property of the \u003ccode\u003edodger\u003c/code\u003e element allows us to change\nthings like the \u003ccode\u003ebackgroundColor\u003c/code\u003e, \u003ccode\u003eheight\u003c/code\u003e, \u003ccode\u003ewidth\u003c/code\u003e, etc. We can also use it to\nchange an element's position on the page.\u003c/p\u003e\n\n\u003cp\u003eLet's start by moving the element up:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edodger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebottom\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e100px\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/skills-based-js/pink_dodger_bottom_100.png\" alt=\"up 100px\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Even though we're talking about \u003cem\u003enumeric\u003c/em\u003e coordinates, note that we\nneed to move the dodger by assigning a new \u003cem\u003estring value\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe can verify our dodger's current position by simply typing \u003ccode\u003edodger.style.left\u003c/code\u003e\nor \u003ccode\u003edodger.style.bottom\u003c/code\u003e into the console.\u003c/p\u003e\n\n\u003cp\u003eLet's return it to where it started by resetting the \u003ccode\u003ebottom\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edodger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ebottom\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e0px\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow let's visually verify that the dodger's position is determined relative to\nthe game field by changing its \u003ccode\u003eleft\u003c/code\u003e attribute:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003edodger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003e0px\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should see the dodger nestled up against the bottom left corner of the game\nfield.\u003c/p\u003e\n\n\u003ch2\u003eDemonstrate How to Move an Element in Response to a Browser Event\u003c/h2\u003e\n\n\u003cp\u003eNow that we know how to write the code to move the dodger, let's figure out how\nto tie that action to an event.\u003c/p\u003e\n\n\u003cp\u003eLet's say we want the user to be able to move the dodger to the left using the\nleft arrow key. We learned in an earlier lesson that, when a key is pressed, the\n\u003ccode\u003ekeydown\u003c/code\u003e event provides a code to indicate which key it was. So the first thing\nwe have to do is figure out what code is used to identify the left arrow key. We\ncould look it up, but we're programmers — let's explore!\u003c/p\u003e\n\n\u003cp\u003eSo what do we mean when we say that an event provides a code? Any time an event\nlistener is in place and the event it's listening for is triggered, a JavaScript\nobject containing a bunch of information about the event is \u003cstrong\u003eautomatically\u003c/strong\u003e\npassed as an argument to the callback function. We can access that object and\nthe information it contains by defining a parameter for the callback. It looks\nlike this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddEventListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ekeydown\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBy defining the \u003ccode\u003eevent\u003c/code\u003e parameter in the parentheses, we've given the body of\nthe callback access to that event object, which is what allows us to log it to\nthe console. Note that, as with any JavaScript parameter (and, in fact, any\nJavaScript variable), we can give it any valid JavaScript variable name we like.\nBy convention, and in keeping with programming best practice of using meaningful\nvariable names, the name JavaScript programmers use for this parameter is\nusually either \u003ccode\u003eevent\u003c/code\u003e or \u003ccode\u003ee\u003c/code\u003e. You will see these in a lot of JavaScript code,\nand we recommend you use them as well.\u003c/p\u003e\n\n\u003cp\u003eThis pattern, when you first encounter it, is tricky to wrap your head around.\nDon't worry if it doesn't make total sense yet — it will become clearer as\nyou continue through the curriculum. You might also want to read the excellent\naccepted answer in \u003ca href=\"https://stackoverflow.com/questions/35936365/what-exactly-is-the-parameter-e-event-and-why-pass-it-to-javascript-functions\"\u003ethis Stack Overflow thread\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at what that event object looks like. Enter the code above\ninto the console then click in the browser window (where the game field and\ndodger are rendered). Now, if you press the left arrow key, you should see a\n\u003ccode\u003eKeyboardEvent\u003c/code\u003e logged in the console. Expand the event and you'll see its\nproperties listed; the one we're interested in is the \u003ccode\u003ekey\u003c/code\u003e property. Try\npressing some other keys as well and check out their \u003ccode\u003ekey\u003c/code\u003e properties.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/acting-on-events-lab/keyboard-event.png\" alt=\"Keyboard Event\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip:\u003c/strong\u003e You can explore other event types as well: just change the name of\nthe event in the code above.\u003c/p\u003e\n\n\u003cp\u003eNow that we know the code the event uses to identify the left arrow key, we can\nwrite the JavaScript code to move the dodger left when the key is pressed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddEventListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ekeydown\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eArrowLeft\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eleftNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003edodger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003epx\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eleftNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"nx\"\u003edodger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003epx`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo what are we doing here? Well, when our event listener detects a \u003ccode\u003ekeydown\u003c/code\u003e\nevent, we first check to see whether the \u003ccode\u003ekey\u003c/code\u003e property of the event object has\nthe value \"ArrowLeft.\" If it does, we get the current value of the dodger's\n\u003ccode\u003estyle.left\u003c/code\u003e property and use the \u003ca href=\"https://www.w3schools.com/jsref/jsref_replace.asp\"\u003eString \u003ccode\u003ereplace()\u003c/code\u003e method\u003c/a\u003e to strip\nout the \"px\", then store the result in \u003ccode\u003eleftNumbers\u003c/code\u003e. Next, we parse\n\u003ccode\u003eleftNumbers\u003c/code\u003e as an integer and store that result in \u003ccode\u003eleft\u003c/code\u003e. Finally, we update\nthe dodger's \u003ccode\u003estyle.left\u003c/code\u003e property using string interpolation, injecting the\ncurrent value minus 1. If the key that's pressed is \u003cem\u003enot\u003c/em\u003e the left arrow key, we\ndo zilch. Try it out in the browser yourself!! (Be sure to refresh the page\nfirst.)\u003c/p\u003e\n\n\u003cp\u003eWe do still have a problem, though. Even though we're only going one pixel at a\ntime, eventually our dodger will zoom (well, relatively speaking) right out of\nview.\u003c/p\u003e\n\n\u003cp\u003eHow can we prevent this? We need to check where the left edge of the dodger is\nand only move it if it hasn't yet reached the left edge of the game field.\u003c/p\u003e\n\n\u003ch2\u003eUpdate an Element's Position on the Page Conditionally\u003c/h2\u003e\n\n\u003cp\u003eOur callback function is starting to get pretty complex. This is probably a good\ntime to break the dodger's movement out into a separate function. We want to\nmove the dodger left if our \u003ccode\u003eif\u003c/code\u003e statement returns true, so let's pull out the body\nof that \u003ccode\u003eif\u003c/code\u003e statement into a function called \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eRefresh the page so we're starting with a blank slate, then grab the dodger again:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edodger\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003edodger\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we'll build our \u003ccode\u003emoveDodgerLeft()\u003c/code\u003e function, adding a check on the current\nposition of the dodger:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003emoveDodgerLeft\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eleftNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003edodger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003epx\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eparseInt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eleftNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003edodger\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estyle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003epx`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe're doing essentially the same thing, but we first ensure that the dodger's\nleft edge has not reached the left edge of its container.\u003c/p\u003e\n\n\u003cp\u003eNow let's wire this up to our event listener:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eaddEventListener\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ekeydown\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eArrowLeft\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003emoveDodgerLeft\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow try moving the dodger past the left edge. No can do!\u003c/p\u003e\n\n\u003cp\u003eCopy the final code into \u003ccode\u003eindex.js\u003c/code\u003e and run the tests. You should now have the\nfirst one passing.\u003c/p\u003e\n\n\u003ch2\u003eLab\u003c/h2\u003e\n\n\u003cp\u003eNow it's your turn. With the code implemented from the code-along, think about\nwhat needs to change to make a \u003ccode\u003emoveDodgerRight()\u003c/code\u003e function. You'll need to add\nanother condition to your event listener's callback function to call\n\u003ccode\u003emoveDodgerRight()\u003c/code\u003e. Then, inside the function, instead of moving the dodger\n\u003ccode\u003e${left - 1}px\u003c/code\u003e, you'll be moving it \u003ccode\u003e${left + 1}px\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It may seem logical that you would use the dodger's \u003ccode\u003estyle.right\u003c/code\u003e\nproperty to move the dodger right, but that won't work. The reason is that\nchanging the \u003ccode\u003estyle.right\u003c/code\u003e property \u003cem\u003edoesn't change\u003c/em\u003e the \u003ccode\u003estyle.left\u003c/code\u003e property,\nwhich means we'd have conflicting information about where the dodger should be\non the screen. JavaScript solves this problem by giving precedence to\n\u003ccode\u003estyle.left\u003c/code\u003e. In other words, once the user presses the left arrow key for the\nfirst time and the value of \u003ccode\u003estyle.left\u003c/code\u003e is changed, any subsequent changes to\n\u003ccode\u003estyle.right\u003c/code\u003e will be ignored.\u003c/p\u003e\n\n\u003cp\u003eFinally, implement the code needed to prevent the dodger from escaping off the\nright-hand side. How can we check whether the \u003cem\u003eright\u003c/em\u003e edge of the dodger has\nreached the \u003cem\u003eright\u003c/em\u003e edge of the game field? (Keep in mind that the dodger is\n40px wide.)\u003c/p\u003e\n\n\u003cp\u003eOnce you've completed the work to get the tests to pass, the last step is to\n\"try out\" your application. Make sure it works the way you expect in the\nbrowser. In professional applications, tests can't cover 100% of the use of the\napplication. It's important to realize that \"passing all the tests\" \u003cem\u003eis not the\nsame\u003c/em\u003e as \"building a working application.\"\u003c/p\u003e\n\n\u003cp\u003eBe sure to do a human-level manual \"play through\" with your dodger to make sure\nyour working code \u003cem\u003ereally works\u003c/em\u003e!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.giphy.com/media/vvLWidwZNYH5e/200w_d.gif\" alt=\"Passing the Tests is only part of the job\"\u003e\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eEvents and event handling are vital to web programming. JavaScript allows for\ndynamic page rendering, so users can interact with the contents of the page in\nreal time. Knowledge of the basic techniques we've learned so far sets you on\nthe road toward being able to create complex interactions like those in video\ngames you may have played before!\u003c/p\u003e",
            "exportId": "g29c67405977430aee163f85ded65078a"
          },
          {
            "id": 432945,
            "title": "Survey - JavaScript Events",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the JavaScript Events module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "gf1b2010585c28413ea796721f2a42401"
          }
        ]
      },
      {
        "id": 44874,
        "name": "Git",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g79c681f4c9688e9075fb803e2404321d",
        "items": [
          {
            "id": 432948,
            "title": "Intro to Version Control",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-git-version-control-introduction\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-version-control-introduction\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-version-control-introduction/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine the purpose of a version control system\u003c/li\u003e\n\u003cli\u003eIdentify benefits of version control systems\u003c/li\u003e\n\u003cli\u003eRecognize useful Git vocabulary terms\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eImagine you are part of a team of developers working on a popular web\napplication with many features. Your app may have a large, complex code\nbase which means that, at any given time, there are likely to be multiple\nprojects going on and multiple developers working on different parts of the\nsoftware.\u003c/p\u003e\n\n\u003cp\u003eThis type of scenario is quite common, and can easily lead to problems:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eImagine someone is working on a new feature, or incorporating a new technique,\nor refactoring the code to make it more efficient and something they change\nbreaks the app. How can we \"back up\" to the most recent working version of the\ncode?\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThere could be some part of the application that overlaps with the work\nbeing done by more than one developer. How can we ensure that no\ninconsistencies or conflicts work their way into the code?\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHow can we maintain a record of the changes that are being made and why? Over\ntime, memories about how things have been done can fade, or new people may\njoin the team who don't have that background knowledge. This can lead to\ninconsistencies in the code or to wasted time revisiting issues that have been\naddressed in the past.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe great news is that \u003cem\u003eall\u003c/em\u003e of these situations can be managed by a type of\nsoftware called a \u003cstrong\u003eversion control system (VCS)\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eDefine the Purpose of a Version Control System\u003c/h2\u003e\n\n\u003cp\u003e\u003cstrong\u003eVersion Control System (VCS)\u003c/strong\u003e describes a type of software that is designed\nspecifically to help manage the complexities described above - and so much more!\nThe key benefit of version control is that it keeps a complete history of the\nchanges to the code, which makes it easy to \"back up\" to a working state if\nthings go wrong. This gives you the freedom to experiment, throw away bad ideas,\nand instantly get back to your last-known \"good\" state if something breaks.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eASIDE\u003c/strong\u003e The programmer, entrepreneur, and venture capitalist Paul Graham\nnotes that oil paints unlocked a revolution in experimentation in visual arts\nbecause they were undo-able. Oils provided the \u003cstrong\u003efreedom\u003c/strong\u003e to err and recover\nthat other paint media did not provide (e.g. watercolor). Because of this\n\u003cstrong\u003efreedom\u003c/strong\u003e these painters were free to explore perspective, light, and\ncomposition in completely new ways. Because of their \u003cem\u003etools\u003c/em\u003e they had more\n\u003cem\u003efreedom\u003c/em\u003e and were able to make their burst of exploration a \u003cem\u003emovement\u003c/em\u003e: The\nRenaissance.\u003c/p\u003e\n\n\u003cp\u003eRead more in his essay \u003ca href=\"http://www.paulgraham.com/hp.html\"\u003e\"Hackers and Painters.\"\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThere are several VCS's available, but the most popular — and the one you'll\nlearn to use in this program — is called \u003cstrong\u003eGit\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eIdentify Benefits of Version Control Systems\u003c/h2\u003e\n\n\u003cp\u003eThere are a number of benefits we get when we use a VCS such as Git to manage our\nwork:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAutomatically create a backup of your work\u003c/li\u003e\n\u003cli\u003eProvide an easy way to undo mistakes and restore a previous version of your\nwork\u003c/li\u003e\n\u003cli\u003eDocument changes with a log that describes what's been changed and why\u003c/li\u003e\n\u003cli\u003eKeep file names and hierarchies consistent and organized\u003c/li\u003e\n\u003cli\u003eBranch work off into multiple \"sandboxes\" (called \u003cstrong\u003ebranches\u003c/strong\u003e in Git) that\nallow developers to experiment without impacting other branches\u003c/li\u003e\n\u003cli\u003eCollaborate with others without disturbing each other's or our own work\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd beyond these are even more advanced features that will help you optimize\nyour workflow once you've learned the basics. If that feels daunting, it's OK:\nyou will build up your toolbox of techniques over time. In the meantime, though,\nyou can get the best benefits of Git using a relatively small subset of all the\ntechniques and commands it includes.\u003c/p\u003e\n\n\u003ch2\u003eRecognize Useful Git Vocabulary Terms\u003c/h2\u003e\n\n\u003cp\u003eWe're about to get busy learning Git, but we first need to establish some common\nvocabulary. Git, perhaps more than any other software, has some special words\nthat you'll hear a lot. Don't worry if you're not sure how some of these terms\nwork in practice — that part will come later.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003erepository\u003c/strong\u003e (or \u003cstrong\u003erepo\u003c/strong\u003e, for short): A directory of files that are\n\u003cstrong\u003etracked\u003c/strong\u003e by Git.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003etrack\u003c/strong\u003e: When a file is \u003cstrong\u003etracked\u003c/strong\u003e by Git, it means that Git will notice\nany changes to that file. We call these changes \u003cstrong\u003edifferences\u003c/strong\u003e or \u003cstrong\u003ediffs\u003c/strong\u003e.\nGit allows you to choose whether to \u003cstrong\u003ecommit\u003c/strong\u003e a diff in order to keep it.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff\u003c/strong\u003e: The \u003cstrong\u003ediff\u003c/strong\u003e of a \u003cem\u003efile\u003c/em\u003e is all the changes that have been made to\nit since the last \u003cstrong\u003ecommit\u003c/strong\u003e. The \u003cstrong\u003ediff\u003c/strong\u003e of a \u003cem\u003erepo\u003c/em\u003e is all the diffs in all\nthe \u003cem\u003etracked\u003c/em\u003e files in the repo that have not yet been committed (sometimes\nprogrammers call this the \u003cstrong\u003ediffset\u003c/strong\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ecommit\u003c/strong\u003e: Once we decide we want to save a diff, we \u003cstrong\u003ecommit\u003c/strong\u003e the diff to\nthe repo's history using the \u003ccode\u003ecommit\u003c/code\u003e command. When we make a commit, we write\na \u003cstrong\u003elog\u003c/strong\u003e message that describes what happened in the diff. The set of commits\nprovides a history of all of the changes that have been made to a repo and\nwhen.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003elog\u003c/strong\u003e: The record of what happened in each commit.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003elocal/remote\u003c/strong\u003e: When we start working with an existing Git repo, we\n\u003cstrong\u003eclone\u003c/strong\u003e it from a \u003cstrong\u003eremote\u003c/strong\u003e source (on GitHub) and copy it to our machine.\nWe call the repo on our personal system the \u003cstrong\u003elocal\u003c/strong\u003e repo.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ebranch/default branch\u003c/strong\u003e: A Git repo can support multiple \u003cstrong\u003ebranches\u003c/strong\u003e that\nmake it possible for multiple developers to be working on the code at the same\ntime. When you initialize a new Git repo, a \u003cstrong\u003edefault branch\u003c/strong\u003e is created\nwhere your work will be tracked by default. If you configured Git using the\ninstructions given earlier in Software Engineering Prep, the name of the branch\nwill be \u003ccode\u003emain\u003c/code\u003e, but you will also see older repos that use \u003ccode\u003emaster\u003c/code\u003e as the\ndefault branch.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eGit is one of the most valuable tools you will use as a developer. You will\nlearn the basics of using Git in this section, and then will apply what you've\nlearned when you create your project in the next section.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://git-scm.com/book/en/Getting-Started-About-Version-Control\"\u003eGetting Started - About Version Control\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://git-scm.com/video/what-is-git\"\u003eGit Basics - What is Git?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "intro-to-version-control"
          },
          {
            "id": 432949,
            "title": "Git Basics",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-git-version-control-basics\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-version-control-basics\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-version-control-basics/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eInitialize a Git repository with \u003ccode\u003egit init\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCheck the status of a repository with \u003ccode\u003egit status\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eTrack file changes with \u003ccode\u003egit add\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eCreate a commit and apply a commit message with \u003ccode\u003egit commit\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the previous lesson we learned what a VCS is and how it helps us in our work.\nIn this lesson, we'll learn how to use Git to track the changes we make to a\nproject.\u003c/p\u003e\n\n\u003cp\u003eThe basic process consists of the following three steps:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eInitialize the project directory as a Git repository,\u003c/li\u003e\n\u003cli\u003eTell Git to track the changes we make to individual files, and\u003c/li\u003e\n\u003cli\u003eWhen we're ready, tell Git to save the changes.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThat's it! This basic workflow gives you all the main benefits of using Git to\ntrack a project.\u003c/p\u003e\n\n\u003ch2\u003eInitialize a Git Repository with \u003ccode\u003egit init\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eGit operates on a directory level. When we have a new directory that we want to\ntrack our files in, we need to \u003cem\u003einitialize\u003c/em\u003e the directory as a Git repository.\u003c/p\u003e\n\n\u003cp\u003eTo get started, we'll create a new directory. In your terminal, type the\nfollowing:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eREMEMBER\u003c/strong\u003e: Don't type the \u003ccode\u003e$\u003c/code\u003e. That's the universal symbol for a command\nprompt. It's how technical documentation says \"Here's a thing for the shell to\nprocess.\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003emy-git-project\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis command creates new a directory. Then:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003emy-git-project\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis command moves into the newly created directory.\u003c/p\u003e\n\n\u003cp\u003eNow that we're \u003cstrong\u003ein the directory\u003c/strong\u003e where we want Git to watch for changes\n(adding, removing, and editing files), we next need to \u003cem\u003einitialize\u003c/em\u003e this\ndirectory as a Git repo. We only need to do this step once for each project we\nwant to track.\u003c/p\u003e\n\n\u003cp\u003eIn the terminal type \u003ccode\u003egit init\u003c/code\u003e. It should look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit init\n\u003cspan class=\"go\"\u003eInitialized empty Git repository in /Users/avi/my-git-project/.git/\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe message above lets us know that our new directory is now being tracked by\nGit. It also shows that a new subfolder \u003ccode\u003e.git\u003c/code\u003e has been created. This hidden\ndirectory is where Git keeps important stuff, like the commit history. Don't go\nin there and start randomly deleting things! That said, if ever you do \u003ccode\u003egit\ninit\u003c/code\u003e in the wrong directory, you can \u003ccode\u003erm -rf .git\u003c/code\u003e to delete the \u003ccode\u003e.git\u003c/code\u003e folder\nand all its contents and return the directory to a plain-old, unprotected\ndirectory.\u003c/p\u003e\n\n\u003cp\u003eBe careful about making a containing directory, like our home directory or our\ndesktop, into a Git repository accidentally. Make sure you only type \u003ccode\u003egit init\u003c/code\u003e\n\u003cem\u003ewithin\u003c/em\u003e the directory you want \u003ccode\u003egit\u003c/code\u003e to track.\u003c/p\u003e\n\n\u003ch2\u003eCheck the Status of a Repository with \u003ccode\u003egit status\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eNow that we have Git watching this directory, let's see what it can tell us\nabout the directory. The command we use for this is \u003ccode\u003egit status\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit status\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSince we have not added any files yet, we'll see:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003eOn branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Older repositories may state \u003ccode\u003eOn branch master\u003c/code\u003e. Branching is beyond\nthe scope of this lesson, but to briefly explain - \u003ccode\u003emain\u003c/code\u003e and \u003ccode\u003emaster\u003c/code\u003e both\nrefer to the same thing - the core (\u003cem\u003e\u003cstrong\u003emain\u003c/strong\u003e, get it?\u003c/em\u003e) branch of a\nrepository. A single repository can have many branches, but always has only\n\u003cem\u003eone\u003c/em\u003e core branch. In the past, this branch defaulted to the name \u003ccode\u003emaster\u003c/code\u003e.\nGoing forward, the branch will be named \u003ccode\u003emain\u003c/code\u003e. You'll likely see both as you\nwork with repositories new and old.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLet's create a \u003ccode\u003eREADME.md\u003c/code\u003e that describes the project. Make our new file by\ntyping \u003ccode\u003etouch README.md\u003c/code\u003e from within the \u003ccode\u003emy-git-project\u003c/code\u003e directory. We won't\nsee any output after we run the \u003ccode\u003etouch\u003c/code\u003e command so to see that our new file has\nbeen created, we'll also run the \u003ccode\u003els\u003c/code\u003e command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003etouch \u003c/span\u003eREADME.md\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e\n\u003cspan class=\"go\"\u003eREADME.md\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith at least one new project file we can enable Git to start tracking changes.\nType \u003ccode\u003egit status\u003c/code\u003e. Git will show us what our current repository looks like and\nwhat changes it sees.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit status\n\u003cspan class=\"go\"\u003eOn branch main\n\nNo commits yet\n\nUntracked files:\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e  (use \"git add \u0026lt;file\u0026gt;\u003c/span\u003e...\u003cspan class=\"s2\"\u003e\" to include in what will be committed)\n\u003c/span\u003e\u003cspan class=\"go\"\u003e\n  README.md\n\nnothing added to commit but untracked files present (use `git add` to track)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGit confirms that it's aware of the file \u003ccode\u003eREADME.md\u003c/code\u003e, but it's not \u003cstrong\u003etracking\u003c/strong\u003e\nit. Git's not doing anything with the file and the file is not doing anything\nwith Git...\u003cem\u003eyet\u003c/em\u003e. Let's change that!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eIMPORTANT\u003c/strong\u003e: Whenever you want to check the status of your Git repository —\nwhich you will often — type \u003ccode\u003egit status\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2\u003eKeep Track of File Changes with \u003ccode\u003egit add\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eCurrently, the file in our repository is not being tracked by Git. We have to\ntell Git about all the files we want it to keep track of and consider as part of\nour project. We can do this by \u003cem\u003eadding\u003c/em\u003e the files to our \u003ccode\u003egit\u003c/code\u003e repository with\n\u003ccode\u003egit add \u0026lt;filename or path\u0026gt;\u003c/code\u003e. To add our new \u003ccode\u003eREADME.md\u003c/code\u003e to the repository and\ncheck the status, we type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add README.md\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit status\n\u003cspan class=\"go\"\u003eOn branch main\n\nNo commits yet\n\nChanges to be committed:\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e  (use \"git rm --cached \u0026lt;file\u0026gt;\u003c/span\u003e...\u003cspan class=\"s2\"\u003e\" to unstage)\n\u003c/span\u003e\u003cspan class=\"go\"\u003e\n  new file:   README.md\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can now see that Git is ready to keep track of \u003ccode\u003eREADME.md\u003c/code\u003e. All the changes\nin the file at the time we \u003ccode\u003eadded\u003c/code\u003e it are \u003cstrong\u003estaged\u003c/strong\u003e. If we were to change\n\u003ccode\u003eREADME.md\u003c/code\u003e, we'd need to re-add the file. As it happens here, this staged\nchange is \"create the file, nothing inside of it\" because \u003ccode\u003etouch\u003c/code\u003e created an\nempty file.\u003c/p\u003e\n\n\u003cp\u003eTo have Git save a new version of our repo that includes this new file (or,\nlater, to \"capture\" changes to a file) we need to \u003cem\u003ecommit\u003c/em\u003e the set of changes or\n\u003cstrong\u003ediff\u003c/strong\u003e. We \"save\" the changes in our repository by making \u003cstrong\u003ecommits\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCreate a Commit and Apply a Commit Message with \u003ccode\u003egit commit\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eRemember: \u003ccode\u003egit add\u003c/code\u003e got our changes to the repository ready in the previous\nstep. Those changes are the ones that will be \"captured\" in the commit.\u003c/p\u003e\n\n\u003cp\u003eTo make our first commit, type:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Initial commit\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003e-m\u003c/code\u003e flag tells Git that we are including a commit message, in this case\n\u003ccode\u003e\"Initial commit\"\u003c/code\u003e. \u003cem\u003eAny time you make a commit, you should include a message\nusing this flag.\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Initial commit\"\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[main (root-commit) e55477d] Initial commit\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 README.md\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe can see that Git has created a new version of our repo, represented by the\n\u003cem\u003eSHA\u003c/em\u003e (Secure Hash Algorithm) \u003ccode\u003ee55477d\u003c/code\u003e. SHAs are the identification system that\n\u003ccode\u003egit\u003c/code\u003e uses to keep track of versions; they're long complex numbers and letters\nthat are unlikely to be duplicated (the value shown above is actually a\nshortened version of the full SHA). If you're following along, the SHA you'll\nsee in your terminal will be different.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ecommit\u003c/code\u003e command committed 1 file.\u003c/p\u003e\n\n\u003cp\u003eNow, if we type \u003ccode\u003egit status\u003c/code\u003e, we'll see that it is at a \"clean state\": there are\nno new changes which means there's nothing to commit.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit status\n\u003cspan class=\"go\"\u003eOn branch main\nnothing to commit, working tree clean\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe won't do this just yet, but if we were to open the README.md file in our text\neditor and add some text to it, we could then add our file and commit this new\nset of changes with the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add README.md\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Updates README.md\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere are also a couple of shortcuts we can use:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis command adds \u003cem\u003eall\u003c/em\u003e the files that have been changed since the last commit\n(in this case, just \u003ccode\u003eREADME.md\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eOr we can combine the two steps of adding and committing our file into a single\ncommand:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Updates README.md\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere we're combining the \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003em\u003c/code\u003e flags. As with the \u003ccode\u003eadd .\u003c/code\u003e shortcut, the\n\u003ccode\u003ea\u003c/code\u003e flag tells git to add 'all changes', i.e., all files that have been changed\nsince the last commit. The \u003ccode\u003e-m\u003c/code\u003e flag, like before, tells git that we want to\nspecify a commit message, in this case, \u003ccode\u003e\"Updates README.md\"\u003c/code\u003e. This command\ncould also be written as:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Updates README.md\"\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRemember, we haven't actually made any changes to \u003ccode\u003eREADME.md\u003c/code\u003e so there's nothing\nto add or commit. However, if we had, the commit would look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Updates README.md\"\u003c/span\u003e\n\u003cspan class=\"go\"\u003e[main (root-commit) e55477d] Updates README.md\n 1 file changed, 4 insertions(+), 0 deletions(2)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGood work! Commits are amazingly powerful in Git. They are the heart of many of\nGit's advanced features. Understanding the basic workflow of Git initialization\nand setup is the foundation for success.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we've learned the basics of using Git to track a directory.\nSpecifically, we learned how to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003emake a new Git repository out of a directory using \u003ccode\u003egit init\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003echeck the status of our repo using \u003ccode\u003egit status\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003etrack files that have been changed using the \u003ccode\u003egit add \u0026lt;filename or path\u0026gt;\u003c/code\u003e command\u003c/li\u003e\n\u003cli\u003esave (commit) the changes with an explanatory message using \u003ccode\u003egit commit -m \"A\nmessage\"\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo far, however, we've only been using Git with our local repo. In the next two\nlessons, we'll learn how we can use Git in combination with GitHub to \u003cem\u003eshare\u003c/em\u003e\ncode with other developers.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://git-scm.com/book/en/v1/Git-Basics\"\u003eGit Basics at git-scm.com\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "git-basics"
          },
          {
            "id": 432951,
            "title": "Getting Code with Git",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-getting-code-with\"\u003e\u003c/div\u003e\n\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-getting-code-with-git\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-getting-code-with-git/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\u003cul\u003e\n    \u003cli\u003eCopy a repository to your local machine with \u003ccode\u003egit clone\u003c/code\u003e\u003c/li\u003e\n    \u003cli\u003eList remotes with \u003ccode\u003egit remote\u003c/code\u003e\u003c/li\u003e\n    \u003cli\u003eDuplicate other organizations' repositories into your own via GitHub with the \"Fork\" button\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn the previous lesson, we learned how Git allows us to create logged histories of all the versions of the files we \"track.\" Another great benefit of using Git is that it makes it easy for developers to \"share\" code by \"pushing\" a copy of their repo to the internet (specifically, to GitHub). From there, other developers can \u003cstrong\u003eclone\u003c/strong\u003e down the code onto their own machine and use it.\u003c/p\u003e\n\u003cp\u003eOf course, you've been taking advantage of this feature of Git for a while with the labs you've been working on in this course! For this reason, a lot of the content in this lesson will be review.\u003c/p\u003e\n\u003cp\u003eThe important thing to understand is that the forking and cloning workflow that you've been using with labs can be used with \u003cem\u003eany\u003c/em\u003e repo available on GitHub. But of course the learn-co gem is currently handling some of the steps for you, so in this lesson, you'll learn how to accomplish those steps \"by hand.\"\u003c/p\u003e\n\u003ch2\u003eCopy a Repository to Your Local Machine with \u003ccode\u003egit clone\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eLet's review the cloning process using a repo that \u003cem\u003eisn't\u003c/em\u003e part of the curriculum. We can get the code for the popular ReactJS framework:\u003c/p\u003e\n\u003cp\u003e1) Navigate to the \u003ca href=\"https://github.com/facebook/react\"\u003eReact repository\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e2) Click the green \"Code\" button on the right.\u003c/p\u003e\n\u003cp\u003e3) Make sure \u003ccode\u003eSSH\u003c/code\u003e is selected.\u003c/p\u003e\n\u003cp\u003e4) Click the copy button.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/completing-assignments/clone-repo.gif\" alt=\"clone-repo\"\u003e\u003c/p\u003e\n\u003cp\u003e5) In the terminal, navigate to where you want to put the repo. Type \u003ccode\u003egit clone\u003c/code\u003e and a space, then paste in the copied SSH link from GitHub. It should look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\n    \u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e git clone git@github.com:facebook/react.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eThis will create a \u003cem\u003elocal\u003c/em\u003e copy of the GitHub repository on your machine.\u003c/p\u003e\n\u003ch2\u003eList Remote Repos with \u003ccode\u003egit remote\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eIf you use the \u003ccode\u003els\u003c/code\u003e command, you'll see Git created a directory called \u003ccode\u003ereact\u003c/code\u003e. Use \u003ccode\u003ecd\u003c/code\u003e to enter that directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\n    \u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd \u003c/span\u003ereact\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003egit remote\u003c/code\u003e command will return the names of each remote repository (or, \"remote\") available. Go ahead and run the command; you should see a remote named \u003ccode\u003eorigin\u003c/code\u003e returned. This is the \"nickname\" that Git assigns by default to whatever remote you cloned from:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\n    \u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e git remote\n\u003cspan class=\"go\"\u003eorigin\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eTo prove that the \u003ccode\u003eorigin\u003c/code\u003e name points to the repo we cloned from GitHub, we can run \u003ccode\u003egit remote -v\u003c/code\u003e (the \u003ccode\u003ev\u003c/code\u003e flag stands for \"verbose\"). You should see something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\n    \u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e  git remote \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\n\u003cspan class=\"go\"\u003eorigin  git@github.com:facebook/react.git (fetch)\norigin  git@github.com:facebook/react.git (push)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003cp\u003eHere you can see that the \"remote address\" (\u003ccode\u003egit@github.com:facebook/react.git\u003c/code\u003e) assigned to the \"remote name\" (\u003ccode\u003eorigin\u003c/code\u003e) is the same thing you copied from the GitHub web interface. This confirms that the \u003cem\u003eremote repository\u003c/em\u003e you \u003cem\u003ecloned\u003c/em\u003e automatically set up a \u003cem\u003eremote name\u003c/em\u003e called \u003ccode\u003eorigin\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn the next lesson we'll learn how to \u003cstrong\u003epush\u003c/strong\u003e code up to GitHub. The \u003ccode\u003egit\n        remote\u003c/code\u003e command is what will enable you to ensure that the code is being pushed to the right place.\u003c/p\u003e\n\u003ch2\u003eDuplicate Other Organizations' Repositories into Your Own via GitHub with the \"Fork\" Button\u003c/h2\u003e\n\u003cp\u003eThis is also part of the workflow you've been using for labs: you create your own personal copy of the lab by clicking the \"Fork\" button on Canvas. But you can also fork a repo directly from its page on GitHub.\u003c/p\u003e\n\u003cp\u003eLet's go back to the \u003ca href=\"https://github.com/facebook/react\"\u003eReact repository\u003c/a\u003e on GitHub. In the upper right corner of the page, you'll see three buttons, including a Fork button:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"http://readme-pics.s3.amazonaws.com_button.jpg\" alt=\"Fork Button\"\u003e\u003c/p\u003e\n\u003cp\u003eClicking the Fork button on the page for this repo (or any other repo available on GitHub) will make a copy of the repo and store it in \u003cem\u003eyour\u003c/em\u003e GitHub account, just the same as when you click the Fork button on a lab's Canvas page. Having your own copy gives you the ability to update its \u003ccode\u003emain\u003c/code\u003e (or \u003ccode\u003emaster\u003c/code\u003e) branch without affecting the original repo.\u003c/p\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: You \u003cem\u003ecould\u003c/em\u003e use this workflow for labs. Instead of clicking the Fork button on Canvas, you could click the \u003cstrong\u003eOctocat\u003c/strong\u003e icon next to it. That would open up the lab's repo \u003cem\u003ewithout\u003c/em\u003e forking it, and you could then fork the lab using the Fork button on the repo page.\u003c/p\u003e\n    \u003cp\u003e\u003cstrong\u003eHowever\u003c/strong\u003e, doing so would bypass the \u003ccode\u003elearn-co\u003c/code\u003e gem which means you will need to submit the lab by hand in Canvas and it will not be graded automatically. So be sure to continue using the Fork button on the Canvas page for labs!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eGitHub gives developers many ways to collaborate. Using GitHub's \"Fork\" button and \u003ccode\u003egit clone\u003c/code\u003e together allows you to make copies of others' code.\u003c/p\u003e\n\u003cp\u003eOften, the original authors will include license information regarding how you can use their repository, so make sure to check before you publish, sell or distribute any material you've forked, cloned and modified.\u003c/p\u003e",
            "exportId": "getting-code-with-git"
          },
          {
            "id": 432953,
            "title": "Pushing Code with Git",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-git-pushing-code\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-pushing-code\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-git-pushing-code/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a local repository\u003c/li\u003e\n\u003cli\u003eCreate a remote repository\u003c/li\u003e\n\u003cli\u003eConnect the local repository and the remote repository with \u003ccode\u003egit remote\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ePush code up to the remote repo with \u003ccode\u003egit push\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've seen how valuable \u003cem\u003eremotes\u003c/em\u003e are for \u003cem\u003egetting\u003c/em\u003e software. Now we can take a\nlook at the other side of the transaction: how we synchronize our \u003cem\u003elocal\u003c/em\u003e\nrepository to a \u003cem\u003eremote\u003c/em\u003e repository using \u003ccode\u003egit remote\u003c/code\u003e and \u003ccode\u003egit push\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOnce your code is on a \u003cem\u003eremote\u003c/em\u003e, it's backed up — which is always a good\nthing. Also, once you push to a remote, you can choose whether to let others\n\u003ccode\u003efork\u003c/code\u003e or \u003ccode\u003eclone\u003c/code\u003e and benefit from it. Let's learn how to \u003ccode\u003epush\u003c/code\u003e our code!\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: the workflow you've been using for labs also pushes code for you! When\nyou run \u003ccode\u003elearn test\u003c/code\u003e, the \u003ccode\u003elearn-co\u003c/code\u003e gem automatically creates an \u003ccode\u003efis-wip\u003c/code\u003e\n\u003cstrong\u003ebranch\u003c/strong\u003e, saves the changes you've made to that branch, and pushes it up to\nyour copy of the repo on GitHub. Once you have all the tests passing, the lab\nis registered as complete on Canvas \u003cem\u003eand\u003c/em\u003e you have a backup of your code saved\non GitHub.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn this lesson, we'll learn how we can set up remote repositories on GitHub for\nany projects we work on. Specifically, we'll learn how to get a new repo set up\non our local drive, create a remote repo for it on GitHub, connect the local and\nremote repositories, and push our code up to the remote repo on GitHub.\u003c/p\u003e\n\n\u003ch2\u003eCreate a Local Repo\u003c/h2\u003e\n\n\u003cp\u003eLet's review the process for creating a local repository:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eFirst, we want to create a folder for our repository, which we'll call\n\u003ccode\u003emy_new_directory\u003c/code\u003e. In the terminal, navigate to the \u003ccode\u003e~/Development/code\u003c/code\u003e\ndirectory (or wherever you are storing your code for the course) and type\n\u003ccode\u003emkdir my_new_directory\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eTo navigate into this new folder, type \u003ccode\u003ecd my_new_directory\u003c/code\u003e. Your terminal\nshould display \u003ccode\u003emy_new_directory\u003c/code\u003e, indicating that you are now inside of the\nnew folder. Open the directory in VS Code by typing \u003ccode\u003ecode .\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNext, we need to create a new file named \u003ccode\u003eREADME.md\u003c/code\u003e. You can do this in the\nterminal, by typing \u003ccode\u003etouch README.md\u003c/code\u003e, or in VS Code, by choosing\n\u003ccode\u003eFile -\u0026gt; New File\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe can directly type in content for our README file in VS Code, but we can\nalso use our terminal skills to add content. So, in the terminal, type\n\u003ccode\u003eecho \"This is my readme file\" \u0026gt;\u0026gt; README.md\u003c/code\u003e. If you've got the README file\nopen in VS Code, the new text will appear!\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNow that we've got some basic content, we can initialize our local\nrepository. In your terminal, type \u003ccode\u003egit init\u003c/code\u003e. Your terminal should show that\nan 'empty Git repository' has been initialized.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eType \u003ccode\u003egit add README.md\u003c/code\u003e (or \u003ccode\u003egit add .\u003c/code\u003e) to stage the new \u003ccode\u003eREADME.md\u003c/code\u003e file\nso it will be tracked by \u003ccode\u003egit\u003c/code\u003e.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNow, type \u003ccode\u003egit commit -m \"Initialize git\"\u003c/code\u003e. This will create the first commit\nfor this local repository.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eCreate a Remote Repository on GitHub\u003c/h2\u003e\n\n\u003cp\u003eThere are a few steps to follow to create a \u003cem\u003eremote\u003c/em\u003e repository on GitHub.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eGo to: \u003ca href=\"https://github.com/new\"\u003egithub.com/new\u003c/a\u003e, while logged in to GitHub.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eEnter a name for your repository in the \"Repository name\" field. You can name\nit whatever you'd like; be creative! You can leave the remaining options as\nthey are — the default options are fine. Click the green 'Create repository'\nbutton.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAfter you create the \u003cem\u003eremote\u003c/em\u003e repository, you should see a \"Quick setup\" box\nat the top of the page. Make sure the 'SSH' option is selected, then click\nthe copy button next to the repo URL to copy the URL. (We'll use this in the\nnext section.)\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/pushing-code-with-git/quick-setup.png\" alt=\"github repo quick setup\"\u003e\u003c/p\u003e\n\n\u003cp\u003eBehind the scenes, GitHub has essentially \u003ccode\u003egit init\u003c/code\u003e'd a blank directory.\u003c/p\u003e\n\n\u003ch2\u003eConnect the Local Repository to the Remote Repository\u003c/h2\u003e\n\n\u003cp\u003eWe learned in the previous lesson that the \u003ccode\u003egit remote\u003c/code\u003e command will list the\n\u003cstrong\u003eremotes\u003c/strong\u003e available to our Git repo. If you run that command now, ...nothing\nhappens. This is because we haven't set our remote repo as the \u003cstrong\u003eremote\u003c/strong\u003e for\nour local repo yet. Doing so is a simple matter of assigning the URL we copied\nabove to a \u003cstrong\u003eremote name\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe also learned that Git uses the remote name \u003ccode\u003eorigin\u003c/code\u003e by default when we clone\nan existing repo from GitHub. We verified that by running \u003ccode\u003egit remote -v\u003c/code\u003e, which\nshowed that the remote name \u003ccode\u003eorigin\u003c/code\u003e was pointing to the repo on GitHub that we\ncloned. We'll stick to that convention here.\u003c/p\u003e\n\n\u003cp\u003eYou should still have your remote Git info copied from GitHub. To set the\nremote, type \u003ccode\u003egit remote add origin\u003c/code\u003e followed by a space, then paste in the URL.\nIt will look something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit remote add origin git@github.com:your-github-username/my-new-repo.git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe command above creates a remote called \u003ccode\u003eorigin\u003c/code\u003e and points it to your remote\nrepo on GitHub.\u003c/p\u003e\n\n\u003cp\u003eLet's use \u003ccode\u003egit remote -v\u003c/code\u003e (recall that the \u003ccode\u003e-v\u003c/code\u003e is for \"verbose\") to verify that\nwe successfully set our remote:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit remote \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e\n\u003cspan class=\"go\"\u003eView existing remotes\norigin  git@github.com:your-github-username/my-new-repo.git (fetch)\norigin  git@github.com:your-github-username/my-new-repo.git (push)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe did it! We're now set up to \u003cstrong\u003e\u003cem\u003epush\u003c/em\u003e\u003c/strong\u003e our code.\u003c/p\u003e\n\n\u003ch2\u003eSend Code to the Remote Repo with \u003ccode\u003egit push\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eNow that we have added a remote repo, we need to send our latest work to it\nusing \u003ccode\u003egit push\u003c/code\u003e. This command will push all the local, committed work to the\nremote repository.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003egit push\u003c/code\u003e command takes two arguments. The first is the name of the remote\nrepo. Remember, \u003ccode\u003eorigin\u003c/code\u003e is just an alias or \"short name\" that refers to the\nrepository name. You don't actually have to enter the repository name. Instead,\nyou can just use \u003ccode\u003eorigin\u003c/code\u003e. The second argument is the name of the remote\n\u003cstrong\u003ebranch\u003c/strong\u003e you want to send code to. We're going to push to our remote\nrepository's \u003cstrong\u003edefault branch\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf you configured Git using the instructions given earlier in Software\nEngineering Prep, your default branch's name will be \u003ccode\u003emain\u003c/code\u003e. You can verify this\nby running:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit branch \u003cspan class=\"nt\"\u003e--show-current\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen, to push your code up to GitHub, run this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit push \u003cspan class=\"nt\"\u003e-u\u003c/span\u003e origin main\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe first time you push code up to a newly-added remote repository, using the\n\u003ccode\u003e-u\u003c/code\u003e flag will tell Git to \"save\" the remote repository as the default push\ndestination for your current branch. What this means is that, for every\nsubsequent push from the \u003ccode\u003emain\u003c/code\u003e branch, you will only need to run \u003ccode\u003egit push\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003eAn Aside and a Small Shortcut\u003c/h2\u003e\n\n\u003cp\u003eIn this lesson, we've gone through the steps of both connecting a local\nrepository, and pushing code up to GitHub. During this course, you'll be\ncreating a few local repositories from scratch, but more often, you'll be\ncloning existing repositories to your local machine. In these situations, you\nwon't need to use commands like \u003ccode\u003egit init\u003c/code\u003e, since the repo is already set up\nwith Git and will already have a remote configured.\u003c/p\u003e\n\n\u003cp\u003eHowever, you \u003cem\u003ewill\u003c/em\u003e often need to add, commit and push work you've done locally\nto the remote repository. The \u003ccode\u003elearn test\u003c/code\u003e command will do this for you for\nlabs, but for anything else you're working on — for example, the projects you'll\ndo at the end of each phase — you'll need to do the process by hand:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"commit message\"\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit push\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRecall from earlier in this section that you can combine adding all \u003cstrong\u003etracked\u003c/strong\u003e\nfiles and committing by using an additional option flag, \u003ccode\u003e-a\u003c/code\u003e, with the commit\ncommand:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-am\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"commit message\"\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit push\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that the \u003ccode\u003e-am\u003c/code\u003e flags will work for adding and committing changes to files\nthat are \u003cstrong\u003ealready being tracked\u003c/strong\u003e, but if you need to create a new file as part\nof any lesson, you'll need to use \u003ccode\u003egit add\u003c/code\u003e to track that file before you can\ncommit it.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eBeing able to add Git remotes allows you to back up your local repository to a\nremote server. To review, the process is:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ecreate a local repo and run \u003ccode\u003egit init\u003c/code\u003e to start tracking it\u003c/li\u003e\n\u003cli\u003ecreate a remote repo on GitHub\u003c/li\u003e\n\u003cli\u003erun \u003ccode\u003egit remote add origin your-remote-repository-URL\u003c/code\u003e to tie your local repo\nto the remote repo on GitHub\u003c/li\u003e\n\u003cli\u003euse \u003ccode\u003egit add\u003c/code\u003e and \u003ccode\u003egit commit\u003c/code\u003e to save your changes\u003c/li\u003e\n\u003cli\u003euse \u003ccode\u003egit push\u003c/code\u003e to push the changes up to the remote repo\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith these few steps, you'll be able to get your project up to GitHub in\nminutes!\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://help.github.com/articles/pushing-to-a-remote/\"\u003eGitHub guide on pushing\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "pushing-code-with-git"
          },
          {
            "id": 432955,
            "title": "Survey - Git",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Git module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "g812aaceb5dd4aa8d04b3de457a38295a"
          }
        ]
      },
      {
        "id": 44877,
        "name": "Project Mode",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g83bc35f938ff93202c69b1bcc3b4261f",
        "items": [
          {
            "id": 432958,
            "title": "Software Engineering Prep Final Project Setup Part I: Setting Up Your Repo",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-project-prep-part-1\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-project-prep-part-1\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-project-prep-part-1/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eSet up your local and remote repositories for your final Software Engineering\nPrep project\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eNow that you've learned about Git version control, it's time to put your new\nskills to use!\u003c/p\u003e\n\n\u003cp\u003eIn the next section, as the final requirement for Software Engineering Prep,\nyou'll be creating a personal website! In this lesson, you'll get some practice\nwith Git and get set up for your final project at the same time.\u003c/p\u003e\n\n\u003cp\u003eSpecifically, we'll go through the following steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ecreating a local Git repository,\u003c/li\u003e\n\u003cli\u003ecreating a remote repository on GitHub,\u003c/li\u003e\n\u003cli\u003econnecting the local and remote repos\u003c/li\u003e\n\u003cli\u003ecreating an initial commit, and\u003c/li\u003e\n\u003cli\u003epushing that work to the remote repo.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCreate Your Local Repo\u003c/h2\u003e\n\n\u003cp\u003eLet's review the process for setting up your local repo. Follow along with the\nsteps below:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e1.\u003c/strong\u003e Choose a name for your project. You can call it anything you like - be\ncreative! For our example here, we'll use \u003ccode\u003emy-personal-website\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e2.\u003c/strong\u003e Make sure you're in the \u003ccode\u003eDevelopment/code\u003c/code\u003e directory (or wherever you're\nstoring your code), then create your project directory and \u003ccode\u003ecd\u003c/code\u003e into it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir \u003c/span\u003emy-personal-website\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd \u003c/span\u003emy-personal-website\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003e3.\u003c/strong\u003e Initialize the directory as a Git repo (make sure you've \u003ccode\u003ecd\u003c/code\u003ed into the\ndirectory first):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit init\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eCheck your work\u003c/strong\u003e: If you see the message \"Initialized empty Git repository in\n/Users/your-username/Development/code/your-directory-name/.git/\", you have\nsuccessfully set up your directory as a Git repo.\u003c/p\u003e\n\n\u003cp\u003eThe next step is to add some content.\u003c/p\u003e\n\n\u003ch2\u003eCreate Some Content\u003c/h2\u003e\n\n\u003cp\u003eGo ahead and open your new project in VS Code. From inside the\n\u003ccode\u003emy-personal-website\u003c/code\u003e directory (or whatever you've named yours), type \u003ccode\u003ecode .\u003c/code\u003e.\nNext, create a README file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003etouch \u003c/span\u003eREADME.md\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd add some content to it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"# My Personal Website\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e README.md\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOf course, if you prefer, you can add the new file and content in VS Code\ninstead.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eA Note about README files\u003c/strong\u003e: The \u003ca href=\"https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes\"\u003eREADME.md file\u003c/a\u003e is an\nimportant piece of the documentation of your project. It is the first thing\npeople will see when they visit your repo on GitHub. Generally, as you build\nyour own projects, you'll want to get in the habit of \u003ca href=\"https://www.makeareadme.com/\"\u003ecreating a good\nREADME\u003c/a\u003e, including things like what your project does, how to\ninstall and run the code, etc. While filling out the content in your README is\noptional for the Software Engineering Prep project, you \u003cem\u003ewill\u003c/em\u003e need to create\nthem for later projects. Check out the resources listed at the bottom of this\nlesson to learn more.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCheck your work\u003c/strong\u003e: In VS Code, make sure the README.md file is present and\ncontains the header you just created before continuing with the instructions.\u003c/p\u003e\n\n\u003ch2\u003eMake Your Initial Commit\u003c/h2\u003e\n\n\u003cp\u003eNow that we've created our project repo and added some content, it's time to\nmake our first commit. First, though, let's check the status of our repo:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit status\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should see the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003eOn branch main\n\nNo commits yet\n\nUntracked files:\n\u003c/span\u003e\u003cspan class=\"gp\"\u003e  (use \"git add \u0026lt;file\u0026gt;\u003c/span\u003e...\u003cspan class=\"s2\"\u003e\" to include in what will be committed)\n\u003c/span\u003e\u003cspan class=\"go\"\u003e  README.md\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis tells us that Git sees our new file but is not currently tracking it. So to\n\u003cstrong\u003eadd\u003c/strong\u003e it to the list of tracked files, then create our first commit, we'll\nrun:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add README.md\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s1\"\u003e'Initial commit'\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should see something similar to this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e[main (root-commit) d7c3189] Initial commit\n 1 file changed, 1 insertion(+)\n create mode 100644 README.md\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReminder\u003c/strong\u003e: We are not able to combine the \u003ccode\u003eadd\u003c/code\u003e and \u003ccode\u003ecommit\u003c/code\u003e commands in\nthis case because the \u003ccode\u003eREADME.md\u003c/code\u003e file is not being tracked yet. We could,\nhowever, use \u003ccode\u003egit add .\u003c/code\u003e instead of spelling out the name of the file.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eCheck your work\u003c/strong\u003e: If you saw the message shown above, you have successfully\nmade your first commit. You can also run \u003ccode\u003egit status\u003c/code\u003e to verify that there is\nnothing to commit and the working tree is clean.\u003c/p\u003e\n\n\u003cp\u003eThat's it! You now have your local repository created and set up to track your\nchanges. Now let's create a remote and connect our local repo to it.\u003c/p\u003e\n\n\u003ch2\u003eCreate Your Remote Repo\u003c/h2\u003e\n\n\u003cp\u003eTo create a new GitHub repository, go to\n\u003ca href=\"https://github.com/\"\u003ehttps://github.com/\u003c/a\u003e and sign in (if you aren't already\nsigned in). Then, click the \u003cstrong\u003e+\u003c/strong\u003e icon in the upper-right corner of the screen,\nand choose 'New repository' in the drop-down menu.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/new-repo.png\" alt=\"new repo drop down\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will bring you to a page where you can give the new repository a name.\nThere will be some other settings as well, which we'll leave as they are:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/set-new-repo-name.png\" alt=\"set new repo name\"\u003e\u003c/p\u003e\n\n\u003cp\u003eEnter the same name you used for your local repo. (Note: you aren't required to\nuse the same name, but we recommend doing so to keep things simple.) Once the\nrepository is given a name, go ahead and click the \"Create repository\" button.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/github-pages-create-repository.png\" alt=\"create repo\"\u003e\u003c/p\u003e\n\n\u003cp\u003eAn empty repository will be created.\u003c/p\u003e\n\n\u003ch2\u003eAdd The New Remote To Your Local Repository\u003c/h2\u003e\n\n\u003cp\u003eWhen you click \"Create repository\", you should be taken to a new page that\npresents a set of different options for getting things started. It's worth\ngetting familiar with those options; each of them is helpful in different\ncircumstances.\u003c/p\u003e\n\n\u003cp\u003eNote that some of the commands shown here have information unique to the\nrepository and GitHub user. Your commands will differ slightly from the examples\nbecause of this.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/setup-page.png\" alt=\"setup page\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWhich one of the options you choose will depend on your particular situation.\nThe first option is the one we used in the previous lesson:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/quick-setup.png\" alt=\"quick setup\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWe copied the URL and then used the \u003ccode\u003egit remote add origin\u003c/code\u003e command to connect\nour local repo to the remote repo.\u003c/p\u003e\n\n\u003cp\u003eLet's take a look at the other options that are provided. The second option\nlisted should look like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/add-from-command-line.png\" alt=\"create repo on command line\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis option contains a series of commands that you can copy and run in the\nterminal, either one at a time or all together. However if you take a look at\nthe commands, you'll see that we've already done the first four:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eecho \"# example-repository\" \u0026gt;\u0026gt; README.md\u003c/code\u003e creates a \u003ccode\u003eREADME.md\u003c/code\u003e file and\nadds some markdown\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egit init\u003c/code\u003e initializes a local repository in the folder you're currently in\non the command line\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egit add README.md\u003c/code\u003e stages the newly created \u003ccode\u003eREADME.md\u003c/code\u003e file, getting it\nready to be committed\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egit commit -m \"first commit\"\u003c/code\u003e creates the repository's first commit,\npreserving the newly created \u003ccode\u003eREADME.md\u003c/code\u003e file in the history of the\nrepository\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWe don't want to repeat these commands, so let's move on to the next one:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/project-prep-part-i/push-existing-repo.png\" alt=\"push existing repo\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThis option basically consists of the last three steps from the option above,\nwhich is exactly what we want! In fact, if you take a closer look, you'll see\nthat two of the three commands are exactly what we ran in the last lesson! The\nfirst three setup options listed are three different ways of doing the exact\nsame thing; GitHub is just providing the commands for us as a shortcut, so we\ndon't need to type them all out by hand.\u003c/p\u003e\n\n\u003cp\u003eLet's take a moment to review what each command does. As we mentioned above, two\nof the three should look familiar:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003egit remote add origin git@github...\u003c/code\u003e adds a new remote — called \u003ccode\u003eorigin\u003c/code\u003e —\nto the local repository and associates it with the remote repository.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egit branch -M main\u003c/code\u003e is the only command you haven't learned about yet — it\nrenames the current branch of your repository to \u003ccode\u003emain\u003c/code\u003e. (You should already\nbe configured to use \u003ccode\u003emain\u003c/code\u003e as the default branch; if so, running this\ncommand is unnecessary. You can verify the name of your branch by running\n\u003ccode\u003egit branch --show-current\u003c/code\u003e.)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egit push -u origin main\u003c/code\u003e pushes the initial commit we did earlier to the\nremote repository; the \u003ccode\u003eu\u003c/code\u003e flag sets \u003ccode\u003eorigin\u003c/code\u003e as the default remote for the\n\u003ccode\u003emain\u003c/code\u003e branch.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eGo ahead and run these commands — you can run them one at a time or all\ntogether, as you prefer.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCheck your work\u003c/strong\u003e: When you run the commands above, the last thing you should\nsee is the line:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003e\"Branch 'main' set up to track remote branch 'main' from 'origin'.\"\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can also check in GitHub by going to the repo and refreshing the page; you\nshould see that the \u003ccode\u003eREADME.md\u003c/code\u003e file now appears on GitHub.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThat's it! Now that you've created both your remote and local repos and\nconfigured Git to push to the \u003ccode\u003emain\u003c/code\u003e branch of your remote repo, you can start\nworking on your project. As you work, you should regularly commit your changes\nand push them to GitHub with the following commands:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"go\"\u003egit add .\ngit commit -m \"Some meaningful commit message\"\ngit push\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRecall that you only need to run \u003ccode\u003egit push -u origin main\u003c/code\u003e the first time; the\n\u003ccode\u003eu\u003c/code\u003e flag tells Git that you always want to push to \u003ccode\u003eorigin main\u003c/code\u003e, so you only\nneed to run \u003ccode\u003egit push\u003c/code\u003e moving forward.\u003c/p\u003e\n\n\u003cp\u003eIn the next lesson, we'll get you set up with the other files you'll need for\nyour project. You'll also learn how to deploy your new site to the Web using\nGitHub Pages.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes\"\u003eGitHub: About READMEs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.makeareadme.com/\"\u003emakeareadme.com\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "software-engineering-prep-final-project-setup-part-i-setting-up-your-repo"
          },
          {
            "id": 432959,
            "title": "Software Engineering Prep Final Project Setup Part II: Hosting a Website on GitHub Pages",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-hosting-on-github-pages\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-hosting-on-github-pages\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-hosting-on-github-pages/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eUnderstand what it means to host a website\u003c/li\u003e\n\u003cli\u003eUse GitHub to host a website from a Git repository\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eIn the earlier days of the internet, if you wanted to publish a custom website,\nyour options were limited, and the process was often complicated. Hosting a site\nrequired registering a domain, paying a hosting service, then going through a\ntrial and error process of uploading your website's files to that service.\u003c/p\u003e\n\n\u003cp\u003eNow, things are a bit different. Hosting services are still around and you can\nstill register custom domains, but there are many ways to publish websites\nonline now, including a few ways that are totally free for basic websites.\u003c/p\u003e\n\n\u003cp\u003eIn this lesson, we're going to walk through one free option for hosting HTML and\nJavaScript based websites. As it happens, we'll be using a service we're already\nfamiliar with — GitHub!\u003c/p\u003e\n\n\u003ch2\u003eHosting on GitHub\u003c/h2\u003e\n\n\u003cp\u003eAny repository on GitHub can be published as a website — even if the repo\ndoesn't contain any HTML files. By default, GitHub will take a repository's\n\u003ccode\u003eREADME.md\u003c/code\u003e file and convert it to an HTML page. This lesson's repo, for\ninstance, \u003ca href=\"https://learn-co-curriculum.github.io/phase-0-hosting-on-github-pages/\"\u003eis also published as a GitHub Page\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn addition to this behavior, if we include an \u003ccode\u003eindex.html\u003c/code\u003e in the repository\nbeside the \u003ccode\u003eREADME.md\u003c/code\u003e file, GitHub will automatically display the HTML file\ninstead! This is how we'll be publishing our site.\u003c/p\u003e\n\n\u003cp\u003eThe full process for creating and publishing your own personal website is shown\nbelow. Note that we've already completed the first three steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a local repository folder ✔\u003c/li\u003e\n\u003cli\u003eCreate a remote GitHub repository ✔\u003c/li\u003e\n\u003cli\u003eAdd the new remote to the local repository ✔\u003c/li\u003e\n\u003cli\u003eCreate an \u003ccode\u003eindex.html\u003c/code\u003e file with some basic content\u003c/li\u003e\n\u003cli\u003eAdd, commit and push the new content to the remote\u003c/li\u003e\n\u003cli\u003eEnable GitHub Pages in the remote repository's settings\u003c/li\u003e\n\u003cli\u003eCheck out the published site\u003c/li\u003e\n\u003cli\u003eContinue building out the HTML and add CSS and JavaScript files\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBy the time you've finished this lesson, you'll be at that last step; from\nthere, you can focus on building the content, styling and behavior you'd like\nyour site to have.\u003c/p\u003e\n\n\u003ch2\u003eBuild an HTML file\u003c/h2\u003e\n\n\u003cp\u003eIn the terminal, create an \u003ccode\u003eindex.html\u003c/code\u003e file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003etouch \u003c/span\u003eindex.html\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOpen this file in VS Code so we can add some basic HTML content. In the file,\nwe'll start with the minimum — a \u003ccode\u003eDOCTYPE\u003c/code\u003e tag indicating HTML and an \u003ccode\u003ehtml\u003c/code\u003e tag\ncontaining \u003ccode\u003ehead\u003c/code\u003e and \u003ccode\u003ebody\u003c/code\u003e tags:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u003c/span\u003e \u003cspan class=\"na\"\u003elang=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"en\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNext, let's give this HTML a \u003ccode\u003etitle\u003c/code\u003e tag and place it inside \u003ccode\u003ehead\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eMy Personal Website\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, we'll add a bit of starter content in the \u003ccode\u003ebody\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eHello World!\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIncluding some example text to start is important — when we publish the\nsite, we'll be looking for this message to confirm everything worked. The\ncompleted file should look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u003c/span\u003e \u003cspan class=\"na\"\u003elang=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"en\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eMy Personal Website\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eHello World!\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSave the file. We now need to commit this file and push it to GitHub:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add index.html\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"create basic HTML file\"\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit push\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eCheck your work\u003c/strong\u003e: Head back to your project's GitHub page and refresh the\npage. You should see the html file with the content we created alongside the\nREADME.md file we created earlier.\u003c/p\u003e\n\n\u003ch2\u003ePublish HTML as a GitHub Page\u003c/h2\u003e\n\n\u003cp\u003eIn your GitHub repository, click the \u003cstrong\u003eSettings\u003c/strong\u003e tab:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/github-pages-settings-tab.png\" alt=\"settings tab\"\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the list on the left, near the bottom, click the \u003cstrong\u003ePages\u003c/strong\u003e tab. This will\ndisplay the following:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/github-pages-settings.png\" alt=\"settings\"\u003e\u003c/p\u003e\n\n\u003cp\u003eTo enable GitHub Pages, first we need to set the \u003cstrong\u003eSource\u003c/strong\u003e to the default\nbranch. Click the drop-down that says \"None\" and choose \u003ccode\u003emain\u003c/code\u003e, then click\n\u003cstrong\u003eSave\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/github-pages-select-branch.png\" alt=\"select branch\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThe page will refresh. Along the top, a banner should appear that states the\nGitHub Page source was saved:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/github-pages-source-saved.png\" alt=\"source saved\"\u003e\u003c/p\u003e\n\n\u003cp\u003eThere will also be a message that says your site is ready to be published and a\nlink to the page:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/site-is-ready-to-be-published.png\" alt=\"site is ready to be published\"\u003e\u003c/p\u003e\n\n\u003cp\u003eNotice the URL isn't \u003ccode\u003egithub.com/\u0026lt;your-username\u0026gt;\u003c/code\u003e, but instead,\n\u003ccode\u003e\u0026lt;your-username\u0026gt;.github.io\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eClicking on this link immediately may bring you to an error page. It can take up\nto ten minutes for the page to be published, so wait a little bit and refresh.\nYou can also refresh the GitHub Pages Settings page; the message should update\nto \"Your site is published...\" once it is ready.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCheck your work\u003c/strong\u003e: Once the page has been published, you should see your HTML\npage rendered:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://curriculum-content.s3.amazonaws.com/phase-0/hosting-on-github/site-published-on-github.png\" alt=\"site published on GitHub\"\u003e\u003c/p\u003e\n\n\u003cp\u003eWoo-hoo!\u003c/p\u003e\n\n\u003ch2\u003eTroubleshooting\u003c/h2\u003e\n\n\u003cp\u003eIn the event that it isn't a woo-hoo for you, here are a few troubleshooting\noptions to try:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDouble check the GitHub Page settings and make sure \u003ccode\u003emain\u003c/code\u003e is set as the\nsource.\u003c/li\u003e\n\u003cli\u003eIf settings are correct, review the \u003ccode\u003eindex.html\u003c/code\u003e file to make sure there are\nno typos or syntax errors.\u003c/li\u003e\n\u003cli\u003eCreate a new repository again, but hold off on creating an HTML file. Instead,\nonly create a \u003ccode\u003eREADME.md\u003c/code\u003e file with some example text and use GitHub Pages to\npublish the repo. Once the Readme file is displaying as a GitHub Page, start\ngoing through the HTML file creation process again.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eContinuing To Build\u003c/h2\u003e\n\n\u003cp\u003eWith an \u003ccode\u003eindex.html\u003c/code\u003e file created, we can now add additional files to the site\nto incorporate CSS and JavaScript. One of the great things about GitHub Pages is\nthat your published website will automatically update as you make changes to the\nrepository files and push them to your remote. The process for updating becomes:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate or modify a file\u003c/li\u003e\n\u003cli\u003eAdd, commit, and push it to your remote\u003c/li\u003e\n\u003cli\u003eWait a few minutes for GitHub to update your page\u003c/li\u003e\n\u003cli\u003eVisit your GitHub Page to see the newest changes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFrom here, you can choose to do whatever you like and customize your site as you\nplease. However, we recommend adding and connecting two files now: a CSS file to\nstyle your HTML, and a JavaScript file to run code and manipulate the DOM.\u003c/p\u003e\n\n\u003ch3\u003eAdd and Connect a CSS File\u003c/h3\u003e\n\n\u003cp\u003eIn the terminal, create a CSS file alongside your \u003ccode\u003eindex.html\u003c/code\u003e file\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003etouch \u003c/span\u003estyle.css\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBefore we connect this file to our HTML, let's add a basic style rule to the\nfile and save it so we'll know when the styling is working.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight css\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nl\"\u003ebackground\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"no\"\u003eblue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, to connect this CSS file to our \u003ccode\u003eindex.html\u003c/code\u003e, we need to modify the HTML\n\u003ccode\u003ehead\u003c/code\u003e to include a \u003ccode\u003elink\u003c/code\u003e tag:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"style.css\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eMy Personal Website\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003elink\u003c/code\u003e tag is used to connect files to the HTML page. Note the tag has two\nattributes. The first is \u003ccode\u003erel\u003c/code\u003e, which specifies how the connected file relates\nto the HTML. In this case, we're indicating that we're relating a \u003cem\u003estylesheet\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe second attribute is \u003ccode\u003ehref\u003c/code\u003e, which specifies the location of the file we're\nlinking. Since we've put \u003ccode\u003estyle.css\u003c/code\u003e right beside \u003ccode\u003eindex.html\u003c/code\u003e in our\nrepository, we can just provide the file name here.\u003c/p\u003e\n\n\u003cp\u003eSave the HTML file and open it locally. Your page should now be very blue.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and add some better styling, then add, commit, and push the changes\nyou've made. Remember, since you've added a \u003ccode\u003estyle.css\u003c/code\u003e file and modified the\n\u003ccode\u003eindex.html\u003c/code\u003e file, we'll need to add both files before committing:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add style.css\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add index.html\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"add style.css, connect to index.html\"\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit push\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr you can add both files in a single command: \u003ccode\u003egit add .\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCheck your work\u003c/strong\u003e: Wait a few minutes for your page to be updated, then visit\nthe GitHub page to verify that the new styles are showing up.\u003c/p\u003e\n\n\u003ch3\u003eAdd and Connect a JavaScript File\u003c/h3\u003e\n\n\u003cp\u003eIn the terminal, create a JS file alongside \u003ccode\u003eindex.html\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003etouch \u003c/span\u003escript.js\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet's add some basic code so we can see something once we've connected the JS\nfile to our HTML file.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003escript.js\u003c/code\u003e, let's create an \u003ccode\u003eh2\u003c/code\u003e element and add some text content to it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eh2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eh2\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003eThis content added by JavaScript\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, we'll include code to add this \u003ccode\u003eh2\u003c/code\u003e element to the \u003ccode\u003ebody\u003c/code\u003e element in the\nDOM.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"s2\"\u003ebody\u003c/span\u003e\u003cspan class=\"dl\"\u003e\"\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eappendChild\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSave this and switch over to \u003ccode\u003eindex.html\u003c/code\u003e. To connect \u003ccode\u003escript.js\u003c/code\u003e to our HTML,\nwe add a \u003ccode\u003escript\u003c/code\u003e tag inside \u003ccode\u003ebody\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;script \u003c/span\u003e\u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"script.js\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis tag includes a \u003ccode\u003esrc\u003c/code\u003e attribute. Like \u003ccode\u003ehref\u003c/code\u003e from the \u003ccode\u003elink\u003c/code\u003e tag, \u003ccode\u003esrc\u003c/code\u003e\nspecifies the location of the script we want to run. Since \u003ccode\u003escript.js\u003c/code\u003e is side\nby side with \u003ccode\u003eindex.html\u003c/code\u003e, we just write the file name.\u003c/p\u003e\n\n\u003cp\u003eAfter adding the \u003ccode\u003escript\u003c/code\u003e tag for JavaScript and the \u003ccode\u003elink\u003c/code\u003e tag for CSS, our\nHTML will look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;html\u003c/span\u003e \u003cspan class=\"na\"\u003elang=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"en\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;head\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;link\u003c/span\u003e \u003cspan class=\"na\"\u003erel=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"stylesheet\"\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"style.css\"\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eMy Personal Website\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/head\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;body\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;h1\u0026gt;\u003c/span\u003eHello World!\u003cspan class=\"nt\"\u003e\u0026lt;/h1\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;script \u003c/span\u003e\u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"script.js\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/body\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/html\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOpen the file locally. In addition to \"Hello World!\" being displayed, you should\nalso see \"This content added by JavaScript,\" confirming the code successfully\nran.\u003c/p\u003e\n\n\u003cp\u003eGo ahead and add other JavaScript if you'd like, then add, commit, and push the\nchanges you've made. Since you've added a \u003ccode\u003escript.js\u003c/code\u003e file and modified the\n\u003ccode\u003eindex.html\u003c/code\u003e file, we'll need to add both files before committing:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight console\"\u003e\u003ccode\u003e\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add script.js\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit add index.html\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit commit \u003cspan class=\"nt\"\u003e-m\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"add script.js, connect to index.html\"\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003egit push\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRemember when you push changes to GitHub, they will take a few moments to appear\nin GitHub Pages.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eCheck your work\u003c/strong\u003e: Once the page has updated, you should see your styling and\ncontent, including the \u003ccode\u003eh2\u003c/code\u003e element we added using JavaScript.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAs it turns out, the technology we were already using to store our code is also\nuseful for publishing websites. If you have any existing repositories that\ninclude HTML — or even if they don't! — you can now quickly turn your work there\ninto shareable websites.\u003c/p\u003e\n\n\u003cp\u003eIt makes sense if you consider GitHub is \u003cem\u003ealready\u003c/em\u003e storing your code. The work\nrequired to display the contents of an HTML file in your browser versus \u003cem\u003erender\u003c/em\u003e\nthat HTML file is similar.\u003c/p\u003e\n\n\u003cp\u003eAs you continue your programming journey, you'll eventually start building parts\nof websites that can't be published using GitHub. Sites that require a server to\nstore data, for instance, can't be published on GitHub Pages. GitHub is just\nrendering files it already has; it won't do more work than that. It turns out,\nthough, that is actually quite a lot.\u003c/p\u003e\n\n\u003cp\u003eMany websites are made up of two pieces, a frontend and a backend. The frontend\nis what the client experiences, what renders in the browser, while the backend\nhandles data storage and other work we don't want to burden the frontend with.\nGitHub Pages will work well as a host for most frontends, even those using\nmodern frameworks like React. You'll soon see that frontends alone can actually\nbe quite interesting and useful, even without a backend.\u003c/p\u003e\n\n\u003cp\u003eFor simpler websites — personal sites, projects, etc... — GitHub\npages is a great, free option for publishing content online.\u003c/p\u003e\n\n\u003ch2\u003eResources\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://pages.github.com/\"\u003eGitHub Pages\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e",
            "exportId": "software-engineering-prep-final-project-setup-part-ii-hosting-a-website-on-github-pages"
          },
          {
            "id": 432960,
            "title": "Project: Build a Personal Website",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-final-project\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-final-project/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003ch2\u003eLearning Goals\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eBuild a website using HTML, CSS and JavaScript\u003c/li\u003e\n\u003cli\u003ePublish a website\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eYou've been learning HTML, CSS, and JavaScript over the previous lessons. You've\nbeen receiving specific guidance (\"Use a \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e tag!\") and have been steered\nby our documentation or tests. In an effort to help you build your confidence,\nwe're going to give you \u003cem\u003enothing\u003c/em\u003e except some specifications and leave the\ndocument structure and styling \u003cem\u003eto you\u003c/em\u003e. It's time to tie all your learning\ntogether into one project. You must create...\u003c/p\u003e\n\n\u003cp\u003e...\u003cem\u003ea personal website\u003c/em\u003e!\u003c/p\u003e\n\n\u003cp\u003eProfessional software engineers and web developers often have a personal\nwebsite. In some ways, it is the industry's alternative to a business card. A\npersonal website can showcase your abilities while also giving visitors a sense\nof your personality.\u003c/p\u003e\n\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\n\u003cp\u003eThis project is an opportunity to showcase what you've learned so far, so it is\nimportant that HTML, CSS, and JavaScript are incorporated into the project in\nsome way. For example, you could use a \u003ccode\u003emouseover\u003c/code\u003e event to change the\nappearance of an element when the user mouses over it. Or use a \u003ccode\u003eclick\u003c/code\u003e event to\ntoggle some content between being visible and hidden. There are a variety of\nways to do this using the CSS and JavaScript you've learned so far, but don't\nforget you can always use Google if you get stuck. Google is an invaluable tool\nfor developers! Try to use this project as an opportunity to stretch your coding\nskills!\u003c/p\u003e\n\n\u003cp\u003eThe content, styling, and functionality of your site are up to you. Keep in mind\nthat you may show this project to your peers and future instructors, so be\nconsiderate of content/subject matter and your potential audience.\u003c/p\u003e\n\n\u003ch2\u003eGetting Started and a Recommended Workflow\u003c/h2\u003e\n\n\u003cp\u003eIn the previous two lessons, you:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreated local and remote repos for your project and connected them together\u003c/li\u003e\n\u003cli\u003eCreated the base files for your project: \u003ccode\u003eREADME.md\u003c/code\u003e, \u003ccode\u003eindex.html\u003c/code\u003e,\n\u003ccode\u003estyle.css\u003c/code\u003e, and \u003ccode\u003eindex.js\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ePublished your new site on GitHub Pages.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith all of this in place, you are ready to start working on the \u003cem\u003econtent\u003c/em\u003e,\n\u003cem\u003estyles\u003c/em\u003e, and \u003cem\u003ebehavior\u003c/em\u003e you want your site to have. Because your site is\npublished on GitHub Pages, you'll be able to continuously push updates to your\nsite \u003cem\u003eas you build it\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn general, when it comes to building code-related projects, it is often best to\nestablish a routine of making small improvements, checking to make sure those\nimprovements work and don't break things. This routine might look something like\nthe following:\u003c/p\u003e\n\n\u003cp\u003e1) Write some HTML, CSS or JavaScript\n2) Go to your browser and refresh the page to see the changes\n3) Adjust your code and repeat until you're satisfied\n4) Move on to the next task and repeat the process\u003c/p\u003e\n\n\u003cp\u003eIt is very common to get lost in coding and to keep going from one task to the\nnext without checking your work. The problem here is that if you make a mistake\nit becomes more and more difficult to spot and debug the error.\u003c/p\u003e\n\n\u003cp\u003eBy frequently checking your work, you'll set your own project milestones — at\neach one, you can verify everything is working so when you \u003cem\u003edo\u003c/em\u003e make a mistake,\nyou'll know it was made recently.\u003c/p\u003e\n\n\u003ch2\u003eProfessional Git Development Workflow\u003c/h2\u003e\n\n\u003cp\u003eWhen it comes to Git, there is ultimately no rule that says you \u003cem\u003emust\u003c/em\u003e do things\na certain way. However, if there was anything we could impart to you regarding\ngood version control habits, it would be this — commit code frequently.\u003c/p\u003e\n\n\u003cp\u003eAs mentioned, it is a common habit to dive into the code of a project and write\nas much as you can, for as long as you can. However, not only does this increase\nthe chance for bugs, it will result in very large Git commits or just \u003cem\u003eone\u003c/em\u003e big\ncommit for everything.\u003c/p\u003e\n\n\u003cp\u003eRepositories with a good commit history can relay a story about their\ndevelopment from just the commit messages alone. For example, instead of the\ncommit history looking like this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCommit 1: \"Initialize Repository\"\u003c/li\u003e\n\u003cli\u003eCommit 2: \"Finish website\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA good history might look closer to this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCommit 1: \"Initialize Repository\"\u003c/li\u003e\n\u003cli\u003eCommit 2: \"Add basic HTML, CSS and JavaScript files\"\u003c/li\u003e\n\u003cli\u003eCommit 3: \"Create initial HTML content\"\u003c/li\u003e\n\u003cli\u003eCommit 4: \"Add CSS rules\"\u003c/li\u003e\n\u003cli\u003eCommit 5: \"Fix syntax issue in HTML\"\u003c/li\u003e\n\u003cli\u003eCommit 6: \"Finish bio/about section\"\u003c/li\u003e\n\u003cli\u003eCommit 7: \"Add JS event listeners\"\u003c/li\u003e\n\u003cli\u003eetc...\u003c/li\u003e\n\u003cli\u003eCommit 22: \"Adjust styling for new HTML layout\"\u003c/li\u003e\n\u003cli\u003eCommit 23: \"Finish website\"\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe commit messages here suggest that each commit above addressed a small, often\n\u003cem\u003esingular\u003c/em\u003e task.\u003c/p\u003e\n\n\u003cp\u003eGood commit practices are critical for large companies and organizations where\nmany developers are working on large code-bases — in these cases, limiting\nthe size of commits makes it easier for others to understand what changes the\ncommit brings. If a commit introduces a bug into the code base, it is fairly\neasy to revert a \u003cem\u003esmall\u003c/em\u003e commit. A big commit, on the other hand, may require\nlots of extra work to untangle and fix.\u003c/p\u003e\n\n\u003cp\u003eFor personal development, though, the same concerns apply. In addition, when you\nstart building more complex projects, you may find yourself in situations where\nyou'd like to go back to an earlier version of a project. Taking the time now to\nbuild good habits will help you many times over in the future. Think of good\nversion control habits as a favor to your future self!\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eOnce you've finished building your website, make sure to push it all up to\nGitHub. If you followed our advice and set up GitHub Pages first, you've now\nsuccessfully built \u003cem\u003eand\u003c/em\u003e published a website! Fantastic work!\u003c/p\u003e",
            "exportId": "project-build-a-personal-website"
          },
          {
            "id": 432962,
            "title": "Survey - Project Mode",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "gd41d8cd98f00b204e9800998ecf8427e",
            "questionCount": 1,
            "timeLimit": null,
            "attempts": 1,
            "graded": false,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": null,
            "completed": false,
            "content": "\u003cdiv class=\"description user_content teacher-version enhanced\"\u003e\n\u003cp\u003eHow many hours did you spend working on the Project Mode module?\u003c/p\u003e\n\u003c/div\u003e",
            "exportId": "g1e74b3c79156d947efc154e27079d82c"
          }
        ]
      },
      {
        "id": 44879,
        "name": "End of Phase Assessment",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "gb98ba4be25cdb16ed47d99831cc853cb",
        "items": [
          {
            "id": 432963,
            "title": "Software Engineering Prep Post Test",
            "type": "Quizzes::Quiz",
            "indent": 0,
            "locked": false,
            "assignmentExportId": "ga4bcdff886e45200c5e393a8ff1b6bc6",
            "questionCount": 36,
            "timeLimit": null,
            "attempts": 3,
            "graded": true,
            "pointsPossible": 36.0,
            "dueAt": null,
            "lockAt": null,
            "unlockAt": null,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv class=\"gmail_default\"\u003e\u003cspan\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cdiv\u003e\n\u003cdiv class=\"gmail_signature\" dir=\"ltr\" data-smartmail=\"gmail_signature\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cdiv dir=\"ltr\"\u003e\n\u003cp\u003eCongratulations on making it through Software Engineering Prep! You should be proud of the effort you put in to get to this point. Your final step is passing our post test - a 36 question multiple choice quiz designed to assess what you've learned from the Software Engineering Prep curriculum.\u003c/p\u003e\nThe post test is only required for enrolled students. You'll have 3 attempts to pass the assessment with a score of 70% or higher (25 points or more) by the enrollment deadline.\u003cbr\u003e\u003cbr\u003e\u003cstrong\u003eTiming\u003c/strong\u003e\u003cbr\u003eThis is not a timed test, but it is intended to be taken in one sitting. We don't guarantee that Canvas will keep track of your progress if, for example, you leave the quiz open overnight. If you find that you don't pass the first time - do not be discouraged! - you'll be able to see your score and review the topics you missed before attempting again.\u003cbr\u003e\u003cbr\u003e\u003cstrong\u003eAcademic Honesty\u003c/strong\u003e\u003cbr\u003eThis multiple-choice assessment is open book but should be completed individually, without assistance. The goal is ensuring that we have an accurate assessment of your ability to use the concepts and techniques covered in the pre-work.\n\u003cp\u003e\u003cbr\u003eGood luck! Take your time + reach out with any questions.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e",
            "exportId": "g988487b305183121848418654dc15ff9"
          }
        ]
      },
      {
        "id": 44880,
        "name": "Moving Forward: Additional Practice",
        "status": "completed",
        "unlockDate": null,
        "prereqs": [],
        "requirement": "all",
        "sequential": false,
        "exportId": "g079cef490955c01ae5409338789d3b05",
        "items": [
          {
            "id": 432964,
            "title": "Additional Practice",
            "type": "WikiPage",
            "indent": 0,
            "locked": false,
            "requirement": "must_view",
            "completed": true,
            "content": "\u003cdiv id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-0-additional-practice\"\u003e\u003c/div\u003e\u003cheader class=\"fis-header\" style=\"visibility: hidden;\"\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-additional-practice\" target=\"_blank\"\u003e\u003cimg id=\"repo-img\" title=\"Open GitHub Repo\" alt=\"GitHub Repo\"\u003e\u003c/a\u003e\u003ca class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-0-additional-practice/issues/new\" target=\"_blank\"\u003e\u003cimg id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"\u003e\u003c/a\u003e\u003c/header\u003e\n\n\u003cp\u003eTake a moment to celebrate the fact that you've made it through Software\nEngineering Prep — congratulations! You should now be in great shape to start\nthe program!\u003c/p\u003e\n\n\u003cp\u003eShown below are some suggestions for additional practice if you have extra time\n— or at any time while you're completing the program. They are based on feedback\nfrom past students about the topics and skills they felt they could have used\nmore practice with beyond what is covered in the curriculum.\u003c/p\u003e\n\n\u003cp\u003eAny time you can devote to the resources and suggestions below will pay off not\nonly as you continue through the curriculum, but also as you prepare to\ninterview for jobs and, ultimately, begin your career as a developer.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: We've provided a lot of information here, but you shouldn't stress\ntoo much about it! Don't feel you need to get through everything — some of the\nresources will work well for you and some won't. Anything you're able to\naccomplish — even if it's a small amount — will help!\u003c/p\u003e\n\n\u003ch2\u003eCode Code Code!\u003c/h2\u003e\n\n\u003cp\u003eThe best way to learn to code is by doing it — a lot! Repetition and practice\nwill help your brain process the concepts you're learning, and will build muscle\nmemory for things you will do again and again as a coder. Repetition and\npractice actually create \u003ca href=\"https://medium.com/peak-wellbeing/the-reason-for-repetition-how-repetition-helps-us-learn-10d7eea43e95\"\u003ephysical changes in the brain\u003c/a\u003e that\nwill make you a faster and more efficient coder.\u003c/p\u003e\n\n\u003cp\u003eSome specific suggestions:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eGo back and review some of the JavaScript lessons and labs in Software\nEngineering Prep. Topics of particular importance include: functions,\narguments and parameters, control flow (conditional statements),\nloops/iteration, and data structures.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAs you're practicing a concept (or learning it for the first time!), come up\nwith your own examples and code them out. Although reading through the\nprovided examples and following along are important, using a technique in a\ndifferent way will help you understand it better and internalize the\nconcepts.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGet started with code challenges. This will both give you practice coding\n\u003cem\u003eand\u003c/em\u003e begin to prepare you for job interviews. There are \u003ca href=\"https://programmingoverloaded.com/best-coding-challenge-websites-for-beginners/\"\u003elots of online\nresources\u003c/a\u003e, and most have a free membership level.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Note that, while practice is very important, \u003cem\u003etaking breaks is just\nas important\u003c/em\u003e! Research on learning shows that your brain needs downtime to\neffectively process and absorb what you've learned.\u003c/p\u003e\n\n\u003ch2\u003eGet Comfortable with the Command Line Interface (CLI)\u003c/h2\u003e\n\n\u003cp\u003eThe CLI will be one of the most valuable tools you use as a developer, but it\ntakes time and practice to get comfortable with it. Here are some good resources\nto help you up your skills:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.freecodecamp.org/news/learn-the-50-most-used-linux-terminal-commands/\"\u003eThe 50 Most Popular Linux \u0026amp; Terminal Commands - Full Course for\nBeginners\u003c/a\u003e. This free 5-hour course, offered by \u003ca href=\"https://www.freecodecamp.org/\"\u003eFree\nCode Camp\u003c/a\u003e, provides an excellent beginner-friendly\nintroduction to the commands you will use most often as a developer.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://flaviocopes.com/page/linux-commands-handbook/\"\u003eLinux Commands Handbook\u003c/a\u003e is the handbook that the\ncourse above is based on. You can download a PDF if you sign up for the\nauthor's newsletter.\u003c/li\u003e\n\u003cli\u003eCheatsheets:\n\n\u003cul\u003e\n\u003cli\u003eBeginner friendly:\n\u003ca href=\"https://linuxconfig.org/linux-commands-cheat-sheet\"\u003ehttps://linuxconfig.org/linux-commands-cheat-sheet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMore comprehensive:\n\u003ca href=\"https://learncodethehardway.org/unix/bash_cheat_sheet.pdf\"\u003ehttps://learncodethehardway.org/unix/bash_cheat_sheet.pdf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDownloadable:\n\u003ca href=\"https://garywoodfine.com/linux-terminal-command-cheat-sheets/\"\u003ehttps://garywoodfine.com/linux-terminal-command-cheat-sheets\u003c/a\u003e\n(includes an Ubuntu-specific version)\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/veltman/clmystery\"\u003eCommand Line Mystery\u003c/a\u003e is a fun way to practice CLI\ncommands — and solve a mystery while you're at it!\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Remember, the idea here is \u003cstrong\u003enot\u003c/strong\u003e to memorize scores of CLI\ncommands! Instead, the goals are to:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eBuild your comfort level with using the command line,\u003c/li\u003e\n\u003cli\u003eDevelop a feel for the range of tasks you can perform, and\u003c/li\u003e\n\u003cli\u003eLearn how to use the resources available to you to find the command you need\nand how to use it.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2\u003eBuild your Skills with Git and GitHub\u003c/h2\u003e\n\n\u003cp\u003eGit and GitHub are two other invaluable tools for developers. As with using the\nCLI, you will build your Git and GitHub skills and comfort level over time, but\nif you can start the process early, it will pay off in the long run.\u003c/p\u003e\n\n\u003cp\u003eThe following resources will help solidify your understanding of what Git and\nGitHub are and the needs they meet, and give you more practice with the basic\nGit/GitHub workflow you've already learned. They will also introduce you to some\nof the more advanced Git workflows that you will use all the time — perhaps\ndaily! — when you're working as a developer.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gitimmersion.com/\"\u003eGit Immersion\u003c/a\u003e: hands-on exercises that will give you practice\nwith the basic Git commands and workflow\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://tom.preston-werner.com/2009/05/19/the-git-parable.html\"\u003eGit Parable\u003c/a\u003e provides a story-based explanation of the reasoning\nbehind Git features\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/swlh/a-beginners-guide-to-github-e4747a93765c\"\u003eBeginner's Guide to GitHub\u003c/a\u003e provides a beginner-friendly\noverview of how to use GitHub\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.ndpsoftware.com/git-cheatsheet.html\"\u003eInteractive Git Cheatsheet\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eTop Tip\u003c/strong\u003e: Again, you shouldn't worry about memorizing commands here, or\nstress if you don't fully understand all of Git's capabilities. The important\nthing is to develop a high-level understanding of Git and GitHub, and to\npractice the basic workflow. You'll get more comfortable the more you use it,\nand you'll learn its more advanced capabilities over time.\u003c/p\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eThere is no wrong way to approach the material in this lesson. Work through some\nof it now if you can, but you can also come back to it whenever you have some\nextra time, or if you just need a break from lessons and labs. Getting some\nadditional practice using these resources (or others you find on your own) will\ngive you a boost towards your goal of becoming a developer.\u003c/p\u003e",
            "exportId": "additional-practice"
          }
        ]
      }
    ]
  }
];

export default data;
